/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgStatProgressCopy
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressCopyRecord() : TableRecordImpl<PgStatProgressCopyRecord>(PgStatProgressCopy.PG_STAT_PROGRESS_COPY) {

    open var pid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var datid: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var datname: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var relid: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var command: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var type: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var bytesProcessed: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open var bytesTotal: Long?
        set(value): Unit = set(7, value)
        get(): Long? = get(7) as Long?

    open var tuplesProcessed: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    open var tuplesExcluded: Long?
        set(value): Unit = set(9, value)
        get(): Long? = get(9) as Long?

    /**
     * Create a detached, initialised PgStatProgressCopyRecord
     */
    constructor(pid: Int? = null, datid: Long? = null, datname: String? = null, relid: Long? = null, command: String? = null, type: String? = null, bytesProcessed: Long? = null, bytesTotal: Long? = null, tuplesProcessed: Long? = null, tuplesExcluded: Long? = null): this() {
        this.pid = pid
        this.datid = datid
        this.datname = datname
        this.relid = relid
        this.command = command
        this.type = type
        this.bytesProcessed = bytesProcessed
        this.bytesTotal = bytesTotal
        this.tuplesProcessed = tuplesProcessed
        this.tuplesExcluded = tuplesExcluded
        resetChangedOnNotNull()
    }
}
