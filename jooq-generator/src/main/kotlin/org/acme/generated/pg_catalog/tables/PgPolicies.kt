/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgPoliciesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgPolicies(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgPoliciesRecord>?,
    parentPath: InverseForeignKey<out Record, PgPoliciesRecord>?,
    aliased: Table<PgPoliciesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgPoliciesRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_policies" as  SELECT n.nspname AS schemaname,
     c.relname AS tablename,
     pol.polname AS policyname,
         CASE
             WHEN pol.polpermissive THEN 'PERMISSIVE'::text
             ELSE 'RESTRICTIVE'::text
         END AS permissive,
         CASE
             WHEN (pol.polroles = '{0}'::oid[]) THEN (string_to_array('public'::text, ''::text))::name[]
             ELSE ARRAY( SELECT pg_authid.rolname
                FROM pg_authid
               WHERE (pg_authid.oid = ANY (pol.polroles))
               ORDER BY pg_authid.rolname)
         END AS roles,
         CASE pol.polcmd
             WHEN 'r'::"char" THEN 'SELECT'::text
             WHEN 'a'::"char" THEN 'INSERT'::text
             WHEN 'w'::"char" THEN 'UPDATE'::text
             WHEN 'd'::"char" THEN 'DELETE'::text
             WHEN '*'::"char" THEN 'ALL'::text
             ELSE NULL::text
         END AS cmd,
     pg_get_expr(pol.polqual, pol.polrelid) AS qual,
     pg_get_expr(pol.polwithcheck, pol.polrelid) AS with_check
    FROM ((pg_policy pol
      JOIN pg_class c ON ((c.oid = pol.polrelid)))
      LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_policies</code>
         */
        val PG_POLICIES: PgPolicies = PgPolicies()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgPoliciesRecord> = PgPoliciesRecord::class.java

    /**
     * The column <code>pg_catalog.pg_policies.schemaname</code>.
     */
    val SCHEMANAME: TableField<PgPoliciesRecord, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.tablename</code>.
     */
    val TABLENAME: TableField<PgPoliciesRecord, String?> = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.policyname</code>.
     */
    val POLICYNAME: TableField<PgPoliciesRecord, String?> = createField(DSL.name("policyname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.permissive</code>.
     */
    val PERMISSIVE: TableField<PgPoliciesRecord, String?> = createField(DSL.name("permissive"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.roles</code>.
     */
    val ROLES: TableField<PgPoliciesRecord, Array<String?>?> = createField(DSL.name("roles"), SQLDataType.VARCHAR.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_policies.cmd</code>.
     */
    val CMD: TableField<PgPoliciesRecord, String?> = createField(DSL.name("cmd"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.qual</code>.
     */
    val QUAL: TableField<PgPoliciesRecord, String?> = createField(DSL.name("qual"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.with_check</code>.
     */
    val WITH_CHECK: TableField<PgPoliciesRecord, String?> = createField(DSL.name("with_check"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PgPoliciesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgPoliciesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgPoliciesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(): this(DSL.name("pg_policies"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgPolicies = PgPolicies(DSL.name(alias), this)
    override fun `as`(alias: Name): PgPolicies = PgPolicies(alias, this)
    override fun `as`(alias: Table<*>): PgPolicies = PgPolicies(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgPolicies = PgPolicies(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgPolicies = PgPolicies(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgPolicies = PgPolicies(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgPolicies = PgPolicies(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgPolicies = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgPolicies = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgPolicies = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgPolicies = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgPolicies = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgPolicies = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgPolicies = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgPolicies = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgPolicies = where(DSL.notExists(select))
}
