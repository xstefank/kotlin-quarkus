/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.PgCatalog
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgControlCheckpoint : AbstractRoutine<java.lang.Void>("pg_control_checkpoint", PgCatalog.PG_CATALOG) {
    companion object {
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val CHECKPOINT_LSN: Parameter<Any?> = Internal.createParameter("checkpoint_lsn", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), false, false)
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val REDO_LSN: Parameter<Any?> = Internal.createParameter("redo_lsn", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.redo_wal_file</code>.
         */
        val REDO_WAL_FILE: Parameter<String?> = Internal.createParameter("redo_wal_file", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.timeline_id</code>.
         */
        val TIMELINE_ID: Parameter<Int?> = Internal.createParameter("timeline_id", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.prev_timeline_id</code>.
         */
        val PREV_TIMELINE_ID: Parameter<Int?> = Internal.createParameter("prev_timeline_id", SQLDataType.INTEGER, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.full_page_writes</code>.
         */
        val FULL_PAGE_WRITES: Parameter<Boolean?> = Internal.createParameter("full_page_writes", SQLDataType.BOOLEAN, false, false)

        /**
         * The parameter <code>pg_catalog.pg_control_checkpoint.next_xid</code>.
         */
        val NEXT_XID: Parameter<String?> = Internal.createParameter("next_xid", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>pg_catalog.pg_control_checkpoint.next_oid</code>.
         */
        val NEXT_OID: Parameter<Long?> = Internal.createParameter("next_oid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.next_multixact_id</code>.
         */
        val NEXT_MULTIXACT_ID: Parameter<Long?> = Internal.createParameter("next_multixact_id", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.next_multi_offset</code>.
         */
        val NEXT_MULTI_OFFSET: Parameter<Long?> = Internal.createParameter("next_multi_offset", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_xid</code>.
         */
        val OLDEST_XID: Parameter<Long?> = Internal.createParameter("oldest_xid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_xid_dbid</code>.
         */
        val OLDEST_XID_DBID: Parameter<Long?> = Internal.createParameter("oldest_xid_dbid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_active_xid</code>.
         */
        val OLDEST_ACTIVE_XID: Parameter<Long?> = Internal.createParameter("oldest_active_xid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_multi_xid</code>.
         */
        val OLDEST_MULTI_XID: Parameter<Long?> = Internal.createParameter("oldest_multi_xid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_multi_dbid</code>.
         */
        val OLDEST_MULTI_DBID: Parameter<Long?> = Internal.createParameter("oldest_multi_dbid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.oldest_commit_ts_xid</code>.
         */
        val OLDEST_COMMIT_TS_XID: Parameter<Long?> = Internal.createParameter("oldest_commit_ts_xid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.newest_commit_ts_xid</code>.
         */
        val NEWEST_COMMIT_TS_XID: Parameter<Long?> = Internal.createParameter("newest_commit_ts_xid", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_control_checkpoint.checkpoint_time</code>.
         */
        val CHECKPOINT_TIME: Parameter<OffsetDateTime?> = Internal.createParameter("checkpoint_time", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)
    }

    init {
        addOutParameter(PgControlCheckpoint.CHECKPOINT_LSN)
        addOutParameter(PgControlCheckpoint.REDO_LSN)
        addOutParameter(PgControlCheckpoint.REDO_WAL_FILE)
        addOutParameter(PgControlCheckpoint.TIMELINE_ID)
        addOutParameter(PgControlCheckpoint.PREV_TIMELINE_ID)
        addOutParameter(PgControlCheckpoint.FULL_PAGE_WRITES)
        addOutParameter(PgControlCheckpoint.NEXT_XID)
        addOutParameter(PgControlCheckpoint.NEXT_OID)
        addOutParameter(PgControlCheckpoint.NEXT_MULTIXACT_ID)
        addOutParameter(PgControlCheckpoint.NEXT_MULTI_OFFSET)
        addOutParameter(PgControlCheckpoint.OLDEST_XID)
        addOutParameter(PgControlCheckpoint.OLDEST_XID_DBID)
        addOutParameter(PgControlCheckpoint.OLDEST_ACTIVE_XID)
        addOutParameter(PgControlCheckpoint.OLDEST_MULTI_XID)
        addOutParameter(PgControlCheckpoint.OLDEST_MULTI_DBID)
        addOutParameter(PgControlCheckpoint.OLDEST_COMMIT_TS_XID)
        addOutParameter(PgControlCheckpoint.NEWEST_COMMIT_TS_XID)
        addOutParameter(PgControlCheckpoint.CHECKPOINT_TIME)
    }
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun getCheckpointLsn(): Any? = get(PgControlCheckpoint.CHECKPOINT_LSN)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun getRedoLsn(): Any? = get(PgControlCheckpoint.REDO_LSN)

    /**
     * Get the <code>redo_wal_file</code> parameter OUT value from the routine
     */
    fun getRedoWalFile(): String? = get(PgControlCheckpoint.REDO_WAL_FILE)

    /**
     * Get the <code>timeline_id</code> parameter OUT value from the routine
     */
    fun getTimelineId(): Int? = get(PgControlCheckpoint.TIMELINE_ID)

    /**
     * Get the <code>prev_timeline_id</code> parameter OUT value from the
     * routine
     */
    fun getPrevTimelineId(): Int? = get(PgControlCheckpoint.PREV_TIMELINE_ID)

    /**
     * Get the <code>full_page_writes</code> parameter OUT value from the
     * routine
     */
    fun getFullPageWrites(): Boolean? = get(PgControlCheckpoint.FULL_PAGE_WRITES)

    /**
     * Get the <code>next_xid</code> parameter OUT value from the routine
     */
    fun getNextXid(): String? = get(PgControlCheckpoint.NEXT_XID)

    /**
     * Get the <code>next_oid</code> parameter OUT value from the routine
     */
    fun getNextOid(): Long? = get(PgControlCheckpoint.NEXT_OID)

    /**
     * Get the <code>next_multixact_id</code> parameter OUT value from the
     * routine
     */
    fun getNextMultixactId(): Long? = get(PgControlCheckpoint.NEXT_MULTIXACT_ID)

    /**
     * Get the <code>next_multi_offset</code> parameter OUT value from the
     * routine
     */
    fun getNextMultiOffset(): Long? = get(PgControlCheckpoint.NEXT_MULTI_OFFSET)

    /**
     * Get the <code>oldest_xid</code> parameter OUT value from the routine
     */
    fun getOldestXid(): Long? = get(PgControlCheckpoint.OLDEST_XID)

    /**
     * Get the <code>oldest_xid_dbid</code> parameter OUT value from the routine
     */
    fun getOldestXidDbid(): Long? = get(PgControlCheckpoint.OLDEST_XID_DBID)

    /**
     * Get the <code>oldest_active_xid</code> parameter OUT value from the
     * routine
     */
    fun getOldestActiveXid(): Long? = get(PgControlCheckpoint.OLDEST_ACTIVE_XID)

    /**
     * Get the <code>oldest_multi_xid</code> parameter OUT value from the
     * routine
     */
    fun getOldestMultiXid(): Long? = get(PgControlCheckpoint.OLDEST_MULTI_XID)

    /**
     * Get the <code>oldest_multi_dbid</code> parameter OUT value from the
     * routine
     */
    fun getOldestMultiDbid(): Long? = get(PgControlCheckpoint.OLDEST_MULTI_DBID)

    /**
     * Get the <code>oldest_commit_ts_xid</code> parameter OUT value from the
     * routine
     */
    fun getOldestCommitTsXid(): Long? = get(PgControlCheckpoint.OLDEST_COMMIT_TS_XID)

    /**
     * Get the <code>newest_commit_ts_xid</code> parameter OUT value from the
     * routine
     */
    fun getNewestCommitTsXid(): Long? = get(PgControlCheckpoint.NEWEST_COMMIT_TS_XID)

    /**
     * Get the <code>checkpoint_time</code> parameter OUT value from the routine
     */
    fun getCheckpointTime(): OffsetDateTime? = get(PgControlCheckpoint.CHECKPOINT_TIME)
}
