/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatProgressVacuumRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressVacuum(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatProgressVacuumRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatProgressVacuumRecord>?,
    aliased: Table<PgStatProgressVacuumRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatProgressVacuumRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_progress_vacuum" as  SELECT s.pid,
     s.datid,
     d.datname,
     s.relid,
         CASE s.param1
             WHEN 0 THEN 'initializing'::text
             WHEN 1 THEN 'scanning heap'::text
             WHEN 2 THEN 'vacuuming indexes'::text
             WHEN 3 THEN 'vacuuming heap'::text
             WHEN 4 THEN 'cleaning up indexes'::text
             WHEN 5 THEN 'truncating heap'::text
             WHEN 6 THEN 'performing final cleanup'::text
             ELSE NULL::text
         END AS phase,
     s.param2 AS heap_blks_total,
     s.param3 AS heap_blks_scanned,
     s.param4 AS heap_blks_vacuumed,
     s.param5 AS index_vacuum_count,
     s.param6 AS max_dead_tuples,
     s.param7 AS num_dead_tuples
    FROM (pg_stat_get_progress_info('VACUUM'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)
      LEFT JOIN pg_database d ON ((s.datid = d.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_vacuum</code>
         */
        val PG_STAT_PROGRESS_VACUUM: PgStatProgressVacuum = PgStatProgressVacuum()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatProgressVacuumRecord> = PgStatProgressVacuumRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.pid</code>.
     */
    val PID: TableField<PgStatProgressVacuumRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.datid</code>.
     */
    val DATID: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.datname</code>.
     */
    val DATNAME: TableField<PgStatProgressVacuumRecord, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.relid</code>.
     */
    val RELID: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_vacuum.phase</code>.
     */
    val PHASE: TableField<PgStatProgressVacuumRecord, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_total</code>.
     */
    val HEAP_BLKS_TOTAL: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("heap_blks_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_scanned</code>.
     */
    val HEAP_BLKS_SCANNED: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("heap_blks_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.heap_blks_vacuumed</code>.
     */
    val HEAP_BLKS_VACUUMED: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("heap_blks_vacuumed"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.index_vacuum_count</code>.
     */
    val INDEX_VACUUM_COUNT: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("index_vacuum_count"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.max_dead_tuples</code>.
     */
    val MAX_DEAD_TUPLES: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("max_dead_tuples"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_vacuum.num_dead_tuples</code>.
     */
    val NUM_DEAD_TUPLES: TableField<PgStatProgressVacuumRecord, Long?> = createField(DSL.name("num_dead_tuples"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatProgressVacuumRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressVacuumRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressVacuumRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_vacuum</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_vacuum</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_vacuum</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_progress_vacuum"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressVacuum = PgStatProgressVacuum(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressVacuum = PgStatProgressVacuum(alias, this)
    override fun `as`(alias: Table<*>): PgStatProgressVacuum = PgStatProgressVacuum(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressVacuum = PgStatProgressVacuum(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressVacuum = PgStatProgressVacuum(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatProgressVacuum = PgStatProgressVacuum(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatProgressVacuum = PgStatProgressVacuum(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatProgressVacuum = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatProgressVacuum = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatProgressVacuum = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatProgressVacuum = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatProgressVacuum = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatProgressVacuum = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatProgressVacuum = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatProgressVacuum = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatProgressVacuum = where(DSL.notExists(select))
}
