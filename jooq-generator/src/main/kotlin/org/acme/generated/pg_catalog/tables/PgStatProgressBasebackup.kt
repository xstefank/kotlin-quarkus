/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatProgressBasebackupRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressBasebackup(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatProgressBasebackupRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatProgressBasebackupRecord>?,
    aliased: Table<PgStatProgressBasebackupRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatProgressBasebackupRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_progress_basebackup" as  SELECT s.pid,
         CASE s.param1
             WHEN 0 THEN 'initializing'::text
             WHEN 1 THEN 'waiting for checkpoint to finish'::text
             WHEN 2 THEN 'estimating backup size'::text
             WHEN 3 THEN 'streaming database files'::text
             WHEN 4 THEN 'waiting for wal archiving to finish'::text
             WHEN 5 THEN 'transferring wal files'::text
             ELSE NULL::text
         END AS phase,
         CASE s.param2
             WHEN '-1'::integer THEN NULL::bigint
             ELSE s.param2
         END AS backup_total,
     s.param3 AS backup_streamed,
     s.param4 AS tablespaces_total,
     s.param5 AS tablespaces_streamed
    FROM pg_stat_get_progress_info('BASEBACKUP'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_basebackup</code>
         */
        val PG_STAT_PROGRESS_BASEBACKUP: PgStatProgressBasebackup = PgStatProgressBasebackup()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatProgressBasebackupRecord> = PgStatProgressBasebackupRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_basebackup.pid</code>.
     */
    val PID: TableField<PgStatProgressBasebackupRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_basebackup.phase</code>.
     */
    val PHASE: TableField<PgStatProgressBasebackupRecord, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.backup_total</code>.
     */
    val BACKUP_TOTAL: TableField<PgStatProgressBasebackupRecord, Long?> = createField(DSL.name("backup_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.backup_streamed</code>.
     */
    val BACKUP_STREAMED: TableField<PgStatProgressBasebackupRecord, Long?> = createField(DSL.name("backup_streamed"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.tablespaces_total</code>.
     */
    val TABLESPACES_TOTAL: TableField<PgStatProgressBasebackupRecord, Long?> = createField(DSL.name("tablespaces_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.tablespaces_streamed</code>.
     */
    val TABLESPACES_STREAMED: TableField<PgStatProgressBasebackupRecord, Long?> = createField(DSL.name("tablespaces_streamed"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatProgressBasebackupRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressBasebackupRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressBasebackupRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_basebackup</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_basebackup</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_basebackup</code> table
     * reference
     */
    constructor(): this(DSL.name("pg_stat_progress_basebackup"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressBasebackup = PgStatProgressBasebackup(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressBasebackup = PgStatProgressBasebackup(alias, this)
    override fun `as`(alias: Table<*>): PgStatProgressBasebackup = PgStatProgressBasebackup(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressBasebackup = PgStatProgressBasebackup(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressBasebackup = PgStatProgressBasebackup(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatProgressBasebackup = PgStatProgressBasebackup(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatProgressBasebackup = PgStatProgressBasebackup(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatProgressBasebackup = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatProgressBasebackup = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatProgressBasebackup = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatProgressBasebackup = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatProgressBasebackup = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatProgressBasebackup = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatProgressBasebackup = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatProgressBasebackup = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatProgressBasebackup = where(DSL.notExists(select))
}
