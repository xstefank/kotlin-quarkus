/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatProgressClusterRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressCluster(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatProgressClusterRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatProgressClusterRecord>?,
    aliased: Table<PgStatProgressClusterRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatProgressClusterRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_progress_cluster" as  SELECT s.pid,
     s.datid,
     d.datname,
     s.relid,
         CASE s.param1
             WHEN 1 THEN 'CLUSTER'::text
             WHEN 2 THEN 'VACUUM FULL'::text
             ELSE NULL::text
         END AS command,
         CASE s.param2
             WHEN 0 THEN 'initializing'::text
             WHEN 1 THEN 'seq scanning heap'::text
             WHEN 2 THEN 'index scanning heap'::text
             WHEN 3 THEN 'sorting tuples'::text
             WHEN 4 THEN 'writing new heap'::text
             WHEN 5 THEN 'swapping relation files'::text
             WHEN 6 THEN 'rebuilding index'::text
             WHEN 7 THEN 'performing final cleanup'::text
             ELSE NULL::text
         END AS phase,
     (s.param3)::oid AS cluster_index_relid,
     s.param4 AS heap_tuples_scanned,
     s.param5 AS heap_tuples_written,
     s.param6 AS heap_blks_total,
     s.param7 AS heap_blks_scanned,
     s.param8 AS index_rebuild_count
    FROM (pg_stat_get_progress_info('CLUSTER'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)
      LEFT JOIN pg_database d ON ((s.datid = d.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_cluster</code>
         */
        val PG_STAT_PROGRESS_CLUSTER: PgStatProgressCluster = PgStatProgressCluster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatProgressClusterRecord> = PgStatProgressClusterRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.pid</code>.
     */
    val PID: TableField<PgStatProgressClusterRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.datid</code>.
     */
    val DATID: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.datname</code>.
     */
    val DATNAME: TableField<PgStatProgressClusterRecord, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.relid</code>.
     */
    val RELID: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.command</code>.
     */
    val COMMAND: TableField<PgStatProgressClusterRecord, String?> = createField(DSL.name("command"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_cluster.phase</code>.
     */
    val PHASE: TableField<PgStatProgressClusterRecord, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.cluster_index_relid</code>.
     */
    val CLUSTER_INDEX_RELID: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("cluster_index_relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_tuples_scanned</code>.
     */
    val HEAP_TUPLES_SCANNED: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("heap_tuples_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_tuples_written</code>.
     */
    val HEAP_TUPLES_WRITTEN: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("heap_tuples_written"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_blks_total</code>.
     */
    val HEAP_BLKS_TOTAL: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("heap_blks_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.heap_blks_scanned</code>.
     */
    val HEAP_BLKS_SCANNED: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("heap_blks_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_cluster.index_rebuild_count</code>.
     */
    val INDEX_REBUILD_COUNT: TableField<PgStatProgressClusterRecord, Long?> = createField(DSL.name("index_rebuild_count"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatProgressClusterRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressClusterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressClusterRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_cluster</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_cluster</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_cluster</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_progress_cluster"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressCluster = PgStatProgressCluster(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressCluster = PgStatProgressCluster(alias, this)
    override fun `as`(alias: Table<*>): PgStatProgressCluster = PgStatProgressCluster(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressCluster = PgStatProgressCluster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressCluster = PgStatProgressCluster(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatProgressCluster = PgStatProgressCluster(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatProgressCluster = PgStatProgressCluster(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatProgressCluster = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatProgressCluster = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatProgressCluster = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatProgressCluster = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatProgressCluster = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatProgressCluster = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatProgressCluster = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatProgressCluster = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatProgressCluster = where(DSL.notExists(select))
}
