/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog


import kotlin.collections.List

import org.acme.generated.DefaultCatalog
import org.acme.generated.pg_catalog.tables.Aclexplode
import org.acme.generated.pg_catalog.tables.GenerateSeries
import org.acme.generated.pg_catalog.tables.GenerateSubscripts
import org.acme.generated.pg_catalog.tables.JsonArrayElements
import org.acme.generated.pg_catalog.tables.JsonArrayElementsText
import org.acme.generated.pg_catalog.tables.JsonEach
import org.acme.generated.pg_catalog.tables.JsonEachText
import org.acme.generated.pg_catalog.tables.JsonObjectKeys
import org.acme.generated.pg_catalog.tables.JsonPopulateRecordset
import org.acme.generated.pg_catalog.tables.JsonToRecordset
import org.acme.generated.pg_catalog.tables.JsonbArrayElements
import org.acme.generated.pg_catalog.tables.JsonbArrayElementsText
import org.acme.generated.pg_catalog.tables.JsonbEach
import org.acme.generated.pg_catalog.tables.JsonbEachText
import org.acme.generated.pg_catalog.tables.JsonbObjectKeys
import org.acme.generated.pg_catalog.tables.JsonbPathQuery
import org.acme.generated.pg_catalog.tables.JsonbPathQueryTz
import org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset
import org.acme.generated.pg_catalog.tables.JsonbToRecordset
import org.acme.generated.pg_catalog.tables.PgAggregate
import org.acme.generated.pg_catalog.tables.PgAm
import org.acme.generated.pg_catalog.tables.PgAmop
import org.acme.generated.pg_catalog.tables.PgAmproc
import org.acme.generated.pg_catalog.tables.PgAttrdef
import org.acme.generated.pg_catalog.tables.PgAttribute
import org.acme.generated.pg_catalog.tables.PgAuthMembers
import org.acme.generated.pg_catalog.tables.PgAuthid
import org.acme.generated.pg_catalog.tables.PgAvailableExtensionVersions
import org.acme.generated.pg_catalog.tables.PgAvailableExtensions
import org.acme.generated.pg_catalog.tables.PgBackendMemoryContexts
import org.acme.generated.pg_catalog.tables.PgCast
import org.acme.generated.pg_catalog.tables.PgClass
import org.acme.generated.pg_catalog.tables.PgCollation
import org.acme.generated.pg_catalog.tables.PgConfig
import org.acme.generated.pg_catalog.tables.PgConstraint
import org.acme.generated.pg_catalog.tables.PgConversion
import org.acme.generated.pg_catalog.tables.PgCursor
import org.acme.generated.pg_catalog.tables.PgCursors
import org.acme.generated.pg_catalog.tables.PgDatabase
import org.acme.generated.pg_catalog.tables.PgDbRoleSetting
import org.acme.generated.pg_catalog.tables.PgDefaultAcl
import org.acme.generated.pg_catalog.tables.PgDepend
import org.acme.generated.pg_catalog.tables.PgDescription
import org.acme.generated.pg_catalog.tables.PgEnum
import org.acme.generated.pg_catalog.tables.PgEventTrigger
import org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands
import org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects
import org.acme.generated.pg_catalog.tables.PgExtension
import org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths
import org.acme.generated.pg_catalog.tables.PgFileSettings
import org.acme.generated.pg_catalog.tables.PgForeignDataWrapper
import org.acme.generated.pg_catalog.tables.PgForeignServer
import org.acme.generated.pg_catalog.tables.PgForeignTable
import org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts
import org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys
import org.acme.generated.pg_catalog.tables.PgGetKeywords
import org.acme.generated.pg_catalog.tables.PgGetMultixactMembers
import org.acme.generated.pg_catalog.tables.PgGetPublicationTables
import org.acme.generated.pg_catalog.tables.PgGetReplicationSlots
import org.acme.generated.pg_catalog.tables.PgGetShmemAllocations
import org.acme.generated.pg_catalog.tables.PgGroup
import org.acme.generated.pg_catalog.tables.PgHbaFileRules
import org.acme.generated.pg_catalog.tables.PgIndex
import org.acme.generated.pg_catalog.tables.PgIndexes
import org.acme.generated.pg_catalog.tables.PgInherits
import org.acme.generated.pg_catalog.tables.PgInitPrivs
import org.acme.generated.pg_catalog.tables.PgLanguage
import org.acme.generated.pg_catalog.tables.PgLargeobject
import org.acme.generated.pg_catalog.tables.PgLargeobjectMetadata
import org.acme.generated.pg_catalog.tables.PgListeningChannels
import org.acme.generated.pg_catalog.tables.PgLockStatus
import org.acme.generated.pg_catalog.tables.PgLocks
import org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges
import org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir
import org.acme.generated.pg_catalog.tables.PgLsDir
import org.acme.generated.pg_catalog.tables.PgLsLogdir
import org.acme.generated.pg_catalog.tables.PgLsTmpdir
import org.acme.generated.pg_catalog.tables.PgLsWaldir
import org.acme.generated.pg_catalog.tables.PgMatviews
import org.acme.generated.pg_catalog.tables.PgMcvListItems
import org.acme.generated.pg_catalog.tables.PgNamespace
import org.acme.generated.pg_catalog.tables.PgOpclass
import org.acme.generated.pg_catalog.tables.PgOperator
import org.acme.generated.pg_catalog.tables.PgOpfamily
import org.acme.generated.pg_catalog.tables.PgOptionsToTable
import org.acme.generated.pg_catalog.tables.PgPartitionAncestors
import org.acme.generated.pg_catalog.tables.PgPartitionTree
import org.acme.generated.pg_catalog.tables.PgPartitionedTable
import org.acme.generated.pg_catalog.tables.PgPolicies
import org.acme.generated.pg_catalog.tables.PgPolicy
import org.acme.generated.pg_catalog.tables.PgPreparedStatement
import org.acme.generated.pg_catalog.tables.PgPreparedStatements
import org.acme.generated.pg_catalog.tables.PgPreparedXact
import org.acme.generated.pg_catalog.tables.PgPreparedXacts
import org.acme.generated.pg_catalog.tables.PgProc
import org.acme.generated.pg_catalog.tables.PgPublication
import org.acme.generated.pg_catalog.tables.PgPublicationRel
import org.acme.generated.pg_catalog.tables.PgPublicationTables
import org.acme.generated.pg_catalog.tables.PgRange
import org.acme.generated.pg_catalog.tables.PgReplicationOrigin
import org.acme.generated.pg_catalog.tables.PgReplicationOriginStatus
import org.acme.generated.pg_catalog.tables.PgReplicationSlots
import org.acme.generated.pg_catalog.tables.PgRewrite
import org.acme.generated.pg_catalog.tables.PgRoles
import org.acme.generated.pg_catalog.tables.PgRules
import org.acme.generated.pg_catalog.tables.PgSeclabel
import org.acme.generated.pg_catalog.tables.PgSeclabels
import org.acme.generated.pg_catalog.tables.PgSequence
import org.acme.generated.pg_catalog.tables.PgSequences
import org.acme.generated.pg_catalog.tables.PgSettings
import org.acme.generated.pg_catalog.tables.PgShadow
import org.acme.generated.pg_catalog.tables.PgShdepend
import org.acme.generated.pg_catalog.tables.PgShdescription
import org.acme.generated.pg_catalog.tables.PgShmemAllocations
import org.acme.generated.pg_catalog.tables.PgShowAllFileSettings
import org.acme.generated.pg_catalog.tables.PgShowAllSettings
import org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus
import org.acme.generated.pg_catalog.tables.PgShseclabel
import org.acme.generated.pg_catalog.tables.PgSnapshotXip
import org.acme.generated.pg_catalog.tables.PgStatActivity
import org.acme.generated.pg_catalog.tables.PgStatAllIndexes
import org.acme.generated.pg_catalog.tables.PgStatAllTables
import org.acme.generated.pg_catalog.tables.PgStatArchiver
import org.acme.generated.pg_catalog.tables.PgStatBgwriter
import org.acme.generated.pg_catalog.tables.PgStatDatabase
import org.acme.generated.pg_catalog.tables.PgStatDatabaseConflicts
import org.acme.generated.pg_catalog.tables.PgStatGetActivity
import org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset
import org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo
import org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot
import org.acme.generated.pg_catalog.tables.PgStatGetSlru
import org.acme.generated.pg_catalog.tables.PgStatGetSubscription
import org.acme.generated.pg_catalog.tables.PgStatGetWalSenders
import org.acme.generated.pg_catalog.tables.PgStatGssapi
import org.acme.generated.pg_catalog.tables.PgStatProgressAnalyze
import org.acme.generated.pg_catalog.tables.PgStatProgressBasebackup
import org.acme.generated.pg_catalog.tables.PgStatProgressCluster
import org.acme.generated.pg_catalog.tables.PgStatProgressCopy
import org.acme.generated.pg_catalog.tables.PgStatProgressCreateIndex
import org.acme.generated.pg_catalog.tables.PgStatProgressVacuum
import org.acme.generated.pg_catalog.tables.PgStatReplication
import org.acme.generated.pg_catalog.tables.PgStatReplicationSlots
import org.acme.generated.pg_catalog.tables.PgStatSlru
import org.acme.generated.pg_catalog.tables.PgStatSsl
import org.acme.generated.pg_catalog.tables.PgStatSubscription
import org.acme.generated.pg_catalog.tables.PgStatSysIndexes
import org.acme.generated.pg_catalog.tables.PgStatSysTables
import org.acme.generated.pg_catalog.tables.PgStatUserFunctions
import org.acme.generated.pg_catalog.tables.PgStatUserIndexes
import org.acme.generated.pg_catalog.tables.PgStatUserTables
import org.acme.generated.pg_catalog.tables.PgStatWal
import org.acme.generated.pg_catalog.tables.PgStatWalReceiver
import org.acme.generated.pg_catalog.tables.PgStatXactAllTables
import org.acme.generated.pg_catalog.tables.PgStatXactSysTables
import org.acme.generated.pg_catalog.tables.PgStatXactUserFunctions
import org.acme.generated.pg_catalog.tables.PgStatXactUserTables
import org.acme.generated.pg_catalog.tables.PgStatioAllIndexes
import org.acme.generated.pg_catalog.tables.PgStatioAllSequences
import org.acme.generated.pg_catalog.tables.PgStatioAllTables
import org.acme.generated.pg_catalog.tables.PgStatioSysIndexes
import org.acme.generated.pg_catalog.tables.PgStatioSysSequences
import org.acme.generated.pg_catalog.tables.PgStatioSysTables
import org.acme.generated.pg_catalog.tables.PgStatioUserIndexes
import org.acme.generated.pg_catalog.tables.PgStatioUserSequences
import org.acme.generated.pg_catalog.tables.PgStatioUserTables
import org.acme.generated.pg_catalog.tables.PgStatistic
import org.acme.generated.pg_catalog.tables.PgStatisticExt
import org.acme.generated.pg_catalog.tables.PgStatisticExtData
import org.acme.generated.pg_catalog.tables.PgStats
import org.acme.generated.pg_catalog.tables.PgStatsExt
import org.acme.generated.pg_catalog.tables.PgStatsExtExprs
import org.acme.generated.pg_catalog.tables.PgStopBackup
import org.acme.generated.pg_catalog.tables.PgSubscription
import org.acme.generated.pg_catalog.tables.PgSubscriptionRel
import org.acme.generated.pg_catalog.tables.PgTables
import org.acme.generated.pg_catalog.tables.PgTablespace
import org.acme.generated.pg_catalog.tables.PgTablespaceDatabases
import org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs
import org.acme.generated.pg_catalog.tables.PgTimezoneNames
import org.acme.generated.pg_catalog.tables.PgTransform
import org.acme.generated.pg_catalog.tables.PgTrigger
import org.acme.generated.pg_catalog.tables.PgTsConfig
import org.acme.generated.pg_catalog.tables.PgTsConfigMap
import org.acme.generated.pg_catalog.tables.PgTsDict
import org.acme.generated.pg_catalog.tables.PgTsParser
import org.acme.generated.pg_catalog.tables.PgTsTemplate
import org.acme.generated.pg_catalog.tables.PgType
import org.acme.generated.pg_catalog.tables.PgUser
import org.acme.generated.pg_catalog.tables.PgUserMapping
import org.acme.generated.pg_catalog.tables.PgUserMappings
import org.acme.generated.pg_catalog.tables.PgViews
import org.acme.generated.pg_catalog.tables.RegexpMatches
import org.acme.generated.pg_catalog.tables.RegexpSplitToTable
import org.acme.generated.pg_catalog.tables.StringToTable
import org.acme.generated.pg_catalog.tables.TsDebug
import org.acme.generated.pg_catalog.tables.TsParse
import org.acme.generated.pg_catalog.tables.TsStat
import org.acme.generated.pg_catalog.tables.TsTokenType
import org.acme.generated.pg_catalog.tables.TxidSnapshotXip
import org.acme.generated.pg_catalog.tables.Unnest
import org.acme.generated.pg_catalog.tables.records.AclexplodeRecord
import org.acme.generated.pg_catalog.tables.records.GenerateSeriesRecord
import org.acme.generated.pg_catalog.tables.records.GenerateSubscriptsRecord
import org.acme.generated.pg_catalog.tables.records.JsonArrayElementsRecord
import org.acme.generated.pg_catalog.tables.records.JsonArrayElementsTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonEachRecord
import org.acme.generated.pg_catalog.tables.records.JsonEachTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonObjectKeysRecord
import org.acme.generated.pg_catalog.tables.records.JsonPopulateRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonToRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonbArrayElementsRecord
import org.acme.generated.pg_catalog.tables.records.JsonbArrayElementsTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonbEachRecord
import org.acme.generated.pg_catalog.tables.records.JsonbEachTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonbObjectKeysRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPathQueryRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPathQueryTzRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPopulateRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonbToRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.PgConfigRecord
import org.acme.generated.pg_catalog.tables.records.PgCursorRecord
import org.acme.generated.pg_catalog.tables.records.PgEventTriggerDdlCommandsRecord
import org.acme.generated.pg_catalog.tables.records.PgEventTriggerDroppedObjectsRecord
import org.acme.generated.pg_catalog.tables.records.PgExtensionUpdatePathsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetBackendMemoryContextsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetCatalogForeignKeysRecord
import org.acme.generated.pg_catalog.tables.records.PgGetKeywordsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetMultixactMembersRecord
import org.acme.generated.pg_catalog.tables.records.PgGetPublicationTablesRecord
import org.acme.generated.pg_catalog.tables.records.PgGetReplicationSlotsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetShmemAllocationsRecord
import org.acme.generated.pg_catalog.tables.records.PgListeningChannelsRecord
import org.acme.generated.pg_catalog.tables.records.PgLockStatusRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotGetBinaryChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotGetChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotPeekBinaryChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotPeekChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLsArchiveStatusdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsDirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsLogdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsTmpdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsWaldirRecord
import org.acme.generated.pg_catalog.tables.records.PgMcvListItemsRecord
import org.acme.generated.pg_catalog.tables.records.PgOptionsToTableRecord
import org.acme.generated.pg_catalog.tables.records.PgPartitionAncestorsRecord
import org.acme.generated.pg_catalog.tables.records.PgPartitionTreeRecord
import org.acme.generated.pg_catalog.tables.records.PgPreparedStatementRecord
import org.acme.generated.pg_catalog.tables.records.PgPreparedXactRecord
import org.acme.generated.pg_catalog.tables.records.PgShowAllFileSettingsRecord
import org.acme.generated.pg_catalog.tables.records.PgShowAllSettingsRecord
import org.acme.generated.pg_catalog.tables.records.PgShowReplicationOriginStatusRecord
import org.acme.generated.pg_catalog.tables.records.PgSnapshotXipRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetActivityRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetBackendIdsetRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetProgressInfoRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetReplicationSlotRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetSlruRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetSubscriptionRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetWalSendersRecord
import org.acme.generated.pg_catalog.tables.records.PgStopBackupRecord
import org.acme.generated.pg_catalog.tables.records.PgTablespaceDatabasesRecord
import org.acme.generated.pg_catalog.tables.records.PgTimezoneAbbrevsRecord
import org.acme.generated.pg_catalog.tables.records.RegexpMatchesRecord
import org.acme.generated.pg_catalog.tables.records.RegexpSplitToTableRecord
import org.acme.generated.pg_catalog.tables.records.StringToTableRecord
import org.acme.generated.pg_catalog.tables.records.TsDebugRecord
import org.acme.generated.pg_catalog.tables.records.TsParseRecord
import org.acme.generated.pg_catalog.tables.records.TsStatRecord
import org.acme.generated.pg_catalog.tables.records.TsTokenTypeRecord
import org.acme.generated.pg_catalog.tables.records.TxidSnapshotXipRecord
import org.acme.generated.pg_catalog.tables.records.UnnestRecord
import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.JSON
import org.jooq.JSONB
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgCatalog : SchemaImpl("pg_catalog", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>pg_catalog</code>
         */
        val PG_CATALOG: PgCatalog = PgCatalog()
    }

    /**
     * The table <code>pg_catalog.aclexplode</code>.
     */
    val ACLEXPLODE: Aclexplode get() = Aclexplode.ACLEXPLODE

    /**
     * Call <code>pg_catalog.aclexplode</code>.
     */
    fun ACLEXPLODE(
          configuration: Configuration
        , acl: Array<String?>?
    ): Result<AclexplodeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
          acl
    )).fetch()

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    fun ACLEXPLODE(
          acl: Array<String?>?
    ): Aclexplode = org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
        acl
    )

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    fun ACLEXPLODE(
          acl: Field<Array<String?>?>
    ): Aclexplode = org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
        acl
    )

    /**
     * The table <code>pg_catalog.generate_series</code>.
     */
    val GENERATE_SERIES: GenerateSeries get() = GenerateSeries.GENERATE_SERIES

    /**
     * Call <code>pg_catalog.generate_series</code>.
     */
    fun GENERATE_SERIES(
          configuration: Configuration
        , __1: Long?
        , __2: Long?
    ): Result<GenerateSeriesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
          __1
        , __2
    )).fetch()

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    fun GENERATE_SERIES(
          __1: Long?
        , __2: Long?
    ): GenerateSeries = org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
        __1,
        __2
    )

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    fun GENERATE_SERIES(
          __1: Field<Long?>
        , __2: Field<Long?>
    ): GenerateSeries = org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
        __1,
        __2
    )

    /**
     * The table <code>pg_catalog.generate_subscripts</code>.
     */
    val GENERATE_SUBSCRIPTS: GenerateSubscripts get() = GenerateSubscripts.GENERATE_SUBSCRIPTS

    /**
     * Call <code>pg_catalog.generate_subscripts</code>.
     */
    fun GENERATE_SUBSCRIPTS(
          configuration: Configuration
        , __1: Array<Any?>?
        , __2: Int?
        , __3: Boolean?
    ): Result<GenerateSubscriptsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
          __1
        , __2
        , __3
    )).fetch()

    /**
     * Get <code>pg_catalog.generate_subscripts</code> as a table.
     */
    fun GENERATE_SUBSCRIPTS(
          __1: Array<Any?>?
        , __2: Int?
        , __3: Boolean?
    ): GenerateSubscripts = org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
        __1,
        __2,
        __3
    )

    /**
     * Get <code>pg_catalog.generate_subscripts</code> as a table.
     */
    fun GENERATE_SUBSCRIPTS(
          __1: Field<Array<Any?>?>
        , __2: Field<Int?>
        , __3: Field<Boolean?>
    ): GenerateSubscripts = org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
        __1,
        __2,
        __3
    )

    /**
     * The table <code>pg_catalog.json_array_elements</code>.
     */
    val JSON_ARRAY_ELEMENTS: JsonArrayElements get() = JsonArrayElements.JSON_ARRAY_ELEMENTS

    /**
     * Call <code>pg_catalog.json_array_elements</code>.
     */
    fun JSON_ARRAY_ELEMENTS(
          configuration: Configuration
        , fromJson: JSON?
    ): Result<JsonArrayElementsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.json_array_elements</code> as a table.
     */
    fun JSON_ARRAY_ELEMENTS(
          fromJson: JSON?
    ): JsonArrayElements = org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.json_array_elements</code> as a table.
     */
    fun JSON_ARRAY_ELEMENTS(
          fromJson: Field<JSON?>
    ): JsonArrayElements = org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.json_array_elements_text</code>.
     */
    val JSON_ARRAY_ELEMENTS_TEXT: JsonArrayElementsText get() = JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT

    /**
     * Call <code>pg_catalog.json_array_elements_text</code>.
     */
    fun JSON_ARRAY_ELEMENTS_TEXT(
          configuration: Configuration
        , fromJson: JSON?
    ): Result<JsonArrayElementsTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.json_array_elements_text</code> as a table.
     */
    fun JSON_ARRAY_ELEMENTS_TEXT(
          fromJson: JSON?
    ): JsonArrayElementsText = org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.json_array_elements_text</code> as a table.
     */
    fun JSON_ARRAY_ELEMENTS_TEXT(
          fromJson: Field<JSON?>
    ): JsonArrayElementsText = org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.json_each</code>.
     */
    val JSON_EACH: JsonEach get() = JsonEach.JSON_EACH

    /**
     * Call <code>pg_catalog.json_each</code>.
     */
    fun JSON_EACH(
          configuration: Configuration
        , fromJson: JSON?
    ): Result<JsonEachRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.json_each</code> as a table.
     */
    fun JSON_EACH(
          fromJson: JSON?
    ): JsonEach = org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.json_each</code> as a table.
     */
    fun JSON_EACH(
          fromJson: Field<JSON?>
    ): JsonEach = org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.json_each_text</code>.
     */
    val JSON_EACH_TEXT: JsonEachText get() = JsonEachText.JSON_EACH_TEXT

    /**
     * Call <code>pg_catalog.json_each_text</code>.
     */
    fun JSON_EACH_TEXT(
          configuration: Configuration
        , fromJson: JSON?
    ): Result<JsonEachTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.json_each_text</code> as a table.
     */
    fun JSON_EACH_TEXT(
          fromJson: JSON?
    ): JsonEachText = org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.json_each_text</code> as a table.
     */
    fun JSON_EACH_TEXT(
          fromJson: Field<JSON?>
    ): JsonEachText = org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.json_object_keys</code>.
     */
    val JSON_OBJECT_KEYS: JsonObjectKeys get() = JsonObjectKeys.JSON_OBJECT_KEYS

    /**
     * Call <code>pg_catalog.json_object_keys</code>.
     */
    fun JSON_OBJECT_KEYS(
          configuration: Configuration
        , __1: JSON?
    ): Result<JsonObjectKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.json_object_keys</code> as a table.
     */
    fun JSON_OBJECT_KEYS(
          __1: JSON?
    ): JsonObjectKeys = org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
        __1
    )

    /**
     * Get <code>pg_catalog.json_object_keys</code> as a table.
     */
    fun JSON_OBJECT_KEYS(
          __1: Field<JSON?>
    ): JsonObjectKeys = org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
        __1
    )

    /**
     * The table <code>pg_catalog.json_populate_recordset</code>.
     */
    val JSON_POPULATE_RECORDSET: JsonPopulateRecordset get() = JsonPopulateRecordset.JSON_POPULATE_RECORDSET
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSON_POPULATE_RECORDSET(
          configuration: Configuration
        , base: Any?
        , fromJson: JSON?
        , useJsonAsText: Boolean?
    ): Result<JsonPopulateRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
          base
        , fromJson
        , useJsonAsText
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSON_POPULATE_RECORDSET(
          base: Any?
        , fromJson: JSON?
        , useJsonAsText: Boolean?
    ): JsonPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
        base,
        fromJson,
        useJsonAsText
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSON_POPULATE_RECORDSET(
          base: Field<Any?>
        , fromJson: Field<JSON?>
        , useJsonAsText: Field<Boolean?>
    ): JsonPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
        base,
        fromJson,
        useJsonAsText
    )

    /**
     * The table <code>pg_catalog.json_to_recordset</code>.
     */
    val JSON_TO_RECORDSET: JsonToRecordset get() = JsonToRecordset.JSON_TO_RECORDSET

    /**
     * Call <code>pg_catalog.json_to_recordset</code>.
     */
    fun JSON_TO_RECORDSET(
          configuration: Configuration
        , __1: JSON?
    ): Result<JsonToRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.json_to_recordset</code> as a table.
     */
    fun JSON_TO_RECORDSET(
          __1: JSON?
    ): JsonToRecordset = org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
        __1
    )

    /**
     * Get <code>pg_catalog.json_to_recordset</code> as a table.
     */
    fun JSON_TO_RECORDSET(
          __1: Field<JSON?>
    ): JsonToRecordset = org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
        __1
    )

    /**
     * The table <code>pg_catalog.jsonb_array_elements</code>.
     */
    val JSONB_ARRAY_ELEMENTS: JsonbArrayElements get() = JsonbArrayElements.JSONB_ARRAY_ELEMENTS

    /**
     * Call <code>pg_catalog.jsonb_array_elements</code>.
     */
    fun JSONB_ARRAY_ELEMENTS(
          configuration: Configuration
        , fromJson: JSONB?
    ): Result<JsonbArrayElementsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
     */
    fun JSONB_ARRAY_ELEMENTS(
          fromJson: JSONB?
    ): JsonbArrayElements = org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
     */
    fun JSONB_ARRAY_ELEMENTS(
          fromJson: Field<JSONB?>
    ): JsonbArrayElements = org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.jsonb_array_elements_text</code>.
     */
    val JSONB_ARRAY_ELEMENTS_TEXT: JsonbArrayElementsText get() = JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT

    /**
     * Call <code>pg_catalog.jsonb_array_elements_text</code>.
     */
    fun JSONB_ARRAY_ELEMENTS_TEXT(
          configuration: Configuration
        , fromJson: JSONB?
    ): Result<JsonbArrayElementsTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
     */
    fun JSONB_ARRAY_ELEMENTS_TEXT(
          fromJson: JSONB?
    ): JsonbArrayElementsText = org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
     */
    fun JSONB_ARRAY_ELEMENTS_TEXT(
          fromJson: Field<JSONB?>
    ): JsonbArrayElementsText = org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.jsonb_each</code>.
     */
    val JSONB_EACH: JsonbEach get() = JsonbEach.JSONB_EACH

    /**
     * Call <code>pg_catalog.jsonb_each</code>.
     */
    fun JSONB_EACH(
          configuration: Configuration
        , fromJson: JSONB?
    ): Result<JsonbEachRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_each</code> as a table.
     */
    fun JSONB_EACH(
          fromJson: JSONB?
    ): JsonbEach = org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.jsonb_each</code> as a table.
     */
    fun JSONB_EACH(
          fromJson: Field<JSONB?>
    ): JsonbEach = org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.jsonb_each_text</code>.
     */
    val JSONB_EACH_TEXT: JsonbEachText get() = JsonbEachText.JSONB_EACH_TEXT

    /**
     * Call <code>pg_catalog.jsonb_each_text</code>.
     */
    fun JSONB_EACH_TEXT(
          configuration: Configuration
        , fromJson: JSONB?
    ): Result<JsonbEachTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
          fromJson
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_each_text</code> as a table.
     */
    fun JSONB_EACH_TEXT(
          fromJson: JSONB?
    ): JsonbEachText = org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
        fromJson
    )

    /**
     * Get <code>pg_catalog.jsonb_each_text</code> as a table.
     */
    fun JSONB_EACH_TEXT(
          fromJson: Field<JSONB?>
    ): JsonbEachText = org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
        fromJson
    )

    /**
     * The table <code>pg_catalog.jsonb_object_keys</code>.
     */
    val JSONB_OBJECT_KEYS: JsonbObjectKeys get() = JsonbObjectKeys.JSONB_OBJECT_KEYS

    /**
     * Call <code>pg_catalog.jsonb_object_keys</code>.
     */
    fun JSONB_OBJECT_KEYS(
          configuration: Configuration
        , __1: JSONB?
    ): Result<JsonbObjectKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
     */
    fun JSONB_OBJECT_KEYS(
          __1: JSONB?
    ): JsonbObjectKeys = org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
        __1
    )

    /**
     * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
     */
    fun JSONB_OBJECT_KEYS(
          __1: Field<JSONB?>
    ): JsonbObjectKeys = org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
        __1
    )

    /**
     * The table <code>pg_catalog.jsonb_path_query</code>.
     */
    val JSONB_PATH_QUERY: JsonbPathQuery get() = JsonbPathQuery.JSONB_PATH_QUERY
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY(
          configuration: Configuration
        , target: JSONB?
        , path: Any?
        , vars: JSONB?
        , silent: Boolean?
    ): Result<JsonbPathQueryRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
          target
        , path
        , vars
        , silent
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY(
          target: JSONB?
        , path: Any?
        , vars: JSONB?
        , silent: Boolean?
    ): JsonbPathQuery = org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
        target,
        path,
        vars,
        silent
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY(
          target: Field<JSONB?>
        , path: Field<Any?>
        , vars: Field<JSONB?>
        , silent: Field<Boolean?>
    ): JsonbPathQuery = org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
        target,
        path,
        vars,
        silent
    )

    /**
     * The table <code>pg_catalog.jsonb_path_query_tz</code>.
     */
    val JSONB_PATH_QUERY_TZ: JsonbPathQueryTz get() = JsonbPathQueryTz.JSONB_PATH_QUERY_TZ
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY_TZ(
          configuration: Configuration
        , target: JSONB?
        , path: Any?
        , vars: JSONB?
        , silent: Boolean?
    ): Result<JsonbPathQueryTzRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
          target
        , path
        , vars
        , silent
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY_TZ(
          target: JSONB?
        , path: Any?
        , vars: JSONB?
        , silent: Boolean?
    ): JsonbPathQueryTz = org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
        target,
        path,
        vars,
        silent
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_PATH_QUERY_TZ(
          target: Field<JSONB?>
        , path: Field<Any?>
        , vars: Field<JSONB?>
        , silent: Field<Boolean?>
    ): JsonbPathQueryTz = org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
        target,
        path,
        vars,
        silent
    )

    /**
     * The table <code>pg_catalog.jsonb_populate_recordset</code>.
     */
    val JSONB_POPULATE_RECORDSET: JsonbPopulateRecordset get() = JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_POPULATE_RECORDSET(
          configuration: Configuration
        , __1: Any?
        , __2: JSONB?
    ): Result<JsonbPopulateRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
          __1
        , __2
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_POPULATE_RECORDSET(
          __1: Any?
        , __2: JSONB?
    ): JsonbPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
        __1,
        __2
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun JSONB_POPULATE_RECORDSET(
          __1: Field<Any?>
        , __2: Field<JSONB?>
    ): JsonbPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
        __1,
        __2
    )

    /**
     * The table <code>pg_catalog.jsonb_to_recordset</code>.
     */
    val JSONB_TO_RECORDSET: JsonbToRecordset get() = JsonbToRecordset.JSONB_TO_RECORDSET

    /**
     * Call <code>pg_catalog.jsonb_to_recordset</code>.
     */
    fun JSONB_TO_RECORDSET(
          configuration: Configuration
        , __1: JSONB?
    ): Result<JsonbToRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
     */
    fun JSONB_TO_RECORDSET(
          __1: JSONB?
    ): JsonbToRecordset = org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
        __1
    )

    /**
     * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
     */
    fun JSONB_TO_RECORDSET(
          __1: Field<JSONB?>
    ): JsonbToRecordset = org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
        __1
    )

    /**
     * The table <code>pg_catalog.pg_aggregate</code>.
     */
    val PG_AGGREGATE: PgAggregate get() = PgAggregate.PG_AGGREGATE

    /**
     * The table <code>pg_catalog.pg_am</code>.
     */
    val PG_AM: PgAm get() = PgAm.PG_AM

    /**
     * The table <code>pg_catalog.pg_amop</code>.
     */
    val PG_AMOP: PgAmop get() = PgAmop.PG_AMOP

    /**
     * The table <code>pg_catalog.pg_amproc</code>.
     */
    val PG_AMPROC: PgAmproc get() = PgAmproc.PG_AMPROC

    /**
     * The table <code>pg_catalog.pg_attrdef</code>.
     */
    val PG_ATTRDEF: PgAttrdef get() = PgAttrdef.PG_ATTRDEF

    /**
     * The table <code>pg_catalog.pg_attribute</code>.
     */
    val PG_ATTRIBUTE: PgAttribute get() = PgAttribute.PG_ATTRIBUTE

    /**
     * The table <code>pg_catalog.pg_auth_members</code>.
     */
    val PG_AUTH_MEMBERS: PgAuthMembers get() = PgAuthMembers.PG_AUTH_MEMBERS

    /**
     * The table <code>pg_catalog.pg_authid</code>.
     */
    val PG_AUTHID: PgAuthid get() = PgAuthid.PG_AUTHID

    /**
     * The table <code>pg_catalog.pg_available_extension_versions</code>.
     */
    val PG_AVAILABLE_EXTENSION_VERSIONS: PgAvailableExtensionVersions get() = PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS

    /**
     * The table <code>pg_catalog.pg_available_extensions</code>.
     */
    val PG_AVAILABLE_EXTENSIONS: PgAvailableExtensions get() = PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS

    /**
     * The table <code>pg_catalog.pg_backend_memory_contexts</code>.
     */
    val PG_BACKEND_MEMORY_CONTEXTS: PgBackendMemoryContexts get() = PgBackendMemoryContexts.PG_BACKEND_MEMORY_CONTEXTS

    /**
     * The table <code>pg_catalog.pg_cast</code>.
     */
    val PG_CAST: PgCast get() = PgCast.PG_CAST

    /**
     * The table <code>pg_catalog.pg_class</code>.
     */
    val PG_CLASS: PgClass get() = PgClass.PG_CLASS

    /**
     * The table <code>pg_catalog.pg_collation</code>.
     */
    val PG_COLLATION: PgCollation get() = PgCollation.PG_COLLATION

    /**
     * The table <code>pg_catalog.pg_config</code>.
     */
    val PG_CONFIG: PgConfig get() = PgConfig.PG_CONFIG

    /**
     * Call <code>pg_catalog.pg_config</code>.
     */
    fun PG_CONFIG(
          configuration: Configuration
    ): Result<PgConfigRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgConfig.PG_CONFIG.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_config</code> as a table.
     */
    fun PG_CONFIG(): PgConfig = org.acme.generated.pg_catalog.tables.PgConfig.PG_CONFIG.call(
    )

    /**
     * The table <code>pg_catalog.pg_constraint</code>.
     */
    val PG_CONSTRAINT: PgConstraint get() = PgConstraint.PG_CONSTRAINT

    /**
     * The table <code>pg_catalog.pg_conversion</code>.
     */
    val PG_CONVERSION: PgConversion get() = PgConversion.PG_CONVERSION

    /**
     * The table <code>pg_catalog.pg_cursor</code>.
     */
    val PG_CURSOR: PgCursor get() = PgCursor.PG_CURSOR

    /**
     * Call <code>pg_catalog.pg_cursor</code>.
     */
    fun PG_CURSOR(
          configuration: Configuration
    ): Result<PgCursorRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgCursor.PG_CURSOR.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_cursor</code> as a table.
     */
    fun PG_CURSOR(): PgCursor = org.acme.generated.pg_catalog.tables.PgCursor.PG_CURSOR.call(
    )

    /**
     * The table <code>pg_catalog.pg_cursors</code>.
     */
    val PG_CURSORS: PgCursors get() = PgCursors.PG_CURSORS

    /**
     * The table <code>pg_catalog.pg_database</code>.
     */
    val PG_DATABASE: PgDatabase get() = PgDatabase.PG_DATABASE

    /**
     * The table <code>pg_catalog.pg_db_role_setting</code>.
     */
    val PG_DB_ROLE_SETTING: PgDbRoleSetting get() = PgDbRoleSetting.PG_DB_ROLE_SETTING

    /**
     * The table <code>pg_catalog.pg_default_acl</code>.
     */
    val PG_DEFAULT_ACL: PgDefaultAcl get() = PgDefaultAcl.PG_DEFAULT_ACL

    /**
     * The table <code>pg_catalog.pg_depend</code>.
     */
    val PG_DEPEND: PgDepend get() = PgDepend.PG_DEPEND

    /**
     * The table <code>pg_catalog.pg_description</code>.
     */
    val PG_DESCRIPTION: PgDescription get() = PgDescription.PG_DESCRIPTION

    /**
     * The table <code>pg_catalog.pg_enum</code>.
     */
    val PG_ENUM: PgEnum get() = PgEnum.PG_ENUM

    /**
     * The table <code>pg_catalog.pg_event_trigger</code>.
     */
    val PG_EVENT_TRIGGER: PgEventTrigger get() = PgEventTrigger.PG_EVENT_TRIGGER

    /**
     * The table <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    val PG_EVENT_TRIGGER_DDL_COMMANDS: PgEventTriggerDdlCommands get() = PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS

    /**
     * Call <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    fun PG_EVENT_TRIGGER_DDL_COMMANDS(
          configuration: Configuration
    ): Result<PgEventTriggerDdlCommandsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_event_trigger_ddl_commands</code> as a table.
     */
    fun PG_EVENT_TRIGGER_DDL_COMMANDS(): PgEventTriggerDdlCommands = org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
    )

    /**
     * The table <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    val PG_EVENT_TRIGGER_DROPPED_OBJECTS: PgEventTriggerDroppedObjects get() = PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS

    /**
     * Call <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    fun PG_EVENT_TRIGGER_DROPPED_OBJECTS(
          configuration: Configuration
    ): Result<PgEventTriggerDroppedObjectsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_event_trigger_dropped_objects</code> as a table.
     */
    fun PG_EVENT_TRIGGER_DROPPED_OBJECTS(): PgEventTriggerDroppedObjects = org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
    )

    /**
     * The table <code>pg_catalog.pg_extension</code>.
     */
    val PG_EXTENSION: PgExtension get() = PgExtension.PG_EXTENSION

    /**
     * The table <code>pg_catalog.pg_extension_update_paths</code>.
     */
    val PG_EXTENSION_UPDATE_PATHS: PgExtensionUpdatePaths get() = PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS

    /**
     * Call <code>pg_catalog.pg_extension_update_paths</code>.
     */
    fun PG_EXTENSION_UPDATE_PATHS(
          configuration: Configuration
        , name: String?
    ): Result<PgExtensionUpdatePathsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
          name
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    fun PG_EXTENSION_UPDATE_PATHS(
          name: String?
    ): PgExtensionUpdatePaths = org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
        name
    )

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    fun PG_EXTENSION_UPDATE_PATHS(
          name: Field<String?>
    ): PgExtensionUpdatePaths = org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
        name
    )

    /**
     * The table <code>pg_catalog.pg_file_settings</code>.
     */
    val PG_FILE_SETTINGS: PgFileSettings get() = PgFileSettings.PG_FILE_SETTINGS

    /**
     * The table <code>pg_catalog.pg_foreign_data_wrapper</code>.
     */
    val PG_FOREIGN_DATA_WRAPPER: PgForeignDataWrapper get() = PgForeignDataWrapper.PG_FOREIGN_DATA_WRAPPER

    /**
     * The table <code>pg_catalog.pg_foreign_server</code>.
     */
    val PG_FOREIGN_SERVER: PgForeignServer get() = PgForeignServer.PG_FOREIGN_SERVER

    /**
     * The table <code>pg_catalog.pg_foreign_table</code>.
     */
    val PG_FOREIGN_TABLE: PgForeignTable get() = PgForeignTable.PG_FOREIGN_TABLE

    /**
     * The table <code>pg_catalog.pg_get_backend_memory_contexts</code>.
     */
    val PG_GET_BACKEND_MEMORY_CONTEXTS: PgGetBackendMemoryContexts get() = PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS

    /**
     * Call <code>pg_catalog.pg_get_backend_memory_contexts</code>.
     */
    fun PG_GET_BACKEND_MEMORY_CONTEXTS(
          configuration: Configuration
    ): Result<PgGetBackendMemoryContextsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_backend_memory_contexts</code> as a table.
     */
    fun PG_GET_BACKEND_MEMORY_CONTEXTS(): PgGetBackendMemoryContexts = org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
    )

    /**
     * The table <code>pg_catalog.pg_get_catalog_foreign_keys</code>.
     */
    val PG_GET_CATALOG_FOREIGN_KEYS: PgGetCatalogForeignKeys get() = PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS

    /**
     * Call <code>pg_catalog.pg_get_catalog_foreign_keys</code>.
     */
    fun PG_GET_CATALOG_FOREIGN_KEYS(
          configuration: Configuration
    ): Result<PgGetCatalogForeignKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_catalog_foreign_keys</code> as a table.
     */
    fun PG_GET_CATALOG_FOREIGN_KEYS(): PgGetCatalogForeignKeys = org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
    )

    /**
     * The table <code>pg_catalog.pg_get_keywords</code>.
     */
    val PG_GET_KEYWORDS: PgGetKeywords get() = PgGetKeywords.PG_GET_KEYWORDS

    /**
     * Call <code>pg_catalog.pg_get_keywords</code>.
     */
    fun PG_GET_KEYWORDS(
          configuration: Configuration
    ): Result<PgGetKeywordsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_keywords</code> as a table.
     */
    fun PG_GET_KEYWORDS(): PgGetKeywords = org.acme.generated.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
    )

    /**
     * The table <code>pg_catalog.pg_get_multixact_members</code>.
     */
    val PG_GET_MULTIXACT_MEMBERS: PgGetMultixactMembers get() = PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS

    /**
     * Call <code>pg_catalog.pg_get_multixact_members</code>.
     */
    fun PG_GET_MULTIXACT_MEMBERS(
          configuration: Configuration
        , multixid: Long?
    ): Result<PgGetMultixactMembersRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
          multixid
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    fun PG_GET_MULTIXACT_MEMBERS(
          multixid: Long?
    ): PgGetMultixactMembers = org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
        multixid
    )

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    fun PG_GET_MULTIXACT_MEMBERS(
          multixid: Field<Long?>
    ): PgGetMultixactMembers = org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
        multixid
    )

    /**
     * The table <code>pg_catalog.pg_get_publication_tables</code>.
     */
    val PG_GET_PUBLICATION_TABLES: PgGetPublicationTables get() = PgGetPublicationTables.PG_GET_PUBLICATION_TABLES

    /**
     * Call <code>pg_catalog.pg_get_publication_tables</code>.
     */
    fun PG_GET_PUBLICATION_TABLES(
          configuration: Configuration
        , pubname: String?
    ): Result<PgGetPublicationTablesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
          pubname
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    fun PG_GET_PUBLICATION_TABLES(
          pubname: String?
    ): PgGetPublicationTables = org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
        pubname
    )

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    fun PG_GET_PUBLICATION_TABLES(
          pubname: Field<String?>
    ): PgGetPublicationTables = org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
        pubname
    )

    /**
     * The table <code>pg_catalog.pg_get_replication_slots</code>.
     */
    val PG_GET_REPLICATION_SLOTS: PgGetReplicationSlots get() = PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS

    /**
     * Call <code>pg_catalog.pg_get_replication_slots</code>.
     */
    fun PG_GET_REPLICATION_SLOTS(
          configuration: Configuration
    ): Result<PgGetReplicationSlotsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_replication_slots</code> as a table.
     */
    fun PG_GET_REPLICATION_SLOTS(): PgGetReplicationSlots = org.acme.generated.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
    )

    /**
     * The table <code>pg_catalog.pg_get_shmem_allocations</code>.
     */
    val PG_GET_SHMEM_ALLOCATIONS: PgGetShmemAllocations get() = PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS

    /**
     * Call <code>pg_catalog.pg_get_shmem_allocations</code>.
     */
    fun PG_GET_SHMEM_ALLOCATIONS(
          configuration: Configuration
    ): Result<PgGetShmemAllocationsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_get_shmem_allocations</code> as a table.
     */
    fun PG_GET_SHMEM_ALLOCATIONS(): PgGetShmemAllocations = org.acme.generated.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
    )

    /**
     * The table <code>pg_catalog.pg_group</code>.
     */
    val PG_GROUP: PgGroup get() = PgGroup.PG_GROUP

    /**
     * The table <code>pg_catalog.pg_hba_file_rules</code>.
     */
    val PG_HBA_FILE_RULES: PgHbaFileRules get() = PgHbaFileRules.PG_HBA_FILE_RULES

    /**
     * The table <code>pg_catalog.pg_index</code>.
     */
    val PG_INDEX: PgIndex get() = PgIndex.PG_INDEX

    /**
     * The table <code>pg_catalog.pg_indexes</code>.
     */
    val PG_INDEXES: PgIndexes get() = PgIndexes.PG_INDEXES

    /**
     * The table <code>pg_catalog.pg_inherits</code>.
     */
    val PG_INHERITS: PgInherits get() = PgInherits.PG_INHERITS

    /**
     * The table <code>pg_catalog.pg_init_privs</code>.
     */
    val PG_INIT_PRIVS: PgInitPrivs get() = PgInitPrivs.PG_INIT_PRIVS

    /**
     * The table <code>pg_catalog.pg_language</code>.
     */
    val PG_LANGUAGE: PgLanguage get() = PgLanguage.PG_LANGUAGE

    /**
     * The table <code>pg_catalog.pg_largeobject</code>.
     */
    val PG_LARGEOBJECT: PgLargeobject get() = PgLargeobject.PG_LARGEOBJECT

    /**
     * The table <code>pg_catalog.pg_largeobject_metadata</code>.
     */
    val PG_LARGEOBJECT_METADATA: PgLargeobjectMetadata get() = PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA

    /**
     * The table <code>pg_catalog.pg_listening_channels</code>.
     */
    val PG_LISTENING_CHANNELS: PgListeningChannels get() = PgListeningChannels.PG_LISTENING_CHANNELS

    /**
     * Call <code>pg_catalog.pg_listening_channels</code>.
     */
    fun PG_LISTENING_CHANNELS(
          configuration: Configuration
    ): Result<PgListeningChannelsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_listening_channels</code> as a table.
     */
    fun PG_LISTENING_CHANNELS(): PgListeningChannels = org.acme.generated.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
    )

    /**
     * The table <code>pg_catalog.pg_lock_status</code>.
     */
    val PG_LOCK_STATUS: PgLockStatus get() = PgLockStatus.PG_LOCK_STATUS

    /**
     * Call <code>pg_catalog.pg_lock_status</code>.
     */
    fun PG_LOCK_STATUS(
          configuration: Configuration
    ): Result<PgLockStatusRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_lock_status</code> as a table.
     */
    fun PG_LOCK_STATUS(): PgLockStatus = org.acme.generated.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
    )

    /**
     * The table <code>pg_catalog.pg_locks</code>.
     */
    val PG_LOCKS: PgLocks get() = PgLocks.PG_LOCKS

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_binary_changes</code>.
     */
    val PG_LOGICAL_SLOT_GET_BINARY_CHANGES: PgLogicalSlotGetBinaryChanges get() = PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          configuration: Configuration
        , slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): Result<PgLogicalSlotGetBinaryChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
          slotName
        , uptoLsn
        , uptoNchanges
        , options
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): PgLogicalSlotGetBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          slotName: Field<String?>
        , uptoLsn: Field<Any?>
        , uptoNchanges: Field<Int?>
        , options: Field<Array<String?>?>
    ): PgLogicalSlotGetBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_changes</code>.
     */
    val PG_LOGICAL_SLOT_GET_CHANGES: PgLogicalSlotGetChanges get() = PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_CHANGES(
          configuration: Configuration
        , slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): Result<PgLogicalSlotGetChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
          slotName
        , uptoLsn
        , uptoNchanges
        , options
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_CHANGES(
          slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): PgLogicalSlotGetChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_GET_CHANGES(
          slotName: Field<String?>
        , uptoLsn: Field<Any?>
        , uptoNchanges: Field<Int?>
        , options: Field<Array<String?>?>
    ): PgLogicalSlotGetChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_binary_changes</code>.
     */
    val PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES: PgLogicalSlotPeekBinaryChanges get() = PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          configuration: Configuration
        , slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): Result<PgLogicalSlotPeekBinaryChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
          slotName
        , uptoLsn
        , uptoNchanges
        , options
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): PgLogicalSlotPeekBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          slotName: Field<String?>
        , uptoLsn: Field<Any?>
        , uptoNchanges: Field<Int?>
        , options: Field<Array<String?>?>
    ): PgLogicalSlotPeekBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_changes</code>.
     */
    val PG_LOGICAL_SLOT_PEEK_CHANGES: PgLogicalSlotPeekChanges get() = PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_CHANGES(
          configuration: Configuration
        , slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): Result<PgLogicalSlotPeekChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
          slotName
        , uptoLsn
        , uptoNchanges
        , options
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_CHANGES(
          slotName: String?
        , uptoLsn: Any?
        , uptoNchanges: Int?
        , options: Array<String?>?
    ): PgLogicalSlotPeekChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_LOGICAL_SLOT_PEEK_CHANGES(
          slotName: Field<String?>
        , uptoLsn: Field<Any?>
        , uptoNchanges: Field<Int?>
        , options: Field<Array<String?>?>
    ): PgLogicalSlotPeekChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
        slotName,
        uptoLsn,
        uptoNchanges,
        options
    )

    /**
     * The table <code>pg_catalog.pg_ls_archive_statusdir</code>.
     */
    val PG_LS_ARCHIVE_STATUSDIR: PgLsArchiveStatusdir get() = PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR

    /**
     * Call <code>pg_catalog.pg_ls_archive_statusdir</code>.
     */
    fun PG_LS_ARCHIVE_STATUSDIR(
          configuration: Configuration
    ): Result<PgLsArchiveStatusdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_ls_archive_statusdir</code> as a table.
     */
    fun PG_LS_ARCHIVE_STATUSDIR(): PgLsArchiveStatusdir = org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
    )

    /**
     * The table <code>pg_catalog.pg_ls_dir</code>.
     */
    val PG_LS_DIR: PgLsDir get() = PgLsDir.PG_LS_DIR

    /**
     * Call <code>pg_catalog.pg_ls_dir</code>.
     */
    fun PG_LS_DIR(
          configuration: Configuration
        , __1: String?
    ): Result<PgLsDirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    fun PG_LS_DIR(
          __1: String?
    ): PgLsDir = org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
        __1
    )

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    fun PG_LS_DIR(
          __1: Field<String?>
    ): PgLsDir = org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
        __1
    )

    /**
     * The table <code>pg_catalog.pg_ls_logdir</code>.
     */
    val PG_LS_LOGDIR: PgLsLogdir get() = PgLsLogdir.PG_LS_LOGDIR

    /**
     * Call <code>pg_catalog.pg_ls_logdir</code>.
     */
    fun PG_LS_LOGDIR(
          configuration: Configuration
    ): Result<PgLsLogdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_ls_logdir</code> as a table.
     */
    fun PG_LS_LOGDIR(): PgLsLogdir = org.acme.generated.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
    )

    /**
     * The table <code>pg_catalog.pg_ls_tmpdir</code>.
     */
    val PG_LS_TMPDIR: PgLsTmpdir get() = PgLsTmpdir.PG_LS_TMPDIR

    /**
     * Call <code>pg_catalog.pg_ls_tmpdir</code>.
     */
    fun PG_LS_TMPDIR(
          configuration: Configuration
    ): Result<PgLsTmpdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_ls_tmpdir</code> as a table.
     */
    fun PG_LS_TMPDIR(): PgLsTmpdir = org.acme.generated.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
    )

    /**
     * The table <code>pg_catalog.pg_ls_waldir</code>.
     */
    val PG_LS_WALDIR: PgLsWaldir get() = PgLsWaldir.PG_LS_WALDIR

    /**
     * Call <code>pg_catalog.pg_ls_waldir</code>.
     */
    fun PG_LS_WALDIR(
          configuration: Configuration
    ): Result<PgLsWaldirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_ls_waldir</code> as a table.
     */
    fun PG_LS_WALDIR(): PgLsWaldir = org.acme.generated.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
    )

    /**
     * The table <code>pg_catalog.pg_matviews</code>.
     */
    val PG_MATVIEWS: PgMatviews get() = PgMatviews.PG_MATVIEWS

    /**
     * The table <code>pg_catalog.pg_mcv_list_items</code>.
     */
    val PG_MCV_LIST_ITEMS: PgMcvListItems get() = PgMcvListItems.PG_MCV_LIST_ITEMS
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_MCV_LIST_ITEMS(
          configuration: Configuration
        , mcvList: Any?
    ): Result<PgMcvListItemsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
          mcvList
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_MCV_LIST_ITEMS(
          mcvList: Any?
    ): PgMcvListItems = org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
        mcvList
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_MCV_LIST_ITEMS(
          mcvList: Field<Any?>
    ): PgMcvListItems = org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
        mcvList
    )

    /**
     * The table <code>pg_catalog.pg_namespace</code>.
     */
    val PG_NAMESPACE: PgNamespace get() = PgNamespace.PG_NAMESPACE

    /**
     * The table <code>pg_catalog.pg_opclass</code>.
     */
    val PG_OPCLASS: PgOpclass get() = PgOpclass.PG_OPCLASS

    /**
     * The table <code>pg_catalog.pg_operator</code>.
     */
    val PG_OPERATOR: PgOperator get() = PgOperator.PG_OPERATOR

    /**
     * The table <code>pg_catalog.pg_opfamily</code>.
     */
    val PG_OPFAMILY: PgOpfamily get() = PgOpfamily.PG_OPFAMILY

    /**
     * The table <code>pg_catalog.pg_options_to_table</code>.
     */
    val PG_OPTIONS_TO_TABLE: PgOptionsToTable get() = PgOptionsToTable.PG_OPTIONS_TO_TABLE

    /**
     * Call <code>pg_catalog.pg_options_to_table</code>.
     */
    fun PG_OPTIONS_TO_TABLE(
          configuration: Configuration
        , optionsArray: Array<String?>?
    ): Result<PgOptionsToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
          optionsArray
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    fun PG_OPTIONS_TO_TABLE(
          optionsArray: Array<String?>?
    ): PgOptionsToTable = org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
        optionsArray
    )

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    fun PG_OPTIONS_TO_TABLE(
          optionsArray: Field<Array<String?>?>
    ): PgOptionsToTable = org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
        optionsArray
    )

    /**
     * The table <code>pg_catalog.pg_partition_ancestors</code>.
     */
    val PG_PARTITION_ANCESTORS: PgPartitionAncestors get() = PgPartitionAncestors.PG_PARTITION_ANCESTORS
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_ANCESTORS(
          configuration: Configuration
        , partitionid: Any?
    ): Result<PgPartitionAncestorsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
          partitionid
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_ANCESTORS(
          partitionid: Any?
    ): PgPartitionAncestors = org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
        partitionid
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_ANCESTORS(
          partitionid: Field<Any?>
    ): PgPartitionAncestors = org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
        partitionid
    )

    /**
     * The table <code>pg_catalog.pg_partition_tree</code>.
     */
    val PG_PARTITION_TREE: PgPartitionTree get() = PgPartitionTree.PG_PARTITION_TREE
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_TREE(
          configuration: Configuration
        , rootrelid: Any?
    ): Result<PgPartitionTreeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
          rootrelid
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_TREE(
          rootrelid: Any?
    ): PgPartitionTree = org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
        rootrelid
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_PARTITION_TREE(
          rootrelid: Field<Any?>
    ): PgPartitionTree = org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
        rootrelid
    )

    /**
     * The table <code>pg_catalog.pg_partitioned_table</code>.
     */
    val PG_PARTITIONED_TABLE: PgPartitionedTable get() = PgPartitionedTable.PG_PARTITIONED_TABLE

    /**
     * The table <code>pg_catalog.pg_policies</code>.
     */
    val PG_POLICIES: PgPolicies get() = PgPolicies.PG_POLICIES

    /**
     * The table <code>pg_catalog.pg_policy</code>.
     */
    val PG_POLICY: PgPolicy get() = PgPolicy.PG_POLICY

    /**
     * The table <code>pg_catalog.pg_prepared_statement</code>.
     */
    val PG_PREPARED_STATEMENT: PgPreparedStatement get() = PgPreparedStatement.PG_PREPARED_STATEMENT

    /**
     * Call <code>pg_catalog.pg_prepared_statement</code>.
     */
    fun PG_PREPARED_STATEMENT(
          configuration: Configuration
    ): Result<PgPreparedStatementRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_prepared_statement</code> as a table.
     */
    fun PG_PREPARED_STATEMENT(): PgPreparedStatement = org.acme.generated.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
    )

    /**
     * The table <code>pg_catalog.pg_prepared_statements</code>.
     */
    val PG_PREPARED_STATEMENTS: PgPreparedStatements get() = PgPreparedStatements.PG_PREPARED_STATEMENTS

    /**
     * The table <code>pg_catalog.pg_prepared_xact</code>.
     */
    val PG_PREPARED_XACT: PgPreparedXact get() = PgPreparedXact.PG_PREPARED_XACT

    /**
     * Call <code>pg_catalog.pg_prepared_xact</code>.
     */
    fun PG_PREPARED_XACT(
          configuration: Configuration
    ): Result<PgPreparedXactRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_prepared_xact</code> as a table.
     */
    fun PG_PREPARED_XACT(): PgPreparedXact = org.acme.generated.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
    )

    /**
     * The table <code>pg_catalog.pg_prepared_xacts</code>.
     */
    val PG_PREPARED_XACTS: PgPreparedXacts get() = PgPreparedXacts.PG_PREPARED_XACTS

    /**
     * The table <code>pg_catalog.pg_proc</code>.
     */
    val PG_PROC: PgProc get() = PgProc.PG_PROC

    /**
     * The table <code>pg_catalog.pg_publication</code>.
     */
    val PG_PUBLICATION: PgPublication get() = PgPublication.PG_PUBLICATION

    /**
     * The table <code>pg_catalog.pg_publication_rel</code>.
     */
    val PG_PUBLICATION_REL: PgPublicationRel get() = PgPublicationRel.PG_PUBLICATION_REL

    /**
     * The table <code>pg_catalog.pg_publication_tables</code>.
     */
    val PG_PUBLICATION_TABLES: PgPublicationTables get() = PgPublicationTables.PG_PUBLICATION_TABLES

    /**
     * The table <code>pg_catalog.pg_range</code>.
     */
    val PG_RANGE: PgRange get() = PgRange.PG_RANGE

    /**
     * The table <code>pg_catalog.pg_replication_origin</code>.
     */
    val PG_REPLICATION_ORIGIN: PgReplicationOrigin get() = PgReplicationOrigin.PG_REPLICATION_ORIGIN

    /**
     * The table <code>pg_catalog.pg_replication_origin_status</code>.
     */
    val PG_REPLICATION_ORIGIN_STATUS: PgReplicationOriginStatus get() = PgReplicationOriginStatus.PG_REPLICATION_ORIGIN_STATUS

    /**
     * The table <code>pg_catalog.pg_replication_slots</code>.
     */
    val PG_REPLICATION_SLOTS: PgReplicationSlots get() = PgReplicationSlots.PG_REPLICATION_SLOTS

    /**
     * The table <code>pg_catalog.pg_rewrite</code>.
     */
    val PG_REWRITE: PgRewrite get() = PgRewrite.PG_REWRITE

    /**
     * The table <code>pg_catalog.pg_roles</code>.
     */
    val PG_ROLES: PgRoles get() = PgRoles.PG_ROLES

    /**
     * The table <code>pg_catalog.pg_rules</code>.
     */
    val PG_RULES: PgRules get() = PgRules.PG_RULES

    /**
     * The table <code>pg_catalog.pg_seclabel</code>.
     */
    val PG_SECLABEL: PgSeclabel get() = PgSeclabel.PG_SECLABEL

    /**
     * The table <code>pg_catalog.pg_seclabels</code>.
     */
    val PG_SECLABELS: PgSeclabels get() = PgSeclabels.PG_SECLABELS

    /**
     * The table <code>pg_catalog.pg_sequence</code>.
     */
    val PG_SEQUENCE: PgSequence get() = PgSequence.PG_SEQUENCE

    /**
     * The table <code>pg_catalog.pg_sequences</code>.
     */
    val PG_SEQUENCES: PgSequences get() = PgSequences.PG_SEQUENCES

    /**
     * The table <code>pg_catalog.pg_settings</code>.
     */
    val PG_SETTINGS: PgSettings get() = PgSettings.PG_SETTINGS

    /**
     * The table <code>pg_catalog.pg_shadow</code>.
     */
    val PG_SHADOW: PgShadow get() = PgShadow.PG_SHADOW

    /**
     * The table <code>pg_catalog.pg_shdepend</code>.
     */
    val PG_SHDEPEND: PgShdepend get() = PgShdepend.PG_SHDEPEND

    /**
     * The table <code>pg_catalog.pg_shdescription</code>.
     */
    val PG_SHDESCRIPTION: PgShdescription get() = PgShdescription.PG_SHDESCRIPTION

    /**
     * The table <code>pg_catalog.pg_shmem_allocations</code>.
     */
    val PG_SHMEM_ALLOCATIONS: PgShmemAllocations get() = PgShmemAllocations.PG_SHMEM_ALLOCATIONS

    /**
     * The table <code>pg_catalog.pg_show_all_file_settings</code>.
     */
    val PG_SHOW_ALL_FILE_SETTINGS: PgShowAllFileSettings get() = PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS

    /**
     * Call <code>pg_catalog.pg_show_all_file_settings</code>.
     */
    fun PG_SHOW_ALL_FILE_SETTINGS(
          configuration: Configuration
    ): Result<PgShowAllFileSettingsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_show_all_file_settings</code> as a table.
     */
    fun PG_SHOW_ALL_FILE_SETTINGS(): PgShowAllFileSettings = org.acme.generated.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
    )

    /**
     * The table <code>pg_catalog.pg_show_all_settings</code>.
     */
    val PG_SHOW_ALL_SETTINGS: PgShowAllSettings get() = PgShowAllSettings.PG_SHOW_ALL_SETTINGS

    /**
     * Call <code>pg_catalog.pg_show_all_settings</code>.
     */
    fun PG_SHOW_ALL_SETTINGS(
          configuration: Configuration
    ): Result<PgShowAllSettingsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_show_all_settings</code> as a table.
     */
    fun PG_SHOW_ALL_SETTINGS(): PgShowAllSettings = org.acme.generated.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
    )

    /**
     * The table <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    val PG_SHOW_REPLICATION_ORIGIN_STATUS: PgShowReplicationOriginStatus get() = PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS

    /**
     * Call <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    fun PG_SHOW_REPLICATION_ORIGIN_STATUS(
          configuration: Configuration
    ): Result<PgShowReplicationOriginStatusRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_show_replication_origin_status</code> as a table.
     */
    fun PG_SHOW_REPLICATION_ORIGIN_STATUS(): PgShowReplicationOriginStatus = org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
    )

    /**
     * The table <code>pg_catalog.pg_shseclabel</code>.
     */
    val PG_SHSECLABEL: PgShseclabel get() = PgShseclabel.PG_SHSECLABEL

    /**
     * The table <code>pg_catalog.pg_snapshot_xip</code>.
     */
    val PG_SNAPSHOT_XIP: PgSnapshotXip get() = PgSnapshotXip.PG_SNAPSHOT_XIP
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_SNAPSHOT_XIP(
          configuration: Configuration
        , __1: Any?
    ): Result<PgSnapshotXipRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
          __1
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_SNAPSHOT_XIP(
          __1: Any?
    ): PgSnapshotXip = org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
        __1
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun PG_SNAPSHOT_XIP(
          __1: Field<Any?>
    ): PgSnapshotXip = org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
        __1
    )

    /**
     * The table <code>pg_catalog.pg_stat_activity</code>.
     */
    val PG_STAT_ACTIVITY: PgStatActivity get() = PgStatActivity.PG_STAT_ACTIVITY

    /**
     * The table <code>pg_catalog.pg_stat_all_indexes</code>.
     */
    val PG_STAT_ALL_INDEXES: PgStatAllIndexes get() = PgStatAllIndexes.PG_STAT_ALL_INDEXES

    /**
     * The table <code>pg_catalog.pg_stat_all_tables</code>.
     */
    val PG_STAT_ALL_TABLES: PgStatAllTables get() = PgStatAllTables.PG_STAT_ALL_TABLES

    /**
     * The table <code>pg_catalog.pg_stat_archiver</code>.
     */
    val PG_STAT_ARCHIVER: PgStatArchiver get() = PgStatArchiver.PG_STAT_ARCHIVER

    /**
     * The table <code>pg_catalog.pg_stat_bgwriter</code>.
     */
    val PG_STAT_BGWRITER: PgStatBgwriter get() = PgStatBgwriter.PG_STAT_BGWRITER

    /**
     * The table <code>pg_catalog.pg_stat_database</code>.
     */
    val PG_STAT_DATABASE: PgStatDatabase get() = PgStatDatabase.PG_STAT_DATABASE

    /**
     * The table <code>pg_catalog.pg_stat_database_conflicts</code>.
     */
    val PG_STAT_DATABASE_CONFLICTS: PgStatDatabaseConflicts get() = PgStatDatabaseConflicts.PG_STAT_DATABASE_CONFLICTS

    /**
     * The table <code>pg_catalog.pg_stat_get_activity</code>.
     */
    val PG_STAT_GET_ACTIVITY: PgStatGetActivity get() = PgStatGetActivity.PG_STAT_GET_ACTIVITY

    /**
     * Call <code>pg_catalog.pg_stat_get_activity</code>.
     */
    fun PG_STAT_GET_ACTIVITY(
          configuration: Configuration
        , pid: Int?
    ): Result<PgStatGetActivityRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
          pid
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    fun PG_STAT_GET_ACTIVITY(
          pid: Int?
    ): PgStatGetActivity = org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
        pid
    )

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    fun PG_STAT_GET_ACTIVITY(
          pid: Field<Int?>
    ): PgStatGetActivity = org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
        pid
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    val PG_STAT_GET_BACKEND_IDSET: PgStatGetBackendIdset get() = PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET

    /**
     * Call <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    fun PG_STAT_GET_BACKEND_IDSET(
          configuration: Configuration
    ): Result<PgStatGetBackendIdsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_backend_idset</code> as a table.
     */
    fun PG_STAT_GET_BACKEND_IDSET(): PgStatGetBackendIdset = org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    val PG_STAT_GET_PROGRESS_INFO: PgStatGetProgressInfo get() = PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO

    /**
     * Call <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    fun PG_STAT_GET_PROGRESS_INFO(
          configuration: Configuration
        , cmdtype: String?
    ): Result<PgStatGetProgressInfoRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
          cmdtype
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    fun PG_STAT_GET_PROGRESS_INFO(
          cmdtype: String?
    ): PgStatGetProgressInfo = org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
        cmdtype
    )

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    fun PG_STAT_GET_PROGRESS_INFO(
          cmdtype: Field<String?>
    ): PgStatGetProgressInfo = org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
        cmdtype
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_replication_slot</code>.
     */
    val PG_STAT_GET_REPLICATION_SLOT: PgStatGetReplicationSlot get() = PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT

    /**
     * Call <code>pg_catalog.pg_stat_get_replication_slot</code>.
     */
    fun PG_STAT_GET_REPLICATION_SLOT(
          configuration: Configuration
        , slotName: String?
    ): Result<PgStatGetReplicationSlotRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
          slotName
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_replication_slot</code> as a table.
     */
    fun PG_STAT_GET_REPLICATION_SLOT(
          slotName: String?
    ): PgStatGetReplicationSlot = org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
        slotName
    )

    /**
     * Get <code>pg_catalog.pg_stat_get_replication_slot</code> as a table.
     */
    fun PG_STAT_GET_REPLICATION_SLOT(
          slotName: Field<String?>
    ): PgStatGetReplicationSlot = org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
        slotName
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_slru</code>.
     */
    val PG_STAT_GET_SLRU: PgStatGetSlru get() = PgStatGetSlru.PG_STAT_GET_SLRU

    /**
     * Call <code>pg_catalog.pg_stat_get_slru</code>.
     */
    fun PG_STAT_GET_SLRU(
          configuration: Configuration
    ): Result<PgStatGetSlruRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_slru</code> as a table.
     */
    fun PG_STAT_GET_SLRU(): PgStatGetSlru = org.acme.generated.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_subscription</code>.
     */
    val PG_STAT_GET_SUBSCRIPTION: PgStatGetSubscription get() = PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION

    /**
     * Call <code>pg_catalog.pg_stat_get_subscription</code>.
     */
    fun PG_STAT_GET_SUBSCRIPTION(
          configuration: Configuration
        , subid: Long?
    ): Result<PgStatGetSubscriptionRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
          subid
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
     */
    fun PG_STAT_GET_SUBSCRIPTION(
          subid: Long?
    ): PgStatGetSubscription = org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
        subid
    )

    /**
     * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
     */
    fun PG_STAT_GET_SUBSCRIPTION(
          subid: Field<Long?>
    ): PgStatGetSubscription = org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
        subid
    )

    /**
     * The table <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    val PG_STAT_GET_WAL_SENDERS: PgStatGetWalSenders get() = PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS

    /**
     * Call <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    fun PG_STAT_GET_WAL_SENDERS(
          configuration: Configuration
    ): Result<PgStatGetWalSendersRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stat_get_wal_senders</code> as a table.
     */
    fun PG_STAT_GET_WAL_SENDERS(): PgStatGetWalSenders = org.acme.generated.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
    )

    /**
     * The table <code>pg_catalog.pg_stat_gssapi</code>.
     */
    val PG_STAT_GSSAPI: PgStatGssapi get() = PgStatGssapi.PG_STAT_GSSAPI

    /**
     * The table <code>pg_catalog.pg_stat_progress_analyze</code>.
     */
    val PG_STAT_PROGRESS_ANALYZE: PgStatProgressAnalyze get() = PgStatProgressAnalyze.PG_STAT_PROGRESS_ANALYZE

    /**
     * The table <code>pg_catalog.pg_stat_progress_basebackup</code>.
     */
    val PG_STAT_PROGRESS_BASEBACKUP: PgStatProgressBasebackup get() = PgStatProgressBasebackup.PG_STAT_PROGRESS_BASEBACKUP

    /**
     * The table <code>pg_catalog.pg_stat_progress_cluster</code>.
     */
    val PG_STAT_PROGRESS_CLUSTER: PgStatProgressCluster get() = PgStatProgressCluster.PG_STAT_PROGRESS_CLUSTER

    /**
     * The table <code>pg_catalog.pg_stat_progress_copy</code>.
     */
    val PG_STAT_PROGRESS_COPY: PgStatProgressCopy get() = PgStatProgressCopy.PG_STAT_PROGRESS_COPY

    /**
     * The table <code>pg_catalog.pg_stat_progress_create_index</code>.
     */
    val PG_STAT_PROGRESS_CREATE_INDEX: PgStatProgressCreateIndex get() = PgStatProgressCreateIndex.PG_STAT_PROGRESS_CREATE_INDEX

    /**
     * The table <code>pg_catalog.pg_stat_progress_vacuum</code>.
     */
    val PG_STAT_PROGRESS_VACUUM: PgStatProgressVacuum get() = PgStatProgressVacuum.PG_STAT_PROGRESS_VACUUM

    /**
     * The table <code>pg_catalog.pg_stat_replication</code>.
     */
    val PG_STAT_REPLICATION: PgStatReplication get() = PgStatReplication.PG_STAT_REPLICATION

    /**
     * The table <code>pg_catalog.pg_stat_replication_slots</code>.
     */
    val PG_STAT_REPLICATION_SLOTS: PgStatReplicationSlots get() = PgStatReplicationSlots.PG_STAT_REPLICATION_SLOTS

    /**
     * The table <code>pg_catalog.pg_stat_slru</code>.
     */
    val PG_STAT_SLRU: PgStatSlru get() = PgStatSlru.PG_STAT_SLRU

    /**
     * The table <code>pg_catalog.pg_stat_ssl</code>.
     */
    val PG_STAT_SSL: PgStatSsl get() = PgStatSsl.PG_STAT_SSL

    /**
     * The table <code>pg_catalog.pg_stat_subscription</code>.
     */
    val PG_STAT_SUBSCRIPTION: PgStatSubscription get() = PgStatSubscription.PG_STAT_SUBSCRIPTION

    /**
     * The table <code>pg_catalog.pg_stat_sys_indexes</code>.
     */
    val PG_STAT_SYS_INDEXES: PgStatSysIndexes get() = PgStatSysIndexes.PG_STAT_SYS_INDEXES

    /**
     * The table <code>pg_catalog.pg_stat_sys_tables</code>.
     */
    val PG_STAT_SYS_TABLES: PgStatSysTables get() = PgStatSysTables.PG_STAT_SYS_TABLES

    /**
     * The table <code>pg_catalog.pg_stat_user_functions</code>.
     */
    val PG_STAT_USER_FUNCTIONS: PgStatUserFunctions get() = PgStatUserFunctions.PG_STAT_USER_FUNCTIONS

    /**
     * The table <code>pg_catalog.pg_stat_user_indexes</code>.
     */
    val PG_STAT_USER_INDEXES: PgStatUserIndexes get() = PgStatUserIndexes.PG_STAT_USER_INDEXES

    /**
     * The table <code>pg_catalog.pg_stat_user_tables</code>.
     */
    val PG_STAT_USER_TABLES: PgStatUserTables get() = PgStatUserTables.PG_STAT_USER_TABLES

    /**
     * The table <code>pg_catalog.pg_stat_wal</code>.
     */
    val PG_STAT_WAL: PgStatWal get() = PgStatWal.PG_STAT_WAL

    /**
     * The table <code>pg_catalog.pg_stat_wal_receiver</code>.
     */
    val PG_STAT_WAL_RECEIVER: PgStatWalReceiver get() = PgStatWalReceiver.PG_STAT_WAL_RECEIVER

    /**
     * The table <code>pg_catalog.pg_stat_xact_all_tables</code>.
     */
    val PG_STAT_XACT_ALL_TABLES: PgStatXactAllTables get() = PgStatXactAllTables.PG_STAT_XACT_ALL_TABLES

    /**
     * The table <code>pg_catalog.pg_stat_xact_sys_tables</code>.
     */
    val PG_STAT_XACT_SYS_TABLES: PgStatXactSysTables get() = PgStatXactSysTables.PG_STAT_XACT_SYS_TABLES

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_functions</code>.
     */
    val PG_STAT_XACT_USER_FUNCTIONS: PgStatXactUserFunctions get() = PgStatXactUserFunctions.PG_STAT_XACT_USER_FUNCTIONS

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_tables</code>.
     */
    val PG_STAT_XACT_USER_TABLES: PgStatXactUserTables get() = PgStatXactUserTables.PG_STAT_XACT_USER_TABLES

    /**
     * The table <code>pg_catalog.pg_statio_all_indexes</code>.
     */
    val PG_STATIO_ALL_INDEXES: PgStatioAllIndexes get() = PgStatioAllIndexes.PG_STATIO_ALL_INDEXES

    /**
     * The table <code>pg_catalog.pg_statio_all_sequences</code>.
     */
    val PG_STATIO_ALL_SEQUENCES: PgStatioAllSequences get() = PgStatioAllSequences.PG_STATIO_ALL_SEQUENCES

    /**
     * The table <code>pg_catalog.pg_statio_all_tables</code>.
     */
    val PG_STATIO_ALL_TABLES: PgStatioAllTables get() = PgStatioAllTables.PG_STATIO_ALL_TABLES

    /**
     * The table <code>pg_catalog.pg_statio_sys_indexes</code>.
     */
    val PG_STATIO_SYS_INDEXES: PgStatioSysIndexes get() = PgStatioSysIndexes.PG_STATIO_SYS_INDEXES

    /**
     * The table <code>pg_catalog.pg_statio_sys_sequences</code>.
     */
    val PG_STATIO_SYS_SEQUENCES: PgStatioSysSequences get() = PgStatioSysSequences.PG_STATIO_SYS_SEQUENCES

    /**
     * The table <code>pg_catalog.pg_statio_sys_tables</code>.
     */
    val PG_STATIO_SYS_TABLES: PgStatioSysTables get() = PgStatioSysTables.PG_STATIO_SYS_TABLES

    /**
     * The table <code>pg_catalog.pg_statio_user_indexes</code>.
     */
    val PG_STATIO_USER_INDEXES: PgStatioUserIndexes get() = PgStatioUserIndexes.PG_STATIO_USER_INDEXES

    /**
     * The table <code>pg_catalog.pg_statio_user_sequences</code>.
     */
    val PG_STATIO_USER_SEQUENCES: PgStatioUserSequences get() = PgStatioUserSequences.PG_STATIO_USER_SEQUENCES

    /**
     * The table <code>pg_catalog.pg_statio_user_tables</code>.
     */
    val PG_STATIO_USER_TABLES: PgStatioUserTables get() = PgStatioUserTables.PG_STATIO_USER_TABLES

    /**
     * The table <code>pg_catalog.pg_statistic</code>.
     */
    val PG_STATISTIC: PgStatistic get() = PgStatistic.PG_STATISTIC

    /**
     * The table <code>pg_catalog.pg_statistic_ext</code>.
     */
    val PG_STATISTIC_EXT: PgStatisticExt get() = PgStatisticExt.PG_STATISTIC_EXT

    /**
     * The table <code>pg_catalog.pg_statistic_ext_data</code>.
     */
    val PG_STATISTIC_EXT_DATA: PgStatisticExtData get() = PgStatisticExtData.PG_STATISTIC_EXT_DATA

    /**
     * The table <code>pg_catalog.pg_stats</code>.
     */
    val PG_STATS: PgStats get() = PgStats.PG_STATS

    /**
     * The table <code>pg_catalog.pg_stats_ext</code>.
     */
    val PG_STATS_EXT: PgStatsExt get() = PgStatsExt.PG_STATS_EXT

    /**
     * The table <code>pg_catalog.pg_stats_ext_exprs</code>.
     */
    val PG_STATS_EXT_EXPRS: PgStatsExtExprs get() = PgStatsExtExprs.PG_STATS_EXT_EXPRS

    /**
     * The table <code>pg_catalog.pg_stop_backup</code>.
     */
    val PG_STOP_BACKUP: PgStopBackup get() = PgStopBackup.PG_STOP_BACKUP

    /**
     * Call <code>pg_catalog.pg_stop_backup</code>.
     */
    fun PG_STOP_BACKUP(
          configuration: Configuration
        , exclusive: Boolean?
        , waitForArchive: Boolean?
    ): Result<PgStopBackupRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
          exclusive
        , waitForArchive
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_stop_backup</code> as a table.
     */
    fun PG_STOP_BACKUP(
          exclusive: Boolean?
        , waitForArchive: Boolean?
    ): PgStopBackup = org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
        exclusive,
        waitForArchive
    )

    /**
     * Get <code>pg_catalog.pg_stop_backup</code> as a table.
     */
    fun PG_STOP_BACKUP(
          exclusive: Field<Boolean?>
        , waitForArchive: Field<Boolean?>
    ): PgStopBackup = org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
        exclusive,
        waitForArchive
    )

    /**
     * The table <code>pg_catalog.pg_subscription</code>.
     */
    val PG_SUBSCRIPTION: PgSubscription get() = PgSubscription.PG_SUBSCRIPTION

    /**
     * The table <code>pg_catalog.pg_subscription_rel</code>.
     */
    val PG_SUBSCRIPTION_REL: PgSubscriptionRel get() = PgSubscriptionRel.PG_SUBSCRIPTION_REL

    /**
     * The table <code>pg_catalog.pg_tables</code>.
     */
    val PG_TABLES: PgTables get() = PgTables.PG_TABLES

    /**
     * The table <code>pg_catalog.pg_tablespace</code>.
     */
    val PG_TABLESPACE: PgTablespace get() = PgTablespace.PG_TABLESPACE

    /**
     * The table <code>pg_catalog.pg_tablespace_databases</code>.
     */
    val PG_TABLESPACE_DATABASES: PgTablespaceDatabases get() = PgTablespaceDatabases.PG_TABLESPACE_DATABASES

    /**
     * Call <code>pg_catalog.pg_tablespace_databases</code>.
     */
    fun PG_TABLESPACE_DATABASES(
          configuration: Configuration
        , __1: Long?
    ): Result<PgTablespaceDatabasesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
          __1
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    fun PG_TABLESPACE_DATABASES(
          __1: Long?
    ): PgTablespaceDatabases = org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
        __1
    )

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    fun PG_TABLESPACE_DATABASES(
          __1: Field<Long?>
    ): PgTablespaceDatabases = org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
        __1
    )

    /**
     * The table <code>pg_catalog.pg_timezone_abbrevs</code>.
     */
    val PG_TIMEZONE_ABBREVS: PgTimezoneAbbrevs get() = PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS

    /**
     * Call <code>pg_catalog.pg_timezone_abbrevs</code>.
     */
    fun PG_TIMEZONE_ABBREVS(
          configuration: Configuration
    ): Result<PgTimezoneAbbrevsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
    )).fetch()

    /**
     * Get <code>pg_catalog.pg_timezone_abbrevs</code> as a table.
     */
    fun PG_TIMEZONE_ABBREVS(): PgTimezoneAbbrevs = org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
    )

    /**
     * The table <code>pg_catalog.pg_timezone_names</code>.
     */
    val PG_TIMEZONE_NAMES: PgTimezoneNames get() = PgTimezoneNames.PG_TIMEZONE_NAMES

    /**
     * The table <code>pg_catalog.pg_transform</code>.
     */
    val PG_TRANSFORM: PgTransform get() = PgTransform.PG_TRANSFORM

    /**
     * The table <code>pg_catalog.pg_trigger</code>.
     */
    val PG_TRIGGER: PgTrigger get() = PgTrigger.PG_TRIGGER

    /**
     * The table <code>pg_catalog.pg_ts_config</code>.
     */
    val PG_TS_CONFIG: PgTsConfig get() = PgTsConfig.PG_TS_CONFIG

    /**
     * The table <code>pg_catalog.pg_ts_config_map</code>.
     */
    val PG_TS_CONFIG_MAP: PgTsConfigMap get() = PgTsConfigMap.PG_TS_CONFIG_MAP

    /**
     * The table <code>pg_catalog.pg_ts_dict</code>.
     */
    val PG_TS_DICT: PgTsDict get() = PgTsDict.PG_TS_DICT

    /**
     * The table <code>pg_catalog.pg_ts_parser</code>.
     */
    val PG_TS_PARSER: PgTsParser get() = PgTsParser.PG_TS_PARSER

    /**
     * The table <code>pg_catalog.pg_ts_template</code>.
     */
    val PG_TS_TEMPLATE: PgTsTemplate get() = PgTsTemplate.PG_TS_TEMPLATE

    /**
     * The table <code>pg_catalog.pg_type</code>.
     */
    val PG_TYPE: PgType get() = PgType.PG_TYPE

    /**
     * The table <code>pg_catalog.pg_user</code>.
     */
    val PG_USER: PgUser get() = PgUser.PG_USER

    /**
     * The table <code>pg_catalog.pg_user_mapping</code>.
     */
    val PG_USER_MAPPING: PgUserMapping get() = PgUserMapping.PG_USER_MAPPING

    /**
     * The table <code>pg_catalog.pg_user_mappings</code>.
     */
    val PG_USER_MAPPINGS: PgUserMappings get() = PgUserMappings.PG_USER_MAPPINGS

    /**
     * The table <code>pg_catalog.pg_views</code>.
     */
    val PG_VIEWS: PgViews get() = PgViews.PG_VIEWS

    /**
     * The table <code>pg_catalog.regexp_matches</code>.
     */
    val REGEXP_MATCHES: RegexpMatches get() = RegexpMatches.REGEXP_MATCHES

    /**
     * Call <code>pg_catalog.regexp_matches</code>.
     */
    fun REGEXP_MATCHES(
          configuration: Configuration
        , __1: String?
        , __2: String?
    ): Result<RegexpMatchesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
          __1
        , __2
    )).fetch()

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    fun REGEXP_MATCHES(
          __1: String?
        , __2: String?
    ): RegexpMatches = org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
        __1,
        __2
    )

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    fun REGEXP_MATCHES(
          __1: Field<String?>
        , __2: Field<String?>
    ): RegexpMatches = org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
        __1,
        __2
    )

    /**
     * The table <code>pg_catalog.regexp_split_to_table</code>.
     */
    val REGEXP_SPLIT_TO_TABLE: RegexpSplitToTable get() = RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE

    /**
     * Call <code>pg_catalog.regexp_split_to_table</code>.
     */
    fun REGEXP_SPLIT_TO_TABLE(
          configuration: Configuration
        , __1: String?
        , __2: String?
    ): Result<RegexpSplitToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
          __1
        , __2
    )).fetch()

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    fun REGEXP_SPLIT_TO_TABLE(
          __1: String?
        , __2: String?
    ): RegexpSplitToTable = org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
        __1,
        __2
    )

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    fun REGEXP_SPLIT_TO_TABLE(
          __1: Field<String?>
        , __2: Field<String?>
    ): RegexpSplitToTable = org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
        __1,
        __2
    )

    /**
     * The table <code>pg_catalog.string_to_table</code>.
     */
    val STRING_TO_TABLE: StringToTable get() = StringToTable.STRING_TO_TABLE

    /**
     * Call <code>pg_catalog.string_to_table</code>.
     */
    fun STRING_TO_TABLE(
          configuration: Configuration
        , __1: String?
        , __2: String?
    ): Result<StringToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
          __1
        , __2
    )).fetch()

    /**
     * Get <code>pg_catalog.string_to_table</code> as a table.
     */
    fun STRING_TO_TABLE(
          __1: String?
        , __2: String?
    ): StringToTable = org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
        __1,
        __2
    )

    /**
     * Get <code>pg_catalog.string_to_table</code> as a table.
     */
    fun STRING_TO_TABLE(
          __1: Field<String?>
        , __2: Field<String?>
    ): StringToTable = org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
        __1,
        __2
    )

    /**
     * The table <code>pg_catalog.ts_debug</code>.
     */
    val TS_DEBUG: TsDebug get() = TsDebug.TS_DEBUG
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TS_DEBUG(
          configuration: Configuration
        , config: Any?
        , document: String?
    ): Result<TsDebugRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
          config
        , document
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TS_DEBUG(
          config: Any?
        , document: String?
    ): TsDebug = org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
        config,
        document
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TS_DEBUG(
          config: Field<Any?>
        , document: Field<String?>
    ): TsDebug = org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
        config,
        document
    )

    /**
     * The table <code>pg_catalog.ts_parse</code>.
     */
    val TS_PARSE: TsParse get() = TsParse.TS_PARSE

    /**
     * Call <code>pg_catalog.ts_parse</code>.
     */
    fun TS_PARSE(
          configuration: Configuration
        , parserOid: Long?
        , txt: String?
    ): Result<TsParseRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
          parserOid
        , txt
    )).fetch()

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    fun TS_PARSE(
          parserOid: Long?
        , txt: String?
    ): TsParse = org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
        parserOid,
        txt
    )

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    fun TS_PARSE(
          parserOid: Field<Long?>
        , txt: Field<String?>
    ): TsParse = org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
        parserOid,
        txt
    )

    /**
     * The table <code>pg_catalog.ts_stat</code>.
     */
    val TS_STAT: TsStat get() = TsStat.TS_STAT

    /**
     * Call <code>pg_catalog.ts_stat</code>.
     */
    fun TS_STAT(
          configuration: Configuration
        , query: String?
    ): Result<TsStatRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
          query
    )).fetch()

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    fun TS_STAT(
          query: String?
    ): TsStat = org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
        query
    )

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    fun TS_STAT(
          query: Field<String?>
    ): TsStat = org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
        query
    )

    /**
     * The table <code>pg_catalog.ts_token_type</code>.
     */
    val TS_TOKEN_TYPE: TsTokenType get() = TsTokenType.TS_TOKEN_TYPE

    /**
     * Call <code>pg_catalog.ts_token_type</code>.
     */
    fun TS_TOKEN_TYPE(
          configuration: Configuration
        , parserOid: Long?
    ): Result<TsTokenTypeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
          parserOid
    )).fetch()

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    fun TS_TOKEN_TYPE(
          parserOid: Long?
    ): TsTokenType = org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
        parserOid
    )

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    fun TS_TOKEN_TYPE(
          parserOid: Field<Long?>
    ): TsTokenType = org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
        parserOid
    )

    /**
     * The table <code>pg_catalog.txid_snapshot_xip</code>.
     */
    val TXID_SNAPSHOT_XIP: TxidSnapshotXip get() = TxidSnapshotXip.TXID_SNAPSHOT_XIP
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TXID_SNAPSHOT_XIP(
          configuration: Configuration
        , __1: Any?
    ): Result<TxidSnapshotXipRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
          __1
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TXID_SNAPSHOT_XIP(
          __1: Any?
    ): TxidSnapshotXip = org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
        __1
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun TXID_SNAPSHOT_XIP(
          __1: Field<Any?>
    ): TxidSnapshotXip = org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
        __1
    )

    /**
     * The table <code>pg_catalog.unnest</code>.
     */
    val UNNEST: Unnest get() = Unnest.UNNEST
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun UNNEST(
          configuration: Configuration
        , __1: Any?
    ): Result<UnnestRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
          __1
    )).fetch()
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun UNNEST(
          __1: Any?
    ): Unnest = org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
        __1
    )
    @Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun UNNEST(
          __1: Field<Any?>
    ): Unnest = org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
        __1
    )

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Aclexplode.ACLEXPLODE,
        GenerateSeries.GENERATE_SERIES,
        GenerateSubscripts.GENERATE_SUBSCRIPTS,
        JsonArrayElements.JSON_ARRAY_ELEMENTS,
        JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT,
        JsonEach.JSON_EACH,
        JsonEachText.JSON_EACH_TEXT,
        JsonObjectKeys.JSON_OBJECT_KEYS,
        JsonPopulateRecordset.JSON_POPULATE_RECORDSET,
        JsonToRecordset.JSON_TO_RECORDSET,
        JsonbArrayElements.JSONB_ARRAY_ELEMENTS,
        JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT,
        JsonbEach.JSONB_EACH,
        JsonbEachText.JSONB_EACH_TEXT,
        JsonbObjectKeys.JSONB_OBJECT_KEYS,
        JsonbPathQuery.JSONB_PATH_QUERY,
        JsonbPathQueryTz.JSONB_PATH_QUERY_TZ,
        JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET,
        JsonbToRecordset.JSONB_TO_RECORDSET,
        PgAggregate.PG_AGGREGATE,
        PgAm.PG_AM,
        PgAmop.PG_AMOP,
        PgAmproc.PG_AMPROC,
        PgAttrdef.PG_ATTRDEF,
        PgAttribute.PG_ATTRIBUTE,
        PgAuthMembers.PG_AUTH_MEMBERS,
        PgAuthid.PG_AUTHID,
        PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS,
        PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS,
        PgBackendMemoryContexts.PG_BACKEND_MEMORY_CONTEXTS,
        PgCast.PG_CAST,
        PgClass.PG_CLASS,
        PgCollation.PG_COLLATION,
        PgConfig.PG_CONFIG,
        PgConstraint.PG_CONSTRAINT,
        PgConversion.PG_CONVERSION,
        PgCursor.PG_CURSOR,
        PgCursors.PG_CURSORS,
        PgDatabase.PG_DATABASE,
        PgDbRoleSetting.PG_DB_ROLE_SETTING,
        PgDefaultAcl.PG_DEFAULT_ACL,
        PgDepend.PG_DEPEND,
        PgDescription.PG_DESCRIPTION,
        PgEnum.PG_ENUM,
        PgEventTrigger.PG_EVENT_TRIGGER,
        PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS,
        PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS,
        PgExtension.PG_EXTENSION,
        PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS,
        PgFileSettings.PG_FILE_SETTINGS,
        PgForeignDataWrapper.PG_FOREIGN_DATA_WRAPPER,
        PgForeignServer.PG_FOREIGN_SERVER,
        PgForeignTable.PG_FOREIGN_TABLE,
        PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS,
        PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS,
        PgGetKeywords.PG_GET_KEYWORDS,
        PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS,
        PgGetPublicationTables.PG_GET_PUBLICATION_TABLES,
        PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS,
        PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS,
        PgGroup.PG_GROUP,
        PgHbaFileRules.PG_HBA_FILE_RULES,
        PgIndex.PG_INDEX,
        PgIndexes.PG_INDEXES,
        PgInherits.PG_INHERITS,
        PgInitPrivs.PG_INIT_PRIVS,
        PgLanguage.PG_LANGUAGE,
        PgLargeobject.PG_LARGEOBJECT,
        PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA,
        PgListeningChannels.PG_LISTENING_CHANNELS,
        PgLockStatus.PG_LOCK_STATUS,
        PgLocks.PG_LOCKS,
        PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES,
        PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES,
        PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES,
        PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES,
        PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR,
        PgLsDir.PG_LS_DIR,
        PgLsLogdir.PG_LS_LOGDIR,
        PgLsTmpdir.PG_LS_TMPDIR,
        PgLsWaldir.PG_LS_WALDIR,
        PgMatviews.PG_MATVIEWS,
        PgMcvListItems.PG_MCV_LIST_ITEMS,
        PgNamespace.PG_NAMESPACE,
        PgOpclass.PG_OPCLASS,
        PgOperator.PG_OPERATOR,
        PgOpfamily.PG_OPFAMILY,
        PgOptionsToTable.PG_OPTIONS_TO_TABLE,
        PgPartitionAncestors.PG_PARTITION_ANCESTORS,
        PgPartitionTree.PG_PARTITION_TREE,
        PgPartitionedTable.PG_PARTITIONED_TABLE,
        PgPolicies.PG_POLICIES,
        PgPolicy.PG_POLICY,
        PgPreparedStatement.PG_PREPARED_STATEMENT,
        PgPreparedStatements.PG_PREPARED_STATEMENTS,
        PgPreparedXact.PG_PREPARED_XACT,
        PgPreparedXacts.PG_PREPARED_XACTS,
        PgProc.PG_PROC,
        PgPublication.PG_PUBLICATION,
        PgPublicationRel.PG_PUBLICATION_REL,
        PgPublicationTables.PG_PUBLICATION_TABLES,
        PgRange.PG_RANGE,
        PgReplicationOrigin.PG_REPLICATION_ORIGIN,
        PgReplicationOriginStatus.PG_REPLICATION_ORIGIN_STATUS,
        PgReplicationSlots.PG_REPLICATION_SLOTS,
        PgRewrite.PG_REWRITE,
        PgRoles.PG_ROLES,
        PgRules.PG_RULES,
        PgSeclabel.PG_SECLABEL,
        PgSeclabels.PG_SECLABELS,
        PgSequence.PG_SEQUENCE,
        PgSequences.PG_SEQUENCES,
        PgSettings.PG_SETTINGS,
        PgShadow.PG_SHADOW,
        PgShdepend.PG_SHDEPEND,
        PgShdescription.PG_SHDESCRIPTION,
        PgShmemAllocations.PG_SHMEM_ALLOCATIONS,
        PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS,
        PgShowAllSettings.PG_SHOW_ALL_SETTINGS,
        PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS,
        PgShseclabel.PG_SHSECLABEL,
        PgSnapshotXip.PG_SNAPSHOT_XIP,
        PgStatActivity.PG_STAT_ACTIVITY,
        PgStatAllIndexes.PG_STAT_ALL_INDEXES,
        PgStatAllTables.PG_STAT_ALL_TABLES,
        PgStatArchiver.PG_STAT_ARCHIVER,
        PgStatBgwriter.PG_STAT_BGWRITER,
        PgStatDatabase.PG_STAT_DATABASE,
        PgStatDatabaseConflicts.PG_STAT_DATABASE_CONFLICTS,
        PgStatGetActivity.PG_STAT_GET_ACTIVITY,
        PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET,
        PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO,
        PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT,
        PgStatGetSlru.PG_STAT_GET_SLRU,
        PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION,
        PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS,
        PgStatGssapi.PG_STAT_GSSAPI,
        PgStatProgressAnalyze.PG_STAT_PROGRESS_ANALYZE,
        PgStatProgressBasebackup.PG_STAT_PROGRESS_BASEBACKUP,
        PgStatProgressCluster.PG_STAT_PROGRESS_CLUSTER,
        PgStatProgressCopy.PG_STAT_PROGRESS_COPY,
        PgStatProgressCreateIndex.PG_STAT_PROGRESS_CREATE_INDEX,
        PgStatProgressVacuum.PG_STAT_PROGRESS_VACUUM,
        PgStatReplication.PG_STAT_REPLICATION,
        PgStatReplicationSlots.PG_STAT_REPLICATION_SLOTS,
        PgStatSlru.PG_STAT_SLRU,
        PgStatSsl.PG_STAT_SSL,
        PgStatSubscription.PG_STAT_SUBSCRIPTION,
        PgStatSysIndexes.PG_STAT_SYS_INDEXES,
        PgStatSysTables.PG_STAT_SYS_TABLES,
        PgStatUserFunctions.PG_STAT_USER_FUNCTIONS,
        PgStatUserIndexes.PG_STAT_USER_INDEXES,
        PgStatUserTables.PG_STAT_USER_TABLES,
        PgStatWal.PG_STAT_WAL,
        PgStatWalReceiver.PG_STAT_WAL_RECEIVER,
        PgStatXactAllTables.PG_STAT_XACT_ALL_TABLES,
        PgStatXactSysTables.PG_STAT_XACT_SYS_TABLES,
        PgStatXactUserFunctions.PG_STAT_XACT_USER_FUNCTIONS,
        PgStatXactUserTables.PG_STAT_XACT_USER_TABLES,
        PgStatioAllIndexes.PG_STATIO_ALL_INDEXES,
        PgStatioAllSequences.PG_STATIO_ALL_SEQUENCES,
        PgStatioAllTables.PG_STATIO_ALL_TABLES,
        PgStatioSysIndexes.PG_STATIO_SYS_INDEXES,
        PgStatioSysSequences.PG_STATIO_SYS_SEQUENCES,
        PgStatioSysTables.PG_STATIO_SYS_TABLES,
        PgStatioUserIndexes.PG_STATIO_USER_INDEXES,
        PgStatioUserSequences.PG_STATIO_USER_SEQUENCES,
        PgStatioUserTables.PG_STATIO_USER_TABLES,
        PgStatistic.PG_STATISTIC,
        PgStatisticExt.PG_STATISTIC_EXT,
        PgStatisticExtData.PG_STATISTIC_EXT_DATA,
        PgStats.PG_STATS,
        PgStatsExt.PG_STATS_EXT,
        PgStatsExtExprs.PG_STATS_EXT_EXPRS,
        PgStopBackup.PG_STOP_BACKUP,
        PgSubscription.PG_SUBSCRIPTION,
        PgSubscriptionRel.PG_SUBSCRIPTION_REL,
        PgTables.PG_TABLES,
        PgTablespace.PG_TABLESPACE,
        PgTablespaceDatabases.PG_TABLESPACE_DATABASES,
        PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS,
        PgTimezoneNames.PG_TIMEZONE_NAMES,
        PgTransform.PG_TRANSFORM,
        PgTrigger.PG_TRIGGER,
        PgTsConfig.PG_TS_CONFIG,
        PgTsConfigMap.PG_TS_CONFIG_MAP,
        PgTsDict.PG_TS_DICT,
        PgTsParser.PG_TS_PARSER,
        PgTsTemplate.PG_TS_TEMPLATE,
        PgType.PG_TYPE,
        PgUser.PG_USER,
        PgUserMapping.PG_USER_MAPPING,
        PgUserMappings.PG_USER_MAPPINGS,
        PgViews.PG_VIEWS,
        RegexpMatches.REGEXP_MATCHES,
        RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE,
        StringToTable.STRING_TO_TABLE,
        TsDebug.TS_DEBUG,
        TsParse.TS_PARSE,
        TsStat.TS_STAT,
        TsTokenType.TS_TOKEN_TYPE,
        TxidSnapshotXip.TXID_SNAPSHOT_XIP,
        Unnest.UNNEST
    )
}
