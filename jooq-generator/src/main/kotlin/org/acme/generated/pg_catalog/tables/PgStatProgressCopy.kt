/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatProgressCopyRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressCopy(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatProgressCopyRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatProgressCopyRecord>?,
    aliased: Table<PgStatProgressCopyRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatProgressCopyRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_progress_copy" as  SELECT s.pid,
     s.datid,
     d.datname,
     s.relid,
         CASE s.param5
             WHEN 1 THEN 'COPY FROM'::text
             WHEN 2 THEN 'COPY TO'::text
             ELSE NULL::text
         END AS command,
         CASE s.param6
             WHEN 1 THEN 'FILE'::text
             WHEN 2 THEN 'PROGRAM'::text
             WHEN 3 THEN 'PIPE'::text
             WHEN 4 THEN 'CALLBACK'::text
             ELSE NULL::text
         END AS type,
     s.param1 AS bytes_processed,
     s.param2 AS bytes_total,
     s.param3 AS tuples_processed,
     s.param4 AS tuples_excluded
    FROM (pg_stat_get_progress_info('COPY'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)
      LEFT JOIN pg_database d ON ((s.datid = d.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_copy</code>
         */
        val PG_STAT_PROGRESS_COPY: PgStatProgressCopy = PgStatProgressCopy()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatProgressCopyRecord> = PgStatProgressCopyRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.pid</code>.
     */
    val PID: TableField<PgStatProgressCopyRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.datid</code>.
     */
    val DATID: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.datname</code>.
     */
    val DATNAME: TableField<PgStatProgressCopyRecord, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.relid</code>.
     */
    val RELID: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.command</code>.
     */
    val COMMAND: TableField<PgStatProgressCopyRecord, String?> = createField(DSL.name("command"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.type</code>.
     */
    val TYPE: TableField<PgStatProgressCopyRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.bytes_processed</code>.
     */
    val BYTES_PROCESSED: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("bytes_processed"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.bytes_total</code>.
     */
    val BYTES_TOTAL: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("bytes_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_copy.tuples_processed</code>.
     */
    val TUPLES_PROCESSED: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("tuples_processed"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_copy.tuples_excluded</code>.
     */
    val TUPLES_EXCLUDED: TableField<PgStatProgressCopyRecord, Long?> = createField(DSL.name("tuples_excluded"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatProgressCopyRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressCopyRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressCopyRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_copy</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_copy</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_copy</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_progress_copy"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressCopy = PgStatProgressCopy(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressCopy = PgStatProgressCopy(alias, this)
    override fun `as`(alias: Table<*>): PgStatProgressCopy = PgStatProgressCopy(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressCopy = PgStatProgressCopy(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressCopy = PgStatProgressCopy(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatProgressCopy = PgStatProgressCopy(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatProgressCopy = PgStatProgressCopy(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatProgressCopy = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatProgressCopy = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatProgressCopy = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatProgressCopy = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatProgressCopy = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatProgressCopy = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatProgressCopy = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatProgressCopy = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatProgressCopy = where(DSL.notExists(select))
}
