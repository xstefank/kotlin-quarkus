/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgLargeobject
import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgLargeobjectRecord() : UpdatableRecordImpl<PgLargeobjectRecord>(PgLargeobject.PG_LARGEOBJECT) {

    open var loid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var pageno: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var `data`: ByteArray?
        set(value): Unit = set(2, value)
        get(): ByteArray? = get(2) as ByteArray?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Int?> = super.key() as Record2<Long?, Int?>

    /**
     * Create a detached, initialised PgLargeobjectRecord
     */
    constructor(loid: Long? = null, pageno: Int? = null, `data`: ByteArray? = null): this() {
        this.loid = loid
        this.pageno = pageno
        this.`data` = `data`
        resetChangedOnNotNull()
    }
}
