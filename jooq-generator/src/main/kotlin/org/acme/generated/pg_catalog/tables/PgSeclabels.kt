/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgSeclabelsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgSeclabels(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgSeclabelsRecord>?,
    parentPath: InverseForeignKey<out Record, PgSeclabelsRecord>?,
    aliased: Table<PgSeclabelsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgSeclabelsRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
     create view "pg_seclabels" as  SELECT l.objoid,
        l.classoid,
        l.objsubid,
            CASE
                WHEN (rel.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) THEN 'table'::text
                WHEN (rel.relkind = 'v'::"char") THEN 'view'::text
                WHEN (rel.relkind = 'm'::"char") THEN 'materialized view'::text
                WHEN (rel.relkind = 'S'::"char") THEN 'sequence'::text
                WHEN (rel.relkind = 'f'::"char") THEN 'foreign table'::text
                ELSE NULL::text
            END AS objtype,
        rel.relnamespace AS objnamespace,
            CASE
                WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)
                ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((rel.relname)::text))
            END AS objname,
        l.provider,
        l.label
       FROM ((pg_seclabel l
         JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))
         JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'column'::text AS objtype,
        rel.relnamespace AS objnamespace,
        ((
            CASE
                WHEN pg_table_is_visible(rel.oid) THEN quote_ident((rel.relname)::text)
                ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((rel.relname)::text))
            END || '.'::text) || (att.attname)::text) AS objname,
        l.provider,
        l.label
       FROM (((pg_seclabel l
         JOIN pg_class rel ON (((l.classoid = rel.tableoid) AND (l.objoid = rel.oid))))
         JOIN pg_attribute att ON (((rel.oid = att.attrelid) AND (l.objsubid = att.attnum))))
         JOIN pg_namespace nsp ON ((rel.relnamespace = nsp.oid)))
      WHERE (l.objsubid <> 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
            CASE pro.prokind
                WHEN 'a'::"char" THEN 'aggregate'::text
                WHEN 'f'::"char" THEN 'function'::text
                WHEN 'p'::"char" THEN 'procedure'::text
                WHEN 'w'::"char" THEN 'window'::text
                ELSE NULL::text
            END AS objtype,
        pro.pronamespace AS objnamespace,
        (((
            CASE
                WHEN pg_function_is_visible(pro.oid) THEN quote_ident((pro.proname)::text)
                ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((pro.proname)::text))
            END || '('::text) || pg_get_function_arguments(pro.oid)) || ')'::text) AS objname,
        l.provider,
        l.label
       FROM ((pg_seclabel l
         JOIN pg_proc pro ON (((l.classoid = pro.tableoid) AND (l.objoid = pro.oid))))
         JOIN pg_namespace nsp ON ((pro.pronamespace = nsp.oid)))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
            CASE
                WHEN (typ.typtype = 'd'::"char") THEN 'domain'::text
                ELSE 'type'::text
            END AS objtype,
        typ.typnamespace AS objnamespace,
            CASE
                WHEN pg_type_is_visible(typ.oid) THEN quote_ident((typ.typname)::text)
                ELSE ((quote_ident((nsp.nspname)::text) || '.'::text) || quote_ident((typ.typname)::text))
            END AS objname,
        l.provider,
        l.label
       FROM ((pg_seclabel l
         JOIN pg_type typ ON (((l.classoid = typ.tableoid) AND (l.objoid = typ.oid))))
         JOIN pg_namespace nsp ON ((typ.typnamespace = nsp.oid)))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'large object'::text AS objtype,
        NULL::oid AS objnamespace,
        (l.objoid)::text AS objname,
        l.provider,
        l.label
       FROM (pg_seclabel l
         JOIN pg_largeobject_metadata lom ON ((l.objoid = lom.oid)))
      WHERE ((l.classoid = ('pg_largeobject'::regclass)::oid) AND (l.objsubid = 0))
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'language'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((lan.lanname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_seclabel l
         JOIN pg_language lan ON (((l.classoid = lan.tableoid) AND (l.objoid = lan.oid))))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'schema'::text AS objtype,
        nsp.oid AS objnamespace,
        quote_ident((nsp.nspname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_seclabel l
         JOIN pg_namespace nsp ON (((l.classoid = nsp.tableoid) AND (l.objoid = nsp.oid))))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'event trigger'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((evt.evtname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_seclabel l
         JOIN pg_event_trigger evt ON (((l.classoid = evt.tableoid) AND (l.objoid = evt.oid))))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        l.objsubid,
        'publication'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((p.pubname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_seclabel l
         JOIN pg_publication p ON (((l.classoid = p.tableoid) AND (l.objoid = p.oid))))
      WHERE (l.objsubid = 0)
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        0 AS objsubid,
        'subscription'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((s.subname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_shseclabel l
         JOIN pg_subscription s ON (((l.classoid = s.tableoid) AND (l.objoid = s.oid))))
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        0 AS objsubid,
        'database'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((dat.datname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_shseclabel l
         JOIN pg_database dat ON (((l.classoid = dat.tableoid) AND (l.objoid = dat.oid))))
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        0 AS objsubid,
        'tablespace'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((spc.spcname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_shseclabel l
         JOIN pg_tablespace spc ON (((l.classoid = spc.tableoid) AND (l.objoid = spc.oid))))
    UNION ALL
     SELECT l.objoid,
        l.classoid,
        0 AS objsubid,
        'role'::text AS objtype,
        NULL::oid AS objnamespace,
        quote_ident((rol.rolname)::text) AS objname,
        l.provider,
        l.label
       FROM (pg_shseclabel l
         JOIN pg_authid rol ON (((l.classoid = rol.tableoid) AND (l.objoid = rol.oid))));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_seclabels</code>
         */
        val PG_SECLABELS: PgSeclabels = PgSeclabels()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgSeclabelsRecord> = PgSeclabelsRecord::class.java

    /**
     * The column <code>pg_catalog.pg_seclabels.objoid</code>.
     */
    val OBJOID: TableField<PgSeclabelsRecord, Long?> = createField(DSL.name("objoid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.classoid</code>.
     */
    val CLASSOID: TableField<PgSeclabelsRecord, Long?> = createField(DSL.name("classoid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.objsubid</code>.
     */
    val OBJSUBID: TableField<PgSeclabelsRecord, Int?> = createField(DSL.name("objsubid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.objtype</code>.
     */
    val OBJTYPE: TableField<PgSeclabelsRecord, String?> = createField(DSL.name("objtype"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.objnamespace</code>.
     */
    val OBJNAMESPACE: TableField<PgSeclabelsRecord, Long?> = createField(DSL.name("objnamespace"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.objname</code>.
     */
    val OBJNAME: TableField<PgSeclabelsRecord, String?> = createField(DSL.name("objname"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.provider</code>.
     */
    val PROVIDER: TableField<PgSeclabelsRecord, String?> = createField(DSL.name("provider"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_seclabels.label</code>.
     */
    val LABEL: TableField<PgSeclabelsRecord, String?> = createField(DSL.name("label"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PgSeclabelsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgSeclabelsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgSeclabelsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_seclabels</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_seclabels</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_seclabels</code> table reference
     */
    constructor(): this(DSL.name("pg_seclabels"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgSeclabels = PgSeclabels(DSL.name(alias), this)
    override fun `as`(alias: Name): PgSeclabels = PgSeclabels(alias, this)
    override fun `as`(alias: Table<*>): PgSeclabels = PgSeclabels(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgSeclabels = PgSeclabels(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgSeclabels = PgSeclabels(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgSeclabels = PgSeclabels(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgSeclabels = PgSeclabels(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgSeclabels = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgSeclabels = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgSeclabels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgSeclabels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgSeclabels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgSeclabels = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgSeclabels = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgSeclabels = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgSeclabels = where(DSL.notExists(select))
}
