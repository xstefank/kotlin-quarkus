/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines


import org.acme.generated.pg_catalog.PgCatalog
import org.jooq.Field
import org.jooq.Parameter
import org.jooq.Record
import org.jooq.Result
import org.jooq.XML
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CursorToXml : AbstractRoutine<XML>("cursor_to_xml", PgCatalog.PG_CATALOG, SQLDataType.XML) {
    companion object {

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<XML?> = Internal.createParameter("RETURN_VALUE", SQLDataType.XML, false, false)

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.cursor</code>.
         */
        val CURSOR: Parameter<Result<Record>?> = Internal.createParameter("cursor", SQLDataType.RESULT, false, false)

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.count</code>.
         */
        val COUNT: Parameter<Int?> = Internal.createParameter("count", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.nulls</code>.
         */
        val NULLS: Parameter<Boolean?> = Internal.createParameter("nulls", SQLDataType.BOOLEAN, false, false)

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.tableforest</code>.
         */
        val TABLEFOREST: Parameter<Boolean?> = Internal.createParameter("tableforest", SQLDataType.BOOLEAN, false, false)

        /**
         * The parameter <code>pg_catalog.cursor_to_xml.targetns</code>.
         */
        val TARGETNS: Parameter<String?> = Internal.createParameter("targetns", SQLDataType.CLOB, false, false)
    }

    init {
        returnParameter = CursorToXml.RETURN_VALUE
        addInParameter(CursorToXml.CURSOR)
        addInParameter(CursorToXml.COUNT)
        addInParameter(CursorToXml.NULLS)
        addInParameter(CursorToXml.TABLEFOREST)
        addInParameter(CursorToXml.TARGETNS)
    }

    /**
     * Set the <code>cursor</code> parameter IN value to the routine
     */
    fun setCursor(value: Result<Record>?): Unit = setValue(CursorToXml.CURSOR, value)

    /**
     * Set the <code>cursor</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setCursor(field: Field<Result<Record>?>): Unit {
        setField(CursorToXml.CURSOR, field)
    }

    /**
     * Set the <code>count</code> parameter IN value to the routine
     */
    fun setCount(value: Int?): Unit = setValue(CursorToXml.COUNT, value)

    /**
     * Set the <code>count</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setCount(field: Field<Int?>): Unit {
        setField(CursorToXml.COUNT, field)
    }

    /**
     * Set the <code>nulls</code> parameter IN value to the routine
     */
    fun setNulls(value: Boolean?): Unit = setValue(CursorToXml.NULLS, value)

    /**
     * Set the <code>nulls</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setNulls(field: Field<Boolean?>): Unit {
        setField(CursorToXml.NULLS, field)
    }

    /**
     * Set the <code>tableforest</code> parameter IN value to the routine
     */
    fun setTableforest(value: Boolean?): Unit = setValue(CursorToXml.TABLEFOREST, value)

    /**
     * Set the <code>tableforest</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    fun setTableforest(field: Field<Boolean?>): Unit {
        setField(CursorToXml.TABLEFOREST, field)
    }

    /**
     * Set the <code>targetns</code> parameter IN value to the routine
     */
    fun setTargetns(value: String?): Unit = setValue(CursorToXml.TARGETNS, value)

    /**
     * Set the <code>targetns</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setTargetns(field: Field<String?>): Unit {
        setField(CursorToXml.TARGETNS, field)
    }
}
