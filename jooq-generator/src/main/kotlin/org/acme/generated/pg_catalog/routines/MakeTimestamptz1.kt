/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.PgCatalog
import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MakeTimestamptz1 : AbstractRoutine<OffsetDateTime>("make_timestamptz", PgCatalog.PG_CATALOG, SQLDataType.TIMESTAMPWITHTIMEZONE(6)) {
    companion object {

        /**
         * The parameter <code>pg_catalog.make_timestamptz.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<OffsetDateTime?> = Internal.createParameter("RETURN_VALUE", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.year</code>.
         */
        val YEAR: Parameter<Int?> = Internal.createParameter("year", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.month</code>.
         */
        val MONTH: Parameter<Int?> = Internal.createParameter("month", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.mday</code>.
         */
        val MDAY: Parameter<Int?> = Internal.createParameter("mday", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.hour</code>.
         */
        val HOUR: Parameter<Int?> = Internal.createParameter("hour", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.min</code>.
         */
        val MIN: Parameter<Int?> = Internal.createParameter("min", SQLDataType.INTEGER, false, false)

        /**
         * The parameter <code>pg_catalog.make_timestamptz.sec</code>.
         */
        val SEC: Parameter<Double?> = Internal.createParameter("sec", SQLDataType.DOUBLE, false, false)
    }

    init {
        returnParameter = MakeTimestamptz1.RETURN_VALUE
        addInParameter(MakeTimestamptz1.YEAR)
        addInParameter(MakeTimestamptz1.MONTH)
        addInParameter(MakeTimestamptz1.MDAY)
        addInParameter(MakeTimestamptz1.HOUR)
        addInParameter(MakeTimestamptz1.MIN)
        addInParameter(MakeTimestamptz1.SEC)
        setOverloaded(true)
    }

    /**
     * Set the <code>year</code> parameter IN value to the routine
     */
    fun setYear(value: Int?): Unit = setValue(MakeTimestamptz1.YEAR, value)

    /**
     * Set the <code>year</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setYear(field: Field<Int?>): Unit {
        setField(MakeTimestamptz1.YEAR, field)
    }

    /**
     * Set the <code>month</code> parameter IN value to the routine
     */
    fun setMonth(value: Int?): Unit = setValue(MakeTimestamptz1.MONTH, value)

    /**
     * Set the <code>month</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setMonth(field: Field<Int?>): Unit {
        setField(MakeTimestamptz1.MONTH, field)
    }

    /**
     * Set the <code>mday</code> parameter IN value to the routine
     */
    fun setMday(value: Int?): Unit = setValue(MakeTimestamptz1.MDAY, value)

    /**
     * Set the <code>mday</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setMday(field: Field<Int?>): Unit {
        setField(MakeTimestamptz1.MDAY, field)
    }

    /**
     * Set the <code>hour</code> parameter IN value to the routine
     */
    fun setHour(value: Int?): Unit = setValue(MakeTimestamptz1.HOUR, value)

    /**
     * Set the <code>hour</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setHour(field: Field<Int?>): Unit {
        setField(MakeTimestamptz1.HOUR, field)
    }

    /**
     * Set the <code>min</code> parameter IN value to the routine
     */
    fun setMin(value: Int?): Unit = setValue(MakeTimestamptz1.MIN, value)

    /**
     * Set the <code>min</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setMin(field: Field<Int?>): Unit {
        setField(MakeTimestamptz1.MIN, field)
    }

    /**
     * Set the <code>sec</code> parameter IN value to the routine
     */
    fun setSec(value: Double?): Unit = setValue(MakeTimestamptz1.SEC, value)

    /**
     * Set the <code>sec</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setSec(field: Field<Double?>): Unit {
        setField(MakeTimestamptz1.SEC, field)
    }
}
