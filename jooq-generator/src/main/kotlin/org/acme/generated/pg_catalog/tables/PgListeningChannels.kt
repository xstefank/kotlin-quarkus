/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgListeningChannelsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgListeningChannels(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgListeningChannelsRecord>?,
    parentPath: InverseForeignKey<out Record, PgListeningChannelsRecord>?,
    aliased: Table<PgListeningChannelsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgListeningChannelsRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_listening_channels</code>
         */
        val PG_LISTENING_CHANNELS: PgListeningChannels = PgListeningChannels()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgListeningChannelsRecord> = PgListeningChannelsRecord::class.java

    /**
     * The column
     * <code>pg_catalog.pg_listening_channels.pg_listening_channels</code>.
     */
    val PG_LISTENING_CHANNELS_: TableField<PgListeningChannelsRecord, String?> = createField(DSL.name("pg_listening_channels"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PgListeningChannelsRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<PgListeningChannelsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.pg_listening_channels</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_listening_channels</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_listening_channels</code> table reference
     */
    constructor(): this(DSL.name("pg_listening_channels"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgListeningChannels = PgListeningChannels(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgListeningChannels = PgListeningChannels(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgListeningChannels = PgListeningChannels(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgListeningChannels = PgListeningChannels(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgListeningChannels = PgListeningChannels(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgListeningChannels = PgListeningChannels(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgListeningChannels = PgListeningChannels(DSL.name("pg_listening_channels"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
