/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.tables.PgStatGetWalSenders
import org.jooq.impl.TableRecordImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetWalSendersRecord() : TableRecordImpl<PgStatGetWalSendersRecord>(PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS) {

    open var pid: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var state: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var sentLsn: Any?
        set(value): Unit = set(2, value)
        get(): Any? = get(2) as Any?

    open var writeLsn: Any?
        set(value): Unit = set(3, value)
        get(): Any? = get(3) as Any?

    open var flushLsn: Any?
        set(value): Unit = set(4, value)
        get(): Any? = get(4) as Any?

    open var replayLsn: Any?
        set(value): Unit = set(5, value)
        get(): Any? = get(5) as Any?

    open var writeLag: YearToSecond?
        set(value): Unit = set(6, value)
        get(): YearToSecond? = get(6) as YearToSecond?

    open var flushLag: YearToSecond?
        set(value): Unit = set(7, value)
        get(): YearToSecond? = get(7) as YearToSecond?

    open var replayLag: YearToSecond?
        set(value): Unit = set(8, value)
        get(): YearToSecond? = get(8) as YearToSecond?

    open var syncPriority: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open var syncState: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var replyTime: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    /**
     * Create a detached, initialised PgStatGetWalSendersRecord
     */
    constructor(pid: Int? = null, state: String? = null, sentLsn: Any? = null, writeLsn: Any? = null, flushLsn: Any? = null, replayLsn: Any? = null, writeLag: YearToSecond? = null, flushLag: YearToSecond? = null, replayLag: YearToSecond? = null, syncPriority: Int? = null, syncState: String? = null, replyTime: OffsetDateTime? = null): this() {
        this.pid = pid
        this.state = state
        this.sentLsn = sentLsn
        this.writeLsn = writeLsn
        this.flushLsn = flushLsn
        this.replayLsn = replayLsn
        this.writeLag = writeLag
        this.flushLag = flushLag
        this.replayLag = replayLag
        this.syncPriority = syncPriority
        this.syncState = syncState
        this.replyTime = replyTime
        resetChangedOnNotNull()
    }
}
