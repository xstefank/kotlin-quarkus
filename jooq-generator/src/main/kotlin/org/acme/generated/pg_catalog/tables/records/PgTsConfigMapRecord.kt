/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgTsConfigMap
import org.jooq.Record3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgTsConfigMapRecord() : UpdatableRecordImpl<PgTsConfigMapRecord>(PgTsConfigMap.PG_TS_CONFIG_MAP) {

    open var mapcfg: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var maptokentype: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var mapseqno: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var mapdict: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record3<Long?, Int?, Int?> = super.key() as Record3<Long?, Int?, Int?>

    /**
     * Create a detached, initialised PgTsConfigMapRecord
     */
    constructor(mapcfg: Long? = null, maptokentype: Int? = null, mapseqno: Int? = null, mapdict: Long? = null): this() {
        this.mapcfg = mapcfg
        this.maptokentype = maptokentype
        this.mapseqno = mapseqno
        this.mapdict = mapdict
        resetChangedOnNotNull()
    }
}
