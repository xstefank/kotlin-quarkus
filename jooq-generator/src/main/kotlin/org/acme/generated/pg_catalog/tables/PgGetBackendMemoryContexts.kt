/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgGetBackendMemoryContextsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgGetBackendMemoryContexts(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgGetBackendMemoryContextsRecord>?,
    parentPath: InverseForeignKey<out Record, PgGetBackendMemoryContextsRecord>?,
    aliased: Table<PgGetBackendMemoryContextsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgGetBackendMemoryContextsRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_get_backend_memory_contexts</code>
         */
        val PG_GET_BACKEND_MEMORY_CONTEXTS: PgGetBackendMemoryContexts = PgGetBackendMemoryContexts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgGetBackendMemoryContextsRecord> = PgGetBackendMemoryContextsRecord::class.java

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.name</code>.
     */
    val NAME: TableField<PgGetBackendMemoryContextsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.ident</code>.
     */
    val IDENT: TableField<PgGetBackendMemoryContextsRecord, String?> = createField(DSL.name("ident"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.parent</code>.
     */
    val PARENT: TableField<PgGetBackendMemoryContextsRecord, String?> = createField(DSL.name("parent"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.level</code>.
     */
    val LEVEL: TableField<PgGetBackendMemoryContextsRecord, Int?> = createField(DSL.name("level"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_bytes</code>.
     */
    val TOTAL_BYTES: TableField<PgGetBackendMemoryContextsRecord, Long?> = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_nblocks</code>.
     */
    val TOTAL_NBLOCKS: TableField<PgGetBackendMemoryContextsRecord, Long?> = createField(DSL.name("total_nblocks"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_bytes</code>.
     */
    val FREE_BYTES: TableField<PgGetBackendMemoryContextsRecord, Long?> = createField(DSL.name("free_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_chunks</code>.
     */
    val FREE_CHUNKS: TableField<PgGetBackendMemoryContextsRecord, Long?> = createField(DSL.name("free_chunks"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.used_bytes</code>.
     */
    val USED_BYTES: TableField<PgGetBackendMemoryContextsRecord, Long?> = createField(DSL.name("used_bytes"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgGetBackendMemoryContextsRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<PgGetBackendMemoryContextsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.pg_get_backend_memory_contexts</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_get_backend_memory_contexts</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_get_backend_memory_contexts</code> table
     * reference
     */
    constructor(): this(DSL.name("pg_get_backend_memory_contexts"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgGetBackendMemoryContexts = PgGetBackendMemoryContexts(DSL.name("pg_get_backend_memory_contexts"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
