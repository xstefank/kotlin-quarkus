/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines


import org.acme.generated.pg_catalog.PgCatalog
import org.jooq.Field
import org.jooq.JSON
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
@Suppress("UNCHECKED_CAST")
open class JsonPopulateRecord : AbstractRoutine<Any>("json_populate_record", PgCatalog.PG_CATALOG, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")) {
    companion object {
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val RETURN_VALUE: Parameter<Any?> = Internal.createParameter("RETURN_VALUE", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false)
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val BASE: Parameter<Any?> = Internal.createParameter("base", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\""), false, false)

        /**
         * The parameter <code>pg_catalog.json_populate_record.from_json</code>.
         */
        val FROM_JSON: Parameter<JSON?> = Internal.createParameter("from_json", SQLDataType.JSON, false, false)

        /**
         * The parameter
         * <code>pg_catalog.json_populate_record.use_json_as_text</code>.
         */
        val USE_JSON_AS_TEXT: Parameter<Boolean?> = Internal.createParameter("use_json_as_text", SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), true, false)
    }

    init {
        returnParameter = JsonPopulateRecord.RETURN_VALUE
        addInParameter(JsonPopulateRecord.BASE)
        addInParameter(JsonPopulateRecord.FROM_JSON)
        addInParameter(JsonPopulateRecord.USE_JSON_AS_TEXT)
    }

    /**
     * Set the <code>base</code> parameter IN value to the routine
     */
    fun setBase(value: Any?): Unit = setValue(JsonPopulateRecord.BASE, value)

    /**
     * Set the <code>base</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setBase(field: Field<Any?>): Unit {
        setField(JsonPopulateRecord.BASE, field)
    }

    /**
     * Set the <code>from_json</code> parameter IN value to the routine
     */
    fun setFromJson(value: JSON?): Unit = setValue(JsonPopulateRecord.FROM_JSON, value)

    /**
     * Set the <code>from_json</code> parameter to the function to be used with
     * a {@link org.jooq.Select} statement
     */
    fun setFromJson(field: Field<JSON?>): Unit {
        setField(JsonPopulateRecord.FROM_JSON, field)
    }

    /**
     * Set the <code>use_json_as_text</code> parameter IN value to the routine
     */
    fun setUseJsonAsText(value: Boolean?): Unit = setValue(JsonPopulateRecord.USE_JSON_AS_TEXT, value)

    /**
     * Set the <code>use_json_as_text</code> parameter to the function to be
     * used with a {@link org.jooq.Select} statement
     */
    fun setUseJsonAsText(field: Field<Boolean?>): Unit {
        setField(JsonPopulateRecord.USE_JSON_AS_TEXT, field)
    }
}
