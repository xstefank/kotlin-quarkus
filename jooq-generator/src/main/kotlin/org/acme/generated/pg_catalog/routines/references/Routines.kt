/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines.references


import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.OffsetDateTime
import java.time.OffsetTime
import java.util.UUID

import org.acme.generated.pg_catalog.routines.Abbrev1
import org.acme.generated.pg_catalog.routines.Abbrev2
import org.acme.generated.pg_catalog.routines.Abs1
import org.acme.generated.pg_catalog.routines.Abs2
import org.acme.generated.pg_catalog.routines.Abs3
import org.acme.generated.pg_catalog.routines.Abs4
import org.acme.generated.pg_catalog.routines.Abs5
import org.acme.generated.pg_catalog.routines.Abs6
import org.acme.generated.pg_catalog.routines.Aclcontains
import org.acme.generated.pg_catalog.routines.Acldefault
import org.acme.generated.pg_catalog.routines.Aclinsert
import org.acme.generated.pg_catalog.routines.Aclitemeq
import org.acme.generated.pg_catalog.routines.Aclitemin
import org.acme.generated.pg_catalog.routines.Aclitemout
import org.acme.generated.pg_catalog.routines.Aclremove
import org.acme.generated.pg_catalog.routines.Acos
import org.acme.generated.pg_catalog.routines.Acosd
import org.acme.generated.pg_catalog.routines.Acosh
import org.acme.generated.pg_catalog.routines.Age1
import org.acme.generated.pg_catalog.routines.Age2
import org.acme.generated.pg_catalog.routines.Age3
import org.acme.generated.pg_catalog.routines.Age4
import org.acme.generated.pg_catalog.routines.Age5
import org.acme.generated.pg_catalog.routines.Amvalidate
import org.acme.generated.pg_catalog.routines.AnyIn
import org.acme.generated.pg_catalog.routines.AnyOut
import org.acme.generated.pg_catalog.routines.AnyarrayIn
import org.acme.generated.pg_catalog.routines.AnyarrayOut
import org.acme.generated.pg_catalog.routines.AnyarrayRecv
import org.acme.generated.pg_catalog.routines.AnyarraySend
import org.acme.generated.pg_catalog.routines.AnycompatibleIn
import org.acme.generated.pg_catalog.routines.AnycompatibleOut
import org.acme.generated.pg_catalog.routines.AnycompatiblearrayIn
import org.acme.generated.pg_catalog.routines.AnycompatiblearrayOut
import org.acme.generated.pg_catalog.routines.AnycompatiblearrayRecv
import org.acme.generated.pg_catalog.routines.AnycompatiblearraySend
import org.acme.generated.pg_catalog.routines.AnycompatiblemultirangeIn
import org.acme.generated.pg_catalog.routines.AnycompatiblemultirangeOut
import org.acme.generated.pg_catalog.routines.AnycompatiblenonarrayIn
import org.acme.generated.pg_catalog.routines.AnycompatiblenonarrayOut
import org.acme.generated.pg_catalog.routines.AnycompatiblerangeIn
import org.acme.generated.pg_catalog.routines.AnycompatiblerangeOut
import org.acme.generated.pg_catalog.routines.AnyelementIn
import org.acme.generated.pg_catalog.routines.AnyelementOut
import org.acme.generated.pg_catalog.routines.AnyenumIn
import org.acme.generated.pg_catalog.routines.AnyenumOut
import org.acme.generated.pg_catalog.routines.AnymultirangeIn
import org.acme.generated.pg_catalog.routines.AnymultirangeOut
import org.acme.generated.pg_catalog.routines.AnynonarrayIn
import org.acme.generated.pg_catalog.routines.AnynonarrayOut
import org.acme.generated.pg_catalog.routines.AnyrangeIn
import org.acme.generated.pg_catalog.routines.AnyrangeOut
import org.acme.generated.pg_catalog.routines.Anytextcat
import org.acme.generated.pg_catalog.routines.Area1
import org.acme.generated.pg_catalog.routines.Area2
import org.acme.generated.pg_catalog.routines.Area3
import org.acme.generated.pg_catalog.routines.Areajoinsel
import org.acme.generated.pg_catalog.routines.Areasel
import org.acme.generated.pg_catalog.routines.ArrayAgg1
import org.acme.generated.pg_catalog.routines.ArrayAgg2
import org.acme.generated.pg_catalog.routines.ArrayAggArrayFinalfn
import org.acme.generated.pg_catalog.routines.ArrayAggArrayTransfn
import org.acme.generated.pg_catalog.routines.ArrayAggFinalfn
import org.acme.generated.pg_catalog.routines.ArrayAggTransfn
import org.acme.generated.pg_catalog.routines.ArrayAppend
import org.acme.generated.pg_catalog.routines.ArrayCat
import org.acme.generated.pg_catalog.routines.ArrayDims
import org.acme.generated.pg_catalog.routines.ArrayEq
import org.acme.generated.pg_catalog.routines.ArrayFill1
import org.acme.generated.pg_catalog.routines.ArrayFill2
import org.acme.generated.pg_catalog.routines.ArrayGe
import org.acme.generated.pg_catalog.routines.ArrayGt
import org.acme.generated.pg_catalog.routines.ArrayIn
import org.acme.generated.pg_catalog.routines.ArrayLarger
import org.acme.generated.pg_catalog.routines.ArrayLe
import org.acme.generated.pg_catalog.routines.ArrayLength
import org.acme.generated.pg_catalog.routines.ArrayLower
import org.acme.generated.pg_catalog.routines.ArrayLt
import org.acme.generated.pg_catalog.routines.ArrayNdims
import org.acme.generated.pg_catalog.routines.ArrayNe
import org.acme.generated.pg_catalog.routines.ArrayOut
import org.acme.generated.pg_catalog.routines.ArrayPosition1
import org.acme.generated.pg_catalog.routines.ArrayPosition2
import org.acme.generated.pg_catalog.routines.ArrayPositions
import org.acme.generated.pg_catalog.routines.ArrayPrepend
import org.acme.generated.pg_catalog.routines.ArrayRecv
import org.acme.generated.pg_catalog.routines.ArrayRemove
import org.acme.generated.pg_catalog.routines.ArrayReplace
import org.acme.generated.pg_catalog.routines.ArraySend
import org.acme.generated.pg_catalog.routines.ArraySmaller
import org.acme.generated.pg_catalog.routines.ArraySubscriptHandler
import org.acme.generated.pg_catalog.routines.ArrayToJson1
import org.acme.generated.pg_catalog.routines.ArrayToJson2
import org.acme.generated.pg_catalog.routines.ArrayToString1
import org.acme.generated.pg_catalog.routines.ArrayToString2
import org.acme.generated.pg_catalog.routines.ArrayToTsvector
import org.acme.generated.pg_catalog.routines.ArrayTypanalyze
import org.acme.generated.pg_catalog.routines.ArrayUnnestSupport
import org.acme.generated.pg_catalog.routines.ArrayUpper
import org.acme.generated.pg_catalog.routines.Arraycontained
import org.acme.generated.pg_catalog.routines.Arraycontains
import org.acme.generated.pg_catalog.routines.Arraycontjoinsel
import org.acme.generated.pg_catalog.routines.Arraycontsel
import org.acme.generated.pg_catalog.routines.Arrayoverlap
import org.acme.generated.pg_catalog.routines.Ascii
import org.acme.generated.pg_catalog.routines.Asin
import org.acme.generated.pg_catalog.routines.Asind
import org.acme.generated.pg_catalog.routines.Asinh
import org.acme.generated.pg_catalog.routines.Atan
import org.acme.generated.pg_catalog.routines.Atan2
import org.acme.generated.pg_catalog.routines.Atan2d
import org.acme.generated.pg_catalog.routines.Atand
import org.acme.generated.pg_catalog.routines.Atanh
import org.acme.generated.pg_catalog.routines.Avg1
import org.acme.generated.pg_catalog.routines.Avg2
import org.acme.generated.pg_catalog.routines.Avg3
import org.acme.generated.pg_catalog.routines.Avg4
import org.acme.generated.pg_catalog.routines.Avg5
import org.acme.generated.pg_catalog.routines.Avg6
import org.acme.generated.pg_catalog.routines.Avg7
import org.acme.generated.pg_catalog.routines.Bernoulli
import org.acme.generated.pg_catalog.routines.Big5ToEucTw
import org.acme.generated.pg_catalog.routines.Big5ToMic
import org.acme.generated.pg_catalog.routines.Big5ToUtf8
import org.acme.generated.pg_catalog.routines.BinaryUpgradeCreateEmptyExtension
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetMissingValue
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextArrayPgTypeOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextHeapPgClassOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextIndexPgClassOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextMultirangeArrayPgTypeOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextMultirangePgTypeOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextPgAuthidOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextPgEnumOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextPgTypeOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetNextToastPgClassOid
import org.acme.generated.pg_catalog.routines.BinaryUpgradeSetRecordInitPrivs
import org.acme.generated.pg_catalog.routines.Bit1
import org.acme.generated.pg_catalog.routines.Bit2
import org.acme.generated.pg_catalog.routines.Bit3
import org.acme.generated.pg_catalog.routines.BitAnd1
import org.acme.generated.pg_catalog.routines.BitAnd2
import org.acme.generated.pg_catalog.routines.BitAnd3
import org.acme.generated.pg_catalog.routines.BitAnd4
import org.acme.generated.pg_catalog.routines.BitCount1
import org.acme.generated.pg_catalog.routines.BitCount2
import org.acme.generated.pg_catalog.routines.BitIn
import org.acme.generated.pg_catalog.routines.BitLength1
import org.acme.generated.pg_catalog.routines.BitLength2
import org.acme.generated.pg_catalog.routines.BitLength3
import org.acme.generated.pg_catalog.routines.BitOr1
import org.acme.generated.pg_catalog.routines.BitOr2
import org.acme.generated.pg_catalog.routines.BitOr3
import org.acme.generated.pg_catalog.routines.BitOr4
import org.acme.generated.pg_catalog.routines.BitOut
import org.acme.generated.pg_catalog.routines.BitRecv
import org.acme.generated.pg_catalog.routines.BitSend
import org.acme.generated.pg_catalog.routines.BitXor1
import org.acme.generated.pg_catalog.routines.BitXor2
import org.acme.generated.pg_catalog.routines.BitXor3
import org.acme.generated.pg_catalog.routines.BitXor4
import org.acme.generated.pg_catalog.routines.Bitand
import org.acme.generated.pg_catalog.routines.Bitcat
import org.acme.generated.pg_catalog.routines.Bitcmp
import org.acme.generated.pg_catalog.routines.Biteq
import org.acme.generated.pg_catalog.routines.Bitge
import org.acme.generated.pg_catalog.routines.Bitgt
import org.acme.generated.pg_catalog.routines.Bitle
import org.acme.generated.pg_catalog.routines.Bitlt
import org.acme.generated.pg_catalog.routines.Bitne
import org.acme.generated.pg_catalog.routines.Bitnot
import org.acme.generated.pg_catalog.routines.Bitor
import org.acme.generated.pg_catalog.routines.Bitshiftleft
import org.acme.generated.pg_catalog.routines.Bitshiftright
import org.acme.generated.pg_catalog.routines.Bittypmodin
import org.acme.generated.pg_catalog.routines.Bittypmodout
import org.acme.generated.pg_catalog.routines.Bitxor
import org.acme.generated.pg_catalog.routines.Bool1
import org.acme.generated.pg_catalog.routines.Bool2
import org.acme.generated.pg_catalog.routines.BoolAccum
import org.acme.generated.pg_catalog.routines.BoolAccumInv
import org.acme.generated.pg_catalog.routines.BoolAlltrue
import org.acme.generated.pg_catalog.routines.BoolAnd
import org.acme.generated.pg_catalog.routines.BoolAnytrue
import org.acme.generated.pg_catalog.routines.BoolOr
import org.acme.generated.pg_catalog.routines.BoolandStatefunc
import org.acme.generated.pg_catalog.routines.Booleq
import org.acme.generated.pg_catalog.routines.Boolge
import org.acme.generated.pg_catalog.routines.Boolgt
import org.acme.generated.pg_catalog.routines.Boolin
import org.acme.generated.pg_catalog.routines.Boolle
import org.acme.generated.pg_catalog.routines.Boollt
import org.acme.generated.pg_catalog.routines.Boolne
import org.acme.generated.pg_catalog.routines.BoolorStatefunc
import org.acme.generated.pg_catalog.routines.Boolout
import org.acme.generated.pg_catalog.routines.Boolrecv
import org.acme.generated.pg_catalog.routines.Boolsend
import org.acme.generated.pg_catalog.routines.BoundBox
import org.acme.generated.pg_catalog.routines.Box1
import org.acme.generated.pg_catalog.routines.Box2
import org.acme.generated.pg_catalog.routines.Box3
import org.acme.generated.pg_catalog.routines.Box4
import org.acme.generated.pg_catalog.routines.BoxAbove
import org.acme.generated.pg_catalog.routines.BoxAboveEq
import org.acme.generated.pg_catalog.routines.BoxAdd
import org.acme.generated.pg_catalog.routines.BoxBelow
import org.acme.generated.pg_catalog.routines.BoxBelowEq
import org.acme.generated.pg_catalog.routines.BoxCenter
import org.acme.generated.pg_catalog.routines.BoxContain
import org.acme.generated.pg_catalog.routines.BoxContainPt
import org.acme.generated.pg_catalog.routines.BoxContained
import org.acme.generated.pg_catalog.routines.BoxDistance
import org.acme.generated.pg_catalog.routines.BoxDiv
import org.acme.generated.pg_catalog.routines.BoxEq
import org.acme.generated.pg_catalog.routines.BoxGe
import org.acme.generated.pg_catalog.routines.BoxGt
import org.acme.generated.pg_catalog.routines.BoxIn
import org.acme.generated.pg_catalog.routines.BoxIntersect
import org.acme.generated.pg_catalog.routines.BoxLe
import org.acme.generated.pg_catalog.routines.BoxLeft
import org.acme.generated.pg_catalog.routines.BoxLt
import org.acme.generated.pg_catalog.routines.BoxMul
import org.acme.generated.pg_catalog.routines.BoxOut
import org.acme.generated.pg_catalog.routines.BoxOverabove
import org.acme.generated.pg_catalog.routines.BoxOverbelow
import org.acme.generated.pg_catalog.routines.BoxOverlap
import org.acme.generated.pg_catalog.routines.BoxOverleft
import org.acme.generated.pg_catalog.routines.BoxOverright
import org.acme.generated.pg_catalog.routines.BoxRecv
import org.acme.generated.pg_catalog.routines.BoxRight
import org.acme.generated.pg_catalog.routines.BoxSame
import org.acme.generated.pg_catalog.routines.BoxSend
import org.acme.generated.pg_catalog.routines.BoxSub
import org.acme.generated.pg_catalog.routines.Bpchar1
import org.acme.generated.pg_catalog.routines.Bpchar2
import org.acme.generated.pg_catalog.routines.Bpchar3
import org.acme.generated.pg_catalog.routines.BpcharLarger
import org.acme.generated.pg_catalog.routines.BpcharPatternGe
import org.acme.generated.pg_catalog.routines.BpcharPatternGt
import org.acme.generated.pg_catalog.routines.BpcharPatternLe
import org.acme.generated.pg_catalog.routines.BpcharPatternLt
import org.acme.generated.pg_catalog.routines.BpcharSmaller
import org.acme.generated.pg_catalog.routines.BpcharSortsupport
import org.acme.generated.pg_catalog.routines.Bpcharcmp
import org.acme.generated.pg_catalog.routines.Bpchareq
import org.acme.generated.pg_catalog.routines.Bpcharge
import org.acme.generated.pg_catalog.routines.Bpchargt
import org.acme.generated.pg_catalog.routines.Bpchariclike
import org.acme.generated.pg_catalog.routines.Bpcharicnlike
import org.acme.generated.pg_catalog.routines.Bpcharicregexeq
import org.acme.generated.pg_catalog.routines.Bpcharicregexne
import org.acme.generated.pg_catalog.routines.Bpcharin
import org.acme.generated.pg_catalog.routines.Bpcharle
import org.acme.generated.pg_catalog.routines.Bpcharlike
import org.acme.generated.pg_catalog.routines.Bpcharlt
import org.acme.generated.pg_catalog.routines.Bpcharne
import org.acme.generated.pg_catalog.routines.Bpcharnlike
import org.acme.generated.pg_catalog.routines.Bpcharout
import org.acme.generated.pg_catalog.routines.Bpcharrecv
import org.acme.generated.pg_catalog.routines.Bpcharregexeq
import org.acme.generated.pg_catalog.routines.Bpcharregexne
import org.acme.generated.pg_catalog.routines.Bpcharsend
import org.acme.generated.pg_catalog.routines.Bpchartypmodin
import org.acme.generated.pg_catalog.routines.Bpchartypmodout
import org.acme.generated.pg_catalog.routines.BrinBloomAddValue
import org.acme.generated.pg_catalog.routines.BrinBloomConsistent
import org.acme.generated.pg_catalog.routines.BrinBloomOpcinfo
import org.acme.generated.pg_catalog.routines.BrinBloomOptions
import org.acme.generated.pg_catalog.routines.BrinBloomSummaryIn
import org.acme.generated.pg_catalog.routines.BrinBloomSummaryOut
import org.acme.generated.pg_catalog.routines.BrinBloomSummaryRecv
import org.acme.generated.pg_catalog.routines.BrinBloomSummarySend
import org.acme.generated.pg_catalog.routines.BrinBloomUnion
import org.acme.generated.pg_catalog.routines.BrinDesummarizeRange
import org.acme.generated.pg_catalog.routines.BrinInclusionAddValue
import org.acme.generated.pg_catalog.routines.BrinInclusionConsistent
import org.acme.generated.pg_catalog.routines.BrinInclusionOpcinfo
import org.acme.generated.pg_catalog.routines.BrinInclusionUnion
import org.acme.generated.pg_catalog.routines.BrinMinmaxAddValue
import org.acme.generated.pg_catalog.routines.BrinMinmaxConsistent
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiAddValue
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiConsistent
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceDate
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceFloat4
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceFloat8
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceInet
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceInt2
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceInt4
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceInt8
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceInterval
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceMacaddr
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceMacaddr8
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceNumeric
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistancePgLsn
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceTid
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceTime
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceTimestamp
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceTimetz
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiDistanceUuid
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiOpcinfo
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiOptions
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiSummaryIn
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiSummaryOut
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiSummaryRecv
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiSummarySend
import org.acme.generated.pg_catalog.routines.BrinMinmaxMultiUnion
import org.acme.generated.pg_catalog.routines.BrinMinmaxOpcinfo
import org.acme.generated.pg_catalog.routines.BrinMinmaxUnion
import org.acme.generated.pg_catalog.routines.BrinSummarizeNewValues
import org.acme.generated.pg_catalog.routines.BrinSummarizeRange
import org.acme.generated.pg_catalog.routines.Brinhandler
import org.acme.generated.pg_catalog.routines.Broadcast
import org.acme.generated.pg_catalog.routines.Btarraycmp
import org.acme.generated.pg_catalog.routines.Btboolcmp
import org.acme.generated.pg_catalog.routines.BtbpcharPatternCmp
import org.acme.generated.pg_catalog.routines.BtbpcharPatternSortsupport
import org.acme.generated.pg_catalog.routines.Btcharcmp
import org.acme.generated.pg_catalog.routines.Btequalimage
import org.acme.generated.pg_catalog.routines.Btfloat48cmp
import org.acme.generated.pg_catalog.routines.Btfloat4cmp
import org.acme.generated.pg_catalog.routines.Btfloat4sortsupport
import org.acme.generated.pg_catalog.routines.Btfloat84cmp
import org.acme.generated.pg_catalog.routines.Btfloat8cmp
import org.acme.generated.pg_catalog.routines.Btfloat8sortsupport
import org.acme.generated.pg_catalog.routines.Bthandler
import org.acme.generated.pg_catalog.routines.Btint24cmp
import org.acme.generated.pg_catalog.routines.Btint28cmp
import org.acme.generated.pg_catalog.routines.Btint2cmp
import org.acme.generated.pg_catalog.routines.Btint2sortsupport
import org.acme.generated.pg_catalog.routines.Btint42cmp
import org.acme.generated.pg_catalog.routines.Btint48cmp
import org.acme.generated.pg_catalog.routines.Btint4cmp
import org.acme.generated.pg_catalog.routines.Btint4sortsupport
import org.acme.generated.pg_catalog.routines.Btint82cmp
import org.acme.generated.pg_catalog.routines.Btint84cmp
import org.acme.generated.pg_catalog.routines.Btint8cmp
import org.acme.generated.pg_catalog.routines.Btint8sortsupport
import org.acme.generated.pg_catalog.routines.Btnamecmp
import org.acme.generated.pg_catalog.routines.Btnamesortsupport
import org.acme.generated.pg_catalog.routines.Btnametextcmp
import org.acme.generated.pg_catalog.routines.Btoidcmp
import org.acme.generated.pg_catalog.routines.Btoidsortsupport
import org.acme.generated.pg_catalog.routines.Btoidvectorcmp
import org.acme.generated.pg_catalog.routines.Btrecordcmp
import org.acme.generated.pg_catalog.routines.Btrecordimagecmp
import org.acme.generated.pg_catalog.routines.Btrim1
import org.acme.generated.pg_catalog.routines.Btrim2
import org.acme.generated.pg_catalog.routines.Btrim3
import org.acme.generated.pg_catalog.routines.BttextPatternCmp
import org.acme.generated.pg_catalog.routines.BttextPatternSortsupport
import org.acme.generated.pg_catalog.routines.Bttextcmp
import org.acme.generated.pg_catalog.routines.Bttextnamecmp
import org.acme.generated.pg_catalog.routines.Bttextsortsupport
import org.acme.generated.pg_catalog.routines.Bttidcmp
import org.acme.generated.pg_catalog.routines.Btvarstrequalimage
import org.acme.generated.pg_catalog.routines.ByteaSortsupport
import org.acme.generated.pg_catalog.routines.ByteaStringAggFinalfn
import org.acme.generated.pg_catalog.routines.ByteaStringAggTransfn
import org.acme.generated.pg_catalog.routines.Byteacat
import org.acme.generated.pg_catalog.routines.Byteacmp
import org.acme.generated.pg_catalog.routines.Byteaeq
import org.acme.generated.pg_catalog.routines.Byteage
import org.acme.generated.pg_catalog.routines.Byteagt
import org.acme.generated.pg_catalog.routines.Byteain
import org.acme.generated.pg_catalog.routines.Byteale
import org.acme.generated.pg_catalog.routines.Bytealike
import org.acme.generated.pg_catalog.routines.Bytealt
import org.acme.generated.pg_catalog.routines.Byteane
import org.acme.generated.pg_catalog.routines.Byteanlike
import org.acme.generated.pg_catalog.routines.Byteaout
import org.acme.generated.pg_catalog.routines.Bytearecv
import org.acme.generated.pg_catalog.routines.Byteasend
import org.acme.generated.pg_catalog.routines.Cardinality
import org.acme.generated.pg_catalog.routines.CashCmp
import org.acme.generated.pg_catalog.routines.CashDivCash
import org.acme.generated.pg_catalog.routines.CashDivFlt4
import org.acme.generated.pg_catalog.routines.CashDivFlt8
import org.acme.generated.pg_catalog.routines.CashDivInt2
import org.acme.generated.pg_catalog.routines.CashDivInt4
import org.acme.generated.pg_catalog.routines.CashDivInt8
import org.acme.generated.pg_catalog.routines.CashEq
import org.acme.generated.pg_catalog.routines.CashGe
import org.acme.generated.pg_catalog.routines.CashGt
import org.acme.generated.pg_catalog.routines.CashIn
import org.acme.generated.pg_catalog.routines.CashLe
import org.acme.generated.pg_catalog.routines.CashLt
import org.acme.generated.pg_catalog.routines.CashMi
import org.acme.generated.pg_catalog.routines.CashMulFlt4
import org.acme.generated.pg_catalog.routines.CashMulFlt8
import org.acme.generated.pg_catalog.routines.CashMulInt2
import org.acme.generated.pg_catalog.routines.CashMulInt4
import org.acme.generated.pg_catalog.routines.CashMulInt8
import org.acme.generated.pg_catalog.routines.CashNe
import org.acme.generated.pg_catalog.routines.CashOut
import org.acme.generated.pg_catalog.routines.CashPl
import org.acme.generated.pg_catalog.routines.CashRecv
import org.acme.generated.pg_catalog.routines.CashSend
import org.acme.generated.pg_catalog.routines.CashWords
import org.acme.generated.pg_catalog.routines.Cashlarger
import org.acme.generated.pg_catalog.routines.Cashsmaller
import org.acme.generated.pg_catalog.routines.Cbrt
import org.acme.generated.pg_catalog.routines.Ceil1
import org.acme.generated.pg_catalog.routines.Ceil2
import org.acme.generated.pg_catalog.routines.Ceiling1
import org.acme.generated.pg_catalog.routines.Ceiling2
import org.acme.generated.pg_catalog.routines.Center1
import org.acme.generated.pg_catalog.routines.Center2
import org.acme.generated.pg_catalog.routines.Char1
import org.acme.generated.pg_catalog.routines.Char2
import org.acme.generated.pg_catalog.routines.CharLength1
import org.acme.generated.pg_catalog.routines.CharLength2
import org.acme.generated.pg_catalog.routines.CharacterLength1
import org.acme.generated.pg_catalog.routines.CharacterLength2
import org.acme.generated.pg_catalog.routines.Chareq
import org.acme.generated.pg_catalog.routines.Charge
import org.acme.generated.pg_catalog.routines.Chargt
import org.acme.generated.pg_catalog.routines.Charin
import org.acme.generated.pg_catalog.routines.Charle
import org.acme.generated.pg_catalog.routines.Charlt
import org.acme.generated.pg_catalog.routines.Charne
import org.acme.generated.pg_catalog.routines.Charout
import org.acme.generated.pg_catalog.routines.Charrecv
import org.acme.generated.pg_catalog.routines.Charsend
import org.acme.generated.pg_catalog.routines.Chr
import org.acme.generated.pg_catalog.routines.Cideq
import org.acme.generated.pg_catalog.routines.Cidin
import org.acme.generated.pg_catalog.routines.Cidout
import org.acme.generated.pg_catalog.routines.Cidr
import org.acme.generated.pg_catalog.routines.CidrIn
import org.acme.generated.pg_catalog.routines.CidrOut
import org.acme.generated.pg_catalog.routines.CidrRecv
import org.acme.generated.pg_catalog.routines.CidrSend
import org.acme.generated.pg_catalog.routines.Cidrecv
import org.acme.generated.pg_catalog.routines.Cidsend
import org.acme.generated.pg_catalog.routines.Circle1
import org.acme.generated.pg_catalog.routines.Circle2
import org.acme.generated.pg_catalog.routines.Circle3
import org.acme.generated.pg_catalog.routines.CircleAbove
import org.acme.generated.pg_catalog.routines.CircleAddPt
import org.acme.generated.pg_catalog.routines.CircleBelow
import org.acme.generated.pg_catalog.routines.CircleCenter
import org.acme.generated.pg_catalog.routines.CircleContain
import org.acme.generated.pg_catalog.routines.CircleContainPt
import org.acme.generated.pg_catalog.routines.CircleContained
import org.acme.generated.pg_catalog.routines.CircleDistance
import org.acme.generated.pg_catalog.routines.CircleDivPt
import org.acme.generated.pg_catalog.routines.CircleEq
import org.acme.generated.pg_catalog.routines.CircleGe
import org.acme.generated.pg_catalog.routines.CircleGt
import org.acme.generated.pg_catalog.routines.CircleIn
import org.acme.generated.pg_catalog.routines.CircleLe
import org.acme.generated.pg_catalog.routines.CircleLeft
import org.acme.generated.pg_catalog.routines.CircleLt
import org.acme.generated.pg_catalog.routines.CircleMulPt
import org.acme.generated.pg_catalog.routines.CircleNe
import org.acme.generated.pg_catalog.routines.CircleOut
import org.acme.generated.pg_catalog.routines.CircleOverabove
import org.acme.generated.pg_catalog.routines.CircleOverbelow
import org.acme.generated.pg_catalog.routines.CircleOverlap
import org.acme.generated.pg_catalog.routines.CircleOverleft
import org.acme.generated.pg_catalog.routines.CircleOverright
import org.acme.generated.pg_catalog.routines.CircleRecv
import org.acme.generated.pg_catalog.routines.CircleRight
import org.acme.generated.pg_catalog.routines.CircleSame
import org.acme.generated.pg_catalog.routines.CircleSend
import org.acme.generated.pg_catalog.routines.CircleSubPt
import org.acme.generated.pg_catalog.routines.ClockTimestamp
import org.acme.generated.pg_catalog.routines.CloseLb
import org.acme.generated.pg_catalog.routines.CloseLs
import org.acme.generated.pg_catalog.routines.CloseLseg
import org.acme.generated.pg_catalog.routines.ClosePb
import org.acme.generated.pg_catalog.routines.ClosePl
import org.acme.generated.pg_catalog.routines.ClosePs
import org.acme.generated.pg_catalog.routines.CloseSb
import org.acme.generated.pg_catalog.routines.CloseSl
import org.acme.generated.pg_catalog.routines.ColDescription
import org.acme.generated.pg_catalog.routines.Concat
import org.acme.generated.pg_catalog.routines.ConcatWs
import org.acme.generated.pg_catalog.routines.Contjoinsel
import org.acme.generated.pg_catalog.routines.Contsel
import org.acme.generated.pg_catalog.routines.Convert
import org.acme.generated.pg_catalog.routines.ConvertFrom
import org.acme.generated.pg_catalog.routines.ConvertTo
import org.acme.generated.pg_catalog.routines.Corr
import org.acme.generated.pg_catalog.routines.Cos
import org.acme.generated.pg_catalog.routines.Cosd
import org.acme.generated.pg_catalog.routines.Cosh
import org.acme.generated.pg_catalog.routines.Cot
import org.acme.generated.pg_catalog.routines.Cotd
import org.acme.generated.pg_catalog.routines.Count1
import org.acme.generated.pg_catalog.routines.Count2
import org.acme.generated.pg_catalog.routines.CovarPop
import org.acme.generated.pg_catalog.routines.CovarSamp
import org.acme.generated.pg_catalog.routines.CstringIn
import org.acme.generated.pg_catalog.routines.CstringOut
import org.acme.generated.pg_catalog.routines.CstringRecv
import org.acme.generated.pg_catalog.routines.CstringSend
import org.acme.generated.pg_catalog.routines.CumeDist1
import org.acme.generated.pg_catalog.routines.CumeDist2
import org.acme.generated.pg_catalog.routines.CumeDistFinal
import org.acme.generated.pg_catalog.routines.CurrentDatabase
import org.acme.generated.pg_catalog.routines.CurrentQuery
import org.acme.generated.pg_catalog.routines.CurrentSchema
import org.acme.generated.pg_catalog.routines.CurrentSchemas
import org.acme.generated.pg_catalog.routines.CurrentSetting1
import org.acme.generated.pg_catalog.routines.CurrentSetting2
import org.acme.generated.pg_catalog.routines.CurrentUser
import org.acme.generated.pg_catalog.routines.Currtid2
import org.acme.generated.pg_catalog.routines.Currval
import org.acme.generated.pg_catalog.routines.CursorToXml
import org.acme.generated.pg_catalog.routines.CursorToXmlschema
import org.acme.generated.pg_catalog.routines.DatabaseToXml
import org.acme.generated.pg_catalog.routines.DatabaseToXmlAndXmlschema
import org.acme.generated.pg_catalog.routines.DatabaseToXmlschema
import org.acme.generated.pg_catalog.routines.Date1
import org.acme.generated.pg_catalog.routines.Date2
import org.acme.generated.pg_catalog.routines.DateBin1
import org.acme.generated.pg_catalog.routines.DateBin2
import org.acme.generated.pg_catalog.routines.DateCmp
import org.acme.generated.pg_catalog.routines.DateCmpTimestamp
import org.acme.generated.pg_catalog.routines.DateCmpTimestamptz
import org.acme.generated.pg_catalog.routines.DateEq
import org.acme.generated.pg_catalog.routines.DateEqTimestamp
import org.acme.generated.pg_catalog.routines.DateEqTimestamptz
import org.acme.generated.pg_catalog.routines.DateGe
import org.acme.generated.pg_catalog.routines.DateGeTimestamp
import org.acme.generated.pg_catalog.routines.DateGeTimestamptz
import org.acme.generated.pg_catalog.routines.DateGt
import org.acme.generated.pg_catalog.routines.DateGtTimestamp
import org.acme.generated.pg_catalog.routines.DateGtTimestamptz
import org.acme.generated.pg_catalog.routines.DateIn
import org.acme.generated.pg_catalog.routines.DateLarger
import org.acme.generated.pg_catalog.routines.DateLe
import org.acme.generated.pg_catalog.routines.DateLeTimestamp
import org.acme.generated.pg_catalog.routines.DateLeTimestamptz
import org.acme.generated.pg_catalog.routines.DateLt
import org.acme.generated.pg_catalog.routines.DateLtTimestamp
import org.acme.generated.pg_catalog.routines.DateLtTimestamptz
import org.acme.generated.pg_catalog.routines.DateMi
import org.acme.generated.pg_catalog.routines.DateMiInterval
import org.acme.generated.pg_catalog.routines.DateMii
import org.acme.generated.pg_catalog.routines.DateNe
import org.acme.generated.pg_catalog.routines.DateNeTimestamp
import org.acme.generated.pg_catalog.routines.DateNeTimestamptz
import org.acme.generated.pg_catalog.routines.DateOut
import org.acme.generated.pg_catalog.routines.DatePart1
import org.acme.generated.pg_catalog.routines.DatePart2
import org.acme.generated.pg_catalog.routines.DatePart3
import org.acme.generated.pg_catalog.routines.DatePart4
import org.acme.generated.pg_catalog.routines.DatePart5
import org.acme.generated.pg_catalog.routines.DatePart6
import org.acme.generated.pg_catalog.routines.DatePlInterval
import org.acme.generated.pg_catalog.routines.DatePli
import org.acme.generated.pg_catalog.routines.DateRecv
import org.acme.generated.pg_catalog.routines.DateSend
import org.acme.generated.pg_catalog.routines.DateSmaller
import org.acme.generated.pg_catalog.routines.DateSortsupport
import org.acme.generated.pg_catalog.routines.DateTrunc1
import org.acme.generated.pg_catalog.routines.DateTrunc2
import org.acme.generated.pg_catalog.routines.DateTrunc3
import org.acme.generated.pg_catalog.routines.DateTrunc4
import org.acme.generated.pg_catalog.routines.Datemultirange1
import org.acme.generated.pg_catalog.routines.Datemultirange2
import org.acme.generated.pg_catalog.routines.Datemultirange3
import org.acme.generated.pg_catalog.routines.Daterange1
import org.acme.generated.pg_catalog.routines.Daterange2
import org.acme.generated.pg_catalog.routines.DaterangeCanonical
import org.acme.generated.pg_catalog.routines.DaterangeSubdiff
import org.acme.generated.pg_catalog.routines.DatetimePl
import org.acme.generated.pg_catalog.routines.DatetimetzPl
import org.acme.generated.pg_catalog.routines.Dcbrt
import org.acme.generated.pg_catalog.routines.Decode
import org.acme.generated.pg_catalog.routines.Degrees
import org.acme.generated.pg_catalog.routines.DenseRank1
import org.acme.generated.pg_catalog.routines.DenseRank2
import org.acme.generated.pg_catalog.routines.DenseRankFinal
import org.acme.generated.pg_catalog.routines.Dexp
import org.acme.generated.pg_catalog.routines.Diagonal
import org.acme.generated.pg_catalog.routines.Diameter
import org.acme.generated.pg_catalog.routines.DispellInit
import org.acme.generated.pg_catalog.routines.DispellLexize
import org.acme.generated.pg_catalog.routines.DistBl
import org.acme.generated.pg_catalog.routines.DistBp
import org.acme.generated.pg_catalog.routines.DistBs
import org.acme.generated.pg_catalog.routines.DistCpoint
import org.acme.generated.pg_catalog.routines.DistCpoly
import org.acme.generated.pg_catalog.routines.DistLb
import org.acme.generated.pg_catalog.routines.DistLp
import org.acme.generated.pg_catalog.routines.DistLs
import org.acme.generated.pg_catalog.routines.DistPathp
import org.acme.generated.pg_catalog.routines.DistPb
import org.acme.generated.pg_catalog.routines.DistPc
import org.acme.generated.pg_catalog.routines.DistPl
import org.acme.generated.pg_catalog.routines.DistPolyc
import org.acme.generated.pg_catalog.routines.DistPolyp
import org.acme.generated.pg_catalog.routines.DistPpath
import org.acme.generated.pg_catalog.routines.DistPpoly
import org.acme.generated.pg_catalog.routines.DistPs
import org.acme.generated.pg_catalog.routines.DistSb
import org.acme.generated.pg_catalog.routines.DistSl
import org.acme.generated.pg_catalog.routines.DistSp
import org.acme.generated.pg_catalog.routines.Div
import org.acme.generated.pg_catalog.routines.Dlog1
import org.acme.generated.pg_catalog.routines.Dlog10
import org.acme.generated.pg_catalog.routines.DomainIn
import org.acme.generated.pg_catalog.routines.DomainRecv
import org.acme.generated.pg_catalog.routines.Dpow
import org.acme.generated.pg_catalog.routines.Dround
import org.acme.generated.pg_catalog.routines.DsimpleInit
import org.acme.generated.pg_catalog.routines.DsimpleLexize
import org.acme.generated.pg_catalog.routines.DsnowballInit
import org.acme.generated.pg_catalog.routines.DsnowballLexize
import org.acme.generated.pg_catalog.routines.Dsqrt
import org.acme.generated.pg_catalog.routines.DsynonymInit
import org.acme.generated.pg_catalog.routines.DsynonymLexize
import org.acme.generated.pg_catalog.routines.Dtrunc
import org.acme.generated.pg_catalog.routines.ElemContainedByMultirange
import org.acme.generated.pg_catalog.routines.ElemContainedByRange
import org.acme.generated.pg_catalog.routines.Encode
import org.acme.generated.pg_catalog.routines.EnumCmp
import org.acme.generated.pg_catalog.routines.EnumEq
import org.acme.generated.pg_catalog.routines.EnumFirst
import org.acme.generated.pg_catalog.routines.EnumGe
import org.acme.generated.pg_catalog.routines.EnumGt
import org.acme.generated.pg_catalog.routines.EnumIn
import org.acme.generated.pg_catalog.routines.EnumLarger
import org.acme.generated.pg_catalog.routines.EnumLast
import org.acme.generated.pg_catalog.routines.EnumLe
import org.acme.generated.pg_catalog.routines.EnumLt
import org.acme.generated.pg_catalog.routines.EnumNe
import org.acme.generated.pg_catalog.routines.EnumOut
import org.acme.generated.pg_catalog.routines.EnumRange1
import org.acme.generated.pg_catalog.routines.EnumRange2
import org.acme.generated.pg_catalog.routines.EnumRecv
import org.acme.generated.pg_catalog.routines.EnumSend
import org.acme.generated.pg_catalog.routines.EnumSmaller
import org.acme.generated.pg_catalog.routines.Eqjoinsel
import org.acme.generated.pg_catalog.routines.Eqsel
import org.acme.generated.pg_catalog.routines.EucCnToMic
import org.acme.generated.pg_catalog.routines.EucCnToUtf8
import org.acme.generated.pg_catalog.routines.EucJis_2004ToShiftJis_2004
import org.acme.generated.pg_catalog.routines.EucJis_2004ToUtf8
import org.acme.generated.pg_catalog.routines.EucJpToMic
import org.acme.generated.pg_catalog.routines.EucJpToSjis
import org.acme.generated.pg_catalog.routines.EucJpToUtf8
import org.acme.generated.pg_catalog.routines.EucKrToMic
import org.acme.generated.pg_catalog.routines.EucKrToUtf8
import org.acme.generated.pg_catalog.routines.EucTwToBig5
import org.acme.generated.pg_catalog.routines.EucTwToMic
import org.acme.generated.pg_catalog.routines.EucTwToUtf8
import org.acme.generated.pg_catalog.routines.EventTriggerIn
import org.acme.generated.pg_catalog.routines.EventTriggerOut
import org.acme.generated.pg_catalog.routines.Every
import org.acme.generated.pg_catalog.routines.Exp1
import org.acme.generated.pg_catalog.routines.Exp2
import org.acme.generated.pg_catalog.routines.Extract1
import org.acme.generated.pg_catalog.routines.Extract2
import org.acme.generated.pg_catalog.routines.Extract3
import org.acme.generated.pg_catalog.routines.Extract4
import org.acme.generated.pg_catalog.routines.Extract5
import org.acme.generated.pg_catalog.routines.Extract6
import org.acme.generated.pg_catalog.routines.Factorial
import org.acme.generated.pg_catalog.routines.Family
import org.acme.generated.pg_catalog.routines.FdwHandlerIn
import org.acme.generated.pg_catalog.routines.FdwHandlerOut
import org.acme.generated.pg_catalog.routines.FirstValue
import org.acme.generated.pg_catalog.routines.Float41
import org.acme.generated.pg_catalog.routines.Float42
import org.acme.generated.pg_catalog.routines.Float43
import org.acme.generated.pg_catalog.routines.Float44
import org.acme.generated.pg_catalog.routines.Float45
import org.acme.generated.pg_catalog.routines.Float46
import org.acme.generated.pg_catalog.routines.Float48div
import org.acme.generated.pg_catalog.routines.Float48eq
import org.acme.generated.pg_catalog.routines.Float48ge
import org.acme.generated.pg_catalog.routines.Float48gt
import org.acme.generated.pg_catalog.routines.Float48le
import org.acme.generated.pg_catalog.routines.Float48lt
import org.acme.generated.pg_catalog.routines.Float48mi
import org.acme.generated.pg_catalog.routines.Float48mul
import org.acme.generated.pg_catalog.routines.Float48ne
import org.acme.generated.pg_catalog.routines.Float48pl
import org.acme.generated.pg_catalog.routines.Float4Accum
import org.acme.generated.pg_catalog.routines.Float4abs
import org.acme.generated.pg_catalog.routines.Float4div
import org.acme.generated.pg_catalog.routines.Float4eq
import org.acme.generated.pg_catalog.routines.Float4ge
import org.acme.generated.pg_catalog.routines.Float4gt
import org.acme.generated.pg_catalog.routines.Float4in
import org.acme.generated.pg_catalog.routines.Float4larger
import org.acme.generated.pg_catalog.routines.Float4le
import org.acme.generated.pg_catalog.routines.Float4lt
import org.acme.generated.pg_catalog.routines.Float4mi
import org.acme.generated.pg_catalog.routines.Float4mul
import org.acme.generated.pg_catalog.routines.Float4ne
import org.acme.generated.pg_catalog.routines.Float4out
import org.acme.generated.pg_catalog.routines.Float4pl
import org.acme.generated.pg_catalog.routines.Float4recv
import org.acme.generated.pg_catalog.routines.Float4send
import org.acme.generated.pg_catalog.routines.Float4smaller
import org.acme.generated.pg_catalog.routines.Float4um
import org.acme.generated.pg_catalog.routines.Float4up
import org.acme.generated.pg_catalog.routines.Float81
import org.acme.generated.pg_catalog.routines.Float82
import org.acme.generated.pg_catalog.routines.Float83
import org.acme.generated.pg_catalog.routines.Float84
import org.acme.generated.pg_catalog.routines.Float84div
import org.acme.generated.pg_catalog.routines.Float84eq
import org.acme.generated.pg_catalog.routines.Float84ge
import org.acme.generated.pg_catalog.routines.Float84gt
import org.acme.generated.pg_catalog.routines.Float84le
import org.acme.generated.pg_catalog.routines.Float84lt
import org.acme.generated.pg_catalog.routines.Float84mi
import org.acme.generated.pg_catalog.routines.Float84mul
import org.acme.generated.pg_catalog.routines.Float84ne
import org.acme.generated.pg_catalog.routines.Float84pl
import org.acme.generated.pg_catalog.routines.Float85
import org.acme.generated.pg_catalog.routines.Float86
import org.acme.generated.pg_catalog.routines.Float8Accum
import org.acme.generated.pg_catalog.routines.Float8Avg
import org.acme.generated.pg_catalog.routines.Float8Combine
import org.acme.generated.pg_catalog.routines.Float8Corr
import org.acme.generated.pg_catalog.routines.Float8CovarPop
import org.acme.generated.pg_catalog.routines.Float8CovarSamp
import org.acme.generated.pg_catalog.routines.Float8RegrAccum
import org.acme.generated.pg_catalog.routines.Float8RegrAvgx
import org.acme.generated.pg_catalog.routines.Float8RegrAvgy
import org.acme.generated.pg_catalog.routines.Float8RegrCombine
import org.acme.generated.pg_catalog.routines.Float8RegrIntercept
import org.acme.generated.pg_catalog.routines.Float8RegrR2
import org.acme.generated.pg_catalog.routines.Float8RegrSlope
import org.acme.generated.pg_catalog.routines.Float8RegrSxx
import org.acme.generated.pg_catalog.routines.Float8RegrSxy
import org.acme.generated.pg_catalog.routines.Float8RegrSyy
import org.acme.generated.pg_catalog.routines.Float8StddevPop
import org.acme.generated.pg_catalog.routines.Float8StddevSamp
import org.acme.generated.pg_catalog.routines.Float8VarPop
import org.acme.generated.pg_catalog.routines.Float8VarSamp
import org.acme.generated.pg_catalog.routines.Float8abs
import org.acme.generated.pg_catalog.routines.Float8div
import org.acme.generated.pg_catalog.routines.Float8eq
import org.acme.generated.pg_catalog.routines.Float8ge
import org.acme.generated.pg_catalog.routines.Float8gt
import org.acme.generated.pg_catalog.routines.Float8in
import org.acme.generated.pg_catalog.routines.Float8larger
import org.acme.generated.pg_catalog.routines.Float8le
import org.acme.generated.pg_catalog.routines.Float8lt
import org.acme.generated.pg_catalog.routines.Float8mi
import org.acme.generated.pg_catalog.routines.Float8mul
import org.acme.generated.pg_catalog.routines.Float8ne
import org.acme.generated.pg_catalog.routines.Float8out
import org.acme.generated.pg_catalog.routines.Float8pl
import org.acme.generated.pg_catalog.routines.Float8recv
import org.acme.generated.pg_catalog.routines.Float8send
import org.acme.generated.pg_catalog.routines.Float8smaller
import org.acme.generated.pg_catalog.routines.Float8um
import org.acme.generated.pg_catalog.routines.Float8up
import org.acme.generated.pg_catalog.routines.Floor1
import org.acme.generated.pg_catalog.routines.Floor2
import org.acme.generated.pg_catalog.routines.Flt4MulCash
import org.acme.generated.pg_catalog.routines.Flt8MulCash
import org.acme.generated.pg_catalog.routines.FmgrCValidator
import org.acme.generated.pg_catalog.routines.FmgrInternalValidator
import org.acme.generated.pg_catalog.routines.FmgrSqlValidator
import org.acme.generated.pg_catalog.routines.Format1
import org.acme.generated.pg_catalog.routines.Format2
import org.acme.generated.pg_catalog.routines.FormatType
import org.acme.generated.pg_catalog.routines.Gb18030ToUtf8
import org.acme.generated.pg_catalog.routines.GbkToUtf8
import org.acme.generated.pg_catalog.routines.Gcd1
import org.acme.generated.pg_catalog.routines.Gcd2
import org.acme.generated.pg_catalog.routines.Gcd3
import org.acme.generated.pg_catalog.routines.GenRandomUuid
import org.acme.generated.pg_catalog.routines.GenerateSeriesInt4Support
import org.acme.generated.pg_catalog.routines.GenerateSeriesInt8Support
import org.acme.generated.pg_catalog.routines.GetBit1
import org.acme.generated.pg_catalog.routines.GetBit2
import org.acme.generated.pg_catalog.routines.GetByte
import org.acme.generated.pg_catalog.routines.GetCurrentTsConfig
import org.acme.generated.pg_catalog.routines.Getdatabaseencoding
import org.acme.generated.pg_catalog.routines.Getpgusername
import org.acme.generated.pg_catalog.routines.GinCleanPendingList
import org.acme.generated.pg_catalog.routines.GinCmpPrefix
import org.acme.generated.pg_catalog.routines.GinCmpTslexeme
import org.acme.generated.pg_catalog.routines.GinCompareJsonb
import org.acme.generated.pg_catalog.routines.GinConsistentJsonb
import org.acme.generated.pg_catalog.routines.GinConsistentJsonbPath
import org.acme.generated.pg_catalog.routines.GinExtractJsonb
import org.acme.generated.pg_catalog.routines.GinExtractJsonbPath
import org.acme.generated.pg_catalog.routines.GinExtractJsonbQuery
import org.acme.generated.pg_catalog.routines.GinExtractJsonbQueryPath
import org.acme.generated.pg_catalog.routines.GinExtractTsquery1
import org.acme.generated.pg_catalog.routines.GinExtractTsquery2
import org.acme.generated.pg_catalog.routines.GinExtractTsquery3
import org.acme.generated.pg_catalog.routines.GinExtractTsvector1
import org.acme.generated.pg_catalog.routines.GinExtractTsvector2
import org.acme.generated.pg_catalog.routines.GinTriconsistentJsonb
import org.acme.generated.pg_catalog.routines.GinTriconsistentJsonbPath
import org.acme.generated.pg_catalog.routines.GinTsqueryConsistent1
import org.acme.generated.pg_catalog.routines.GinTsqueryConsistent2
import org.acme.generated.pg_catalog.routines.GinTsqueryConsistent3
import org.acme.generated.pg_catalog.routines.GinTsqueryTriconsistent
import org.acme.generated.pg_catalog.routines.Ginarrayconsistent
import org.acme.generated.pg_catalog.routines.Ginarrayextract1
import org.acme.generated.pg_catalog.routines.Ginarrayextract2
import org.acme.generated.pg_catalog.routines.Ginarraytriconsistent
import org.acme.generated.pg_catalog.routines.Ginhandler
import org.acme.generated.pg_catalog.routines.Ginqueryarrayextract
import org.acme.generated.pg_catalog.routines.GistBoxConsistent
import org.acme.generated.pg_catalog.routines.GistBoxDistance
import org.acme.generated.pg_catalog.routines.GistBoxPenalty
import org.acme.generated.pg_catalog.routines.GistBoxPicksplit
import org.acme.generated.pg_catalog.routines.GistBoxSame
import org.acme.generated.pg_catalog.routines.GistBoxUnion
import org.acme.generated.pg_catalog.routines.GistCircleCompress
import org.acme.generated.pg_catalog.routines.GistCircleConsistent
import org.acme.generated.pg_catalog.routines.GistCircleDistance
import org.acme.generated.pg_catalog.routines.GistPointCompress
import org.acme.generated.pg_catalog.routines.GistPointConsistent
import org.acme.generated.pg_catalog.routines.GistPointDistance
import org.acme.generated.pg_catalog.routines.GistPointFetch
import org.acme.generated.pg_catalog.routines.GistPointSortsupport
import org.acme.generated.pg_catalog.routines.GistPolyCompress
import org.acme.generated.pg_catalog.routines.GistPolyConsistent
import org.acme.generated.pg_catalog.routines.GistPolyDistance
import org.acme.generated.pg_catalog.routines.Gisthandler
import org.acme.generated.pg_catalog.routines.GtsqueryCompress
import org.acme.generated.pg_catalog.routines.GtsqueryConsistent1
import org.acme.generated.pg_catalog.routines.GtsqueryConsistent2
import org.acme.generated.pg_catalog.routines.GtsqueryPenalty
import org.acme.generated.pg_catalog.routines.GtsqueryPicksplit
import org.acme.generated.pg_catalog.routines.GtsquerySame
import org.acme.generated.pg_catalog.routines.GtsqueryUnion
import org.acme.generated.pg_catalog.routines.GtsvectorCompress
import org.acme.generated.pg_catalog.routines.GtsvectorConsistent1
import org.acme.generated.pg_catalog.routines.GtsvectorConsistent2
import org.acme.generated.pg_catalog.routines.GtsvectorDecompress
import org.acme.generated.pg_catalog.routines.GtsvectorOptions
import org.acme.generated.pg_catalog.routines.GtsvectorPenalty
import org.acme.generated.pg_catalog.routines.GtsvectorPicksplit
import org.acme.generated.pg_catalog.routines.GtsvectorSame
import org.acme.generated.pg_catalog.routines.GtsvectorUnion
import org.acme.generated.pg_catalog.routines.Gtsvectorin
import org.acme.generated.pg_catalog.routines.Gtsvectorout
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege1
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege2
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege3
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege4
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege5
import org.acme.generated.pg_catalog.routines.HasAnyColumnPrivilege6
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege1
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege10
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege11
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege12
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege2
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege3
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege4
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege5
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege6
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege7
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege8
import org.acme.generated.pg_catalog.routines.HasColumnPrivilege9
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege1
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege2
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege3
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege4
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege5
import org.acme.generated.pg_catalog.routines.HasDatabasePrivilege6
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege1
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege2
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege3
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege4
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege5
import org.acme.generated.pg_catalog.routines.HasForeignDataWrapperPrivilege6
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege1
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege2
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege3
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege4
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege5
import org.acme.generated.pg_catalog.routines.HasFunctionPrivilege6
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege1
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege2
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege3
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege4
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege5
import org.acme.generated.pg_catalog.routines.HasLanguagePrivilege6
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege1
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege2
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege3
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege4
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege5
import org.acme.generated.pg_catalog.routines.HasSchemaPrivilege6
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege1
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege2
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege3
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege4
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege5
import org.acme.generated.pg_catalog.routines.HasSequencePrivilege6
import org.acme.generated.pg_catalog.routines.HasServerPrivilege1
import org.acme.generated.pg_catalog.routines.HasServerPrivilege2
import org.acme.generated.pg_catalog.routines.HasServerPrivilege3
import org.acme.generated.pg_catalog.routines.HasServerPrivilege4
import org.acme.generated.pg_catalog.routines.HasServerPrivilege5
import org.acme.generated.pg_catalog.routines.HasServerPrivilege6
import org.acme.generated.pg_catalog.routines.HasTablePrivilege1
import org.acme.generated.pg_catalog.routines.HasTablePrivilege2
import org.acme.generated.pg_catalog.routines.HasTablePrivilege3
import org.acme.generated.pg_catalog.routines.HasTablePrivilege4
import org.acme.generated.pg_catalog.routines.HasTablePrivilege5
import org.acme.generated.pg_catalog.routines.HasTablePrivilege6
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege1
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege2
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege3
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege4
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege5
import org.acme.generated.pg_catalog.routines.HasTablespacePrivilege6
import org.acme.generated.pg_catalog.routines.HasTypePrivilege1
import org.acme.generated.pg_catalog.routines.HasTypePrivilege2
import org.acme.generated.pg_catalog.routines.HasTypePrivilege3
import org.acme.generated.pg_catalog.routines.HasTypePrivilege4
import org.acme.generated.pg_catalog.routines.HasTypePrivilege5
import org.acme.generated.pg_catalog.routines.HasTypePrivilege6
import org.acme.generated.pg_catalog.routines.HashAclitem
import org.acme.generated.pg_catalog.routines.HashAclitemExtended
import org.acme.generated.pg_catalog.routines.HashArray
import org.acme.generated.pg_catalog.routines.HashArrayExtended
import org.acme.generated.pg_catalog.routines.HashMultirange
import org.acme.generated.pg_catalog.routines.HashMultirangeExtended
import org.acme.generated.pg_catalog.routines.HashNumeric
import org.acme.generated.pg_catalog.routines.HashNumericExtended
import org.acme.generated.pg_catalog.routines.HashRange
import org.acme.generated.pg_catalog.routines.HashRangeExtended
import org.acme.generated.pg_catalog.routines.HashRecord
import org.acme.generated.pg_catalog.routines.HashRecordExtended
import org.acme.generated.pg_catalog.routines.Hashbpchar
import org.acme.generated.pg_catalog.routines.Hashbpcharextended
import org.acme.generated.pg_catalog.routines.Hashchar
import org.acme.generated.pg_catalog.routines.Hashcharextended
import org.acme.generated.pg_catalog.routines.Hashenum
import org.acme.generated.pg_catalog.routines.Hashenumextended
import org.acme.generated.pg_catalog.routines.Hashfloat4
import org.acme.generated.pg_catalog.routines.Hashfloat4extended
import org.acme.generated.pg_catalog.routines.Hashfloat8
import org.acme.generated.pg_catalog.routines.Hashfloat8extended
import org.acme.generated.pg_catalog.routines.Hashhandler
import org.acme.generated.pg_catalog.routines.Hashinet
import org.acme.generated.pg_catalog.routines.Hashinetextended
import org.acme.generated.pg_catalog.routines.Hashint2
import org.acme.generated.pg_catalog.routines.Hashint2extended
import org.acme.generated.pg_catalog.routines.Hashint4
import org.acme.generated.pg_catalog.routines.Hashint4extended
import org.acme.generated.pg_catalog.routines.Hashint8
import org.acme.generated.pg_catalog.routines.Hashint8extended
import org.acme.generated.pg_catalog.routines.Hashmacaddr
import org.acme.generated.pg_catalog.routines.Hashmacaddr8
import org.acme.generated.pg_catalog.routines.Hashmacaddr8extended
import org.acme.generated.pg_catalog.routines.Hashmacaddrextended
import org.acme.generated.pg_catalog.routines.Hashname
import org.acme.generated.pg_catalog.routines.Hashnameextended
import org.acme.generated.pg_catalog.routines.Hashoid
import org.acme.generated.pg_catalog.routines.Hashoidextended
import org.acme.generated.pg_catalog.routines.Hashoidvector
import org.acme.generated.pg_catalog.routines.Hashoidvectorextended
import org.acme.generated.pg_catalog.routines.Hashtext
import org.acme.generated.pg_catalog.routines.Hashtextextended
import org.acme.generated.pg_catalog.routines.Hashtid
import org.acme.generated.pg_catalog.routines.Hashtidextended
import org.acme.generated.pg_catalog.routines.Hashvarlena
import org.acme.generated.pg_catalog.routines.Hashvarlenaextended
import org.acme.generated.pg_catalog.routines.HeapTableamHandler
import org.acme.generated.pg_catalog.routines.Height
import org.acme.generated.pg_catalog.routines.Host
import org.acme.generated.pg_catalog.routines.Hostmask
import org.acme.generated.pg_catalog.routines.Iclikejoinsel
import org.acme.generated.pg_catalog.routines.Iclikesel
import org.acme.generated.pg_catalog.routines.Icnlikejoinsel
import org.acme.generated.pg_catalog.routines.Icnlikesel
import org.acme.generated.pg_catalog.routines.Icregexeqjoinsel
import org.acme.generated.pg_catalog.routines.Icregexeqsel
import org.acme.generated.pg_catalog.routines.Icregexnejoinsel
import org.acme.generated.pg_catalog.routines.Icregexnesel
import org.acme.generated.pg_catalog.routines.InRange1
import org.acme.generated.pg_catalog.routines.InRange10
import org.acme.generated.pg_catalog.routines.InRange11
import org.acme.generated.pg_catalog.routines.InRange12
import org.acme.generated.pg_catalog.routines.InRange13
import org.acme.generated.pg_catalog.routines.InRange14
import org.acme.generated.pg_catalog.routines.InRange15
import org.acme.generated.pg_catalog.routines.InRange16
import org.acme.generated.pg_catalog.routines.InRange2
import org.acme.generated.pg_catalog.routines.InRange3
import org.acme.generated.pg_catalog.routines.InRange4
import org.acme.generated.pg_catalog.routines.InRange5
import org.acme.generated.pg_catalog.routines.InRange6
import org.acme.generated.pg_catalog.routines.InRange7
import org.acme.generated.pg_catalog.routines.InRange8
import org.acme.generated.pg_catalog.routines.InRange9
import org.acme.generated.pg_catalog.routines.IndexAmHandlerIn
import org.acme.generated.pg_catalog.routines.IndexAmHandlerOut
import org.acme.generated.pg_catalog.routines.InetClientAddr
import org.acme.generated.pg_catalog.routines.InetClientPort
import org.acme.generated.pg_catalog.routines.InetGistCompress
import org.acme.generated.pg_catalog.routines.InetGistConsistent
import org.acme.generated.pg_catalog.routines.InetGistFetch
import org.acme.generated.pg_catalog.routines.InetGistPenalty
import org.acme.generated.pg_catalog.routines.InetGistPicksplit
import org.acme.generated.pg_catalog.routines.InetGistSame
import org.acme.generated.pg_catalog.routines.InetGistUnion
import org.acme.generated.pg_catalog.routines.InetIn
import org.acme.generated.pg_catalog.routines.InetMerge
import org.acme.generated.pg_catalog.routines.InetOut
import org.acme.generated.pg_catalog.routines.InetRecv
import org.acme.generated.pg_catalog.routines.InetSameFamily
import org.acme.generated.pg_catalog.routines.InetSend
import org.acme.generated.pg_catalog.routines.InetServerAddr
import org.acme.generated.pg_catalog.routines.InetServerPort
import org.acme.generated.pg_catalog.routines.InetSpgChoose
import org.acme.generated.pg_catalog.routines.InetSpgConfig
import org.acme.generated.pg_catalog.routines.InetSpgInnerConsistent
import org.acme.generated.pg_catalog.routines.InetSpgLeafConsistent
import org.acme.generated.pg_catalog.routines.InetSpgPicksplit
import org.acme.generated.pg_catalog.routines.Inetand
import org.acme.generated.pg_catalog.routines.Inetmi
import org.acme.generated.pg_catalog.routines.InetmiInt8
import org.acme.generated.pg_catalog.routines.Inetnot
import org.acme.generated.pg_catalog.routines.Inetor
import org.acme.generated.pg_catalog.routines.Inetpl
import org.acme.generated.pg_catalog.routines.Initcap
import org.acme.generated.pg_catalog.routines.Int21
import org.acme.generated.pg_catalog.routines.Int22
import org.acme.generated.pg_catalog.routines.Int23
import org.acme.generated.pg_catalog.routines.Int24
import org.acme.generated.pg_catalog.routines.Int24div
import org.acme.generated.pg_catalog.routines.Int24eq
import org.acme.generated.pg_catalog.routines.Int24ge
import org.acme.generated.pg_catalog.routines.Int24gt
import org.acme.generated.pg_catalog.routines.Int24le
import org.acme.generated.pg_catalog.routines.Int24lt
import org.acme.generated.pg_catalog.routines.Int24mi
import org.acme.generated.pg_catalog.routines.Int24mul
import org.acme.generated.pg_catalog.routines.Int24ne
import org.acme.generated.pg_catalog.routines.Int24pl
import org.acme.generated.pg_catalog.routines.Int25
import org.acme.generated.pg_catalog.routines.Int26
import org.acme.generated.pg_catalog.routines.Int28div
import org.acme.generated.pg_catalog.routines.Int28eq
import org.acme.generated.pg_catalog.routines.Int28ge
import org.acme.generated.pg_catalog.routines.Int28gt
import org.acme.generated.pg_catalog.routines.Int28le
import org.acme.generated.pg_catalog.routines.Int28lt
import org.acme.generated.pg_catalog.routines.Int28mi
import org.acme.generated.pg_catalog.routines.Int28mul
import org.acme.generated.pg_catalog.routines.Int28ne
import org.acme.generated.pg_catalog.routines.Int28pl
import org.acme.generated.pg_catalog.routines.Int2Accum
import org.acme.generated.pg_catalog.routines.Int2AccumInv
import org.acme.generated.pg_catalog.routines.Int2AvgAccum
import org.acme.generated.pg_catalog.routines.Int2AvgAccumInv
import org.acme.generated.pg_catalog.routines.Int2MulCash
import org.acme.generated.pg_catalog.routines.Int2Sum
import org.acme.generated.pg_catalog.routines.Int2abs
import org.acme.generated.pg_catalog.routines.Int2and
import org.acme.generated.pg_catalog.routines.Int2div
import org.acme.generated.pg_catalog.routines.Int2eq
import org.acme.generated.pg_catalog.routines.Int2ge
import org.acme.generated.pg_catalog.routines.Int2gt
import org.acme.generated.pg_catalog.routines.Int2in
import org.acme.generated.pg_catalog.routines.Int2int4Sum
import org.acme.generated.pg_catalog.routines.Int2larger
import org.acme.generated.pg_catalog.routines.Int2le
import org.acme.generated.pg_catalog.routines.Int2lt
import org.acme.generated.pg_catalog.routines.Int2mi
import org.acme.generated.pg_catalog.routines.Int2mod
import org.acme.generated.pg_catalog.routines.Int2mul
import org.acme.generated.pg_catalog.routines.Int2ne
import org.acme.generated.pg_catalog.routines.Int2not
import org.acme.generated.pg_catalog.routines.Int2or
import org.acme.generated.pg_catalog.routines.Int2out
import org.acme.generated.pg_catalog.routines.Int2pl
import org.acme.generated.pg_catalog.routines.Int2recv
import org.acme.generated.pg_catalog.routines.Int2send
import org.acme.generated.pg_catalog.routines.Int2shl
import org.acme.generated.pg_catalog.routines.Int2shr
import org.acme.generated.pg_catalog.routines.Int2smaller
import org.acme.generated.pg_catalog.routines.Int2um
import org.acme.generated.pg_catalog.routines.Int2up
import org.acme.generated.pg_catalog.routines.Int2vectorin
import org.acme.generated.pg_catalog.routines.Int2vectorout
import org.acme.generated.pg_catalog.routines.Int2vectorrecv
import org.acme.generated.pg_catalog.routines.Int2vectorsend
import org.acme.generated.pg_catalog.routines.Int2xor
import org.acme.generated.pg_catalog.routines.Int41
import org.acme.generated.pg_catalog.routines.Int42
import org.acme.generated.pg_catalog.routines.Int42div
import org.acme.generated.pg_catalog.routines.Int42eq
import org.acme.generated.pg_catalog.routines.Int42ge
import org.acme.generated.pg_catalog.routines.Int42gt
import org.acme.generated.pg_catalog.routines.Int42le
import org.acme.generated.pg_catalog.routines.Int42lt
import org.acme.generated.pg_catalog.routines.Int42mi
import org.acme.generated.pg_catalog.routines.Int42mul
import org.acme.generated.pg_catalog.routines.Int42ne
import org.acme.generated.pg_catalog.routines.Int42pl
import org.acme.generated.pg_catalog.routines.Int43
import org.acme.generated.pg_catalog.routines.Int44
import org.acme.generated.pg_catalog.routines.Int45
import org.acme.generated.pg_catalog.routines.Int46
import org.acme.generated.pg_catalog.routines.Int47
import org.acme.generated.pg_catalog.routines.Int48
import org.acme.generated.pg_catalog.routines.Int48div
import org.acme.generated.pg_catalog.routines.Int48eq
import org.acme.generated.pg_catalog.routines.Int48ge
import org.acme.generated.pg_catalog.routines.Int48gt
import org.acme.generated.pg_catalog.routines.Int48le
import org.acme.generated.pg_catalog.routines.Int48lt
import org.acme.generated.pg_catalog.routines.Int48mi
import org.acme.generated.pg_catalog.routines.Int48mul
import org.acme.generated.pg_catalog.routines.Int48ne
import org.acme.generated.pg_catalog.routines.Int48pl
import org.acme.generated.pg_catalog.routines.Int49
import org.acme.generated.pg_catalog.routines.Int4Accum
import org.acme.generated.pg_catalog.routines.Int4AccumInv
import org.acme.generated.pg_catalog.routines.Int4AvgAccum
import org.acme.generated.pg_catalog.routines.Int4AvgAccumInv
import org.acme.generated.pg_catalog.routines.Int4AvgCombine
import org.acme.generated.pg_catalog.routines.Int4MulCash
import org.acme.generated.pg_catalog.routines.Int4Sum
import org.acme.generated.pg_catalog.routines.Int4abs
import org.acme.generated.pg_catalog.routines.Int4and
import org.acme.generated.pg_catalog.routines.Int4div
import org.acme.generated.pg_catalog.routines.Int4eq
import org.acme.generated.pg_catalog.routines.Int4ge
import org.acme.generated.pg_catalog.routines.Int4gt
import org.acme.generated.pg_catalog.routines.Int4in
import org.acme.generated.pg_catalog.routines.Int4inc
import org.acme.generated.pg_catalog.routines.Int4larger
import org.acme.generated.pg_catalog.routines.Int4le
import org.acme.generated.pg_catalog.routines.Int4lt
import org.acme.generated.pg_catalog.routines.Int4mi
import org.acme.generated.pg_catalog.routines.Int4mod
import org.acme.generated.pg_catalog.routines.Int4mul
import org.acme.generated.pg_catalog.routines.Int4multirange1
import org.acme.generated.pg_catalog.routines.Int4multirange2
import org.acme.generated.pg_catalog.routines.Int4multirange3
import org.acme.generated.pg_catalog.routines.Int4ne
import org.acme.generated.pg_catalog.routines.Int4not
import org.acme.generated.pg_catalog.routines.Int4or
import org.acme.generated.pg_catalog.routines.Int4out
import org.acme.generated.pg_catalog.routines.Int4pl
import org.acme.generated.pg_catalog.routines.Int4range1
import org.acme.generated.pg_catalog.routines.Int4range2
import org.acme.generated.pg_catalog.routines.Int4rangeCanonical
import org.acme.generated.pg_catalog.routines.Int4rangeSubdiff
import org.acme.generated.pg_catalog.routines.Int4recv
import org.acme.generated.pg_catalog.routines.Int4send
import org.acme.generated.pg_catalog.routines.Int4shl
import org.acme.generated.pg_catalog.routines.Int4shr
import org.acme.generated.pg_catalog.routines.Int4smaller
import org.acme.generated.pg_catalog.routines.Int4um
import org.acme.generated.pg_catalog.routines.Int4up
import org.acme.generated.pg_catalog.routines.Int4xor
import org.acme.generated.pg_catalog.routines.Int81
import org.acme.generated.pg_catalog.routines.Int82
import org.acme.generated.pg_catalog.routines.Int82div
import org.acme.generated.pg_catalog.routines.Int82eq
import org.acme.generated.pg_catalog.routines.Int82ge
import org.acme.generated.pg_catalog.routines.Int82gt
import org.acme.generated.pg_catalog.routines.Int82le
import org.acme.generated.pg_catalog.routines.Int82lt
import org.acme.generated.pg_catalog.routines.Int82mi
import org.acme.generated.pg_catalog.routines.Int82mul
import org.acme.generated.pg_catalog.routines.Int82ne
import org.acme.generated.pg_catalog.routines.Int82pl
import org.acme.generated.pg_catalog.routines.Int83
import org.acme.generated.pg_catalog.routines.Int84
import org.acme.generated.pg_catalog.routines.Int84div
import org.acme.generated.pg_catalog.routines.Int84eq
import org.acme.generated.pg_catalog.routines.Int84ge
import org.acme.generated.pg_catalog.routines.Int84gt
import org.acme.generated.pg_catalog.routines.Int84le
import org.acme.generated.pg_catalog.routines.Int84lt
import org.acme.generated.pg_catalog.routines.Int84mi
import org.acme.generated.pg_catalog.routines.Int84mul
import org.acme.generated.pg_catalog.routines.Int84ne
import org.acme.generated.pg_catalog.routines.Int84pl
import org.acme.generated.pg_catalog.routines.Int85
import org.acme.generated.pg_catalog.routines.Int86
import org.acme.generated.pg_catalog.routines.Int87
import org.acme.generated.pg_catalog.routines.Int88
import org.acme.generated.pg_catalog.routines.Int8Accum
import org.acme.generated.pg_catalog.routines.Int8AccumInv
import org.acme.generated.pg_catalog.routines.Int8Avg
import org.acme.generated.pg_catalog.routines.Int8AvgAccum
import org.acme.generated.pg_catalog.routines.Int8AvgAccumInv
import org.acme.generated.pg_catalog.routines.Int8AvgCombine
import org.acme.generated.pg_catalog.routines.Int8AvgDeserialize
import org.acme.generated.pg_catalog.routines.Int8AvgSerialize
import org.acme.generated.pg_catalog.routines.Int8MulCash
import org.acme.generated.pg_catalog.routines.Int8Sum
import org.acme.generated.pg_catalog.routines.Int8abs
import org.acme.generated.pg_catalog.routines.Int8and
import org.acme.generated.pg_catalog.routines.Int8dec
import org.acme.generated.pg_catalog.routines.Int8decAny
import org.acme.generated.pg_catalog.routines.Int8div
import org.acme.generated.pg_catalog.routines.Int8eq
import org.acme.generated.pg_catalog.routines.Int8ge
import org.acme.generated.pg_catalog.routines.Int8gt
import org.acme.generated.pg_catalog.routines.Int8in
import org.acme.generated.pg_catalog.routines.Int8inc
import org.acme.generated.pg_catalog.routines.Int8incAny
import org.acme.generated.pg_catalog.routines.Int8incFloat8Float8
import org.acme.generated.pg_catalog.routines.Int8larger
import org.acme.generated.pg_catalog.routines.Int8le
import org.acme.generated.pg_catalog.routines.Int8lt
import org.acme.generated.pg_catalog.routines.Int8mi
import org.acme.generated.pg_catalog.routines.Int8mod
import org.acme.generated.pg_catalog.routines.Int8mul
import org.acme.generated.pg_catalog.routines.Int8multirange1
import org.acme.generated.pg_catalog.routines.Int8multirange2
import org.acme.generated.pg_catalog.routines.Int8multirange3
import org.acme.generated.pg_catalog.routines.Int8ne
import org.acme.generated.pg_catalog.routines.Int8not
import org.acme.generated.pg_catalog.routines.Int8or
import org.acme.generated.pg_catalog.routines.Int8out
import org.acme.generated.pg_catalog.routines.Int8pl
import org.acme.generated.pg_catalog.routines.Int8plInet
import org.acme.generated.pg_catalog.routines.Int8range1
import org.acme.generated.pg_catalog.routines.Int8range2
import org.acme.generated.pg_catalog.routines.Int8rangeCanonical
import org.acme.generated.pg_catalog.routines.Int8rangeSubdiff
import org.acme.generated.pg_catalog.routines.Int8recv
import org.acme.generated.pg_catalog.routines.Int8send
import org.acme.generated.pg_catalog.routines.Int8shl
import org.acme.generated.pg_catalog.routines.Int8shr
import org.acme.generated.pg_catalog.routines.Int8smaller
import org.acme.generated.pg_catalog.routines.Int8um
import org.acme.generated.pg_catalog.routines.Int8up
import org.acme.generated.pg_catalog.routines.Int8xor
import org.acme.generated.pg_catalog.routines.IntegerPlDate
import org.acme.generated.pg_catalog.routines.InterLb
import org.acme.generated.pg_catalog.routines.InterSb
import org.acme.generated.pg_catalog.routines.InterSl
import org.acme.generated.pg_catalog.routines.InternalIn
import org.acme.generated.pg_catalog.routines.InternalOut
import org.acme.generated.pg_catalog.routines.Interval1
import org.acme.generated.pg_catalog.routines.Interval2
import org.acme.generated.pg_catalog.routines.IntervalAccum
import org.acme.generated.pg_catalog.routines.IntervalAccumInv
import org.acme.generated.pg_catalog.routines.IntervalAvg
import org.acme.generated.pg_catalog.routines.IntervalCmp
import org.acme.generated.pg_catalog.routines.IntervalCombine
import org.acme.generated.pg_catalog.routines.IntervalDiv
import org.acme.generated.pg_catalog.routines.IntervalEq
import org.acme.generated.pg_catalog.routines.IntervalGe
import org.acme.generated.pg_catalog.routines.IntervalGt
import org.acme.generated.pg_catalog.routines.IntervalHash
import org.acme.generated.pg_catalog.routines.IntervalHashExtended
import org.acme.generated.pg_catalog.routines.IntervalIn
import org.acme.generated.pg_catalog.routines.IntervalLarger
import org.acme.generated.pg_catalog.routines.IntervalLe
import org.acme.generated.pg_catalog.routines.IntervalLt
import org.acme.generated.pg_catalog.routines.IntervalMi
import org.acme.generated.pg_catalog.routines.IntervalMul
import org.acme.generated.pg_catalog.routines.IntervalNe
import org.acme.generated.pg_catalog.routines.IntervalOut
import org.acme.generated.pg_catalog.routines.IntervalPl
import org.acme.generated.pg_catalog.routines.IntervalPlDate
import org.acme.generated.pg_catalog.routines.IntervalPlTime
import org.acme.generated.pg_catalog.routines.IntervalPlTimestamp
import org.acme.generated.pg_catalog.routines.IntervalPlTimestamptz
import org.acme.generated.pg_catalog.routines.IntervalPlTimetz
import org.acme.generated.pg_catalog.routines.IntervalRecv
import org.acme.generated.pg_catalog.routines.IntervalSend
import org.acme.generated.pg_catalog.routines.IntervalSmaller
import org.acme.generated.pg_catalog.routines.IntervalSupport
import org.acme.generated.pg_catalog.routines.IntervalUm
import org.acme.generated.pg_catalog.routines.Intervaltypmodin
import org.acme.generated.pg_catalog.routines.Intervaltypmodout
import org.acme.generated.pg_catalog.routines.IsNormalized
import org.acme.generated.pg_catalog.routines.Isclosed
import org.acme.generated.pg_catalog.routines.Isempty1
import org.acme.generated.pg_catalog.routines.Isempty2
import org.acme.generated.pg_catalog.routines.Isfinite1
import org.acme.generated.pg_catalog.routines.Isfinite2
import org.acme.generated.pg_catalog.routines.Isfinite3
import org.acme.generated.pg_catalog.routines.Isfinite4
import org.acme.generated.pg_catalog.routines.Ishorizontal1
import org.acme.generated.pg_catalog.routines.Ishorizontal2
import org.acme.generated.pg_catalog.routines.Ishorizontal3
import org.acme.generated.pg_catalog.routines.Iso8859ToUtf8
import org.acme.generated.pg_catalog.routines.Iso8859_1ToUtf8
import org.acme.generated.pg_catalog.routines.IsoToKoi8r
import org.acme.generated.pg_catalog.routines.IsoToMic
import org.acme.generated.pg_catalog.routines.IsoToWin1251
import org.acme.generated.pg_catalog.routines.IsoToWin866
import org.acme.generated.pg_catalog.routines.Isopen
import org.acme.generated.pg_catalog.routines.Isparallel1
import org.acme.generated.pg_catalog.routines.Isparallel2
import org.acme.generated.pg_catalog.routines.Isperp1
import org.acme.generated.pg_catalog.routines.Isperp2
import org.acme.generated.pg_catalog.routines.Isvertical1
import org.acme.generated.pg_catalog.routines.Isvertical2
import org.acme.generated.pg_catalog.routines.Isvertical3
import org.acme.generated.pg_catalog.routines.JohabToUtf8
import org.acme.generated.pg_catalog.routines.JsonAgg
import org.acme.generated.pg_catalog.routines.JsonAggFinalfn
import org.acme.generated.pg_catalog.routines.JsonAggTransfn
import org.acme.generated.pg_catalog.routines.JsonArrayElement
import org.acme.generated.pg_catalog.routines.JsonArrayElementText
import org.acme.generated.pg_catalog.routines.JsonArrayLength
import org.acme.generated.pg_catalog.routines.JsonBuildArray1
import org.acme.generated.pg_catalog.routines.JsonBuildArray2
import org.acme.generated.pg_catalog.routines.JsonBuildObject1
import org.acme.generated.pg_catalog.routines.JsonBuildObject2
import org.acme.generated.pg_catalog.routines.JsonExtractPath
import org.acme.generated.pg_catalog.routines.JsonExtractPathText
import org.acme.generated.pg_catalog.routines.JsonIn
import org.acme.generated.pg_catalog.routines.JsonObject1
import org.acme.generated.pg_catalog.routines.JsonObject2
import org.acme.generated.pg_catalog.routines.JsonObjectAgg
import org.acme.generated.pg_catalog.routines.JsonObjectAggFinalfn
import org.acme.generated.pg_catalog.routines.JsonObjectAggTransfn
import org.acme.generated.pg_catalog.routines.JsonObjectField
import org.acme.generated.pg_catalog.routines.JsonObjectFieldText
import org.acme.generated.pg_catalog.routines.JsonOut
import org.acme.generated.pg_catalog.routines.JsonPopulateRecord
import org.acme.generated.pg_catalog.routines.JsonRecv
import org.acme.generated.pg_catalog.routines.JsonSend
import org.acme.generated.pg_catalog.routines.JsonStripNulls
import org.acme.generated.pg_catalog.routines.JsonToRecord
import org.acme.generated.pg_catalog.routines.JsonToTsvector1
import org.acme.generated.pg_catalog.routines.JsonToTsvector2
import org.acme.generated.pg_catalog.routines.JsonTypeof
import org.acme.generated.pg_catalog.routines.JsonbAgg
import org.acme.generated.pg_catalog.routines.JsonbAggFinalfn
import org.acme.generated.pg_catalog.routines.JsonbAggTransfn
import org.acme.generated.pg_catalog.routines.JsonbArrayElement
import org.acme.generated.pg_catalog.routines.JsonbArrayElementText
import org.acme.generated.pg_catalog.routines.JsonbArrayLength
import org.acme.generated.pg_catalog.routines.JsonbBuildArray1
import org.acme.generated.pg_catalog.routines.JsonbBuildArray2
import org.acme.generated.pg_catalog.routines.JsonbBuildObject1
import org.acme.generated.pg_catalog.routines.JsonbBuildObject2
import org.acme.generated.pg_catalog.routines.JsonbCmp
import org.acme.generated.pg_catalog.routines.JsonbConcat
import org.acme.generated.pg_catalog.routines.JsonbContained
import org.acme.generated.pg_catalog.routines.JsonbContains
import org.acme.generated.pg_catalog.routines.JsonbDelete1
import org.acme.generated.pg_catalog.routines.JsonbDelete2
import org.acme.generated.pg_catalog.routines.JsonbDelete3
import org.acme.generated.pg_catalog.routines.JsonbDeletePath
import org.acme.generated.pg_catalog.routines.JsonbEq
import org.acme.generated.pg_catalog.routines.JsonbExists
import org.acme.generated.pg_catalog.routines.JsonbExistsAll
import org.acme.generated.pg_catalog.routines.JsonbExistsAny
import org.acme.generated.pg_catalog.routines.JsonbExtractPath
import org.acme.generated.pg_catalog.routines.JsonbExtractPathText
import org.acme.generated.pg_catalog.routines.JsonbGe
import org.acme.generated.pg_catalog.routines.JsonbGt
import org.acme.generated.pg_catalog.routines.JsonbHash
import org.acme.generated.pg_catalog.routines.JsonbHashExtended
import org.acme.generated.pg_catalog.routines.JsonbIn
import org.acme.generated.pg_catalog.routines.JsonbInsert
import org.acme.generated.pg_catalog.routines.JsonbLe
import org.acme.generated.pg_catalog.routines.JsonbLt
import org.acme.generated.pg_catalog.routines.JsonbNe
import org.acme.generated.pg_catalog.routines.JsonbObject1
import org.acme.generated.pg_catalog.routines.JsonbObject2
import org.acme.generated.pg_catalog.routines.JsonbObjectAgg
import org.acme.generated.pg_catalog.routines.JsonbObjectAggFinalfn
import org.acme.generated.pg_catalog.routines.JsonbObjectAggTransfn
import org.acme.generated.pg_catalog.routines.JsonbObjectField
import org.acme.generated.pg_catalog.routines.JsonbObjectFieldText
import org.acme.generated.pg_catalog.routines.JsonbOut
import org.acme.generated.pg_catalog.routines.JsonbPathExists
import org.acme.generated.pg_catalog.routines.JsonbPathExistsOpr
import org.acme.generated.pg_catalog.routines.JsonbPathExistsTz
import org.acme.generated.pg_catalog.routines.JsonbPathMatch
import org.acme.generated.pg_catalog.routines.JsonbPathMatchOpr
import org.acme.generated.pg_catalog.routines.JsonbPathMatchTz
import org.acme.generated.pg_catalog.routines.JsonbPathQueryArray
import org.acme.generated.pg_catalog.routines.JsonbPathQueryArrayTz
import org.acme.generated.pg_catalog.routines.JsonbPathQueryFirst
import org.acme.generated.pg_catalog.routines.JsonbPathQueryFirstTz
import org.acme.generated.pg_catalog.routines.JsonbPopulateRecord
import org.acme.generated.pg_catalog.routines.JsonbPretty
import org.acme.generated.pg_catalog.routines.JsonbRecv
import org.acme.generated.pg_catalog.routines.JsonbSend
import org.acme.generated.pg_catalog.routines.JsonbSet
import org.acme.generated.pg_catalog.routines.JsonbSetLax
import org.acme.generated.pg_catalog.routines.JsonbStripNulls
import org.acme.generated.pg_catalog.routines.JsonbSubscriptHandler
import org.acme.generated.pg_catalog.routines.JsonbToRecord
import org.acme.generated.pg_catalog.routines.JsonbToTsvector1
import org.acme.generated.pg_catalog.routines.JsonbToTsvector2
import org.acme.generated.pg_catalog.routines.JsonbTypeof
import org.acme.generated.pg_catalog.routines.JsonpathIn
import org.acme.generated.pg_catalog.routines.JsonpathOut
import org.acme.generated.pg_catalog.routines.JsonpathRecv
import org.acme.generated.pg_catalog.routines.JsonpathSend
import org.acme.generated.pg_catalog.routines.JustifyDays
import org.acme.generated.pg_catalog.routines.JustifyHours
import org.acme.generated.pg_catalog.routines.JustifyInterval
import org.acme.generated.pg_catalog.routines.Koi8rToIso
import org.acme.generated.pg_catalog.routines.Koi8rToMic
import org.acme.generated.pg_catalog.routines.Koi8rToUtf8
import org.acme.generated.pg_catalog.routines.Koi8rToWin1251
import org.acme.generated.pg_catalog.routines.Koi8rToWin866
import org.acme.generated.pg_catalog.routines.Koi8uToUtf8
import org.acme.generated.pg_catalog.routines.Lag1
import org.acme.generated.pg_catalog.routines.Lag2
import org.acme.generated.pg_catalog.routines.Lag3
import org.acme.generated.pg_catalog.routines.LanguageHandlerIn
import org.acme.generated.pg_catalog.routines.LanguageHandlerOut
import org.acme.generated.pg_catalog.routines.LastValue
import org.acme.generated.pg_catalog.routines.Lastval
import org.acme.generated.pg_catalog.routines.Latin1ToMic
import org.acme.generated.pg_catalog.routines.Latin2ToMic
import org.acme.generated.pg_catalog.routines.Latin2ToWin1250
import org.acme.generated.pg_catalog.routines.Latin3ToMic
import org.acme.generated.pg_catalog.routines.Latin4ToMic
import org.acme.generated.pg_catalog.routines.Lcm1
import org.acme.generated.pg_catalog.routines.Lcm2
import org.acme.generated.pg_catalog.routines.Lcm3
import org.acme.generated.pg_catalog.routines.Lead1
import org.acme.generated.pg_catalog.routines.Lead2
import org.acme.generated.pg_catalog.routines.Lead3
import org.acme.generated.pg_catalog.routines.Left
import org.acme.generated.pg_catalog.routines.Length1
import org.acme.generated.pg_catalog.routines.Length2
import org.acme.generated.pg_catalog.routines.Length3
import org.acme.generated.pg_catalog.routines.Length4
import org.acme.generated.pg_catalog.routines.Length5
import org.acme.generated.pg_catalog.routines.Length6
import org.acme.generated.pg_catalog.routines.Length7
import org.acme.generated.pg_catalog.routines.Length8
import org.acme.generated.pg_catalog.routines.Like1
import org.acme.generated.pg_catalog.routines.Like2
import org.acme.generated.pg_catalog.routines.Like3
import org.acme.generated.pg_catalog.routines.LikeEscape1
import org.acme.generated.pg_catalog.routines.LikeEscape2
import org.acme.generated.pg_catalog.routines.Likejoinsel
import org.acme.generated.pg_catalog.routines.Likesel
import org.acme.generated.pg_catalog.routines.Line
import org.acme.generated.pg_catalog.routines.LineDistance
import org.acme.generated.pg_catalog.routines.LineEq
import org.acme.generated.pg_catalog.routines.LineHorizontal
import org.acme.generated.pg_catalog.routines.LineIn
import org.acme.generated.pg_catalog.routines.LineInterpt
import org.acme.generated.pg_catalog.routines.LineIntersect
import org.acme.generated.pg_catalog.routines.LineOut
import org.acme.generated.pg_catalog.routines.LineParallel
import org.acme.generated.pg_catalog.routines.LinePerp
import org.acme.generated.pg_catalog.routines.LineRecv
import org.acme.generated.pg_catalog.routines.LineSend
import org.acme.generated.pg_catalog.routines.LineVertical
import org.acme.generated.pg_catalog.routines.Ln1
import org.acme.generated.pg_catalog.routines.Ln2
import org.acme.generated.pg_catalog.routines.LoClose
import org.acme.generated.pg_catalog.routines.LoCreat
import org.acme.generated.pg_catalog.routines.LoCreate
import org.acme.generated.pg_catalog.routines.LoExport
import org.acme.generated.pg_catalog.routines.LoFromBytea
import org.acme.generated.pg_catalog.routines.LoGet1
import org.acme.generated.pg_catalog.routines.LoGet2
import org.acme.generated.pg_catalog.routines.LoImport1
import org.acme.generated.pg_catalog.routines.LoImport2
import org.acme.generated.pg_catalog.routines.LoLseek
import org.acme.generated.pg_catalog.routines.LoLseek64
import org.acme.generated.pg_catalog.routines.LoOpen
import org.acme.generated.pg_catalog.routines.LoPut
import org.acme.generated.pg_catalog.routines.LoTell
import org.acme.generated.pg_catalog.routines.LoTell64
import org.acme.generated.pg_catalog.routines.LoTruncate
import org.acme.generated.pg_catalog.routines.LoTruncate64
import org.acme.generated.pg_catalog.routines.LoUnlink
import org.acme.generated.pg_catalog.routines.Log1
import org.acme.generated.pg_catalog.routines.Log101
import org.acme.generated.pg_catalog.routines.Log102
import org.acme.generated.pg_catalog.routines.Log2
import org.acme.generated.pg_catalog.routines.Log3
import org.acme.generated.pg_catalog.routines.Loread
import org.acme.generated.pg_catalog.routines.Lower1
import org.acme.generated.pg_catalog.routines.Lower2
import org.acme.generated.pg_catalog.routines.Lower3
import org.acme.generated.pg_catalog.routines.LowerInc1
import org.acme.generated.pg_catalog.routines.LowerInc2
import org.acme.generated.pg_catalog.routines.LowerInf1
import org.acme.generated.pg_catalog.routines.LowerInf2
import org.acme.generated.pg_catalog.routines.Lowrite
import org.acme.generated.pg_catalog.routines.Lpad1
import org.acme.generated.pg_catalog.routines.Lpad2
import org.acme.generated.pg_catalog.routines.Lseg1
import org.acme.generated.pg_catalog.routines.Lseg2
import org.acme.generated.pg_catalog.routines.LsegCenter
import org.acme.generated.pg_catalog.routines.LsegDistance
import org.acme.generated.pg_catalog.routines.LsegEq
import org.acme.generated.pg_catalog.routines.LsegGe
import org.acme.generated.pg_catalog.routines.LsegGt
import org.acme.generated.pg_catalog.routines.LsegHorizontal
import org.acme.generated.pg_catalog.routines.LsegIn
import org.acme.generated.pg_catalog.routines.LsegInterpt
import org.acme.generated.pg_catalog.routines.LsegIntersect
import org.acme.generated.pg_catalog.routines.LsegLe
import org.acme.generated.pg_catalog.routines.LsegLength
import org.acme.generated.pg_catalog.routines.LsegLt
import org.acme.generated.pg_catalog.routines.LsegNe
import org.acme.generated.pg_catalog.routines.LsegOut
import org.acme.generated.pg_catalog.routines.LsegParallel
import org.acme.generated.pg_catalog.routines.LsegPerp
import org.acme.generated.pg_catalog.routines.LsegRecv
import org.acme.generated.pg_catalog.routines.LsegSend
import org.acme.generated.pg_catalog.routines.LsegVertical
import org.acme.generated.pg_catalog.routines.Ltrim1
import org.acme.generated.pg_catalog.routines.Ltrim2
import org.acme.generated.pg_catalog.routines.Ltrim3
import org.acme.generated.pg_catalog.routines.Macaddr
import org.acme.generated.pg_catalog.routines.Macaddr8
import org.acme.generated.pg_catalog.routines.Macaddr8And
import org.acme.generated.pg_catalog.routines.Macaddr8Cmp
import org.acme.generated.pg_catalog.routines.Macaddr8Eq
import org.acme.generated.pg_catalog.routines.Macaddr8Ge
import org.acme.generated.pg_catalog.routines.Macaddr8Gt
import org.acme.generated.pg_catalog.routines.Macaddr8In
import org.acme.generated.pg_catalog.routines.Macaddr8Le
import org.acme.generated.pg_catalog.routines.Macaddr8Lt
import org.acme.generated.pg_catalog.routines.Macaddr8Ne
import org.acme.generated.pg_catalog.routines.Macaddr8Not
import org.acme.generated.pg_catalog.routines.Macaddr8Or
import org.acme.generated.pg_catalog.routines.Macaddr8Out
import org.acme.generated.pg_catalog.routines.Macaddr8Recv
import org.acme.generated.pg_catalog.routines.Macaddr8Send
import org.acme.generated.pg_catalog.routines.Macaddr8Set7bit
import org.acme.generated.pg_catalog.routines.MacaddrAnd
import org.acme.generated.pg_catalog.routines.MacaddrCmp
import org.acme.generated.pg_catalog.routines.MacaddrEq
import org.acme.generated.pg_catalog.routines.MacaddrGe
import org.acme.generated.pg_catalog.routines.MacaddrGt
import org.acme.generated.pg_catalog.routines.MacaddrIn
import org.acme.generated.pg_catalog.routines.MacaddrLe
import org.acme.generated.pg_catalog.routines.MacaddrLt
import org.acme.generated.pg_catalog.routines.MacaddrNe
import org.acme.generated.pg_catalog.routines.MacaddrNot
import org.acme.generated.pg_catalog.routines.MacaddrOr
import org.acme.generated.pg_catalog.routines.MacaddrOut
import org.acme.generated.pg_catalog.routines.MacaddrRecv
import org.acme.generated.pg_catalog.routines.MacaddrSend
import org.acme.generated.pg_catalog.routines.MacaddrSortsupport
import org.acme.generated.pg_catalog.routines.MakeDate
import org.acme.generated.pg_catalog.routines.MakeInterval
import org.acme.generated.pg_catalog.routines.MakeTime
import org.acme.generated.pg_catalog.routines.MakeTimestamp
import org.acme.generated.pg_catalog.routines.MakeTimestamptz1
import org.acme.generated.pg_catalog.routines.MakeTimestamptz2
import org.acme.generated.pg_catalog.routines.Makeaclitem
import org.acme.generated.pg_catalog.routines.Masklen
import org.acme.generated.pg_catalog.routines.Matchingjoinsel
import org.acme.generated.pg_catalog.routines.Matchingsel
import org.acme.generated.pg_catalog.routines.Max1
import org.acme.generated.pg_catalog.routines.Max10
import org.acme.generated.pg_catalog.routines.Max11
import org.acme.generated.pg_catalog.routines.Max12
import org.acme.generated.pg_catalog.routines.Max13
import org.acme.generated.pg_catalog.routines.Max14
import org.acme.generated.pg_catalog.routines.Max15
import org.acme.generated.pg_catalog.routines.Max16
import org.acme.generated.pg_catalog.routines.Max17
import org.acme.generated.pg_catalog.routines.Max18
import org.acme.generated.pg_catalog.routines.Max19
import org.acme.generated.pg_catalog.routines.Max2
import org.acme.generated.pg_catalog.routines.Max20
import org.acme.generated.pg_catalog.routines.Max21
import org.acme.generated.pg_catalog.routines.Max3
import org.acme.generated.pg_catalog.routines.Max4
import org.acme.generated.pg_catalog.routines.Max5
import org.acme.generated.pg_catalog.routines.Max6
import org.acme.generated.pg_catalog.routines.Max7
import org.acme.generated.pg_catalog.routines.Max8
import org.acme.generated.pg_catalog.routines.Max9
import org.acme.generated.pg_catalog.routines.Md51
import org.acme.generated.pg_catalog.routines.Md52
import org.acme.generated.pg_catalog.routines.MicToBig5
import org.acme.generated.pg_catalog.routines.MicToEucCn
import org.acme.generated.pg_catalog.routines.MicToEucJp
import org.acme.generated.pg_catalog.routines.MicToEucKr
import org.acme.generated.pg_catalog.routines.MicToEucTw
import org.acme.generated.pg_catalog.routines.MicToIso
import org.acme.generated.pg_catalog.routines.MicToKoi8r
import org.acme.generated.pg_catalog.routines.MicToLatin1
import org.acme.generated.pg_catalog.routines.MicToLatin2
import org.acme.generated.pg_catalog.routines.MicToLatin3
import org.acme.generated.pg_catalog.routines.MicToLatin4
import org.acme.generated.pg_catalog.routines.MicToSjis
import org.acme.generated.pg_catalog.routines.MicToWin1250
import org.acme.generated.pg_catalog.routines.MicToWin1251
import org.acme.generated.pg_catalog.routines.MicToWin866
import org.acme.generated.pg_catalog.routines.Min1
import org.acme.generated.pg_catalog.routines.Min10
import org.acme.generated.pg_catalog.routines.Min11
import org.acme.generated.pg_catalog.routines.Min12
import org.acme.generated.pg_catalog.routines.Min13
import org.acme.generated.pg_catalog.routines.Min14
import org.acme.generated.pg_catalog.routines.Min15
import org.acme.generated.pg_catalog.routines.Min16
import org.acme.generated.pg_catalog.routines.Min17
import org.acme.generated.pg_catalog.routines.Min18
import org.acme.generated.pg_catalog.routines.Min19
import org.acme.generated.pg_catalog.routines.Min2
import org.acme.generated.pg_catalog.routines.Min20
import org.acme.generated.pg_catalog.routines.Min21
import org.acme.generated.pg_catalog.routines.Min3
import org.acme.generated.pg_catalog.routines.Min4
import org.acme.generated.pg_catalog.routines.Min5
import org.acme.generated.pg_catalog.routines.Min6
import org.acme.generated.pg_catalog.routines.Min7
import org.acme.generated.pg_catalog.routines.Min8
import org.acme.generated.pg_catalog.routines.Min9
import org.acme.generated.pg_catalog.routines.MinScale
import org.acme.generated.pg_catalog.routines.Mod1
import org.acme.generated.pg_catalog.routines.Mod2
import org.acme.generated.pg_catalog.routines.Mod3
import org.acme.generated.pg_catalog.routines.Mod4
import org.acme.generated.pg_catalog.routines.Mode
import org.acme.generated.pg_catalog.routines.ModeFinal
import org.acme.generated.pg_catalog.routines.Money1
import org.acme.generated.pg_catalog.routines.Money2
import org.acme.generated.pg_catalog.routines.Money3
import org.acme.generated.pg_catalog.routines.MulDInterval
import org.acme.generated.pg_catalog.routines.Multirange
import org.acme.generated.pg_catalog.routines.MultirangeAdjacentMultirange
import org.acme.generated.pg_catalog.routines.MultirangeAdjacentRange
import org.acme.generated.pg_catalog.routines.MultirangeAfterMultirange
import org.acme.generated.pg_catalog.routines.MultirangeAfterRange
import org.acme.generated.pg_catalog.routines.MultirangeBeforeMultirange
import org.acme.generated.pg_catalog.routines.MultirangeBeforeRange
import org.acme.generated.pg_catalog.routines.MultirangeCmp
import org.acme.generated.pg_catalog.routines.MultirangeContainedByMultirange
import org.acme.generated.pg_catalog.routines.MultirangeContainedByRange
import org.acme.generated.pg_catalog.routines.MultirangeContainsElem
import org.acme.generated.pg_catalog.routines.MultirangeContainsMultirange
import org.acme.generated.pg_catalog.routines.MultirangeContainsRange
import org.acme.generated.pg_catalog.routines.MultirangeEq
import org.acme.generated.pg_catalog.routines.MultirangeGe
import org.acme.generated.pg_catalog.routines.MultirangeGistCompress
import org.acme.generated.pg_catalog.routines.MultirangeGistConsistent
import org.acme.generated.pg_catalog.routines.MultirangeGt
import org.acme.generated.pg_catalog.routines.MultirangeIn
import org.acme.generated.pg_catalog.routines.MultirangeIntersect
import org.acme.generated.pg_catalog.routines.MultirangeIntersectAggTransfn
import org.acme.generated.pg_catalog.routines.MultirangeLe
import org.acme.generated.pg_catalog.routines.MultirangeLt
import org.acme.generated.pg_catalog.routines.MultirangeMinus
import org.acme.generated.pg_catalog.routines.MultirangeNe
import org.acme.generated.pg_catalog.routines.MultirangeOut
import org.acme.generated.pg_catalog.routines.MultirangeOverlapsMultirange
import org.acme.generated.pg_catalog.routines.MultirangeOverlapsRange
import org.acme.generated.pg_catalog.routines.MultirangeOverleftMultirange
import org.acme.generated.pg_catalog.routines.MultirangeOverleftRange
import org.acme.generated.pg_catalog.routines.MultirangeOverrightMultirange
import org.acme.generated.pg_catalog.routines.MultirangeOverrightRange
import org.acme.generated.pg_catalog.routines.MultirangeRecv
import org.acme.generated.pg_catalog.routines.MultirangeSend
import org.acme.generated.pg_catalog.routines.MultirangeTypanalyze
import org.acme.generated.pg_catalog.routines.MultirangeUnion
import org.acme.generated.pg_catalog.routines.Multirangesel
import org.acme.generated.pg_catalog.routines.MxidAge
import org.acme.generated.pg_catalog.routines.Name1
import org.acme.generated.pg_catalog.routines.Name2
import org.acme.generated.pg_catalog.routines.Name3
import org.acme.generated.pg_catalog.routines.Nameconcatoid
import org.acme.generated.pg_catalog.routines.Nameeq
import org.acme.generated.pg_catalog.routines.Nameeqtext
import org.acme.generated.pg_catalog.routines.Namege
import org.acme.generated.pg_catalog.routines.Namegetext
import org.acme.generated.pg_catalog.routines.Namegt
import org.acme.generated.pg_catalog.routines.Namegttext
import org.acme.generated.pg_catalog.routines.Nameiclike
import org.acme.generated.pg_catalog.routines.Nameicnlike
import org.acme.generated.pg_catalog.routines.Nameicregexeq
import org.acme.generated.pg_catalog.routines.Nameicregexne
import org.acme.generated.pg_catalog.routines.Namein
import org.acme.generated.pg_catalog.routines.Namele
import org.acme.generated.pg_catalog.routines.Nameletext
import org.acme.generated.pg_catalog.routines.Namelike
import org.acme.generated.pg_catalog.routines.Namelt
import org.acme.generated.pg_catalog.routines.Namelttext
import org.acme.generated.pg_catalog.routines.Namene
import org.acme.generated.pg_catalog.routines.Namenetext
import org.acme.generated.pg_catalog.routines.Namenlike
import org.acme.generated.pg_catalog.routines.Nameout
import org.acme.generated.pg_catalog.routines.Namerecv
import org.acme.generated.pg_catalog.routines.Nameregexeq
import org.acme.generated.pg_catalog.routines.Nameregexne
import org.acme.generated.pg_catalog.routines.Namesend
import org.acme.generated.pg_catalog.routines.Neqjoinsel
import org.acme.generated.pg_catalog.routines.Neqsel
import org.acme.generated.pg_catalog.routines.Netmask
import org.acme.generated.pg_catalog.routines.Network
import org.acme.generated.pg_catalog.routines.NetworkCmp
import org.acme.generated.pg_catalog.routines.NetworkEq
import org.acme.generated.pg_catalog.routines.NetworkGe
import org.acme.generated.pg_catalog.routines.NetworkGt
import org.acme.generated.pg_catalog.routines.NetworkLarger
import org.acme.generated.pg_catalog.routines.NetworkLe
import org.acme.generated.pg_catalog.routines.NetworkLt
import org.acme.generated.pg_catalog.routines.NetworkNe
import org.acme.generated.pg_catalog.routines.NetworkOverlap
import org.acme.generated.pg_catalog.routines.NetworkSmaller
import org.acme.generated.pg_catalog.routines.NetworkSortsupport
import org.acme.generated.pg_catalog.routines.NetworkSub
import org.acme.generated.pg_catalog.routines.NetworkSubeq
import org.acme.generated.pg_catalog.routines.NetworkSubsetSupport
import org.acme.generated.pg_catalog.routines.NetworkSup
import org.acme.generated.pg_catalog.routines.NetworkSupeq
import org.acme.generated.pg_catalog.routines.Networkjoinsel
import org.acme.generated.pg_catalog.routines.Networksel
import org.acme.generated.pg_catalog.routines.Nextval
import org.acme.generated.pg_catalog.routines.Nlikejoinsel
import org.acme.generated.pg_catalog.routines.Nlikesel
import org.acme.generated.pg_catalog.routines.Normalize
import org.acme.generated.pg_catalog.routines.Notlike1
import org.acme.generated.pg_catalog.routines.Notlike2
import org.acme.generated.pg_catalog.routines.Notlike3
import org.acme.generated.pg_catalog.routines.Now
import org.acme.generated.pg_catalog.routines.Npoints1
import org.acme.generated.pg_catalog.routines.Npoints2
import org.acme.generated.pg_catalog.routines.NthValue
import org.acme.generated.pg_catalog.routines.Ntile
import org.acme.generated.pg_catalog.routines.NumNonnulls
import org.acme.generated.pg_catalog.routines.NumNulls
import org.acme.generated.pg_catalog.routines.Numeric1
import org.acme.generated.pg_catalog.routines.Numeric2
import org.acme.generated.pg_catalog.routines.Numeric3
import org.acme.generated.pg_catalog.routines.Numeric4
import org.acme.generated.pg_catalog.routines.Numeric5
import org.acme.generated.pg_catalog.routines.Numeric6
import org.acme.generated.pg_catalog.routines.Numeric7
import org.acme.generated.pg_catalog.routines.Numeric8
import org.acme.generated.pg_catalog.routines.NumericAbs
import org.acme.generated.pg_catalog.routines.NumericAccum
import org.acme.generated.pg_catalog.routines.NumericAccumInv
import org.acme.generated.pg_catalog.routines.NumericAdd
import org.acme.generated.pg_catalog.routines.NumericAvg
import org.acme.generated.pg_catalog.routines.NumericAvgAccum
import org.acme.generated.pg_catalog.routines.NumericAvgCombine
import org.acme.generated.pg_catalog.routines.NumericAvgDeserialize
import org.acme.generated.pg_catalog.routines.NumericAvgSerialize
import org.acme.generated.pg_catalog.routines.NumericCmp
import org.acme.generated.pg_catalog.routines.NumericCombine
import org.acme.generated.pg_catalog.routines.NumericDeserialize
import org.acme.generated.pg_catalog.routines.NumericDiv
import org.acme.generated.pg_catalog.routines.NumericDivTrunc
import org.acme.generated.pg_catalog.routines.NumericEq
import org.acme.generated.pg_catalog.routines.NumericExp
import org.acme.generated.pg_catalog.routines.NumericGe
import org.acme.generated.pg_catalog.routines.NumericGt
import org.acme.generated.pg_catalog.routines.NumericIn
import org.acme.generated.pg_catalog.routines.NumericInc
import org.acme.generated.pg_catalog.routines.NumericLarger
import org.acme.generated.pg_catalog.routines.NumericLe
import org.acme.generated.pg_catalog.routines.NumericLn
import org.acme.generated.pg_catalog.routines.NumericLog
import org.acme.generated.pg_catalog.routines.NumericLt
import org.acme.generated.pg_catalog.routines.NumericMod
import org.acme.generated.pg_catalog.routines.NumericMul
import org.acme.generated.pg_catalog.routines.NumericNe
import org.acme.generated.pg_catalog.routines.NumericOut
import org.acme.generated.pg_catalog.routines.NumericPlPgLsn
import org.acme.generated.pg_catalog.routines.NumericPolyAvg
import org.acme.generated.pg_catalog.routines.NumericPolyCombine
import org.acme.generated.pg_catalog.routines.NumericPolyDeserialize
import org.acme.generated.pg_catalog.routines.NumericPolySerialize
import org.acme.generated.pg_catalog.routines.NumericPolyStddevPop
import org.acme.generated.pg_catalog.routines.NumericPolyStddevSamp
import org.acme.generated.pg_catalog.routines.NumericPolySum
import org.acme.generated.pg_catalog.routines.NumericPolyVarPop
import org.acme.generated.pg_catalog.routines.NumericPolyVarSamp
import org.acme.generated.pg_catalog.routines.NumericPower
import org.acme.generated.pg_catalog.routines.NumericRecv
import org.acme.generated.pg_catalog.routines.NumericSend
import org.acme.generated.pg_catalog.routines.NumericSerialize
import org.acme.generated.pg_catalog.routines.NumericSmaller
import org.acme.generated.pg_catalog.routines.NumericSortsupport
import org.acme.generated.pg_catalog.routines.NumericSqrt
import org.acme.generated.pg_catalog.routines.NumericStddevPop
import org.acme.generated.pg_catalog.routines.NumericStddevSamp
import org.acme.generated.pg_catalog.routines.NumericSub
import org.acme.generated.pg_catalog.routines.NumericSum
import org.acme.generated.pg_catalog.routines.NumericSupport
import org.acme.generated.pg_catalog.routines.NumericUminus
import org.acme.generated.pg_catalog.routines.NumericUplus
import org.acme.generated.pg_catalog.routines.NumericVarPop
import org.acme.generated.pg_catalog.routines.NumericVarSamp
import org.acme.generated.pg_catalog.routines.Numerictypmodin
import org.acme.generated.pg_catalog.routines.Numerictypmodout
import org.acme.generated.pg_catalog.routines.Nummultirange1
import org.acme.generated.pg_catalog.routines.Nummultirange2
import org.acme.generated.pg_catalog.routines.Nummultirange3
import org.acme.generated.pg_catalog.routines.Numnode
import org.acme.generated.pg_catalog.routines.Numrange1
import org.acme.generated.pg_catalog.routines.Numrange2
import org.acme.generated.pg_catalog.routines.NumrangeSubdiff
import org.acme.generated.pg_catalog.routines.ObjDescription1
import org.acme.generated.pg_catalog.routines.ObjDescription2
import org.acme.generated.pg_catalog.routines.OctetLength1
import org.acme.generated.pg_catalog.routines.OctetLength2
import org.acme.generated.pg_catalog.routines.OctetLength3
import org.acme.generated.pg_catalog.routines.OctetLength4
import org.acme.generated.pg_catalog.routines.Oid
import org.acme.generated.pg_catalog.routines.Oideq
import org.acme.generated.pg_catalog.routines.Oidge
import org.acme.generated.pg_catalog.routines.Oidgt
import org.acme.generated.pg_catalog.routines.Oidin
import org.acme.generated.pg_catalog.routines.Oidlarger
import org.acme.generated.pg_catalog.routines.Oidle
import org.acme.generated.pg_catalog.routines.Oidlt
import org.acme.generated.pg_catalog.routines.Oidne
import org.acme.generated.pg_catalog.routines.Oidout
import org.acme.generated.pg_catalog.routines.Oidrecv
import org.acme.generated.pg_catalog.routines.Oidsend
import org.acme.generated.pg_catalog.routines.Oidsmaller
import org.acme.generated.pg_catalog.routines.Oidvectoreq
import org.acme.generated.pg_catalog.routines.Oidvectorge
import org.acme.generated.pg_catalog.routines.Oidvectorgt
import org.acme.generated.pg_catalog.routines.Oidvectorin
import org.acme.generated.pg_catalog.routines.Oidvectorle
import org.acme.generated.pg_catalog.routines.Oidvectorlt
import org.acme.generated.pg_catalog.routines.Oidvectorne
import org.acme.generated.pg_catalog.routines.Oidvectorout
import org.acme.generated.pg_catalog.routines.Oidvectorrecv
import org.acme.generated.pg_catalog.routines.Oidvectorsend
import org.acme.generated.pg_catalog.routines.Oidvectortypes
import org.acme.generated.pg_catalog.routines.OnPb
import org.acme.generated.pg_catalog.routines.OnPl
import org.acme.generated.pg_catalog.routines.OnPpath
import org.acme.generated.pg_catalog.routines.OnPs
import org.acme.generated.pg_catalog.routines.OnSb
import org.acme.generated.pg_catalog.routines.OnSl
import org.acme.generated.pg_catalog.routines.OrderedSetTransition
import org.acme.generated.pg_catalog.routines.OrderedSetTransitionMulti
import org.acme.generated.pg_catalog.routines.Overlaps1
import org.acme.generated.pg_catalog.routines.Overlaps10
import org.acme.generated.pg_catalog.routines.Overlaps11
import org.acme.generated.pg_catalog.routines.Overlaps12
import org.acme.generated.pg_catalog.routines.Overlaps13
import org.acme.generated.pg_catalog.routines.Overlaps2
import org.acme.generated.pg_catalog.routines.Overlaps3
import org.acme.generated.pg_catalog.routines.Overlaps4
import org.acme.generated.pg_catalog.routines.Overlaps5
import org.acme.generated.pg_catalog.routines.Overlaps6
import org.acme.generated.pg_catalog.routines.Overlaps7
import org.acme.generated.pg_catalog.routines.Overlaps8
import org.acme.generated.pg_catalog.routines.Overlaps9
import org.acme.generated.pg_catalog.routines.Overlay1
import org.acme.generated.pg_catalog.routines.Overlay2
import org.acme.generated.pg_catalog.routines.Overlay3
import org.acme.generated.pg_catalog.routines.Overlay4
import org.acme.generated.pg_catalog.routines.Overlay5
import org.acme.generated.pg_catalog.routines.Overlay6
import org.acme.generated.pg_catalog.routines.ParseIdent
import org.acme.generated.pg_catalog.routines.Path
import org.acme.generated.pg_catalog.routines.PathAdd
import org.acme.generated.pg_catalog.routines.PathAddPt
import org.acme.generated.pg_catalog.routines.PathCenter
import org.acme.generated.pg_catalog.routines.PathContainPt
import org.acme.generated.pg_catalog.routines.PathDistance
import org.acme.generated.pg_catalog.routines.PathDivPt
import org.acme.generated.pg_catalog.routines.PathIn
import org.acme.generated.pg_catalog.routines.PathInter
import org.acme.generated.pg_catalog.routines.PathLength
import org.acme.generated.pg_catalog.routines.PathMulPt
import org.acme.generated.pg_catalog.routines.PathNEq
import org.acme.generated.pg_catalog.routines.PathNGe
import org.acme.generated.pg_catalog.routines.PathNGt
import org.acme.generated.pg_catalog.routines.PathNLe
import org.acme.generated.pg_catalog.routines.PathNLt
import org.acme.generated.pg_catalog.routines.PathNpoints
import org.acme.generated.pg_catalog.routines.PathOut
import org.acme.generated.pg_catalog.routines.PathRecv
import org.acme.generated.pg_catalog.routines.PathSend
import org.acme.generated.pg_catalog.routines.PathSubPt
import org.acme.generated.pg_catalog.routines.Pclose
import org.acme.generated.pg_catalog.routines.PercentRank1
import org.acme.generated.pg_catalog.routines.PercentRank2
import org.acme.generated.pg_catalog.routines.PercentRankFinal
import org.acme.generated.pg_catalog.routines.PercentileCont1
import org.acme.generated.pg_catalog.routines.PercentileCont2
import org.acme.generated.pg_catalog.routines.PercentileCont3
import org.acme.generated.pg_catalog.routines.PercentileCont4
import org.acme.generated.pg_catalog.routines.PercentileContFloat8Final
import org.acme.generated.pg_catalog.routines.PercentileContFloat8MultiFinal
import org.acme.generated.pg_catalog.routines.PercentileContIntervalFinal
import org.acme.generated.pg_catalog.routines.PercentileContIntervalMultiFinal
import org.acme.generated.pg_catalog.routines.PercentileDisc1
import org.acme.generated.pg_catalog.routines.PercentileDisc2
import org.acme.generated.pg_catalog.routines.PercentileDiscFinal
import org.acme.generated.pg_catalog.routines.PercentileDiscMultiFinal
import org.acme.generated.pg_catalog.routines.PgAdvisoryLock1
import org.acme.generated.pg_catalog.routines.PgAdvisoryLock2
import org.acme.generated.pg_catalog.routines.PgAdvisoryLockShared1
import org.acme.generated.pg_catalog.routines.PgAdvisoryLockShared2
import org.acme.generated.pg_catalog.routines.PgAdvisoryUnlock1
import org.acme.generated.pg_catalog.routines.PgAdvisoryUnlock2
import org.acme.generated.pg_catalog.routines.PgAdvisoryUnlockAll
import org.acme.generated.pg_catalog.routines.PgAdvisoryUnlockShared1
import org.acme.generated.pg_catalog.routines.PgAdvisoryUnlockShared2
import org.acme.generated.pg_catalog.routines.PgAdvisoryXactLock1
import org.acme.generated.pg_catalog.routines.PgAdvisoryXactLock2
import org.acme.generated.pg_catalog.routines.PgAdvisoryXactLockShared1
import org.acme.generated.pg_catalog.routines.PgAdvisoryXactLockShared2
import org.acme.generated.pg_catalog.routines.PgBackendPid
import org.acme.generated.pg_catalog.routines.PgBackupStartTime
import org.acme.generated.pg_catalog.routines.PgBlockingPids
import org.acme.generated.pg_catalog.routines.PgCancelBackend
import org.acme.generated.pg_catalog.routines.PgCharToEncoding
import org.acme.generated.pg_catalog.routines.PgClientEncoding
import org.acme.generated.pg_catalog.routines.PgCollationActualVersion
import org.acme.generated.pg_catalog.routines.PgCollationFor
import org.acme.generated.pg_catalog.routines.PgCollationIsVisible
import org.acme.generated.pg_catalog.routines.PgColumnCompression
import org.acme.generated.pg_catalog.routines.PgColumnIsUpdatable
import org.acme.generated.pg_catalog.routines.PgColumnSize
import org.acme.generated.pg_catalog.routines.PgConfLoadTime
import org.acme.generated.pg_catalog.routines.PgControlCheckpoint
import org.acme.generated.pg_catalog.routines.PgControlInit
import org.acme.generated.pg_catalog.routines.PgControlRecovery
import org.acme.generated.pg_catalog.routines.PgControlSystem
import org.acme.generated.pg_catalog.routines.PgConversionIsVisible
import org.acme.generated.pg_catalog.routines.PgCopyLogicalReplicationSlot1
import org.acme.generated.pg_catalog.routines.PgCopyLogicalReplicationSlot2
import org.acme.generated.pg_catalog.routines.PgCopyLogicalReplicationSlot3
import org.acme.generated.pg_catalog.routines.PgCopyPhysicalReplicationSlot1
import org.acme.generated.pg_catalog.routines.PgCopyPhysicalReplicationSlot2
import org.acme.generated.pg_catalog.routines.PgCreateLogicalReplicationSlot
import org.acme.generated.pg_catalog.routines.PgCreatePhysicalReplicationSlot
import org.acme.generated.pg_catalog.routines.PgCreateRestorePoint
import org.acme.generated.pg_catalog.routines.PgCurrentLogfile1
import org.acme.generated.pg_catalog.routines.PgCurrentLogfile2
import org.acme.generated.pg_catalog.routines.PgCurrentSnapshot
import org.acme.generated.pg_catalog.routines.PgCurrentWalFlushLsn
import org.acme.generated.pg_catalog.routines.PgCurrentWalInsertLsn
import org.acme.generated.pg_catalog.routines.PgCurrentWalLsn
import org.acme.generated.pg_catalog.routines.PgCurrentXactId
import org.acme.generated.pg_catalog.routines.PgCurrentXactIdIfAssigned
import org.acme.generated.pg_catalog.routines.PgDatabaseSize1
import org.acme.generated.pg_catalog.routines.PgDatabaseSize2
import org.acme.generated.pg_catalog.routines.PgDdlCommandIn
import org.acme.generated.pg_catalog.routines.PgDdlCommandOut
import org.acme.generated.pg_catalog.routines.PgDdlCommandRecv
import org.acme.generated.pg_catalog.routines.PgDdlCommandSend
import org.acme.generated.pg_catalog.routines.PgDependenciesIn
import org.acme.generated.pg_catalog.routines.PgDependenciesOut
import org.acme.generated.pg_catalog.routines.PgDependenciesRecv
import org.acme.generated.pg_catalog.routines.PgDependenciesSend
import org.acme.generated.pg_catalog.routines.PgDescribeObject
import org.acme.generated.pg_catalog.routines.PgDropReplicationSlot
import org.acme.generated.pg_catalog.routines.PgEncodingMaxLength
import org.acme.generated.pg_catalog.routines.PgEncodingToChar
import org.acme.generated.pg_catalog.routines.PgEventTriggerTableRewriteOid
import org.acme.generated.pg_catalog.routines.PgEventTriggerTableRewriteReason
import org.acme.generated.pg_catalog.routines.PgExportSnapshot
import org.acme.generated.pg_catalog.routines.PgExtensionConfigDump
import org.acme.generated.pg_catalog.routines.PgFilenodeRelation
import org.acme.generated.pg_catalog.routines.PgFunctionIsVisible
import org.acme.generated.pg_catalog.routines.PgGetConstraintdef1
import org.acme.generated.pg_catalog.routines.PgGetConstraintdef2
import org.acme.generated.pg_catalog.routines.PgGetExpr1
import org.acme.generated.pg_catalog.routines.PgGetExpr2
import org.acme.generated.pg_catalog.routines.PgGetFunctionArgDefault
import org.acme.generated.pg_catalog.routines.PgGetFunctionArguments
import org.acme.generated.pg_catalog.routines.PgGetFunctionIdentityArguments
import org.acme.generated.pg_catalog.routines.PgGetFunctionResult
import org.acme.generated.pg_catalog.routines.PgGetFunctionSqlbody
import org.acme.generated.pg_catalog.routines.PgGetFunctiondef
import org.acme.generated.pg_catalog.routines.PgGetIndexdef1
import org.acme.generated.pg_catalog.routines.PgGetIndexdef2
import org.acme.generated.pg_catalog.routines.PgGetObjectAddress
import org.acme.generated.pg_catalog.routines.PgGetPartitionConstraintdef
import org.acme.generated.pg_catalog.routines.PgGetPartkeydef
import org.acme.generated.pg_catalog.routines.PgGetReplicaIdentityIndex
import org.acme.generated.pg_catalog.routines.PgGetRuledef1
import org.acme.generated.pg_catalog.routines.PgGetRuledef2
import org.acme.generated.pg_catalog.routines.PgGetSerialSequence
import org.acme.generated.pg_catalog.routines.PgGetStatisticsobjdef
import org.acme.generated.pg_catalog.routines.PgGetStatisticsobjdefColumns
import org.acme.generated.pg_catalog.routines.PgGetStatisticsobjdefExpressions
import org.acme.generated.pg_catalog.routines.PgGetTriggerdef1
import org.acme.generated.pg_catalog.routines.PgGetTriggerdef2
import org.acme.generated.pg_catalog.routines.PgGetUserbyid
import org.acme.generated.pg_catalog.routines.PgGetViewdef1
import org.acme.generated.pg_catalog.routines.PgGetViewdef2
import org.acme.generated.pg_catalog.routines.PgGetViewdef3
import org.acme.generated.pg_catalog.routines.PgGetViewdef4
import org.acme.generated.pg_catalog.routines.PgGetViewdef5
import org.acme.generated.pg_catalog.routines.PgGetWalReplayPauseState
import org.acme.generated.pg_catalog.routines.PgHasRole1
import org.acme.generated.pg_catalog.routines.PgHasRole2
import org.acme.generated.pg_catalog.routines.PgHasRole3
import org.acme.generated.pg_catalog.routines.PgHasRole4
import org.acme.generated.pg_catalog.routines.PgHasRole5
import org.acme.generated.pg_catalog.routines.PgHasRole6
import org.acme.generated.pg_catalog.routines.PgIdentifyObject
import org.acme.generated.pg_catalog.routines.PgIdentifyObjectAsAddress
import org.acme.generated.pg_catalog.routines.PgImportSystemCollations
import org.acme.generated.pg_catalog.routines.PgIndexColumnHasProperty
import org.acme.generated.pg_catalog.routines.PgIndexHasProperty
import org.acme.generated.pg_catalog.routines.PgIndexamHasProperty
import org.acme.generated.pg_catalog.routines.PgIndexamProgressPhasename
import org.acme.generated.pg_catalog.routines.PgIndexesSize
import org.acme.generated.pg_catalog.routines.PgIsInBackup
import org.acme.generated.pg_catalog.routines.PgIsInRecovery
import org.acme.generated.pg_catalog.routines.PgIsOtherTempSchema
import org.acme.generated.pg_catalog.routines.PgIsWalReplayPaused
import org.acme.generated.pg_catalog.routines.PgIsolationTestSessionIsBlocked
import org.acme.generated.pg_catalog.routines.PgJitAvailable
import org.acme.generated.pg_catalog.routines.PgLastCommittedXact
import org.acme.generated.pg_catalog.routines.PgLastWalReceiveLsn
import org.acme.generated.pg_catalog.routines.PgLastWalReplayLsn
import org.acme.generated.pg_catalog.routines.PgLastXactReplayTimestamp
import org.acme.generated.pg_catalog.routines.PgLogBackendMemoryContexts
import org.acme.generated.pg_catalog.routines.PgLogicalEmitMessage1
import org.acme.generated.pg_catalog.routines.PgLogicalEmitMessage2
import org.acme.generated.pg_catalog.routines.PgLsn
import org.acme.generated.pg_catalog.routines.PgLsnCmp
import org.acme.generated.pg_catalog.routines.PgLsnEq
import org.acme.generated.pg_catalog.routines.PgLsnGe
import org.acme.generated.pg_catalog.routines.PgLsnGt
import org.acme.generated.pg_catalog.routines.PgLsnHash
import org.acme.generated.pg_catalog.routines.PgLsnHashExtended
import org.acme.generated.pg_catalog.routines.PgLsnIn
import org.acme.generated.pg_catalog.routines.PgLsnLarger
import org.acme.generated.pg_catalog.routines.PgLsnLe
import org.acme.generated.pg_catalog.routines.PgLsnLt
import org.acme.generated.pg_catalog.routines.PgLsnMi
import org.acme.generated.pg_catalog.routines.PgLsnMii
import org.acme.generated.pg_catalog.routines.PgLsnNe
import org.acme.generated.pg_catalog.routines.PgLsnOut
import org.acme.generated.pg_catalog.routines.PgLsnPli
import org.acme.generated.pg_catalog.routines.PgLsnRecv
import org.acme.generated.pg_catalog.routines.PgLsnSend
import org.acme.generated.pg_catalog.routines.PgLsnSmaller
import org.acme.generated.pg_catalog.routines.PgMcvListIn
import org.acme.generated.pg_catalog.routines.PgMcvListOut
import org.acme.generated.pg_catalog.routines.PgMcvListRecv
import org.acme.generated.pg_catalog.routines.PgMcvListSend
import org.acme.generated.pg_catalog.routines.PgMyTempSchema
import org.acme.generated.pg_catalog.routines.PgNdistinctIn
import org.acme.generated.pg_catalog.routines.PgNdistinctOut
import org.acme.generated.pg_catalog.routines.PgNdistinctRecv
import org.acme.generated.pg_catalog.routines.PgNdistinctSend
import org.acme.generated.pg_catalog.routines.PgNextoid
import org.acme.generated.pg_catalog.routines.PgNodeTreeIn
import org.acme.generated.pg_catalog.routines.PgNodeTreeOut
import org.acme.generated.pg_catalog.routines.PgNodeTreeRecv
import org.acme.generated.pg_catalog.routines.PgNodeTreeSend
import org.acme.generated.pg_catalog.routines.PgNotificationQueueUsage
import org.acme.generated.pg_catalog.routines.PgNotify
import org.acme.generated.pg_catalog.routines.PgOpclassIsVisible
import org.acme.generated.pg_catalog.routines.PgOperatorIsVisible
import org.acme.generated.pg_catalog.routines.PgOpfamilyIsVisible
import org.acme.generated.pg_catalog.routines.PgPartitionRoot
import org.acme.generated.pg_catalog.routines.PgPostmasterStartTime
import org.acme.generated.pg_catalog.routines.PgPromote
import org.acme.generated.pg_catalog.routines.PgReadBinaryFile1
import org.acme.generated.pg_catalog.routines.PgReadBinaryFile2
import org.acme.generated.pg_catalog.routines.PgReadBinaryFile3
import org.acme.generated.pg_catalog.routines.PgReadFile1
import org.acme.generated.pg_catalog.routines.PgReadFile2
import org.acme.generated.pg_catalog.routines.PgReadFile3
import org.acme.generated.pg_catalog.routines.PgReadFileOld
import org.acme.generated.pg_catalog.routines.PgRelationFilenode
import org.acme.generated.pg_catalog.routines.PgRelationFilepath
import org.acme.generated.pg_catalog.routines.PgRelationIsPublishable
import org.acme.generated.pg_catalog.routines.PgRelationIsUpdatable
import org.acme.generated.pg_catalog.routines.PgRelationSize1
import org.acme.generated.pg_catalog.routines.PgRelationSize2
import org.acme.generated.pg_catalog.routines.PgReloadConf
import org.acme.generated.pg_catalog.routines.PgReplicationOriginAdvance
import org.acme.generated.pg_catalog.routines.PgReplicationOriginCreate
import org.acme.generated.pg_catalog.routines.PgReplicationOriginDrop
import org.acme.generated.pg_catalog.routines.PgReplicationOriginOid
import org.acme.generated.pg_catalog.routines.PgReplicationOriginProgress
import org.acme.generated.pg_catalog.routines.PgReplicationOriginSessionIsSetup
import org.acme.generated.pg_catalog.routines.PgReplicationOriginSessionProgress
import org.acme.generated.pg_catalog.routines.PgReplicationOriginSessionReset
import org.acme.generated.pg_catalog.routines.PgReplicationOriginSessionSetup
import org.acme.generated.pg_catalog.routines.PgReplicationOriginXactReset
import org.acme.generated.pg_catalog.routines.PgReplicationOriginXactSetup
import org.acme.generated.pg_catalog.routines.PgReplicationSlotAdvance
import org.acme.generated.pg_catalog.routines.PgRotateLogfile
import org.acme.generated.pg_catalog.routines.PgRotateLogfileOld
import org.acme.generated.pg_catalog.routines.PgSafeSnapshotBlockingPids
import org.acme.generated.pg_catalog.routines.PgSequenceLastValue
import org.acme.generated.pg_catalog.routines.PgSequenceParameters
import org.acme.generated.pg_catalog.routines.PgSizeBytes
import org.acme.generated.pg_catalog.routines.PgSizePretty1
import org.acme.generated.pg_catalog.routines.PgSizePretty2
import org.acme.generated.pg_catalog.routines.PgSleep
import org.acme.generated.pg_catalog.routines.PgSleepFor
import org.acme.generated.pg_catalog.routines.PgSleepUntil
import org.acme.generated.pg_catalog.routines.PgSnapshotIn
import org.acme.generated.pg_catalog.routines.PgSnapshotOut
import org.acme.generated.pg_catalog.routines.PgSnapshotRecv
import org.acme.generated.pg_catalog.routines.PgSnapshotSend
import org.acme.generated.pg_catalog.routines.PgSnapshotXmax
import org.acme.generated.pg_catalog.routines.PgSnapshotXmin
import org.acme.generated.pg_catalog.routines.PgStartBackup
import org.acme.generated.pg_catalog.routines.PgStatClearSnapshot
import org.acme.generated.pg_catalog.routines.PgStatFile1
import org.acme.generated.pg_catalog.routines.PgStatFile2
import org.acme.generated.pg_catalog.routines.PgStatGetAnalyzeCount
import org.acme.generated.pg_catalog.routines.PgStatGetArchiver
import org.acme.generated.pg_catalog.routines.PgStatGetAutoanalyzeCount
import org.acme.generated.pg_catalog.routines.PgStatGetAutovacuumCount
import org.acme.generated.pg_catalog.routines.PgStatGetBackendActivity
import org.acme.generated.pg_catalog.routines.PgStatGetBackendActivityStart
import org.acme.generated.pg_catalog.routines.PgStatGetBackendClientAddr
import org.acme.generated.pg_catalog.routines.PgStatGetBackendClientPort
import org.acme.generated.pg_catalog.routines.PgStatGetBackendDbid
import org.acme.generated.pg_catalog.routines.PgStatGetBackendPid
import org.acme.generated.pg_catalog.routines.PgStatGetBackendStart
import org.acme.generated.pg_catalog.routines.PgStatGetBackendUserid
import org.acme.generated.pg_catalog.routines.PgStatGetBackendWaitEvent
import org.acme.generated.pg_catalog.routines.PgStatGetBackendWaitEventType
import org.acme.generated.pg_catalog.routines.PgStatGetBackendXactStart
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterBufWrittenCheckpoints
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterBufWrittenClean
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterMaxwrittenClean
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterRequestedCheckpoints
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterStatResetTime
import org.acme.generated.pg_catalog.routines.PgStatGetBgwriterTimedCheckpoints
import org.acme.generated.pg_catalog.routines.PgStatGetBlocksFetched
import org.acme.generated.pg_catalog.routines.PgStatGetBlocksHit
import org.acme.generated.pg_catalog.routines.PgStatGetBufAlloc
import org.acme.generated.pg_catalog.routines.PgStatGetBufFsyncBackend
import org.acme.generated.pg_catalog.routines.PgStatGetBufWrittenBackend
import org.acme.generated.pg_catalog.routines.PgStatGetCheckpointSyncTime
import org.acme.generated.pg_catalog.routines.PgStatGetCheckpointWriteTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbActiveTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbBlkReadTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbBlkWriteTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbBlocksFetched
import org.acme.generated.pg_catalog.routines.PgStatGetDbBlocksHit
import org.acme.generated.pg_catalog.routines.PgStatGetDbChecksumFailures
import org.acme.generated.pg_catalog.routines.PgStatGetDbChecksumLastFailure
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictAll
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictBufferpin
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictLock
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictSnapshot
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictStartupDeadlock
import org.acme.generated.pg_catalog.routines.PgStatGetDbConflictTablespace
import org.acme.generated.pg_catalog.routines.PgStatGetDbDeadlocks
import org.acme.generated.pg_catalog.routines.PgStatGetDbIdleInTransactionTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbNumbackends
import org.acme.generated.pg_catalog.routines.PgStatGetDbSessionTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbSessions
import org.acme.generated.pg_catalog.routines.PgStatGetDbSessionsAbandoned
import org.acme.generated.pg_catalog.routines.PgStatGetDbSessionsFatal
import org.acme.generated.pg_catalog.routines.PgStatGetDbSessionsKilled
import org.acme.generated.pg_catalog.routines.PgStatGetDbStatResetTime
import org.acme.generated.pg_catalog.routines.PgStatGetDbTempBytes
import org.acme.generated.pg_catalog.routines.PgStatGetDbTempFiles
import org.acme.generated.pg_catalog.routines.PgStatGetDbTuplesDeleted
import org.acme.generated.pg_catalog.routines.PgStatGetDbTuplesFetched
import org.acme.generated.pg_catalog.routines.PgStatGetDbTuplesInserted
import org.acme.generated.pg_catalog.routines.PgStatGetDbTuplesReturned
import org.acme.generated.pg_catalog.routines.PgStatGetDbTuplesUpdated
import org.acme.generated.pg_catalog.routines.PgStatGetDbXactCommit
import org.acme.generated.pg_catalog.routines.PgStatGetDbXactRollback
import org.acme.generated.pg_catalog.routines.PgStatGetDeadTuples
import org.acme.generated.pg_catalog.routines.PgStatGetFunctionCalls
import org.acme.generated.pg_catalog.routines.PgStatGetFunctionSelfTime
import org.acme.generated.pg_catalog.routines.PgStatGetFunctionTotalTime
import org.acme.generated.pg_catalog.routines.PgStatGetInsSinceVacuum
import org.acme.generated.pg_catalog.routines.PgStatGetLastAnalyzeTime
import org.acme.generated.pg_catalog.routines.PgStatGetLastAutoanalyzeTime
import org.acme.generated.pg_catalog.routines.PgStatGetLastAutovacuumTime
import org.acme.generated.pg_catalog.routines.PgStatGetLastVacuumTime
import org.acme.generated.pg_catalog.routines.PgStatGetLiveTuples
import org.acme.generated.pg_catalog.routines.PgStatGetModSinceAnalyze
import org.acme.generated.pg_catalog.routines.PgStatGetNumscans
import org.acme.generated.pg_catalog.routines.PgStatGetSnapshotTimestamp
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesDeleted
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesFetched
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesHotUpdated
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesInserted
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesReturned
import org.acme.generated.pg_catalog.routines.PgStatGetTuplesUpdated
import org.acme.generated.pg_catalog.routines.PgStatGetVacuumCount
import org.acme.generated.pg_catalog.routines.PgStatGetWal
import org.acme.generated.pg_catalog.routines.PgStatGetWalReceiver
import org.acme.generated.pg_catalog.routines.PgStatGetXactBlocksFetched
import org.acme.generated.pg_catalog.routines.PgStatGetXactBlocksHit
import org.acme.generated.pg_catalog.routines.PgStatGetXactFunctionCalls
import org.acme.generated.pg_catalog.routines.PgStatGetXactFunctionSelfTime
import org.acme.generated.pg_catalog.routines.PgStatGetXactFunctionTotalTime
import org.acme.generated.pg_catalog.routines.PgStatGetXactNumscans
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesDeleted
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesFetched
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesHotUpdated
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesInserted
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesReturned
import org.acme.generated.pg_catalog.routines.PgStatGetXactTuplesUpdated
import org.acme.generated.pg_catalog.routines.PgStatReset
import org.acme.generated.pg_catalog.routines.PgStatResetReplicationSlot
import org.acme.generated.pg_catalog.routines.PgStatResetShared
import org.acme.generated.pg_catalog.routines.PgStatResetSingleFunctionCounters
import org.acme.generated.pg_catalog.routines.PgStatResetSingleTableCounters
import org.acme.generated.pg_catalog.routines.PgStatResetSlru
import org.acme.generated.pg_catalog.routines.PgStatisticsObjIsVisible
import org.acme.generated.pg_catalog.routines.PgStopBackup
import org.acme.generated.pg_catalog.routines.PgSwitchWal
import org.acme.generated.pg_catalog.routines.PgTableIsVisible
import org.acme.generated.pg_catalog.routines.PgTableSize
import org.acme.generated.pg_catalog.routines.PgTablespaceLocation
import org.acme.generated.pg_catalog.routines.PgTablespaceSize1
import org.acme.generated.pg_catalog.routines.PgTablespaceSize2
import org.acme.generated.pg_catalog.routines.PgTerminateBackend
import org.acme.generated.pg_catalog.routines.PgTotalRelationSize
import org.acme.generated.pg_catalog.routines.PgTriggerDepth
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryLock1
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryLock2
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryLockShared1
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryLockShared2
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryXactLock1
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryXactLock2
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryXactLockShared1
import org.acme.generated.pg_catalog.routines.PgTryAdvisoryXactLockShared2
import org.acme.generated.pg_catalog.routines.PgTsConfigIsVisible
import org.acme.generated.pg_catalog.routines.PgTsDictIsVisible
import org.acme.generated.pg_catalog.routines.PgTsParserIsVisible
import org.acme.generated.pg_catalog.routines.PgTsTemplateIsVisible
import org.acme.generated.pg_catalog.routines.PgTypeIsVisible
import org.acme.generated.pg_catalog.routines.PgTypeof
import org.acme.generated.pg_catalog.routines.PgVisibleInSnapshot
import org.acme.generated.pg_catalog.routines.PgWalLsnDiff
import org.acme.generated.pg_catalog.routines.PgWalReplayPause
import org.acme.generated.pg_catalog.routines.PgWalReplayResume
import org.acme.generated.pg_catalog.routines.PgWalfileName
import org.acme.generated.pg_catalog.routines.PgWalfileNameOffset
import org.acme.generated.pg_catalog.routines.PgXactCommitTimestamp
import org.acme.generated.pg_catalog.routines.PgXactCommitTimestampOrigin
import org.acme.generated.pg_catalog.routines.PgXactStatus
import org.acme.generated.pg_catalog.routines.PhrasetoTsquery1
import org.acme.generated.pg_catalog.routines.PhrasetoTsquery2
import org.acme.generated.pg_catalog.routines.Pi
import org.acme.generated.pg_catalog.routines.PlaintoTsquery1
import org.acme.generated.pg_catalog.routines.PlaintoTsquery2
import org.acme.generated.pg_catalog.routines.PlpgsqlCallHandler
import org.acme.generated.pg_catalog.routines.PlpgsqlInlineHandler
import org.acme.generated.pg_catalog.routines.PlpgsqlValidator
import org.acme.generated.pg_catalog.routines.Point1
import org.acme.generated.pg_catalog.routines.Point2
import org.acme.generated.pg_catalog.routines.Point3
import org.acme.generated.pg_catalog.routines.Point4
import org.acme.generated.pg_catalog.routines.Point5
import org.acme.generated.pg_catalog.routines.Point6
import org.acme.generated.pg_catalog.routines.PointAbove
import org.acme.generated.pg_catalog.routines.PointAdd
import org.acme.generated.pg_catalog.routines.PointBelow
import org.acme.generated.pg_catalog.routines.PointDistance
import org.acme.generated.pg_catalog.routines.PointDiv
import org.acme.generated.pg_catalog.routines.PointEq
import org.acme.generated.pg_catalog.routines.PointHoriz
import org.acme.generated.pg_catalog.routines.PointIn
import org.acme.generated.pg_catalog.routines.PointLeft
import org.acme.generated.pg_catalog.routines.PointMul
import org.acme.generated.pg_catalog.routines.PointNe
import org.acme.generated.pg_catalog.routines.PointOut
import org.acme.generated.pg_catalog.routines.PointRecv
import org.acme.generated.pg_catalog.routines.PointRight
import org.acme.generated.pg_catalog.routines.PointSend
import org.acme.generated.pg_catalog.routines.PointSub
import org.acme.generated.pg_catalog.routines.PointVert
import org.acme.generated.pg_catalog.routines.PolyAbove
import org.acme.generated.pg_catalog.routines.PolyBelow
import org.acme.generated.pg_catalog.routines.PolyCenter
import org.acme.generated.pg_catalog.routines.PolyContain
import org.acme.generated.pg_catalog.routines.PolyContainPt
import org.acme.generated.pg_catalog.routines.PolyContained
import org.acme.generated.pg_catalog.routines.PolyDistance
import org.acme.generated.pg_catalog.routines.PolyIn
import org.acme.generated.pg_catalog.routines.PolyLeft
import org.acme.generated.pg_catalog.routines.PolyNpoints
import org.acme.generated.pg_catalog.routines.PolyOut
import org.acme.generated.pg_catalog.routines.PolyOverabove
import org.acme.generated.pg_catalog.routines.PolyOverbelow
import org.acme.generated.pg_catalog.routines.PolyOverlap
import org.acme.generated.pg_catalog.routines.PolyOverleft
import org.acme.generated.pg_catalog.routines.PolyOverright
import org.acme.generated.pg_catalog.routines.PolyRecv
import org.acme.generated.pg_catalog.routines.PolyRight
import org.acme.generated.pg_catalog.routines.PolySame
import org.acme.generated.pg_catalog.routines.PolySend
import org.acme.generated.pg_catalog.routines.Polygon1
import org.acme.generated.pg_catalog.routines.Polygon2
import org.acme.generated.pg_catalog.routines.Polygon3
import org.acme.generated.pg_catalog.routines.Polygon4
import org.acme.generated.pg_catalog.routines.Popen
import org.acme.generated.pg_catalog.routines.Position1
import org.acme.generated.pg_catalog.routines.Position2
import org.acme.generated.pg_catalog.routines.Position3
import org.acme.generated.pg_catalog.routines.Positionjoinsel
import org.acme.generated.pg_catalog.routines.Positionsel
import org.acme.generated.pg_catalog.routines.PostgresqlFdwValidator
import org.acme.generated.pg_catalog.routines.Pow1
import org.acme.generated.pg_catalog.routines.Pow2
import org.acme.generated.pg_catalog.routines.Power1
import org.acme.generated.pg_catalog.routines.Power2
import org.acme.generated.pg_catalog.routines.Prefixjoinsel
import org.acme.generated.pg_catalog.routines.Prefixsel
import org.acme.generated.pg_catalog.routines.PrsdEnd
import org.acme.generated.pg_catalog.routines.PrsdHeadline
import org.acme.generated.pg_catalog.routines.PrsdLextype
import org.acme.generated.pg_catalog.routines.PrsdNexttoken
import org.acme.generated.pg_catalog.routines.PrsdStart
import org.acme.generated.pg_catalog.routines.PtContainedCircle
import org.acme.generated.pg_catalog.routines.PtContainedPoly
import org.acme.generated.pg_catalog.routines.QueryToXml
import org.acme.generated.pg_catalog.routines.QueryToXmlAndXmlschema
import org.acme.generated.pg_catalog.routines.QueryToXmlschema
import org.acme.generated.pg_catalog.routines.Querytree
import org.acme.generated.pg_catalog.routines.QuoteIdent
import org.acme.generated.pg_catalog.routines.QuoteLiteral1
import org.acme.generated.pg_catalog.routines.QuoteLiteral2
import org.acme.generated.pg_catalog.routines.QuoteNullable1
import org.acme.generated.pg_catalog.routines.QuoteNullable2
import org.acme.generated.pg_catalog.routines.Radians
import org.acme.generated.pg_catalog.routines.Radius
import org.acme.generated.pg_catalog.routines.Random
import org.acme.generated.pg_catalog.routines.RangeAdjacent
import org.acme.generated.pg_catalog.routines.RangeAdjacentMultirange
import org.acme.generated.pg_catalog.routines.RangeAfter
import org.acme.generated.pg_catalog.routines.RangeAfterMultirange
import org.acme.generated.pg_catalog.routines.RangeAgg
import org.acme.generated.pg_catalog.routines.RangeAggFinalfn
import org.acme.generated.pg_catalog.routines.RangeAggTransfn
import org.acme.generated.pg_catalog.routines.RangeBefore
import org.acme.generated.pg_catalog.routines.RangeBeforeMultirange
import org.acme.generated.pg_catalog.routines.RangeCmp
import org.acme.generated.pg_catalog.routines.RangeContainedBy
import org.acme.generated.pg_catalog.routines.RangeContainedByMultirange
import org.acme.generated.pg_catalog.routines.RangeContains
import org.acme.generated.pg_catalog.routines.RangeContainsElem
import org.acme.generated.pg_catalog.routines.RangeContainsMultirange
import org.acme.generated.pg_catalog.routines.RangeEq
import org.acme.generated.pg_catalog.routines.RangeGe
import org.acme.generated.pg_catalog.routines.RangeGistConsistent
import org.acme.generated.pg_catalog.routines.RangeGistPenalty
import org.acme.generated.pg_catalog.routines.RangeGistPicksplit
import org.acme.generated.pg_catalog.routines.RangeGistSame
import org.acme.generated.pg_catalog.routines.RangeGistUnion
import org.acme.generated.pg_catalog.routines.RangeGt
import org.acme.generated.pg_catalog.routines.RangeIn
import org.acme.generated.pg_catalog.routines.RangeIntersect
import org.acme.generated.pg_catalog.routines.RangeIntersectAgg1
import org.acme.generated.pg_catalog.routines.RangeIntersectAgg2
import org.acme.generated.pg_catalog.routines.RangeIntersectAggTransfn
import org.acme.generated.pg_catalog.routines.RangeLe
import org.acme.generated.pg_catalog.routines.RangeLt
import org.acme.generated.pg_catalog.routines.RangeMerge1
import org.acme.generated.pg_catalog.routines.RangeMerge2
import org.acme.generated.pg_catalog.routines.RangeMinus
import org.acme.generated.pg_catalog.routines.RangeNe
import org.acme.generated.pg_catalog.routines.RangeOut
import org.acme.generated.pg_catalog.routines.RangeOverlaps
import org.acme.generated.pg_catalog.routines.RangeOverlapsMultirange
import org.acme.generated.pg_catalog.routines.RangeOverleft
import org.acme.generated.pg_catalog.routines.RangeOverleftMultirange
import org.acme.generated.pg_catalog.routines.RangeOverright
import org.acme.generated.pg_catalog.routines.RangeOverrightMultirange
import org.acme.generated.pg_catalog.routines.RangeRecv
import org.acme.generated.pg_catalog.routines.RangeSend
import org.acme.generated.pg_catalog.routines.RangeTypanalyze
import org.acme.generated.pg_catalog.routines.RangeUnion
import org.acme.generated.pg_catalog.routines.Rangesel
import org.acme.generated.pg_catalog.routines.Rank1
import org.acme.generated.pg_catalog.routines.Rank2
import org.acme.generated.pg_catalog.routines.RankFinal
import org.acme.generated.pg_catalog.routines.RawArraySubscriptHandler
import org.acme.generated.pg_catalog.routines.RecordEq
import org.acme.generated.pg_catalog.routines.RecordGe
import org.acme.generated.pg_catalog.routines.RecordGt
import org.acme.generated.pg_catalog.routines.RecordImageEq
import org.acme.generated.pg_catalog.routines.RecordImageGe
import org.acme.generated.pg_catalog.routines.RecordImageGt
import org.acme.generated.pg_catalog.routines.RecordImageLe
import org.acme.generated.pg_catalog.routines.RecordImageLt
import org.acme.generated.pg_catalog.routines.RecordImageNe
import org.acme.generated.pg_catalog.routines.RecordIn
import org.acme.generated.pg_catalog.routines.RecordLe
import org.acme.generated.pg_catalog.routines.RecordLt
import org.acme.generated.pg_catalog.routines.RecordNe
import org.acme.generated.pg_catalog.routines.RecordOut
import org.acme.generated.pg_catalog.routines.RecordRecv
import org.acme.generated.pg_catalog.routines.RecordSend
import org.acme.generated.pg_catalog.routines.Regclass
import org.acme.generated.pg_catalog.routines.Regclassin
import org.acme.generated.pg_catalog.routines.Regclassout
import org.acme.generated.pg_catalog.routines.Regclassrecv
import org.acme.generated.pg_catalog.routines.Regclasssend
import org.acme.generated.pg_catalog.routines.Regcollationin
import org.acme.generated.pg_catalog.routines.Regcollationout
import org.acme.generated.pg_catalog.routines.Regcollationrecv
import org.acme.generated.pg_catalog.routines.Regcollationsend
import org.acme.generated.pg_catalog.routines.Regconfigin
import org.acme.generated.pg_catalog.routines.Regconfigout
import org.acme.generated.pg_catalog.routines.Regconfigrecv
import org.acme.generated.pg_catalog.routines.Regconfigsend
import org.acme.generated.pg_catalog.routines.Regdictionaryin
import org.acme.generated.pg_catalog.routines.Regdictionaryout
import org.acme.generated.pg_catalog.routines.Regdictionaryrecv
import org.acme.generated.pg_catalog.routines.Regdictionarysend
import org.acme.generated.pg_catalog.routines.Regexeqjoinsel
import org.acme.generated.pg_catalog.routines.Regexeqsel
import org.acme.generated.pg_catalog.routines.Regexnejoinsel
import org.acme.generated.pg_catalog.routines.Regexnesel
import org.acme.generated.pg_catalog.routines.RegexpMatch1
import org.acme.generated.pg_catalog.routines.RegexpMatch2
import org.acme.generated.pg_catalog.routines.RegexpReplace1
import org.acme.generated.pg_catalog.routines.RegexpReplace2
import org.acme.generated.pg_catalog.routines.RegexpSplitToArray1
import org.acme.generated.pg_catalog.routines.RegexpSplitToArray2
import org.acme.generated.pg_catalog.routines.Regnamespacein
import org.acme.generated.pg_catalog.routines.Regnamespaceout
import org.acme.generated.pg_catalog.routines.Regnamespacerecv
import org.acme.generated.pg_catalog.routines.Regnamespacesend
import org.acme.generated.pg_catalog.routines.Regoperatorin
import org.acme.generated.pg_catalog.routines.Regoperatorout
import org.acme.generated.pg_catalog.routines.Regoperatorrecv
import org.acme.generated.pg_catalog.routines.Regoperatorsend
import org.acme.generated.pg_catalog.routines.Regoperin
import org.acme.generated.pg_catalog.routines.Regoperout
import org.acme.generated.pg_catalog.routines.Regoperrecv
import org.acme.generated.pg_catalog.routines.Regopersend
import org.acme.generated.pg_catalog.routines.Regprocedurein
import org.acme.generated.pg_catalog.routines.Regprocedureout
import org.acme.generated.pg_catalog.routines.Regprocedurerecv
import org.acme.generated.pg_catalog.routines.Regproceduresend
import org.acme.generated.pg_catalog.routines.Regprocin
import org.acme.generated.pg_catalog.routines.Regprocout
import org.acme.generated.pg_catalog.routines.Regprocrecv
import org.acme.generated.pg_catalog.routines.Regprocsend
import org.acme.generated.pg_catalog.routines.RegrAvgx
import org.acme.generated.pg_catalog.routines.RegrAvgy
import org.acme.generated.pg_catalog.routines.RegrCount
import org.acme.generated.pg_catalog.routines.RegrIntercept
import org.acme.generated.pg_catalog.routines.RegrR2
import org.acme.generated.pg_catalog.routines.RegrSlope
import org.acme.generated.pg_catalog.routines.RegrSxx
import org.acme.generated.pg_catalog.routines.RegrSxy
import org.acme.generated.pg_catalog.routines.RegrSyy
import org.acme.generated.pg_catalog.routines.Regrolein
import org.acme.generated.pg_catalog.routines.Regroleout
import org.acme.generated.pg_catalog.routines.Regrolerecv
import org.acme.generated.pg_catalog.routines.Regrolesend
import org.acme.generated.pg_catalog.routines.Regtypein
import org.acme.generated.pg_catalog.routines.Regtypeout
import org.acme.generated.pg_catalog.routines.Regtyperecv
import org.acme.generated.pg_catalog.routines.Regtypesend
import org.acme.generated.pg_catalog.routines.Repeat
import org.acme.generated.pg_catalog.routines.Replace
import org.acme.generated.pg_catalog.routines.Reverse
import org.acme.generated.pg_catalog.routines.Right
import org.acme.generated.pg_catalog.routines.Round1
import org.acme.generated.pg_catalog.routines.Round2
import org.acme.generated.pg_catalog.routines.Round3
import org.acme.generated.pg_catalog.routines.RowNumber
import org.acme.generated.pg_catalog.routines.RowSecurityActive1
import org.acme.generated.pg_catalog.routines.RowSecurityActive2
import org.acme.generated.pg_catalog.routines.RowToJson1
import org.acme.generated.pg_catalog.routines.RowToJson2
import org.acme.generated.pg_catalog.routines.Rpad1
import org.acme.generated.pg_catalog.routines.Rpad2
import org.acme.generated.pg_catalog.routines.Rtrim1
import org.acme.generated.pg_catalog.routines.Rtrim2
import org.acme.generated.pg_catalog.routines.Rtrim3
import org.acme.generated.pg_catalog.routines.SatisfiesHashPartition
import org.acme.generated.pg_catalog.routines.Scalargejoinsel
import org.acme.generated.pg_catalog.routines.Scalargesel
import org.acme.generated.pg_catalog.routines.Scalargtjoinsel
import org.acme.generated.pg_catalog.routines.Scalargtsel
import org.acme.generated.pg_catalog.routines.Scalarlejoinsel
import org.acme.generated.pg_catalog.routines.Scalarlesel
import org.acme.generated.pg_catalog.routines.Scalarltjoinsel
import org.acme.generated.pg_catalog.routines.Scalarltsel
import org.acme.generated.pg_catalog.routines.Scale
import org.acme.generated.pg_catalog.routines.SchemaToXml
import org.acme.generated.pg_catalog.routines.SchemaToXmlAndXmlschema
import org.acme.generated.pg_catalog.routines.SchemaToXmlschema
import org.acme.generated.pg_catalog.routines.SessionUser
import org.acme.generated.pg_catalog.routines.SetBit1
import org.acme.generated.pg_catalog.routines.SetBit2
import org.acme.generated.pg_catalog.routines.SetByte
import org.acme.generated.pg_catalog.routines.SetConfig
import org.acme.generated.pg_catalog.routines.SetMasklen1
import org.acme.generated.pg_catalog.routines.SetMasklen2
import org.acme.generated.pg_catalog.routines.Setseed
import org.acme.generated.pg_catalog.routines.Setval1
import org.acme.generated.pg_catalog.routines.Setval2
import org.acme.generated.pg_catalog.routines.Setweight1
import org.acme.generated.pg_catalog.routines.Setweight2
import org.acme.generated.pg_catalog.routines.Sha224
import org.acme.generated.pg_catalog.routines.Sha256
import org.acme.generated.pg_catalog.routines.Sha384
import org.acme.generated.pg_catalog.routines.Sha512
import org.acme.generated.pg_catalog.routines.ShellIn
import org.acme.generated.pg_catalog.routines.ShellOut
import org.acme.generated.pg_catalog.routines.ShiftJis_2004ToEucJis_2004
import org.acme.generated.pg_catalog.routines.ShiftJis_2004ToUtf8
import org.acme.generated.pg_catalog.routines.ShobjDescription
import org.acme.generated.pg_catalog.routines.Sign1
import org.acme.generated.pg_catalog.routines.Sign2
import org.acme.generated.pg_catalog.routines.SimilarEscape
import org.acme.generated.pg_catalog.routines.SimilarToEscape1
import org.acme.generated.pg_catalog.routines.SimilarToEscape2
import org.acme.generated.pg_catalog.routines.Sin
import org.acme.generated.pg_catalog.routines.Sind
import org.acme.generated.pg_catalog.routines.Sinh
import org.acme.generated.pg_catalog.routines.SjisToEucJp
import org.acme.generated.pg_catalog.routines.SjisToMic
import org.acme.generated.pg_catalog.routines.SjisToUtf8
import org.acme.generated.pg_catalog.routines.Slope
import org.acme.generated.pg_catalog.routines.SpgBboxQuadConfig
import org.acme.generated.pg_catalog.routines.SpgBoxQuadChoose
import org.acme.generated.pg_catalog.routines.SpgBoxQuadConfig
import org.acme.generated.pg_catalog.routines.SpgBoxQuadInnerConsistent
import org.acme.generated.pg_catalog.routines.SpgBoxQuadLeafConsistent
import org.acme.generated.pg_catalog.routines.SpgBoxQuadPicksplit
import org.acme.generated.pg_catalog.routines.SpgKdChoose
import org.acme.generated.pg_catalog.routines.SpgKdConfig
import org.acme.generated.pg_catalog.routines.SpgKdInnerConsistent
import org.acme.generated.pg_catalog.routines.SpgKdPicksplit
import org.acme.generated.pg_catalog.routines.SpgPolyQuadCompress
import org.acme.generated.pg_catalog.routines.SpgQuadChoose
import org.acme.generated.pg_catalog.routines.SpgQuadConfig
import org.acme.generated.pg_catalog.routines.SpgQuadInnerConsistent
import org.acme.generated.pg_catalog.routines.SpgQuadLeafConsistent
import org.acme.generated.pg_catalog.routines.SpgQuadPicksplit
import org.acme.generated.pg_catalog.routines.SpgRangeQuadChoose
import org.acme.generated.pg_catalog.routines.SpgRangeQuadConfig
import org.acme.generated.pg_catalog.routines.SpgRangeQuadInnerConsistent
import org.acme.generated.pg_catalog.routines.SpgRangeQuadLeafConsistent
import org.acme.generated.pg_catalog.routines.SpgRangeQuadPicksplit
import org.acme.generated.pg_catalog.routines.SpgTextChoose
import org.acme.generated.pg_catalog.routines.SpgTextConfig
import org.acme.generated.pg_catalog.routines.SpgTextInnerConsistent
import org.acme.generated.pg_catalog.routines.SpgTextLeafConsistent
import org.acme.generated.pg_catalog.routines.SpgTextPicksplit
import org.acme.generated.pg_catalog.routines.Spghandler
import org.acme.generated.pg_catalog.routines.SplitPart
import org.acme.generated.pg_catalog.routines.Sqrt1
import org.acme.generated.pg_catalog.routines.Sqrt2
import org.acme.generated.pg_catalog.routines.StartsWith
import org.acme.generated.pg_catalog.routines.StatementTimestamp
import org.acme.generated.pg_catalog.routines.Stddev1
import org.acme.generated.pg_catalog.routines.Stddev2
import org.acme.generated.pg_catalog.routines.Stddev3
import org.acme.generated.pg_catalog.routines.Stddev4
import org.acme.generated.pg_catalog.routines.Stddev5
import org.acme.generated.pg_catalog.routines.Stddev6
import org.acme.generated.pg_catalog.routines.StddevPop1
import org.acme.generated.pg_catalog.routines.StddevPop2
import org.acme.generated.pg_catalog.routines.StddevPop3
import org.acme.generated.pg_catalog.routines.StddevPop4
import org.acme.generated.pg_catalog.routines.StddevPop5
import org.acme.generated.pg_catalog.routines.StddevPop6
import org.acme.generated.pg_catalog.routines.StddevSamp1
import org.acme.generated.pg_catalog.routines.StddevSamp2
import org.acme.generated.pg_catalog.routines.StddevSamp3
import org.acme.generated.pg_catalog.routines.StddevSamp4
import org.acme.generated.pg_catalog.routines.StddevSamp5
import org.acme.generated.pg_catalog.routines.StddevSamp6
import org.acme.generated.pg_catalog.routines.StringAgg1
import org.acme.generated.pg_catalog.routines.StringAgg2
import org.acme.generated.pg_catalog.routines.StringAggFinalfn
import org.acme.generated.pg_catalog.routines.StringAggTransfn
import org.acme.generated.pg_catalog.routines.StringToArray1
import org.acme.generated.pg_catalog.routines.StringToArray2
import org.acme.generated.pg_catalog.routines.Strip
import org.acme.generated.pg_catalog.routines.Strpos
import org.acme.generated.pg_catalog.routines.Substr1
import org.acme.generated.pg_catalog.routines.Substr2
import org.acme.generated.pg_catalog.routines.Substr3
import org.acme.generated.pg_catalog.routines.Substr4
import org.acme.generated.pg_catalog.routines.Substring1
import org.acme.generated.pg_catalog.routines.Substring2
import org.acme.generated.pg_catalog.routines.Substring3
import org.acme.generated.pg_catalog.routines.Substring4
import org.acme.generated.pg_catalog.routines.Substring5
import org.acme.generated.pg_catalog.routines.Substring6
import org.acme.generated.pg_catalog.routines.Substring7
import org.acme.generated.pg_catalog.routines.Substring8
import org.acme.generated.pg_catalog.routines.Sum1
import org.acme.generated.pg_catalog.routines.Sum2
import org.acme.generated.pg_catalog.routines.Sum3
import org.acme.generated.pg_catalog.routines.Sum4
import org.acme.generated.pg_catalog.routines.Sum5
import org.acme.generated.pg_catalog.routines.Sum6
import org.acme.generated.pg_catalog.routines.Sum7
import org.acme.generated.pg_catalog.routines.Sum8
import org.acme.generated.pg_catalog.routines.System
import org.acme.generated.pg_catalog.routines.TableAmHandlerIn
import org.acme.generated.pg_catalog.routines.TableAmHandlerOut
import org.acme.generated.pg_catalog.routines.TableToXml
import org.acme.generated.pg_catalog.routines.TableToXmlAndXmlschema
import org.acme.generated.pg_catalog.routines.TableToXmlschema
import org.acme.generated.pg_catalog.routines.Tan
import org.acme.generated.pg_catalog.routines.Tand
import org.acme.generated.pg_catalog.routines.Tanh
import org.acme.generated.pg_catalog.routines.Text1
import org.acme.generated.pg_catalog.routines.Text2
import org.acme.generated.pg_catalog.routines.Text3
import org.acme.generated.pg_catalog.routines.Text4
import org.acme.generated.pg_catalog.routines.Text5
import org.acme.generated.pg_catalog.routines.Text6
import org.acme.generated.pg_catalog.routines.TextGe
import org.acme.generated.pg_catalog.routines.TextGt
import org.acme.generated.pg_catalog.routines.TextLarger
import org.acme.generated.pg_catalog.routines.TextLe
import org.acme.generated.pg_catalog.routines.TextLt
import org.acme.generated.pg_catalog.routines.TextPatternGe
import org.acme.generated.pg_catalog.routines.TextPatternGt
import org.acme.generated.pg_catalog.routines.TextPatternLe
import org.acme.generated.pg_catalog.routines.TextPatternLt
import org.acme.generated.pg_catalog.routines.TextSmaller
import org.acme.generated.pg_catalog.routines.Textanycat
import org.acme.generated.pg_catalog.routines.Textcat
import org.acme.generated.pg_catalog.routines.Texteq
import org.acme.generated.pg_catalog.routines.Texteqname
import org.acme.generated.pg_catalog.routines.Textgename
import org.acme.generated.pg_catalog.routines.Textgtname
import org.acme.generated.pg_catalog.routines.Texticlike
import org.acme.generated.pg_catalog.routines.TexticlikeSupport
import org.acme.generated.pg_catalog.routines.Texticnlike
import org.acme.generated.pg_catalog.routines.Texticregexeq
import org.acme.generated.pg_catalog.routines.TexticregexeqSupport
import org.acme.generated.pg_catalog.routines.Texticregexne
import org.acme.generated.pg_catalog.routines.Textin
import org.acme.generated.pg_catalog.routines.Textlen
import org.acme.generated.pg_catalog.routines.Textlename
import org.acme.generated.pg_catalog.routines.Textlike
import org.acme.generated.pg_catalog.routines.TextlikeSupport
import org.acme.generated.pg_catalog.routines.Textltname
import org.acme.generated.pg_catalog.routines.Textne
import org.acme.generated.pg_catalog.routines.Textnename
import org.acme.generated.pg_catalog.routines.Textnlike
import org.acme.generated.pg_catalog.routines.Textout
import org.acme.generated.pg_catalog.routines.Textrecv
import org.acme.generated.pg_catalog.routines.Textregexeq
import org.acme.generated.pg_catalog.routines.TextregexeqSupport
import org.acme.generated.pg_catalog.routines.Textregexne
import org.acme.generated.pg_catalog.routines.Textsend
import org.acme.generated.pg_catalog.routines.ThesaurusInit
import org.acme.generated.pg_catalog.routines.ThesaurusLexize
import org.acme.generated.pg_catalog.routines.Tideq
import org.acme.generated.pg_catalog.routines.Tidge
import org.acme.generated.pg_catalog.routines.Tidgt
import org.acme.generated.pg_catalog.routines.Tidin
import org.acme.generated.pg_catalog.routines.Tidlarger
import org.acme.generated.pg_catalog.routines.Tidle
import org.acme.generated.pg_catalog.routines.Tidlt
import org.acme.generated.pg_catalog.routines.Tidne
import org.acme.generated.pg_catalog.routines.Tidout
import org.acme.generated.pg_catalog.routines.Tidrecv
import org.acme.generated.pg_catalog.routines.Tidsend
import org.acme.generated.pg_catalog.routines.Tidsmaller
import org.acme.generated.pg_catalog.routines.Time1
import org.acme.generated.pg_catalog.routines.Time2
import org.acme.generated.pg_catalog.routines.Time3
import org.acme.generated.pg_catalog.routines.Time4
import org.acme.generated.pg_catalog.routines.Time5
import org.acme.generated.pg_catalog.routines.TimeCmp
import org.acme.generated.pg_catalog.routines.TimeEq
import org.acme.generated.pg_catalog.routines.TimeGe
import org.acme.generated.pg_catalog.routines.TimeGt
import org.acme.generated.pg_catalog.routines.TimeHash
import org.acme.generated.pg_catalog.routines.TimeHashExtended
import org.acme.generated.pg_catalog.routines.TimeIn
import org.acme.generated.pg_catalog.routines.TimeLarger
import org.acme.generated.pg_catalog.routines.TimeLe
import org.acme.generated.pg_catalog.routines.TimeLt
import org.acme.generated.pg_catalog.routines.TimeMiInterval
import org.acme.generated.pg_catalog.routines.TimeMiTime
import org.acme.generated.pg_catalog.routines.TimeNe
import org.acme.generated.pg_catalog.routines.TimeOut
import org.acme.generated.pg_catalog.routines.TimePlInterval
import org.acme.generated.pg_catalog.routines.TimeRecv
import org.acme.generated.pg_catalog.routines.TimeSend
import org.acme.generated.pg_catalog.routines.TimeSmaller
import org.acme.generated.pg_catalog.routines.TimeSupport
import org.acme.generated.pg_catalog.routines.TimedatePl
import org.acme.generated.pg_catalog.routines.Timeofday
import org.acme.generated.pg_catalog.routines.Timestamp1
import org.acme.generated.pg_catalog.routines.Timestamp2
import org.acme.generated.pg_catalog.routines.Timestamp3
import org.acme.generated.pg_catalog.routines.Timestamp4
import org.acme.generated.pg_catalog.routines.TimestampCmp
import org.acme.generated.pg_catalog.routines.TimestampCmpDate
import org.acme.generated.pg_catalog.routines.TimestampCmpTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampEq
import org.acme.generated.pg_catalog.routines.TimestampEqDate
import org.acme.generated.pg_catalog.routines.TimestampEqTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampGe
import org.acme.generated.pg_catalog.routines.TimestampGeDate
import org.acme.generated.pg_catalog.routines.TimestampGeTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampGt
import org.acme.generated.pg_catalog.routines.TimestampGtDate
import org.acme.generated.pg_catalog.routines.TimestampGtTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampHash
import org.acme.generated.pg_catalog.routines.TimestampHashExtended
import org.acme.generated.pg_catalog.routines.TimestampIn
import org.acme.generated.pg_catalog.routines.TimestampLarger
import org.acme.generated.pg_catalog.routines.TimestampLe
import org.acme.generated.pg_catalog.routines.TimestampLeDate
import org.acme.generated.pg_catalog.routines.TimestampLeTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampLt
import org.acme.generated.pg_catalog.routines.TimestampLtDate
import org.acme.generated.pg_catalog.routines.TimestampLtTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampMi
import org.acme.generated.pg_catalog.routines.TimestampMiInterval
import org.acme.generated.pg_catalog.routines.TimestampNe
import org.acme.generated.pg_catalog.routines.TimestampNeDate
import org.acme.generated.pg_catalog.routines.TimestampNeTimestamptz
import org.acme.generated.pg_catalog.routines.TimestampOut
import org.acme.generated.pg_catalog.routines.TimestampPlInterval
import org.acme.generated.pg_catalog.routines.TimestampRecv
import org.acme.generated.pg_catalog.routines.TimestampSend
import org.acme.generated.pg_catalog.routines.TimestampSmaller
import org.acme.generated.pg_catalog.routines.TimestampSortsupport
import org.acme.generated.pg_catalog.routines.TimestampSupport
import org.acme.generated.pg_catalog.routines.Timestamptypmodin
import org.acme.generated.pg_catalog.routines.Timestamptypmodout
import org.acme.generated.pg_catalog.routines.Timestamptz1
import org.acme.generated.pg_catalog.routines.Timestamptz2
import org.acme.generated.pg_catalog.routines.Timestamptz3
import org.acme.generated.pg_catalog.routines.Timestamptz4
import org.acme.generated.pg_catalog.routines.Timestamptz5
import org.acme.generated.pg_catalog.routines.TimestamptzCmp
import org.acme.generated.pg_catalog.routines.TimestamptzCmpDate
import org.acme.generated.pg_catalog.routines.TimestamptzCmpTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzEq
import org.acme.generated.pg_catalog.routines.TimestamptzEqDate
import org.acme.generated.pg_catalog.routines.TimestamptzEqTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzGe
import org.acme.generated.pg_catalog.routines.TimestamptzGeDate
import org.acme.generated.pg_catalog.routines.TimestamptzGeTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzGt
import org.acme.generated.pg_catalog.routines.TimestamptzGtDate
import org.acme.generated.pg_catalog.routines.TimestamptzGtTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzIn
import org.acme.generated.pg_catalog.routines.TimestamptzLarger
import org.acme.generated.pg_catalog.routines.TimestamptzLe
import org.acme.generated.pg_catalog.routines.TimestamptzLeDate
import org.acme.generated.pg_catalog.routines.TimestamptzLeTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzLt
import org.acme.generated.pg_catalog.routines.TimestamptzLtDate
import org.acme.generated.pg_catalog.routines.TimestamptzLtTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzMi
import org.acme.generated.pg_catalog.routines.TimestamptzMiInterval
import org.acme.generated.pg_catalog.routines.TimestamptzNe
import org.acme.generated.pg_catalog.routines.TimestamptzNeDate
import org.acme.generated.pg_catalog.routines.TimestamptzNeTimestamp
import org.acme.generated.pg_catalog.routines.TimestamptzOut
import org.acme.generated.pg_catalog.routines.TimestamptzPlInterval
import org.acme.generated.pg_catalog.routines.TimestamptzRecv
import org.acme.generated.pg_catalog.routines.TimestamptzSend
import org.acme.generated.pg_catalog.routines.TimestamptzSmaller
import org.acme.generated.pg_catalog.routines.Timestamptztypmodin
import org.acme.generated.pg_catalog.routines.Timestamptztypmodout
import org.acme.generated.pg_catalog.routines.Timetypmodin
import org.acme.generated.pg_catalog.routines.Timetypmodout
import org.acme.generated.pg_catalog.routines.Timetz1
import org.acme.generated.pg_catalog.routines.Timetz2
import org.acme.generated.pg_catalog.routines.Timetz3
import org.acme.generated.pg_catalog.routines.TimetzCmp
import org.acme.generated.pg_catalog.routines.TimetzEq
import org.acme.generated.pg_catalog.routines.TimetzGe
import org.acme.generated.pg_catalog.routines.TimetzGt
import org.acme.generated.pg_catalog.routines.TimetzHash
import org.acme.generated.pg_catalog.routines.TimetzHashExtended
import org.acme.generated.pg_catalog.routines.TimetzIn
import org.acme.generated.pg_catalog.routines.TimetzLarger
import org.acme.generated.pg_catalog.routines.TimetzLe
import org.acme.generated.pg_catalog.routines.TimetzLt
import org.acme.generated.pg_catalog.routines.TimetzMiInterval
import org.acme.generated.pg_catalog.routines.TimetzNe
import org.acme.generated.pg_catalog.routines.TimetzOut
import org.acme.generated.pg_catalog.routines.TimetzPlInterval
import org.acme.generated.pg_catalog.routines.TimetzRecv
import org.acme.generated.pg_catalog.routines.TimetzSend
import org.acme.generated.pg_catalog.routines.TimetzSmaller
import org.acme.generated.pg_catalog.routines.TimetzdatePl
import org.acme.generated.pg_catalog.routines.Timetztypmodin
import org.acme.generated.pg_catalog.routines.Timetztypmodout
import org.acme.generated.pg_catalog.routines.Timezone1
import org.acme.generated.pg_catalog.routines.Timezone2
import org.acme.generated.pg_catalog.routines.Timezone3
import org.acme.generated.pg_catalog.routines.Timezone4
import org.acme.generated.pg_catalog.routines.Timezone5
import org.acme.generated.pg_catalog.routines.Timezone6
import org.acme.generated.pg_catalog.routines.ToAscii1
import org.acme.generated.pg_catalog.routines.ToAscii2
import org.acme.generated.pg_catalog.routines.ToAscii3
import org.acme.generated.pg_catalog.routines.ToChar1
import org.acme.generated.pg_catalog.routines.ToChar2
import org.acme.generated.pg_catalog.routines.ToChar3
import org.acme.generated.pg_catalog.routines.ToChar4
import org.acme.generated.pg_catalog.routines.ToChar5
import org.acme.generated.pg_catalog.routines.ToChar6
import org.acme.generated.pg_catalog.routines.ToChar7
import org.acme.generated.pg_catalog.routines.ToChar8
import org.acme.generated.pg_catalog.routines.ToDate
import org.acme.generated.pg_catalog.routines.ToHex1
import org.acme.generated.pg_catalog.routines.ToHex2
import org.acme.generated.pg_catalog.routines.ToJson
import org.acme.generated.pg_catalog.routines.ToJsonb
import org.acme.generated.pg_catalog.routines.ToNumber
import org.acme.generated.pg_catalog.routines.ToRegclass
import org.acme.generated.pg_catalog.routines.ToRegcollation
import org.acme.generated.pg_catalog.routines.ToRegnamespace
import org.acme.generated.pg_catalog.routines.ToRegoper
import org.acme.generated.pg_catalog.routines.ToRegoperator
import org.acme.generated.pg_catalog.routines.ToRegproc
import org.acme.generated.pg_catalog.routines.ToRegprocedure
import org.acme.generated.pg_catalog.routines.ToRegrole
import org.acme.generated.pg_catalog.routines.ToRegtype
import org.acme.generated.pg_catalog.routines.ToTimestamp1
import org.acme.generated.pg_catalog.routines.ToTimestamp2
import org.acme.generated.pg_catalog.routines.ToTsquery1
import org.acme.generated.pg_catalog.routines.ToTsquery2
import org.acme.generated.pg_catalog.routines.ToTsvector1
import org.acme.generated.pg_catalog.routines.ToTsvector2
import org.acme.generated.pg_catalog.routines.ToTsvector3
import org.acme.generated.pg_catalog.routines.ToTsvector4
import org.acme.generated.pg_catalog.routines.ToTsvector5
import org.acme.generated.pg_catalog.routines.ToTsvector6
import org.acme.generated.pg_catalog.routines.TransactionTimestamp
import org.acme.generated.pg_catalog.routines.Translate
import org.acme.generated.pg_catalog.routines.TriggerOut
import org.acme.generated.pg_catalog.routines.TrimArray
import org.acme.generated.pg_catalog.routines.TrimScale
import org.acme.generated.pg_catalog.routines.Trunc1
import org.acme.generated.pg_catalog.routines.Trunc2
import org.acme.generated.pg_catalog.routines.Trunc3
import org.acme.generated.pg_catalog.routines.Trunc4
import org.acme.generated.pg_catalog.routines.Trunc5
import org.acme.generated.pg_catalog.routines.TsDelete1
import org.acme.generated.pg_catalog.routines.TsDelete2
import org.acme.generated.pg_catalog.routines.TsFilter
import org.acme.generated.pg_catalog.routines.TsHeadline1
import org.acme.generated.pg_catalog.routines.TsHeadline10
import org.acme.generated.pg_catalog.routines.TsHeadline11
import org.acme.generated.pg_catalog.routines.TsHeadline12
import org.acme.generated.pg_catalog.routines.TsHeadline2
import org.acme.generated.pg_catalog.routines.TsHeadline3
import org.acme.generated.pg_catalog.routines.TsHeadline4
import org.acme.generated.pg_catalog.routines.TsHeadline5
import org.acme.generated.pg_catalog.routines.TsHeadline6
import org.acme.generated.pg_catalog.routines.TsHeadline7
import org.acme.generated.pg_catalog.routines.TsHeadline8
import org.acme.generated.pg_catalog.routines.TsHeadline9
import org.acme.generated.pg_catalog.routines.TsLexize
import org.acme.generated.pg_catalog.routines.TsMatchQv
import org.acme.generated.pg_catalog.routines.TsMatchTq
import org.acme.generated.pg_catalog.routines.TsMatchTt
import org.acme.generated.pg_catalog.routines.TsMatchVq
import org.acme.generated.pg_catalog.routines.TsRank1
import org.acme.generated.pg_catalog.routines.TsRank2
import org.acme.generated.pg_catalog.routines.TsRank3
import org.acme.generated.pg_catalog.routines.TsRank4
import org.acme.generated.pg_catalog.routines.TsRankCd1
import org.acme.generated.pg_catalog.routines.TsRankCd2
import org.acme.generated.pg_catalog.routines.TsRankCd3
import org.acme.generated.pg_catalog.routines.TsRankCd4
import org.acme.generated.pg_catalog.routines.TsRewrite1
import org.acme.generated.pg_catalog.routines.TsRewrite2
import org.acme.generated.pg_catalog.routines.TsTypanalyze
import org.acme.generated.pg_catalog.routines.TsmHandlerIn
import org.acme.generated.pg_catalog.routines.TsmHandlerOut
import org.acme.generated.pg_catalog.routines.Tsmatchjoinsel
import org.acme.generated.pg_catalog.routines.Tsmatchsel
import org.acme.generated.pg_catalog.routines.Tsmultirange1
import org.acme.generated.pg_catalog.routines.Tsmultirange2
import org.acme.generated.pg_catalog.routines.Tsmultirange3
import org.acme.generated.pg_catalog.routines.TsqMcontained
import org.acme.generated.pg_catalog.routines.TsqMcontains
import org.acme.generated.pg_catalog.routines.TsqueryAnd
import org.acme.generated.pg_catalog.routines.TsqueryCmp
import org.acme.generated.pg_catalog.routines.TsqueryEq
import org.acme.generated.pg_catalog.routines.TsqueryGe
import org.acme.generated.pg_catalog.routines.TsqueryGt
import org.acme.generated.pg_catalog.routines.TsqueryLe
import org.acme.generated.pg_catalog.routines.TsqueryLt
import org.acme.generated.pg_catalog.routines.TsqueryNe
import org.acme.generated.pg_catalog.routines.TsqueryNot
import org.acme.generated.pg_catalog.routines.TsqueryOr
import org.acme.generated.pg_catalog.routines.TsqueryPhrase1
import org.acme.generated.pg_catalog.routines.TsqueryPhrase2
import org.acme.generated.pg_catalog.routines.Tsqueryin
import org.acme.generated.pg_catalog.routines.Tsqueryout
import org.acme.generated.pg_catalog.routines.Tsqueryrecv
import org.acme.generated.pg_catalog.routines.Tsquerysend
import org.acme.generated.pg_catalog.routines.Tsrange1
import org.acme.generated.pg_catalog.routines.Tsrange2
import org.acme.generated.pg_catalog.routines.TsrangeSubdiff
import org.acme.generated.pg_catalog.routines.Tstzmultirange1
import org.acme.generated.pg_catalog.routines.Tstzmultirange2
import org.acme.generated.pg_catalog.routines.Tstzmultirange3
import org.acme.generated.pg_catalog.routines.Tstzrange1
import org.acme.generated.pg_catalog.routines.Tstzrange2
import org.acme.generated.pg_catalog.routines.TstzrangeSubdiff
import org.acme.generated.pg_catalog.routines.TsvectorCmp
import org.acme.generated.pg_catalog.routines.TsvectorConcat
import org.acme.generated.pg_catalog.routines.TsvectorEq
import org.acme.generated.pg_catalog.routines.TsvectorGe
import org.acme.generated.pg_catalog.routines.TsvectorGt
import org.acme.generated.pg_catalog.routines.TsvectorLe
import org.acme.generated.pg_catalog.routines.TsvectorLt
import org.acme.generated.pg_catalog.routines.TsvectorNe
import org.acme.generated.pg_catalog.routines.TsvectorToArray
import org.acme.generated.pg_catalog.routines.Tsvectorin
import org.acme.generated.pg_catalog.routines.Tsvectorout
import org.acme.generated.pg_catalog.routines.Tsvectorrecv
import org.acme.generated.pg_catalog.routines.Tsvectorsend
import org.acme.generated.pg_catalog.routines.TxidCurrent
import org.acme.generated.pg_catalog.routines.TxidCurrentIfAssigned
import org.acme.generated.pg_catalog.routines.TxidCurrentSnapshot
import org.acme.generated.pg_catalog.routines.TxidSnapshotIn
import org.acme.generated.pg_catalog.routines.TxidSnapshotOut
import org.acme.generated.pg_catalog.routines.TxidSnapshotRecv
import org.acme.generated.pg_catalog.routines.TxidSnapshotSend
import org.acme.generated.pg_catalog.routines.TxidSnapshotXmax
import org.acme.generated.pg_catalog.routines.TxidSnapshotXmin
import org.acme.generated.pg_catalog.routines.TxidStatus
import org.acme.generated.pg_catalog.routines.TxidVisibleInSnapshot
import org.acme.generated.pg_catalog.routines.UhcToUtf8
import org.acme.generated.pg_catalog.routines.Unistr
import org.acme.generated.pg_catalog.routines.Unknownin
import org.acme.generated.pg_catalog.routines.Unknownout
import org.acme.generated.pg_catalog.routines.Unknownrecv
import org.acme.generated.pg_catalog.routines.Unknownsend
import org.acme.generated.pg_catalog.routines.Upper1
import org.acme.generated.pg_catalog.routines.Upper2
import org.acme.generated.pg_catalog.routines.Upper3
import org.acme.generated.pg_catalog.routines.UpperInc1
import org.acme.generated.pg_catalog.routines.UpperInc2
import org.acme.generated.pg_catalog.routines.UpperInf1
import org.acme.generated.pg_catalog.routines.UpperInf2
import org.acme.generated.pg_catalog.routines.Utf8ToBig5
import org.acme.generated.pg_catalog.routines.Utf8ToEucCn
import org.acme.generated.pg_catalog.routines.Utf8ToEucJis_2004
import org.acme.generated.pg_catalog.routines.Utf8ToEucJp
import org.acme.generated.pg_catalog.routines.Utf8ToEucKr
import org.acme.generated.pg_catalog.routines.Utf8ToEucTw
import org.acme.generated.pg_catalog.routines.Utf8ToGb18030
import org.acme.generated.pg_catalog.routines.Utf8ToGbk
import org.acme.generated.pg_catalog.routines.Utf8ToIso8859
import org.acme.generated.pg_catalog.routines.Utf8ToIso8859_1
import org.acme.generated.pg_catalog.routines.Utf8ToJohab
import org.acme.generated.pg_catalog.routines.Utf8ToKoi8r
import org.acme.generated.pg_catalog.routines.Utf8ToKoi8u
import org.acme.generated.pg_catalog.routines.Utf8ToShiftJis_2004
import org.acme.generated.pg_catalog.routines.Utf8ToSjis
import org.acme.generated.pg_catalog.routines.Utf8ToUhc
import org.acme.generated.pg_catalog.routines.Utf8ToWin
import org.acme.generated.pg_catalog.routines.UuidCmp
import org.acme.generated.pg_catalog.routines.UuidEq
import org.acme.generated.pg_catalog.routines.UuidGe
import org.acme.generated.pg_catalog.routines.UuidGt
import org.acme.generated.pg_catalog.routines.UuidHash
import org.acme.generated.pg_catalog.routines.UuidHashExtended
import org.acme.generated.pg_catalog.routines.UuidIn
import org.acme.generated.pg_catalog.routines.UuidLe
import org.acme.generated.pg_catalog.routines.UuidLt
import org.acme.generated.pg_catalog.routines.UuidNe
import org.acme.generated.pg_catalog.routines.UuidOut
import org.acme.generated.pg_catalog.routines.UuidRecv
import org.acme.generated.pg_catalog.routines.UuidSend
import org.acme.generated.pg_catalog.routines.UuidSortsupport
import org.acme.generated.pg_catalog.routines.VarPop1
import org.acme.generated.pg_catalog.routines.VarPop2
import org.acme.generated.pg_catalog.routines.VarPop3
import org.acme.generated.pg_catalog.routines.VarPop4
import org.acme.generated.pg_catalog.routines.VarPop5
import org.acme.generated.pg_catalog.routines.VarPop6
import org.acme.generated.pg_catalog.routines.VarSamp1
import org.acme.generated.pg_catalog.routines.VarSamp2
import org.acme.generated.pg_catalog.routines.VarSamp3
import org.acme.generated.pg_catalog.routines.VarSamp4
import org.acme.generated.pg_catalog.routines.VarSamp5
import org.acme.generated.pg_catalog.routines.VarSamp6
import org.acme.generated.pg_catalog.routines.Varbit
import org.acme.generated.pg_catalog.routines.VarbitIn
import org.acme.generated.pg_catalog.routines.VarbitOut
import org.acme.generated.pg_catalog.routines.VarbitRecv
import org.acme.generated.pg_catalog.routines.VarbitSend
import org.acme.generated.pg_catalog.routines.VarbitSupport
import org.acme.generated.pg_catalog.routines.Varbitcmp
import org.acme.generated.pg_catalog.routines.Varbiteq
import org.acme.generated.pg_catalog.routines.Varbitge
import org.acme.generated.pg_catalog.routines.Varbitgt
import org.acme.generated.pg_catalog.routines.Varbitle
import org.acme.generated.pg_catalog.routines.Varbitlt
import org.acme.generated.pg_catalog.routines.Varbitne
import org.acme.generated.pg_catalog.routines.Varbittypmodin
import org.acme.generated.pg_catalog.routines.Varbittypmodout
import org.acme.generated.pg_catalog.routines.Varchar1
import org.acme.generated.pg_catalog.routines.Varchar2
import org.acme.generated.pg_catalog.routines.VarcharSupport
import org.acme.generated.pg_catalog.routines.Varcharin
import org.acme.generated.pg_catalog.routines.Varcharout
import org.acme.generated.pg_catalog.routines.Varcharrecv
import org.acme.generated.pg_catalog.routines.Varcharsend
import org.acme.generated.pg_catalog.routines.Varchartypmodin
import org.acme.generated.pg_catalog.routines.Varchartypmodout
import org.acme.generated.pg_catalog.routines.Variance1
import org.acme.generated.pg_catalog.routines.Variance2
import org.acme.generated.pg_catalog.routines.Variance3
import org.acme.generated.pg_catalog.routines.Variance4
import org.acme.generated.pg_catalog.routines.Variance5
import org.acme.generated.pg_catalog.routines.Variance6
import org.acme.generated.pg_catalog.routines.Version
import org.acme.generated.pg_catalog.routines.VoidIn
import org.acme.generated.pg_catalog.routines.VoidOut
import org.acme.generated.pg_catalog.routines.VoidRecv
import org.acme.generated.pg_catalog.routines.VoidSend
import org.acme.generated.pg_catalog.routines.WebsearchToTsquery1
import org.acme.generated.pg_catalog.routines.WebsearchToTsquery2
import org.acme.generated.pg_catalog.routines.Width
import org.acme.generated.pg_catalog.routines.WidthBucket1
import org.acme.generated.pg_catalog.routines.WidthBucket2
import org.acme.generated.pg_catalog.routines.WidthBucket3
import org.acme.generated.pg_catalog.routines.Win1250ToLatin2
import org.acme.generated.pg_catalog.routines.Win1250ToMic
import org.acme.generated.pg_catalog.routines.Win1251ToIso
import org.acme.generated.pg_catalog.routines.Win1251ToKoi8r
import org.acme.generated.pg_catalog.routines.Win1251ToMic
import org.acme.generated.pg_catalog.routines.Win1251ToWin866
import org.acme.generated.pg_catalog.routines.Win866ToIso
import org.acme.generated.pg_catalog.routines.Win866ToKoi8r
import org.acme.generated.pg_catalog.routines.Win866ToMic
import org.acme.generated.pg_catalog.routines.Win866ToWin1251
import org.acme.generated.pg_catalog.routines.WinToUtf8
import org.acme.generated.pg_catalog.routines.Xid
import org.acme.generated.pg_catalog.routines.Xid8cmp
import org.acme.generated.pg_catalog.routines.Xid8eq
import org.acme.generated.pg_catalog.routines.Xid8ge
import org.acme.generated.pg_catalog.routines.Xid8gt
import org.acme.generated.pg_catalog.routines.Xid8in
import org.acme.generated.pg_catalog.routines.Xid8le
import org.acme.generated.pg_catalog.routines.Xid8lt
import org.acme.generated.pg_catalog.routines.Xid8ne
import org.acme.generated.pg_catalog.routines.Xid8out
import org.acme.generated.pg_catalog.routines.Xid8recv
import org.acme.generated.pg_catalog.routines.Xid8send
import org.acme.generated.pg_catalog.routines.Xideq
import org.acme.generated.pg_catalog.routines.Xideqint4
import org.acme.generated.pg_catalog.routines.Xidin
import org.acme.generated.pg_catalog.routines.Xidneq
import org.acme.generated.pg_catalog.routines.Xidneqint4
import org.acme.generated.pg_catalog.routines.Xidout
import org.acme.generated.pg_catalog.routines.Xidrecv
import org.acme.generated.pg_catalog.routines.Xidsend
import org.acme.generated.pg_catalog.routines.Xml
import org.acme.generated.pg_catalog.routines.XmlIn
import org.acme.generated.pg_catalog.routines.XmlIsWellFormed
import org.acme.generated.pg_catalog.routines.XmlIsWellFormedContent
import org.acme.generated.pg_catalog.routines.XmlIsWellFormedDocument
import org.acme.generated.pg_catalog.routines.XmlOut
import org.acme.generated.pg_catalog.routines.XmlRecv
import org.acme.generated.pg_catalog.routines.XmlSend
import org.acme.generated.pg_catalog.routines.Xmlagg
import org.acme.generated.pg_catalog.routines.Xmlcomment
import org.acme.generated.pg_catalog.routines.Xmlconcat2
import org.acme.generated.pg_catalog.routines.Xmlexists
import org.acme.generated.pg_catalog.routines.Xmlvalidate
import org.acme.generated.pg_catalog.routines.Xpath1
import org.acme.generated.pg_catalog.routines.Xpath2
import org.acme.generated.pg_catalog.routines.XpathExists1
import org.acme.generated.pg_catalog.routines.XpathExists2
import org.acme.generated.pg_catalog.tables.Aclexplode
import org.acme.generated.pg_catalog.tables.GenerateSeries
import org.acme.generated.pg_catalog.tables.GenerateSubscripts
import org.acme.generated.pg_catalog.tables.JsonArrayElements
import org.acme.generated.pg_catalog.tables.JsonArrayElementsText
import org.acme.generated.pg_catalog.tables.JsonEach
import org.acme.generated.pg_catalog.tables.JsonEachText
import org.acme.generated.pg_catalog.tables.JsonObjectKeys
import org.acme.generated.pg_catalog.tables.JsonPopulateRecordset
import org.acme.generated.pg_catalog.tables.JsonToRecordset
import org.acme.generated.pg_catalog.tables.JsonbArrayElements
import org.acme.generated.pg_catalog.tables.JsonbArrayElementsText
import org.acme.generated.pg_catalog.tables.JsonbEach
import org.acme.generated.pg_catalog.tables.JsonbEachText
import org.acme.generated.pg_catalog.tables.JsonbObjectKeys
import org.acme.generated.pg_catalog.tables.JsonbPathQuery
import org.acme.generated.pg_catalog.tables.JsonbPathQueryTz
import org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset
import org.acme.generated.pg_catalog.tables.JsonbToRecordset
import org.acme.generated.pg_catalog.tables.PgConfig
import org.acme.generated.pg_catalog.tables.PgCursor
import org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands
import org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects
import org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths
import org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts
import org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys
import org.acme.generated.pg_catalog.tables.PgGetKeywords
import org.acme.generated.pg_catalog.tables.PgGetMultixactMembers
import org.acme.generated.pg_catalog.tables.PgGetPublicationTables
import org.acme.generated.pg_catalog.tables.PgGetReplicationSlots
import org.acme.generated.pg_catalog.tables.PgGetShmemAllocations
import org.acme.generated.pg_catalog.tables.PgListeningChannels
import org.acme.generated.pg_catalog.tables.PgLockStatus
import org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges
import org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges
import org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir
import org.acme.generated.pg_catalog.tables.PgLsDir
import org.acme.generated.pg_catalog.tables.PgLsLogdir
import org.acme.generated.pg_catalog.tables.PgLsTmpdir
import org.acme.generated.pg_catalog.tables.PgLsWaldir
import org.acme.generated.pg_catalog.tables.PgMcvListItems
import org.acme.generated.pg_catalog.tables.PgOptionsToTable
import org.acme.generated.pg_catalog.tables.PgPartitionAncestors
import org.acme.generated.pg_catalog.tables.PgPartitionTree
import org.acme.generated.pg_catalog.tables.PgPreparedStatement
import org.acme.generated.pg_catalog.tables.PgPreparedXact
import org.acme.generated.pg_catalog.tables.PgShowAllFileSettings
import org.acme.generated.pg_catalog.tables.PgShowAllSettings
import org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus
import org.acme.generated.pg_catalog.tables.PgSnapshotXip
import org.acme.generated.pg_catalog.tables.PgStatGetActivity
import org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset
import org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo
import org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot
import org.acme.generated.pg_catalog.tables.PgStatGetSlru
import org.acme.generated.pg_catalog.tables.PgStatGetSubscription
import org.acme.generated.pg_catalog.tables.PgStatGetWalSenders
import org.acme.generated.pg_catalog.tables.PgTablespaceDatabases
import org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs
import org.acme.generated.pg_catalog.tables.RegexpMatches
import org.acme.generated.pg_catalog.tables.RegexpSplitToTable
import org.acme.generated.pg_catalog.tables.StringToTable
import org.acme.generated.pg_catalog.tables.TsDebug
import org.acme.generated.pg_catalog.tables.TsParse
import org.acme.generated.pg_catalog.tables.TsStat
import org.acme.generated.pg_catalog.tables.TsTokenType
import org.acme.generated.pg_catalog.tables.TxidSnapshotXip
import org.acme.generated.pg_catalog.tables.Unnest
import org.acme.generated.pg_catalog.tables.records.AclexplodeRecord
import org.acme.generated.pg_catalog.tables.records.GenerateSeriesRecord
import org.acme.generated.pg_catalog.tables.records.GenerateSubscriptsRecord
import org.acme.generated.pg_catalog.tables.records.JsonArrayElementsRecord
import org.acme.generated.pg_catalog.tables.records.JsonArrayElementsTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonEachRecord
import org.acme.generated.pg_catalog.tables.records.JsonEachTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonObjectKeysRecord
import org.acme.generated.pg_catalog.tables.records.JsonPopulateRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonToRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonbArrayElementsRecord
import org.acme.generated.pg_catalog.tables.records.JsonbArrayElementsTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonbEachRecord
import org.acme.generated.pg_catalog.tables.records.JsonbEachTextRecord
import org.acme.generated.pg_catalog.tables.records.JsonbObjectKeysRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPathQueryRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPathQueryTzRecord
import org.acme.generated.pg_catalog.tables.records.JsonbPopulateRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.JsonbToRecordsetRecord
import org.acme.generated.pg_catalog.tables.records.PgConfigRecord
import org.acme.generated.pg_catalog.tables.records.PgCursorRecord
import org.acme.generated.pg_catalog.tables.records.PgEventTriggerDdlCommandsRecord
import org.acme.generated.pg_catalog.tables.records.PgEventTriggerDroppedObjectsRecord
import org.acme.generated.pg_catalog.tables.records.PgExtensionUpdatePathsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetBackendMemoryContextsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetCatalogForeignKeysRecord
import org.acme.generated.pg_catalog.tables.records.PgGetKeywordsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetMultixactMembersRecord
import org.acme.generated.pg_catalog.tables.records.PgGetPublicationTablesRecord
import org.acme.generated.pg_catalog.tables.records.PgGetReplicationSlotsRecord
import org.acme.generated.pg_catalog.tables.records.PgGetShmemAllocationsRecord
import org.acme.generated.pg_catalog.tables.records.PgListeningChannelsRecord
import org.acme.generated.pg_catalog.tables.records.PgLockStatusRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotGetBinaryChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotGetChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotPeekBinaryChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLogicalSlotPeekChangesRecord
import org.acme.generated.pg_catalog.tables.records.PgLsArchiveStatusdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsDirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsLogdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsTmpdirRecord
import org.acme.generated.pg_catalog.tables.records.PgLsWaldirRecord
import org.acme.generated.pg_catalog.tables.records.PgMcvListItemsRecord
import org.acme.generated.pg_catalog.tables.records.PgOptionsToTableRecord
import org.acme.generated.pg_catalog.tables.records.PgPartitionAncestorsRecord
import org.acme.generated.pg_catalog.tables.records.PgPartitionTreeRecord
import org.acme.generated.pg_catalog.tables.records.PgPreparedStatementRecord
import org.acme.generated.pg_catalog.tables.records.PgPreparedXactRecord
import org.acme.generated.pg_catalog.tables.records.PgShowAllFileSettingsRecord
import org.acme.generated.pg_catalog.tables.records.PgShowAllSettingsRecord
import org.acme.generated.pg_catalog.tables.records.PgShowReplicationOriginStatusRecord
import org.acme.generated.pg_catalog.tables.records.PgSnapshotXipRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetActivityRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetBackendIdsetRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetProgressInfoRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetReplicationSlotRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetSlruRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetSubscriptionRecord
import org.acme.generated.pg_catalog.tables.records.PgStatGetWalSendersRecord
import org.acme.generated.pg_catalog.tables.records.PgStopBackupRecord
import org.acme.generated.pg_catalog.tables.records.PgTablespaceDatabasesRecord
import org.acme.generated.pg_catalog.tables.records.PgTimezoneAbbrevsRecord
import org.acme.generated.pg_catalog.tables.records.RegexpMatchesRecord
import org.acme.generated.pg_catalog.tables.records.RegexpSplitToTableRecord
import org.acme.generated.pg_catalog.tables.records.StringToTableRecord
import org.acme.generated.pg_catalog.tables.records.TsDebugRecord
import org.acme.generated.pg_catalog.tables.records.TsParseRecord
import org.acme.generated.pg_catalog.tables.records.TsStatRecord
import org.acme.generated.pg_catalog.tables.records.TsTokenTypeRecord
import org.acme.generated.pg_catalog.tables.records.TxidSnapshotXipRecord
import org.acme.generated.pg_catalog.tables.records.UnnestRecord
import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.JSON
import org.jooq.JSONB
import org.jooq.Record
import org.jooq.Result
import org.jooq.XML
import org.jooq.types.YearToSecond


@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev1(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Abbrev1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev1(
      __1: Any?
): Field<String?> {
    val f = Abbrev1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev1(
      __1: Field<Any?>
): Field<String?> {
    val f = Abbrev1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev2(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Abbrev2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev2(
      __1: Any?
): Field<String?> {
    val f = Abbrev2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun abbrev2(
      __1: Field<Any?>
): Field<String?> {
    val f = Abbrev2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs1(
      configuration: Configuration
    , __1: Float?
): Float? {
    val f = Abs1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs1(
      __1: Float?
): Field<Float?> {
    val f = Abs1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs1(
      __1: Field<Float?>
): Field<Float?> {
    val f = Abs1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs2(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Abs2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs2(
      __1: Double?
): Field<Double?> {
    val f = Abs2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs2(
      __1: Field<Double?>
): Field<Double?> {
    val f = Abs2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs3(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Abs3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs3(
      __1: Long?
): Field<Long?> {
    val f = Abs3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs3(
      __1: Field<Long?>
): Field<Long?> {
    val f = Abs3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs4(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Abs4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs4(
      __1: Int?
): Field<Int?> {
    val f = Abs4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs4(
      __1: Field<Int?>
): Field<Int?> {
    val f = Abs4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs5(
      configuration: Configuration
    , __1: Short?
): Short? {
    val f = Abs5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs5(
      __1: Short?
): Field<Short?> {
    val f = Abs5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs5(
      __1: Field<Short?>
): Field<Short?> {
    val f = Abs5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.abs</code>
 */
fun abs6(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Abs6()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs6(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Abs6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.abs</code> as a field.
 */
fun abs6(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Abs6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.aclcontains</code>
 */
fun aclcontains(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: String?
): Boolean? {
    val f = Aclcontains()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.aclcontains</code> as a field.
 */
fun aclcontains(
      __1: Array<String?>?
    , __2: String?
): Field<Boolean?> {
    val f = Aclcontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.aclcontains</code> as a field.
 */
fun aclcontains(
      __1: Field<Array<String?>?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Aclcontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.acldefault</code>
 */
fun acldefault(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Array<String?>? {
    val f = Acldefault()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.acldefault</code> as a field.
 */
fun acldefault(
      __1: String?
    , __2: Long?
): Field<Array<String?>?> {
    val f = Acldefault()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.acldefault</code> as a field.
 */
fun acldefault(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Array<String?>?> {
    val f = Acldefault()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.aclinsert</code>
 */
fun aclinsert(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: String?
): Array<String?>? {
    val f = Aclinsert()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.aclinsert</code> as a field.
 */
fun aclinsert(
      __1: Array<String?>?
    , __2: String?
): Field<Array<String?>?> {
    val f = Aclinsert()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.aclinsert</code> as a field.
 */
fun aclinsert(
      __1: Field<Array<String?>?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = Aclinsert()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.aclitemeq</code>
 */
fun aclitemeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Aclitemeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.aclitemeq</code> as a field.
 */
fun aclitemeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Aclitemeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.aclitemeq</code> as a field.
 */
fun aclitemeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Aclitemeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemin(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Aclitemin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemin(
      __1: Any?
): Field<String?> {
    val f = Aclitemin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemin(
      __1: Field<Any?>
): Field<String?> {
    val f = Aclitemin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Aclitemout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemout(
      __1: String?
): Field<Any?> {
    val f = Aclitemout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun aclitemout(
      __1: Field<String?>
): Field<Any?> {
    val f = Aclitemout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.aclremove</code>
 */
fun aclremove(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: String?
): Array<String?>? {
    val f = Aclremove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.aclremove</code> as a field.
 */
fun aclremove(
      __1: Array<String?>?
    , __2: String?
): Field<Array<String?>?> {
    val f = Aclremove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.aclremove</code> as a field.
 */
fun aclremove(
      __1: Field<Array<String?>?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = Aclremove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.acos</code>
 */
fun acos(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Acos()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.acos</code> as a field.
 */
fun acos(
      __1: Double?
): Field<Double?> {
    val f = Acos()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.acos</code> as a field.
 */
fun acos(
      __1: Field<Double?>
): Field<Double?> {
    val f = Acos()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.acosd</code>
 */
fun acosd(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Acosd()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.acosd</code> as a field.
 */
fun acosd(
      __1: Double?
): Field<Double?> {
    val f = Acosd()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.acosd</code> as a field.
 */
fun acosd(
      __1: Field<Double?>
): Field<Double?> {
    val f = Acosd()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.acosh</code>
 */
fun acosh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Acosh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.acosh</code> as a field.
 */
fun acosh(
      __1: Double?
): Field<Double?> {
    val f = Acosh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.acosh</code> as a field.
 */
fun acosh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Acosh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.age</code>
 */
fun age1(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = Age1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age1(
      __1: Long?
): Field<Int?> {
    val f = Age1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age1(
      __1: Field<Long?>
): Field<Int?> {
    val f = Age1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.age</code>
 */
fun age2(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): YearToSecond? {
    val f = Age2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age2(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<YearToSecond?> {
    val f = Age2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age2(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<YearToSecond?> {
    val f = Age2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.age</code>
 */
fun age3(
      configuration: Configuration
    , __1: OffsetDateTime?
): YearToSecond? {
    val f = Age3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age3(
      __1: OffsetDateTime?
): Field<YearToSecond?> {
    val f = Age3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age3(
      __1: Field<OffsetDateTime?>
): Field<YearToSecond?> {
    val f = Age3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.age</code>
 */
fun age4(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): YearToSecond? {
    val f = Age4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age4(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<YearToSecond?> {
    val f = Age4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age4(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<YearToSecond?> {
    val f = Age4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.age</code>
 */
fun age5(
      configuration: Configuration
    , __1: LocalDateTime?
): YearToSecond? {
    val f = Age5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age5(
      __1: LocalDateTime?
): Field<YearToSecond?> {
    val f = Age5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.age</code> as a field.
 */
fun age5(
      __1: Field<LocalDateTime?>
): Field<YearToSecond?> {
    val f = Age5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.amvalidate</code>
 */
fun amvalidate(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = Amvalidate()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.amvalidate</code> as a field.
 */
fun amvalidate(
      __1: Long?
): Field<Boolean?> {
    val f = Amvalidate()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.amvalidate</code> as a field.
 */
fun amvalidate(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = Amvalidate()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyIn(
      __1: Any?
): Field<Any?> {
    val f = AnyIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyOut(
      __1: Any?
): Field<Any?> {
    val f = AnyOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayIn(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = AnyarrayIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayIn(
      __1: Any?
): Field<Array<Any?>?> {
    val f = AnyarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayIn(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = AnyarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayOut(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = AnyarrayOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayOut(
      __1: Array<Any?>?
): Field<Any?> {
    val f = AnyarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayOut(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = AnyarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayRecv(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = AnyarrayRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayRecv(
      __1: Any?
): Field<Array<Any?>?> {
    val f = AnyarrayRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyarrayRecv(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = AnyarrayRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.anyarray_send</code>
 */
fun anyarraySend(
      configuration: Configuration
    , __1: Array<Any?>?
): ByteArray? {
    val f = AnyarraySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.anyarray_send</code> as a field.
 */
fun anyarraySend(
      __1: Array<Any?>?
): Field<ByteArray?> {
    val f = AnyarraySend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.anyarray_send</code> as a field.
 */
fun anyarraySend(
      __1: Field<Array<Any?>?>
): Field<ByteArray?> {
    val f = AnyarraySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatibleIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleIn(
      __1: Any?
): Field<Any?> {
    val f = AnycompatibleIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatibleIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatibleOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleOut(
      __1: Any?
): Field<Any?> {
    val f = AnycompatibleOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatibleOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatibleOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblearrayIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayIn(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblearrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblearrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblearrayOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayOut(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblearrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblearrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblearrayRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayRecv(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblearrayRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearrayRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblearrayRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearraySend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = AnycompatiblearraySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearraySend(
      __1: Any?
): Field<ByteArray?> {
    val f = AnycompatiblearraySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblearraySend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = AnycompatiblearraySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = AnycompatiblemultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = AnycompatiblemultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = AnycompatiblemultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblemultirangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeOut(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblemultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblemultirangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblemultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblenonarrayIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayIn(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblenonarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblenonarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblenonarrayOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayOut(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblenonarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblenonarrayOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblenonarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = AnycompatiblerangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = AnycompatiblerangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = AnycompatiblerangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnycompatiblerangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeOut(
      __1: Any?
): Field<Any?> {
    val f = AnycompatiblerangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anycompatiblerangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnycompatiblerangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyelementIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementIn(
      __1: Any?
): Field<Any?> {
    val f = AnyelementIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyelementIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyelementOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementOut(
      __1: Any?
): Field<Any?> {
    val f = AnyelementOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyelementOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyelementOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyenumIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumIn(
      __1: Any?
): Field<Any?> {
    val f = AnyenumIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyenumIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyenumOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumOut(
      __1: Any?
): Field<Any?> {
    val f = AnyenumOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyenumOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyenumOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = AnymultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = AnymultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = AnymultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnymultirangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeOut(
      __1: Any?
): Field<Any?> {
    val f = AnymultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anymultirangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnymultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnynonarrayIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayIn(
      __1: Any?
): Field<Any?> {
    val f = AnynonarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnynonarrayIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnynonarrayOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayOut(
      __1: Any?
): Field<Any?> {
    val f = AnynonarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anynonarrayOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnynonarrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = AnyrangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = AnyrangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = AnyrangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = AnyrangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeOut(
      __1: Any?
): Field<Any?> {
    val f = AnyrangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anyrangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = AnyrangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anytextcat(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): String? {
    val f = Anytextcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anytextcat(
      __1: Any?
    , __2: String?
): Field<String?> {
    val f = Anytextcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun anytextcat(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<String?> {
    val f = Anytextcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area1(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Area1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area1(
      __1: Any?
): Field<Double?> {
    val f = Area1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area1(
      __1: Field<Any?>
): Field<Double?> {
    val f = Area1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area2(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Area2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area2(
      __1: Any?
): Field<Double?> {
    val f = Area2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area2(
      __1: Field<Any?>
): Field<Double?> {
    val f = Area2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area3(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Area3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area3(
      __1: Any?
): Field<Double?> {
    val f = Area3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun area3(
      __1: Field<Any?>
): Field<Double?> {
    val f = Area3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areajoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Areajoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areajoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Areajoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areajoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Areajoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areasel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Areasel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areasel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Areasel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun areasel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Areasel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAgg1(
      __1: Any?
): AggregateFunction<Array<Any?>?> {
    val f = ArrayAgg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAgg1(
      __1: Field<Any?>
): AggregateFunction<Array<Any?>?> {
    val f = ArrayAgg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.array_agg</code> as a field.
 */
fun arrayAgg2(
      __1: Array<Any?>?
): AggregateFunction<Array<Any?>?> {
    val f = ArrayAgg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.array_agg</code> as a field.
 */
fun arrayAgg2(
      __1: Field<Array<Any?>?>
): AggregateFunction<Array<Any?>?> {
    val f = ArrayAgg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayFinalfn(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Any?>?
): Array<Any?>? {
    val f = ArrayAggArrayFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayFinalfn(
      __1: Any?
    , __2: Array<Any?>?
): Field<Array<Any?>?> {
    val f = ArrayAggArrayFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayFinalfn(
      __1: Field<Any?>
    , __2: Field<Array<Any?>?>
): Field<Array<Any?>?> {
    val f = ArrayAggArrayFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Any?>?
): Any? {
    val f = ArrayAggArrayTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayTransfn(
      __1: Any?
    , __2: Array<Any?>?
): Field<Any?> {
    val f = ArrayAggArrayTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggArrayTransfn(
      __1: Field<Any?>
    , __2: Field<Array<Any?>?>
): Field<Any?> {
    val f = ArrayAggArrayTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggFinalfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Array<Any?>? {
    val f = ArrayAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggFinalfn(
      __1: Any?
    , __2: Any?
): Field<Array<Any?>?> {
    val f = ArrayAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggFinalfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Array<Any?>?> {
    val f = ArrayAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ArrayAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ArrayAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ArrayAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAppend(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ArrayAppend()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAppend(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ArrayAppend()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayAppend(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ArrayAppend()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayCat(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ArrayCat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayCat(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ArrayCat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayCat(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ArrayCat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_dims</code>
 */
fun arrayDims(
      configuration: Configuration
    , __1: Array<Any?>?
): String? {
    val f = ArrayDims()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_dims</code> as a field.
 */
fun arrayDims(
      __1: Array<Any?>?
): Field<String?> {
    val f = ArrayDims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_dims</code> as a field.
 */
fun arrayDims(
      __1: Field<Array<Any?>?>
): Field<String?> {
    val f = ArrayDims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_eq</code>
 */
fun arrayEq(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_eq</code> as a field.
 */
fun arrayEq(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_eq</code> as a field.
 */
fun arrayEq(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill1(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Int?>?
): Array<Any?>? {
    val f = ArrayFill1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill1(
      __1: Any?
    , __2: Array<Int?>?
): Field<Array<Any?>?> {
    val f = ArrayFill1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill1(
      __1: Field<Any?>
    , __2: Field<Array<Int?>?>
): Field<Array<Any?>?> {
    val f = ArrayFill1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill2(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Int?>?
    , __3: Array<Int?>?
): Array<Any?>? {
    val f = ArrayFill2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill2(
      __1: Any?
    , __2: Array<Int?>?
    , __3: Array<Int?>?
): Field<Array<Any?>?> {
    val f = ArrayFill2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayFill2(
      __1: Field<Any?>
    , __2: Field<Array<Int?>?>
    , __3: Field<Array<Int?>?>
): Field<Array<Any?>?> {
    val f = ArrayFill2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_ge</code>
 */
fun arrayGe(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_ge</code> as a field.
 */
fun arrayGe(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_ge</code> as a field.
 */
fun arrayGe(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_gt</code>
 */
fun arrayGt(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_gt</code> as a field.
 */
fun arrayGt(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_gt</code> as a field.
 */
fun arrayGt(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Array<Any?>? {
    val f = ArrayIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Array<Any?>?> {
    val f = ArrayIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Array<Any?>?> {
    val f = ArrayIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_larger</code>
 */
fun arrayLarger(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Array<Any?>? {
    val f = ArrayLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_larger</code> as a field.
 */
fun arrayLarger(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Array<Any?>?> {
    val f = ArrayLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_larger</code> as a field.
 */
fun arrayLarger(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Array<Any?>?> {
    val f = ArrayLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_le</code>
 */
fun arrayLe(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_le</code> as a field.
 */
fun arrayLe(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_le</code> as a field.
 */
fun arrayLe(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_length</code>
 */
fun arrayLength(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
): Int? {
    val f = ArrayLength()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_length</code> as a field.
 */
fun arrayLength(
      __1: Array<Any?>?
    , __2: Int?
): Field<Int?> {
    val f = ArrayLength()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_length</code> as a field.
 */
fun arrayLength(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = ArrayLength()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_lower</code>
 */
fun arrayLower(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
): Int? {
    val f = ArrayLower()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_lower</code> as a field.
 */
fun arrayLower(
      __1: Array<Any?>?
    , __2: Int?
): Field<Int?> {
    val f = ArrayLower()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_lower</code> as a field.
 */
fun arrayLower(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = ArrayLower()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_lt</code>
 */
fun arrayLt(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_lt</code> as a field.
 */
fun arrayLt(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_lt</code> as a field.
 */
fun arrayLt(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_ndims</code>
 */
fun arrayNdims(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = ArrayNdims()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_ndims</code> as a field.
 */
fun arrayNdims(
      __1: Array<Any?>?
): Field<Int?> {
    val f = ArrayNdims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_ndims</code> as a field.
 */
fun arrayNdims(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = ArrayNdims()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_ne</code>
 */
fun arrayNe(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = ArrayNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_ne</code> as a field.
 */
fun arrayNe(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = ArrayNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_ne</code> as a field.
 */
fun arrayNe(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = ArrayNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayOut(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = ArrayOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayOut(
      __1: Array<Any?>?
): Field<Any?> {
    val f = ArrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayOut(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = ArrayOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = ArrayPosition1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition1(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = ArrayPosition1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = ArrayPosition1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
): Int? {
    val f = ArrayPosition2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition2(
      __1: Any?
    , __2: Any?
    , __3: Int?
): Field<Int?> {
    val f = ArrayPosition2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPosition2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
): Field<Int?> {
    val f = ArrayPosition2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPositions(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Array<Int?>? {
    val f = ArrayPositions()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPositions(
      __1: Any?
    , __2: Any?
): Field<Array<Int?>?> {
    val f = ArrayPositions()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPositions(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Array<Int?>?> {
    val f = ArrayPositions()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPrepend(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ArrayPrepend()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPrepend(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ArrayPrepend()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayPrepend(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ArrayPrepend()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Array<Any?>? {
    val f = ArrayRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Array<Any?>?> {
    val f = ArrayRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Array<Any?>?> {
    val f = ArrayRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRemove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ArrayRemove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRemove(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ArrayRemove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayRemove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ArrayRemove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayReplace(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = ArrayReplace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayReplace(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = ArrayReplace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayReplace(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = ArrayReplace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_send</code>
 */
fun arraySend(
      configuration: Configuration
    , __1: Array<Any?>?
): ByteArray? {
    val f = ArraySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_send</code> as a field.
 */
fun arraySend(
      __1: Array<Any?>?
): Field<ByteArray?> {
    val f = ArraySend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_send</code> as a field.
 */
fun arraySend(
      __1: Field<Array<Any?>?>
): Field<ByteArray?> {
    val f = ArraySend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_smaller</code>
 */
fun arraySmaller(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Array<Any?>? {
    val f = ArraySmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_smaller</code> as a field.
 */
fun arraySmaller(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Array<Any?>?> {
    val f = ArraySmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_smaller</code> as a field.
 */
fun arraySmaller(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Array<Any?>?> {
    val f = ArraySmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraySubscriptHandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = ArraySubscriptHandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraySubscriptHandler(
      __1: Any?
): Field<Any?> {
    val f = ArraySubscriptHandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraySubscriptHandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = ArraySubscriptHandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_to_json</code>
 */
fun arrayToJson1(
      configuration: Configuration
    , __1: Array<Any?>?
): JSON? {
    val f = ArrayToJson1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_to_json</code> as a field.
 */
fun arrayToJson1(
      __1: Array<Any?>?
): Field<JSON?> {
    val f = ArrayToJson1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_to_json</code> as a field.
 */
fun arrayToJson1(
      __1: Field<Array<Any?>?>
): Field<JSON?> {
    val f = ArrayToJson1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_to_json</code>
 */
fun arrayToJson2(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Boolean?
): JSON? {
    val f = ArrayToJson2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_to_json</code> as a field.
 */
fun arrayToJson2(
      __1: Array<Any?>?
    , __2: Boolean?
): Field<JSON?> {
    val f = ArrayToJson2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_to_json</code> as a field.
 */
fun arrayToJson2(
      __1: Field<Array<Any?>?>
    , __2: Field<Boolean?>
): Field<JSON?> {
    val f = ArrayToJson2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_to_string</code>
 */
fun arrayToString1(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: String?
    , __3: String?
): String? {
    val f = ArrayToString1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_to_string</code> as a field.
 */
fun arrayToString1(
      __1: Array<Any?>?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = ArrayToString1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_to_string</code> as a field.
 */
fun arrayToString1(
      __1: Field<Array<Any?>?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = ArrayToString1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_to_string</code>
 */
fun arrayToString2(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: String?
): String? {
    val f = ArrayToString2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_to_string</code> as a field.
 */
fun arrayToString2(
      __1: Array<Any?>?
    , __2: String?
): Field<String?> {
    val f = ArrayToString2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_to_string</code> as a field.
 */
fun arrayToString2(
      __1: Field<Array<Any?>?>
    , __2: Field<String?>
): Field<String?> {
    val f = ArrayToString2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayToTsvector(
      configuration: Configuration
    , __1: Array<String?>?
): Any? {
    val f = ArrayToTsvector()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayToTsvector(
      __1: Array<String?>?
): Field<Any?> {
    val f = ArrayToTsvector()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayToTsvector(
      __1: Field<Array<String?>?>
): Field<Any?> {
    val f = ArrayToTsvector()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayTypanalyze(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = ArrayTypanalyze()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayTypanalyze(
      __1: Any?
): Field<Boolean?> {
    val f = ArrayTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayTypanalyze(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = ArrayTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayUnnestSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = ArrayUnnestSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayUnnestSupport(
      __1: Any?
): Field<Any?> {
    val f = ArrayUnnestSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arrayUnnestSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = ArrayUnnestSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.array_upper</code>
 */
fun arrayUpper(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
): Int? {
    val f = ArrayUpper()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.array_upper</code> as a field.
 */
fun arrayUpper(
      __1: Array<Any?>?
    , __2: Int?
): Field<Int?> {
    val f = ArrayUpper()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.array_upper</code> as a field.
 */
fun arrayUpper(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = ArrayUpper()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.arraycontained</code>
 */
fun arraycontained(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Arraycontained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.arraycontained</code> as a field.
 */
fun arraycontained(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Arraycontained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.arraycontained</code> as a field.
 */
fun arraycontained(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Arraycontained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.arraycontains</code>
 */
fun arraycontains(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Arraycontains()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.arraycontains</code> as a field.
 */
fun arraycontains(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Arraycontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.arraycontains</code> as a field.
 */
fun arraycontains(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Arraycontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Arraycontjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Arraycontjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Arraycontjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Arraycontsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Arraycontsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun arraycontsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Arraycontsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.arrayoverlap</code>
 */
fun arrayoverlap(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Arrayoverlap()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.arrayoverlap</code> as a field.
 */
fun arrayoverlap(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Arrayoverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.arrayoverlap</code> as a field.
 */
fun arrayoverlap(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Arrayoverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ascii</code>
 */
fun ascii(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Ascii()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ascii</code> as a field.
 */
fun ascii(
      __1: String?
): Field<Int?> {
    val f = Ascii()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ascii</code> as a field.
 */
fun ascii(
      __1: Field<String?>
): Field<Int?> {
    val f = Ascii()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.asin</code>
 */
fun asin(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Asin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.asin</code> as a field.
 */
fun asin(
      __1: Double?
): Field<Double?> {
    val f = Asin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.asin</code> as a field.
 */
fun asin(
      __1: Field<Double?>
): Field<Double?> {
    val f = Asin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.asind</code>
 */
fun asind(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Asind()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.asind</code> as a field.
 */
fun asind(
      __1: Double?
): Field<Double?> {
    val f = Asind()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.asind</code> as a field.
 */
fun asind(
      __1: Field<Double?>
): Field<Double?> {
    val f = Asind()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.asinh</code>
 */
fun asinh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Asinh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.asinh</code> as a field.
 */
fun asinh(
      __1: Double?
): Field<Double?> {
    val f = Asinh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.asinh</code> as a field.
 */
fun asinh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Asinh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.atan</code>
 */
fun atan(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Atan()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.atan</code> as a field.
 */
fun atan(
      __1: Double?
): Field<Double?> {
    val f = Atan()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.atan</code> as a field.
 */
fun atan(
      __1: Field<Double?>
): Field<Double?> {
    val f = Atan()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.atan2</code>
 */
fun atan2(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Atan2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.atan2</code> as a field.
 */
fun atan2(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Atan2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.atan2</code> as a field.
 */
fun atan2(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Atan2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.atan2d</code>
 */
fun atan2d(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Atan2d()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.atan2d</code> as a field.
 */
fun atan2d(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Atan2d()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.atan2d</code> as a field.
 */
fun atan2d(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Atan2d()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.atand</code>
 */
fun atand(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Atand()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.atand</code> as a field.
 */
fun atand(
      __1: Double?
): Field<Double?> {
    val f = Atand()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.atand</code> as a field.
 */
fun atand(
      __1: Field<Double?>
): Field<Double?> {
    val f = Atand()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.atanh</code>
 */
fun atanh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Atanh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.atanh</code> as a field.
 */
fun atanh(
      __1: Double?
): Field<Double?> {
    val f = Atanh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.atanh</code> as a field.
 */
fun atanh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Atanh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = Avg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = Avg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = Avg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = Avg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = Avg3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = Avg3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg4(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Avg4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg4(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Avg4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg5(
      __1: Float?
): AggregateFunction<Double?> {
    val f = Avg5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg5(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = Avg5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg6(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Avg6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg6(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Avg6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg7(
      __1: YearToSecond?
): AggregateFunction<YearToSecond?> {
    val f = Avg7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.avg</code> as a field.
 */
fun avg7(
      __1: Field<YearToSecond?>
): AggregateFunction<YearToSecond?> {
    val f = Avg7()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bernoulli(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Bernoulli()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bernoulli(
      __1: Any?
): Field<Any?> {
    val f = Bernoulli()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bernoulli(
      __1: Field<Any?>
): Field<Any?> {
    val f = Bernoulli()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToEucTw(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Big5ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToEucTw(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Big5ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToEucTw(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Big5ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Big5ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Big5ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Big5ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Big5ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Big5ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun big5ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Big5ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.binary_upgrade_create_empty_extension</code>
 */
fun binaryUpgradeCreateEmptyExtension(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Boolean?
    , __4: String?
    , __5: Array<Long?>?
    , __6: Array<String?>?
    , __7: Array<String?>?
): Unit {
    val p = BinaryUpgradeCreateEmptyExtension()
    p.set__1(__1)
    p.set__2(__2)
    p.set__3(__3)
    p.set__4(__4)
    p.set__5(__5)
    p.set__6(__6)
    p.set__7(__7)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_missing_value</code>
 */
fun binaryUpgradeSetMissingValue(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Unit {
    val p = BinaryUpgradeSetMissingValue()
    p.set__1(__1)
    p.set__2(__2)
    p.set__3(__3)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_array_pg_type_oid</code>
 */
fun binaryUpgradeSetNextArrayPgTypeOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextArrayPgTypeOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_heap_pg_class_oid</code>
 */
fun binaryUpgradeSetNextHeapPgClassOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextHeapPgClassOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_index_pg_class_oid</code>
 */
fun binaryUpgradeSetNextIndexPgClassOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextIndexPgClassOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call
 * <code>pg_catalog.binary_upgrade_set_next_multirange_array_pg_type_oid</code>
 */
fun binaryUpgradeSetNextMultirangeArrayPgTypeOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextMultirangeArrayPgTypeOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_multirange_pg_type_oid</code>
 */
fun binaryUpgradeSetNextMultirangePgTypeOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextMultirangePgTypeOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_pg_authid_oid</code>
 */
fun binaryUpgradeSetNextPgAuthidOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextPgAuthidOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_pg_enum_oid</code>
 */
fun binaryUpgradeSetNextPgEnumOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextPgEnumOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_pg_type_oid</code>
 */
fun binaryUpgradeSetNextPgTypeOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextPgTypeOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_next_toast_pg_class_oid</code>
 */
fun binaryUpgradeSetNextToastPgClassOid(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = BinaryUpgradeSetNextToastPgClassOid()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.binary_upgrade_set_record_init_privs</code>
 */
fun binaryUpgradeSetRecordInitPrivs(
      configuration: Configuration
    , __1: Boolean?
): Unit {
    val p = BinaryUpgradeSetRecordInitPrivs()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.bit</code>
 */
fun bit1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): String? {
    val f = Bit1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit1(
      __1: Int?
    , __2: Int?
): Field<String?> {
    val f = Bit1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit1(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Bit1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit</code>
 */
fun bit2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Boolean?
): String? {
    val f = Bit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit2(
      __1: String?
    , __2: Int?
    , __3: Boolean?
): Field<String?> {
    val f = Bit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit2(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = Bit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit</code>
 */
fun bit3(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): String? {
    val f = Bit3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit3(
      __1: Long?
    , __2: Int?
): Field<String?> {
    val f = Bit3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit</code> as a field.
 */
fun bit3(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Bit3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd1(
      __1: Short?
): AggregateFunction<Short?> {
    val f = BitAnd1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd1(
      __1: Field<Short?>
): AggregateFunction<Short?> {
    val f = BitAnd1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd2(
      __1: Int?
): AggregateFunction<Int?> {
    val f = BitAnd2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd2(
      __1: Field<Int?>
): AggregateFunction<Int?> {
    val f = BitAnd2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd3(
      __1: Long?
): AggregateFunction<Long?> {
    val f = BitAnd3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd3(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = BitAnd3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd4(
      __1: String?
): AggregateFunction<String?> {
    val f = BitAnd4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_and</code> as a field.
 */
fun bitAnd4(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = BitAnd4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.bit_count</code>
 */
fun bitCount1(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = BitCount1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_count</code> as a field.
 */
fun bitCount1(
      __1: String?
): Field<Long?> {
    val f = BitCount1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_count</code> as a field.
 */
fun bitCount1(
      __1: Field<String?>
): Field<Long?> {
    val f = BitCount1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit_count</code>
 */
fun bitCount2(
      configuration: Configuration
    , __1: ByteArray?
): Long? {
    val f = BitCount2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_count</code> as a field.
 */
fun bitCount2(
      __1: ByteArray?
): Field<Long?> {
    val f = BitCount2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_count</code> as a field.
 */
fun bitCount2(
      __1: Field<ByteArray?>
): Field<Long?> {
    val f = BitCount2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = BitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = BitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = BitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit_length</code>
 */
fun bitLength1(
      configuration: Configuration
    , __1: ByteArray?
): Int? {
    val f = BitLength1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength1(
      __1: ByteArray?
): Field<Int?> {
    val f = BitLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength1(
      __1: Field<ByteArray?>
): Field<Int?> {
    val f = BitLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit_length</code>
 */
fun bitLength2(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = BitLength2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength2(
      __1: String?
): Field<Int?> {
    val f = BitLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength2(
      __1: Field<String?>
): Field<Int?> {
    val f = BitLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit_length</code>
 */
fun bitLength3(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = BitLength3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength3(
      __1: String?
): Field<Int?> {
    val f = BitLength3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_length</code> as a field.
 */
fun bitLength3(
      __1: Field<String?>
): Field<Int?> {
    val f = BitLength3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr1(
      __1: Short?
): AggregateFunction<Short?> {
    val f = BitOr1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr1(
      __1: Field<Short?>
): AggregateFunction<Short?> {
    val f = BitOr1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr2(
      __1: Int?
): AggregateFunction<Int?> {
    val f = BitOr2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr2(
      __1: Field<Int?>
): AggregateFunction<Int?> {
    val f = BitOr2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr3(
      __1: Long?
): AggregateFunction<Long?> {
    val f = BitOr3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr3(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = BitOr3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr4(
      __1: String?
): AggregateFunction<String?> {
    val f = BitOr4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_or</code> as a field.
 */
fun bitOr4(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = BitOr4()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitOut(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = BitOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitOut(
      __1: String?
): Field<Any?> {
    val f = BitOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitOut(
      __1: Field<String?>
): Field<Any?> {
    val f = BitOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = BitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = BitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bitRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = BitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bit_send</code>
 */
fun bitSend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = BitSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bit_send</code> as a field.
 */
fun bitSend(
      __1: String?
): Field<ByteArray?> {
    val f = BitSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_send</code> as a field.
 */
fun bitSend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = BitSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor1(
      __1: Short?
): AggregateFunction<Short?> {
    val f = BitXor1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor1(
      __1: Field<Short?>
): AggregateFunction<Short?> {
    val f = BitXor1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor2(
      __1: Int?
): AggregateFunction<Int?> {
    val f = BitXor2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor2(
      __1: Field<Int?>
): AggregateFunction<Int?> {
    val f = BitXor2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor3(
      __1: Long?
): AggregateFunction<Long?> {
    val f = BitXor3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor3(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = BitXor3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor4(
      __1: String?
): AggregateFunction<String?> {
    val f = BitXor4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bit_xor</code> as a field.
 */
fun bitXor4(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = BitXor4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.bitand</code>
 */
fun bitand(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Bitand()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitand</code> as a field.
 */
fun bitand(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Bitand()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitand</code> as a field.
 */
fun bitand(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Bitand()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitcat</code>
 */
fun bitcat(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Bitcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitcat</code> as a field.
 */
fun bitcat(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Bitcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitcat</code> as a field.
 */
fun bitcat(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Bitcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitcmp</code>
 */
fun bitcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Bitcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitcmp</code> as a field.
 */
fun bitcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Bitcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitcmp</code> as a field.
 */
fun bitcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Bitcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.biteq</code>
 */
fun biteq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Biteq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.biteq</code> as a field.
 */
fun biteq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Biteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.biteq</code> as a field.
 */
fun biteq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Biteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitge</code>
 */
fun bitge(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bitge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitge</code> as a field.
 */
fun bitge(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bitge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitge</code> as a field.
 */
fun bitge(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bitge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitgt</code>
 */
fun bitgt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bitgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitgt</code> as a field.
 */
fun bitgt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bitgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitgt</code> as a field.
 */
fun bitgt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bitgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitle</code>
 */
fun bitle(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bitle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitle</code> as a field.
 */
fun bitle(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bitle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitle</code> as a field.
 */
fun bitle(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bitle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitlt</code>
 */
fun bitlt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bitlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitlt</code> as a field.
 */
fun bitlt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bitlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitlt</code> as a field.
 */
fun bitlt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bitlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitne</code>
 */
fun bitne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bitne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitne</code> as a field.
 */
fun bitne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bitne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitne</code> as a field.
 */
fun bitne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bitne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitnot</code>
 */
fun bitnot(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Bitnot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitnot</code> as a field.
 */
fun bitnot(
      __1: String?
): Field<String?> {
    val f = Bitnot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitnot</code> as a field.
 */
fun bitnot(
      __1: Field<String?>
): Field<String?> {
    val f = Bitnot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitor</code>
 */
fun bitor(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Bitor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitor</code> as a field.
 */
fun bitor(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Bitor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitor</code> as a field.
 */
fun bitor(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Bitor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitshiftleft</code>
 */
fun bitshiftleft(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Bitshiftleft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitshiftleft</code> as a field.
 */
fun bitshiftleft(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Bitshiftleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitshiftleft</code> as a field.
 */
fun bitshiftleft(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Bitshiftleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitshiftright</code>
 */
fun bitshiftright(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Bitshiftright()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitshiftright</code> as a field.
 */
fun bitshiftright(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Bitshiftright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitshiftright</code> as a field.
 */
fun bitshiftright(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Bitshiftright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bittypmodin</code>
 */
fun bittypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Bittypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bittypmodin</code> as a field.
 */
fun bittypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Bittypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bittypmodin</code> as a field.
 */
fun bittypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Bittypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bittypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Bittypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bittypmodout(
      __1: Int?
): Field<Any?> {
    val f = Bittypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bittypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Bittypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bitxor</code>
 */
fun bitxor(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Bitxor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bitxor</code> as a field.
 */
fun bitxor(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Bitxor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bitxor</code> as a field.
 */
fun bitxor(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Bitxor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bool</code>
 */
fun bool1(
      configuration: Configuration
    , __1: Int?
): Boolean? {
    val f = Bool1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bool</code> as a field.
 */
fun bool1(
      __1: Int?
): Field<Boolean?> {
    val f = Bool1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bool</code> as a field.
 */
fun bool1(
      __1: Field<Int?>
): Field<Boolean?> {
    val f = Bool1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bool</code>
 */
fun bool2(
      configuration: Configuration
    , __1: JSONB?
): Boolean? {
    val f = Bool2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bool</code> as a field.
 */
fun bool2(
      __1: JSONB?
): Field<Boolean?> {
    val f = Bool2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bool</code> as a field.
 */
fun bool2(
      __1: Field<JSONB?>
): Field<Boolean?> {
    val f = Bool2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccum(
      configuration: Configuration
    , __1: Any?
    , __2: Boolean?
): Any? {
    val f = BoolAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccum(
      __1: Any?
    , __2: Boolean?
): Field<Any?> {
    val f = BoolAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccum(
      __1: Field<Any?>
    , __2: Field<Boolean?>
): Field<Any?> {
    val f = BoolAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: Boolean?
): Any? {
    val f = BoolAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccumInv(
      __1: Any?
    , __2: Boolean?
): Field<Any?> {
    val f = BoolAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAccumInv(
      __1: Field<Any?>
    , __2: Field<Boolean?>
): Field<Any?> {
    val f = BoolAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAlltrue(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = BoolAlltrue()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAlltrue(
      __1: Any?
): Field<Boolean?> {
    val f = BoolAlltrue()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAlltrue(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = BoolAlltrue()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bool_and</code> as a field.
 */
fun boolAnd(
      __1: Boolean?
): AggregateFunction<Boolean?> {
    val f = BoolAnd()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bool_and</code> as a field.
 */
fun boolAnd(
      __1: Field<Boolean?>
): AggregateFunction<Boolean?> {
    val f = BoolAnd()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAnytrue(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = BoolAnytrue()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAnytrue(
      __1: Any?
): Field<Boolean?> {
    val f = BoolAnytrue()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolAnytrue(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = BoolAnytrue()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bool_or</code> as a field.
 */
fun boolOr(
      __1: Boolean?
): AggregateFunction<Boolean?> {
    val f = BoolOr()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.bool_or</code> as a field.
 */
fun boolOr(
      __1: Field<Boolean?>
): AggregateFunction<Boolean?> {
    val f = BoolOr()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.booland_statefunc</code>
 */
fun boolandStatefunc(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = BoolandStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.booland_statefunc</code> as a field.
 */
fun boolandStatefunc(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = BoolandStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.booland_statefunc</code> as a field.
 */
fun boolandStatefunc(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = BoolandStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.booleq</code>
 */
fun booleq(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Booleq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.booleq</code> as a field.
 */
fun booleq(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Booleq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.booleq</code> as a field.
 */
fun booleq(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Booleq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolge</code>
 */
fun boolge(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Boolge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolge</code> as a field.
 */
fun boolge(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Boolge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolge</code> as a field.
 */
fun boolge(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Boolge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolgt</code>
 */
fun boolgt(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Boolgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolgt</code> as a field.
 */
fun boolgt(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Boolgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolgt</code> as a field.
 */
fun boolgt(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Boolgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolin(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Boolin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolin(
      __1: Any?
): Field<Boolean?> {
    val f = Boolin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolin(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Boolin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolle</code>
 */
fun boolle(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Boolle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolle</code> as a field.
 */
fun boolle(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Boolle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolle</code> as a field.
 */
fun boolle(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Boolle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boollt</code>
 */
fun boollt(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Boollt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boollt</code> as a field.
 */
fun boollt(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Boollt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boollt</code> as a field.
 */
fun boollt(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Boollt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolne</code>
 */
fun boolne(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = Boolne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolne</code> as a field.
 */
fun boolne(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = Boolne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolne</code> as a field.
 */
fun boolne(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = Boolne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolor_statefunc</code>
 */
fun boolorStatefunc(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Boolean? {
    val f = BoolorStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolor_statefunc</code> as a field.
 */
fun boolorStatefunc(
      __1: Boolean?
    , __2: Boolean?
): Field<Boolean?> {
    val f = BoolorStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolor_statefunc</code> as a field.
 */
fun boolorStatefunc(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Boolean?> {
    val f = BoolorStatefunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolout(
      configuration: Configuration
    , __1: Boolean?
): Any? {
    val f = Boolout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolout(
      __1: Boolean?
): Field<Any?> {
    val f = Boolout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolout(
      __1: Field<Boolean?>
): Field<Any?> {
    val f = Boolout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolrecv(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Boolrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolrecv(
      __1: Any?
): Field<Boolean?> {
    val f = Boolrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boolrecv(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Boolrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.boolsend</code>
 */
fun boolsend(
      configuration: Configuration
    , __1: Boolean?
): ByteArray? {
    val f = Boolsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.boolsend</code> as a field.
 */
fun boolsend(
      __1: Boolean?
): Field<ByteArray?> {
    val f = Boolsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.boolsend</code> as a field.
 */
fun boolsend(
      __1: Field<Boolean?>
): Field<ByteArray?> {
    val f = Boolsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boundBox(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoundBox()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boundBox(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoundBox()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boundBox(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoundBox()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Box1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box1(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Box1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Box1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Box2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box2(
      __1: Any?
): Field<Any?> {
    val f = Box2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Box2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box3(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Box3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box3(
      __1: Any?
): Field<Any?> {
    val f = Box3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box3(
      __1: Field<Any?>
): Field<Any?> {
    val f = Box3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box4(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Box4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box4(
      __1: Any?
): Field<Any?> {
    val f = Box4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun box4(
      __1: Field<Any?>
): Field<Any?> {
    val f = Box4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAbove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxAbove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAbove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAbove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAboveEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxAboveEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAboveEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxAboveEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAboveEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxAboveEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAdd(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoxAdd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAdd(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoxAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxAdd(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoxAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxBelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelowEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxBelowEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelowEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxBelowEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxBelowEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxBelowEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxCenter(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BoxCenter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxCenter(
      __1: Any?
): Field<Any?> {
    val f = BoxCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxCenter(
      __1: Field<Any?>
): Field<Any?> {
    val f = BoxCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContain(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxContain()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContain(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContain(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContainPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxContainPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContainPt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContainPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContained(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxContained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContained(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxContained(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BoxDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BoxDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BoxDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDiv(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoxDiv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDiv(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoxDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxDiv(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoxDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BoxIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIn(
      __1: Any?
): Field<Any?> {
    val f = BoxIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = BoxIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIntersect(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoxIntersect()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIntersect(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoxIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxIntersect(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoxIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLeft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxLeft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLeft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLeft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxMul(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoxMul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxMul(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoxMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxMul(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoxMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BoxOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOut(
      __1: Any?
): Field<Any?> {
    val f = BoxOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = BoxOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverabove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxOverabove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverabove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverabove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverbelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverbelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverbelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverlap(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxOverlap()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverlap(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverlap(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverleft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxOverleft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverleft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverleft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverright(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxOverright()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverright(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxOverright(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BoxRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRecv(
      __1: Any?
): Field<Any?> {
    val f = BoxRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = BoxRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRight(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxRight()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRight(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxRight(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = BoxSame()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSame(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = BoxSame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSame(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = BoxSame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = BoxSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSend(
      __1: Any?
): Field<ByteArray?> {
    val f = BoxSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = BoxSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSub(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = BoxSub()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSub(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = BoxSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun boxSub(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = BoxSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar</code>
 */
fun bpchar1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Bpchar1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar1(
      __1: String?
): Field<String?> {
    val f = Bpchar1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar1(
      __1: Field<String?>
): Field<String?> {
    val f = Bpchar1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar</code>
 */
fun bpchar2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Boolean?
): String? {
    val f = Bpchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar2(
      __1: String?
    , __2: Int?
    , __3: Boolean?
): Field<String?> {
    val f = Bpchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar2(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = Bpchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar</code>
 */
fun bpchar3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Bpchar3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar3(
      __1: String?
): Field<String?> {
    val f = Bpchar3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar</code> as a field.
 */
fun bpchar3(
      __1: Field<String?>
): Field<String?> {
    val f = Bpchar3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_larger</code>
 */
fun bpcharLarger(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = BpcharLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_larger</code> as a field.
 */
fun bpcharLarger(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = BpcharLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_larger</code> as a field.
 */
fun bpcharLarger(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = BpcharLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_pattern_ge</code>
 */
fun bpcharPatternGe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = BpcharPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_pattern_ge</code> as a field.
 */
fun bpcharPatternGe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = BpcharPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_pattern_ge</code> as a field.
 */
fun bpcharPatternGe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = BpcharPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_pattern_gt</code>
 */
fun bpcharPatternGt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = BpcharPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_pattern_gt</code> as a field.
 */
fun bpcharPatternGt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = BpcharPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_pattern_gt</code> as a field.
 */
fun bpcharPatternGt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = BpcharPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_pattern_le</code>
 */
fun bpcharPatternLe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = BpcharPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_pattern_le</code> as a field.
 */
fun bpcharPatternLe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = BpcharPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_pattern_le</code> as a field.
 */
fun bpcharPatternLe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = BpcharPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_pattern_lt</code>
 */
fun bpcharPatternLt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = BpcharPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_pattern_lt</code> as a field.
 */
fun bpcharPatternLt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = BpcharPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_pattern_lt</code> as a field.
 */
fun bpcharPatternLt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = BpcharPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchar_smaller</code>
 */
fun bpcharSmaller(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = BpcharSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchar_smaller</code> as a field.
 */
fun bpcharSmaller(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = BpcharSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchar_smaller</code> as a field.
 */
fun bpcharSmaller(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = BpcharSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = BpcharSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.bpcharcmp</code>
 */
fun bpcharcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Bpcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharcmp</code> as a field.
 */
fun bpcharcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Bpcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharcmp</code> as a field.
 */
fun bpcharcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Bpcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchareq</code>
 */
fun bpchareq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpchareq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchareq</code> as a field.
 */
fun bpchareq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpchareq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchareq</code> as a field.
 */
fun bpchareq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpchareq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharge</code>
 */
fun bpcharge(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharge</code> as a field.
 */
fun bpcharge(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharge</code> as a field.
 */
fun bpcharge(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchargt</code>
 */
fun bpchargt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpchargt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchargt</code> as a field.
 */
fun bpchargt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpchargt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchargt</code> as a field.
 */
fun bpchargt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpchargt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchariclike</code>
 */
fun bpchariclike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpchariclike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchariclike</code> as a field.
 */
fun bpchariclike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpchariclike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchariclike</code> as a field.
 */
fun bpchariclike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpchariclike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharicnlike</code>
 */
fun bpcharicnlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharicnlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharicnlike</code> as a field.
 */
fun bpcharicnlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharicnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharicnlike</code> as a field.
 */
fun bpcharicnlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharicnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharicregexeq</code>
 */
fun bpcharicregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharicregexeq</code> as a field.
 */
fun bpcharicregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharicregexeq</code> as a field.
 */
fun bpcharicregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharicregexne</code>
 */
fun bpcharicregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharicregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharicregexne</code> as a field.
 */
fun bpcharicregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharicregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharicregexne</code> as a field.
 */
fun bpcharicregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharicregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharin(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = Bpcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharin(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = Bpcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharin(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Bpcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharle</code>
 */
fun bpcharle(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharle</code> as a field.
 */
fun bpcharle(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharle</code> as a field.
 */
fun bpcharle(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharlike</code>
 */
fun bpcharlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharlike</code> as a field.
 */
fun bpcharlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharlike</code> as a field.
 */
fun bpcharlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharlt</code>
 */
fun bpcharlt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharlt</code> as a field.
 */
fun bpcharlt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharlt</code> as a field.
 */
fun bpcharlt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharne</code>
 */
fun bpcharne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharne</code> as a field.
 */
fun bpcharne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharne</code> as a field.
 */
fun bpcharne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharnlike</code>
 */
fun bpcharnlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharnlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharnlike</code> as a field.
 */
fun bpcharnlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharnlike</code> as a field.
 */
fun bpcharnlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Bpcharout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharout(
      __1: String?
): Field<Any?> {
    val f = Bpcharout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharout(
      __1: Field<String?>
): Field<Any?> {
    val f = Bpcharout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharrecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = Bpcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharrecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = Bpcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpcharrecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Bpcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharregexeq</code>
 */
fun bpcharregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharregexeq</code> as a field.
 */
fun bpcharregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharregexeq</code> as a field.
 */
fun bpcharregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharregexne</code>
 */
fun bpcharregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Bpcharregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharregexne</code> as a field.
 */
fun bpcharregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Bpcharregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharregexne</code> as a field.
 */
fun bpcharregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Bpcharregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpcharsend</code>
 */
fun bpcharsend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Bpcharsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpcharsend</code> as a field.
 */
fun bpcharsend(
      __1: String?
): Field<ByteArray?> {
    val f = Bpcharsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpcharsend</code> as a field.
 */
fun bpcharsend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Bpcharsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bpchartypmodin</code>
 */
fun bpchartypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Bpchartypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bpchartypmodin</code> as a field.
 */
fun bpchartypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Bpchartypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bpchartypmodin</code> as a field.
 */
fun bpchartypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Bpchartypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpchartypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Bpchartypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpchartypmodout(
      __1: Int?
): Field<Any?> {
    val f = Bpchartypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bpchartypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Bpchartypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomAddValue(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Boolean? {
    val f = BrinBloomAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomAddValue(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Boolean?> {
    val f = BrinBloomAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomAddValue(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Boolean?> {
    val f = BrinBloomAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Boolean? {
    val f = BrinBloomConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomConsistent(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Field<Boolean?> {
    val f = BrinBloomConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Boolean?> {
    val f = BrinBloomConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomOpcinfo(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinBloomOpcinfo()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomOpcinfo(
      __1: Any?
): Field<Any?> {
    val f = BrinBloomOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomOpcinfo(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinBloomOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomOptions(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = BrinBloomOptions()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinBloomSummaryIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryIn(
      __1: Any?
): Field<Any?> {
    val f = BrinBloomSummaryIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinBloomSummaryIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinBloomSummaryOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryOut(
      __1: Any?
): Field<Any?> {
    val f = BrinBloomSummaryOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinBloomSummaryOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinBloomSummaryRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryRecv(
      __1: Any?
): Field<Any?> {
    val f = BrinBloomSummaryRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummaryRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinBloomSummaryRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummarySend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = BrinBloomSummarySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummarySend(
      __1: Any?
): Field<ByteArray?> {
    val f = BrinBloomSummarySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomSummarySend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = BrinBloomSummarySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinBloomUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomUnion(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinBloomUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinBloomUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinBloomUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinDesummarizeRange(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Unit {
    val p = BrinDesummarizeRange()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionAddValue(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Boolean? {
    val f = BrinInclusionAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionAddValue(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Boolean?> {
    val f = BrinInclusionAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionAddValue(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Boolean?> {
    val f = BrinInclusionAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinInclusionConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionConsistent(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinInclusionConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinInclusionConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionOpcinfo(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinInclusionOpcinfo()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionOpcinfo(
      __1: Any?
): Field<Any?> {
    val f = BrinInclusionOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionOpcinfo(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinInclusionOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinInclusionUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionUnion(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinInclusionUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinInclusionUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinInclusionUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxAddValue(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Boolean? {
    val f = BrinMinmaxAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxAddValue(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Boolean?> {
    val f = BrinMinmaxAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxAddValue(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Boolean?> {
    val f = BrinMinmaxAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinMinmaxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxConsistent(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinMinmaxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinMinmaxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiAddValue(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Boolean? {
    val f = BrinMinmaxMultiAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiAddValue(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Boolean?> {
    val f = BrinMinmaxMultiAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiAddValue(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Boolean?> {
    val f = BrinMinmaxMultiAddValue()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Boolean? {
    val f = BrinMinmaxMultiConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiConsistent(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Field<Boolean?> {
    val f = BrinMinmaxMultiConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Boolean?> {
    val f = BrinMinmaxMultiConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceDate(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceDate(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceDate(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat4(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceFloat4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat4(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceFloat4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat4(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceFloat4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat8(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceFloat8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat8(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceFloat8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceFloat8(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceFloat8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInet(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceInet()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInet(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInet()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInet(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInet()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceInt2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt2(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt2(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt4(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceInt4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt4(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt4(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt8(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceInt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt8(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInt8(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInterval(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInterval(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceInterval(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceMacaddr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceMacaddr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceMacaddr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr8(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceMacaddr8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr8(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceMacaddr8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceMacaddr8(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceMacaddr8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceNumeric(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceNumeric()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceNumeric(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceNumeric()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceNumeric(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceNumeric()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistancePgLsn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistancePgLsn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistancePgLsn(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistancePgLsn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistancePgLsn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistancePgLsn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTid(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceTid()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTid(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTid(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTime(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceTime()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTime(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTime(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimestamp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimestamp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimestamp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimetz(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceTimetz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimetz(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTimetz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceTimetz(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceTimetz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceUuid(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = BrinMinmaxMultiDistanceUuid()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceUuid(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceUuid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiDistanceUuid(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = BrinMinmaxMultiDistanceUuid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiOpcinfo(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinMinmaxMultiOpcinfo()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiOpcinfo(
      __1: Any?
): Field<Any?> {
    val f = BrinMinmaxMultiOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiOpcinfo(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinMinmaxMultiOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiOptions(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = BrinMinmaxMultiOptions()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinMinmaxMultiSummaryIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryIn(
      __1: Any?
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinMinmaxMultiSummaryOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryOut(
      __1: Any?
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinMinmaxMultiSummaryRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryRecv(
      __1: Any?
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummaryRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinMinmaxMultiSummaryRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummarySend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = BrinMinmaxMultiSummarySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummarySend(
      __1: Any?
): Field<ByteArray?> {
    val f = BrinMinmaxMultiSummarySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiSummarySend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = BrinMinmaxMultiSummarySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinMinmaxMultiUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiUnion(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinMinmaxMultiUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxMultiUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinMinmaxMultiUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxOpcinfo(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = BrinMinmaxOpcinfo()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxOpcinfo(
      __1: Any?
): Field<Any?> {
    val f = BrinMinmaxOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxOpcinfo(
      __1: Field<Any?>
): Field<Any?> {
    val f = BrinMinmaxOpcinfo()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Boolean? {
    val f = BrinMinmaxUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxUnion(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Boolean?> {
    val f = BrinMinmaxUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinMinmaxUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Boolean?> {
    val f = BrinMinmaxUnion()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeNewValues(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = BrinSummarizeNewValues()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeNewValues(
      __1: Any?
): Field<Int?> {
    val f = BrinSummarizeNewValues()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeNewValues(
      __1: Field<Any?>
): Field<Int?> {
    val f = BrinSummarizeNewValues()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeRange(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Int? {
    val f = BrinSummarizeRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeRange(
      __1: Any?
    , __2: Long?
): Field<Int?> {
    val f = BrinSummarizeRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinSummarizeRange(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = BrinSummarizeRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinhandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Brinhandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinhandler(
      __1: Any?
): Field<Any?> {
    val f = Brinhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun brinhandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Brinhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun broadcast(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Broadcast()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun broadcast(
      __1: Any?
): Field<Any?> {
    val f = Broadcast()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun broadcast(
      __1: Field<Any?>
): Field<Any?> {
    val f = Broadcast()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btarraycmp</code>
 */
fun btarraycmp(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Int? {
    val f = Btarraycmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btarraycmp</code> as a field.
 */
fun btarraycmp(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Int?> {
    val f = Btarraycmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btarraycmp</code> as a field.
 */
fun btarraycmp(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Int?> {
    val f = Btarraycmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btboolcmp</code>
 */
fun btboolcmp(
      configuration: Configuration
    , __1: Boolean?
    , __2: Boolean?
): Int? {
    val f = Btboolcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btboolcmp</code> as a field.
 */
fun btboolcmp(
      __1: Boolean?
    , __2: Boolean?
): Field<Int?> {
    val f = Btboolcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btboolcmp</code> as a field.
 */
fun btboolcmp(
      __1: Field<Boolean?>
    , __2: Field<Boolean?>
): Field<Int?> {
    val f = Btboolcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btbpchar_pattern_cmp</code>
 */
fun btbpcharPatternCmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = BtbpcharPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btbpchar_pattern_cmp</code> as a field.
 */
fun btbpcharPatternCmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = BtbpcharPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btbpchar_pattern_cmp</code> as a field.
 */
fun btbpcharPatternCmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = BtbpcharPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btbpcharPatternSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = BtbpcharPatternSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btcharcmp</code>
 */
fun btcharcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Btcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btcharcmp</code> as a field.
 */
fun btcharcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Btcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btcharcmp</code> as a field.
 */
fun btcharcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Btcharcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btequalimage</code>
 */
fun btequalimage(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = Btequalimage()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btequalimage</code> as a field.
 */
fun btequalimage(
      __1: Long?
): Field<Boolean?> {
    val f = Btequalimage()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btequalimage</code> as a field.
 */
fun btequalimage(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = Btequalimage()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btfloat48cmp</code>
 */
fun btfloat48cmp(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Int? {
    val f = Btfloat48cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btfloat48cmp</code> as a field.
 */
fun btfloat48cmp(
      __1: Float?
    , __2: Double?
): Field<Int?> {
    val f = Btfloat48cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btfloat48cmp</code> as a field.
 */
fun btfloat48cmp(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Int?> {
    val f = Btfloat48cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btfloat4cmp</code>
 */
fun btfloat4cmp(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Int? {
    val f = Btfloat4cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btfloat4cmp</code> as a field.
 */
fun btfloat4cmp(
      __1: Float?
    , __2: Float?
): Field<Int?> {
    val f = Btfloat4cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btfloat4cmp</code> as a field.
 */
fun btfloat4cmp(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Int?> {
    val f = Btfloat4cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btfloat4sortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btfloat4sortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btfloat84cmp</code>
 */
fun btfloat84cmp(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Int? {
    val f = Btfloat84cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btfloat84cmp</code> as a field.
 */
fun btfloat84cmp(
      __1: Double?
    , __2: Float?
): Field<Int?> {
    val f = Btfloat84cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btfloat84cmp</code> as a field.
 */
fun btfloat84cmp(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Int?> {
    val f = Btfloat84cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btfloat8cmp</code>
 */
fun btfloat8cmp(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Int? {
    val f = Btfloat8cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btfloat8cmp</code> as a field.
 */
fun btfloat8cmp(
      __1: Double?
    , __2: Double?
): Field<Int?> {
    val f = Btfloat8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btfloat8cmp</code> as a field.
 */
fun btfloat8cmp(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Int?> {
    val f = Btfloat8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btfloat8sortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btfloat8sortsupport()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bthandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Bthandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bthandler(
      __1: Any?
): Field<Any?> {
    val f = Bthandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bthandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Bthandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint24cmp</code>
 */
fun btint24cmp(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Int? {
    val f = Btint24cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint24cmp</code> as a field.
 */
fun btint24cmp(
      __1: Short?
    , __2: Int?
): Field<Int?> {
    val f = Btint24cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint24cmp</code> as a field.
 */
fun btint24cmp(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Btint24cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint28cmp</code>
 */
fun btint28cmp(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Int? {
    val f = Btint28cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint28cmp</code> as a field.
 */
fun btint28cmp(
      __1: Short?
    , __2: Long?
): Field<Int?> {
    val f = Btint28cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint28cmp</code> as a field.
 */
fun btint28cmp(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = Btint28cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint2cmp</code>
 */
fun btint2cmp(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Int? {
    val f = Btint2cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint2cmp</code> as a field.
 */
fun btint2cmp(
      __1: Short?
    , __2: Short?
): Field<Int?> {
    val f = Btint2cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint2cmp</code> as a field.
 */
fun btint2cmp(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Btint2cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btint2sortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btint2sortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btint42cmp</code>
 */
fun btint42cmp(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Int? {
    val f = Btint42cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint42cmp</code> as a field.
 */
fun btint42cmp(
      __1: Int?
    , __2: Short?
): Field<Int?> {
    val f = Btint42cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint42cmp</code> as a field.
 */
fun btint42cmp(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Btint42cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint48cmp</code>
 */
fun btint48cmp(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Int? {
    val f = Btint48cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint48cmp</code> as a field.
 */
fun btint48cmp(
      __1: Int?
    , __2: Long?
): Field<Int?> {
    val f = Btint48cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint48cmp</code> as a field.
 */
fun btint48cmp(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = Btint48cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint4cmp</code>
 */
fun btint4cmp(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Btint4cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint4cmp</code> as a field.
 */
fun btint4cmp(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Btint4cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint4cmp</code> as a field.
 */
fun btint4cmp(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Btint4cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btint4sortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btint4sortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btint82cmp</code>
 */
fun btint82cmp(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Int? {
    val f = Btint82cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint82cmp</code> as a field.
 */
fun btint82cmp(
      __1: Long?
    , __2: Short?
): Field<Int?> {
    val f = Btint82cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint82cmp</code> as a field.
 */
fun btint82cmp(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Btint82cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint84cmp</code>
 */
fun btint84cmp(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Int? {
    val f = Btint84cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint84cmp</code> as a field.
 */
fun btint84cmp(
      __1: Long?
    , __2: Int?
): Field<Int?> {
    val f = Btint84cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint84cmp</code> as a field.
 */
fun btint84cmp(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Btint84cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btint8cmp</code>
 */
fun btint8cmp(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Int? {
    val f = Btint8cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btint8cmp</code> as a field.
 */
fun btint8cmp(
      __1: Long?
    , __2: Long?
): Field<Int?> {
    val f = Btint8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btint8cmp</code> as a field.
 */
fun btint8cmp(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = Btint8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btint8sortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btint8sortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btnamecmp</code>
 */
fun btnamecmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Btnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btnamecmp</code> as a field.
 */
fun btnamecmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Btnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btnamecmp</code> as a field.
 */
fun btnamecmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Btnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btnamesortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btnamesortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btnametextcmp</code>
 */
fun btnametextcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Btnametextcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btnametextcmp</code> as a field.
 */
fun btnametextcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Btnametextcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btnametextcmp</code> as a field.
 */
fun btnametextcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Btnametextcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btoidcmp</code>
 */
fun btoidcmp(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Int? {
    val f = Btoidcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btoidcmp</code> as a field.
 */
fun btoidcmp(
      __1: Long?
    , __2: Long?
): Field<Int?> {
    val f = Btoidcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btoidcmp</code> as a field.
 */
fun btoidcmp(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = Btoidcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun btoidsortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Btoidsortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.btoidvectorcmp</code>
 */
fun btoidvectorcmp(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Int? {
    val f = Btoidvectorcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btoidvectorcmp</code> as a field.
 */
fun btoidvectorcmp(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Int?> {
    val f = Btoidvectorcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btoidvectorcmp</code> as a field.
 */
fun btoidvectorcmp(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Int?> {
    val f = Btoidvectorcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btrecordcmp</code>
 */
fun btrecordcmp(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Int? {
    val f = Btrecordcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btrecordcmp</code> as a field.
 */
fun btrecordcmp(
      __1: Record?
    , __2: Record?
): Field<Int?> {
    val f = Btrecordcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btrecordcmp</code> as a field.
 */
fun btrecordcmp(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Int?> {
    val f = Btrecordcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btrecordimagecmp</code>
 */
fun btrecordimagecmp(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Int? {
    val f = Btrecordimagecmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btrecordimagecmp</code> as a field.
 */
fun btrecordimagecmp(
      __1: Record?
    , __2: Record?
): Field<Int?> {
    val f = Btrecordimagecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btrecordimagecmp</code> as a field.
 */
fun btrecordimagecmp(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Int?> {
    val f = Btrecordimagecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btrim</code>
 */
fun btrim1(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): ByteArray? {
    val f = Btrim1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim1(
      __1: ByteArray?
    , __2: ByteArray?
): Field<ByteArray?> {
    val f = Btrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim1(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Btrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btrim</code>
 */
fun btrim2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Btrim2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim2(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Btrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Btrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btrim</code>
 */
fun btrim3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Btrim3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim3(
      __1: String?
): Field<String?> {
    val f = Btrim3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btrim</code> as a field.
 */
fun btrim3(
      __1: Field<String?>
): Field<String?> {
    val f = Btrim3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bttext_pattern_cmp</code>
 */
fun bttextPatternCmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = BttextPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bttext_pattern_cmp</code> as a field.
 */
fun bttextPatternCmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = BttextPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bttext_pattern_cmp</code> as a field.
 */
fun bttextPatternCmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = BttextPatternCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bttextPatternSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = BttextPatternSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.bttextcmp</code>
 */
fun bttextcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Bttextcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bttextcmp</code> as a field.
 */
fun bttextcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Bttextcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bttextcmp</code> as a field.
 */
fun bttextcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Bttextcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bttextnamecmp</code>
 */
fun bttextnamecmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Bttextnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bttextnamecmp</code> as a field.
 */
fun bttextnamecmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Bttextnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bttextnamecmp</code> as a field.
 */
fun bttextnamecmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Bttextnamecmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bttextsortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = Bttextsortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.bttidcmp</code>
 */
fun bttidcmp(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Int? {
    val f = Bttidcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bttidcmp</code> as a field.
 */
fun bttidcmp(
      __1: Long?
    , __2: Long?
): Field<Int?> {
    val f = Bttidcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bttidcmp</code> as a field.
 */
fun bttidcmp(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = Bttidcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.btvarstrequalimage</code>
 */
fun btvarstrequalimage(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = Btvarstrequalimage()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.btvarstrequalimage</code> as a field.
 */
fun btvarstrequalimage(
      __1: Long?
): Field<Boolean?> {
    val f = Btvarstrequalimage()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.btvarstrequalimage</code> as a field.
 */
fun btvarstrequalimage(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = Btvarstrequalimage()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = ByteaSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggFinalfn(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = ByteaStringAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggFinalfn(
      __1: Any?
): Field<ByteArray?> {
    val f = ByteaStringAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggFinalfn(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = ByteaStringAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: ByteArray?
    , __3: ByteArray?
): Any? {
    val f = ByteaStringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggTransfn(
      __1: Any?
    , __2: ByteArray?
    , __3: ByteArray?
): Field<Any?> {
    val f = ByteaStringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaStringAggTransfn(
      __1: Field<Any?>
    , __2: Field<ByteArray?>
    , __3: Field<ByteArray?>
): Field<Any?> {
    val f = ByteaStringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteacat</code>
 */
fun byteacat(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): ByteArray? {
    val f = Byteacat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteacat</code> as a field.
 */
fun byteacat(
      __1: ByteArray?
    , __2: ByteArray?
): Field<ByteArray?> {
    val f = Byteacat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteacat</code> as a field.
 */
fun byteacat(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Byteacat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteacmp</code>
 */
fun byteacmp(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Int? {
    val f = Byteacmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteacmp</code> as a field.
 */
fun byteacmp(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Int?> {
    val f = Byteacmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteacmp</code> as a field.
 */
fun byteacmp(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Int?> {
    val f = Byteacmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteaeq</code>
 */
fun byteaeq(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteaeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteaeq</code> as a field.
 */
fun byteaeq(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteaeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteaeq</code> as a field.
 */
fun byteaeq(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteaeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteage</code>
 */
fun byteage(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteage()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteage</code> as a field.
 */
fun byteage(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteage()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteage</code> as a field.
 */
fun byteage(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteage()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteagt</code>
 */
fun byteagt(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteagt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteagt</code> as a field.
 */
fun byteagt(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteagt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteagt</code> as a field.
 */
fun byteagt(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteagt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteain(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Byteain()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteain(
      __1: Any?
): Field<ByteArray?> {
    val f = Byteain()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteain(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Byteain()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteale</code>
 */
fun byteale(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteale()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteale</code> as a field.
 */
fun byteale(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteale()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteale</code> as a field.
 */
fun byteale(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteale()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bytealike</code>
 */
fun bytealike(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Bytealike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bytealike</code> as a field.
 */
fun bytealike(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Bytealike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bytealike</code> as a field.
 */
fun bytealike(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Bytealike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.bytealt</code>
 */
fun bytealt(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Bytealt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.bytealt</code> as a field.
 */
fun bytealt(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Bytealt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.bytealt</code> as a field.
 */
fun bytealt(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Bytealt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteane</code>
 */
fun byteane(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteane()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteane</code> as a field.
 */
fun byteane(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteane()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteane</code> as a field.
 */
fun byteane(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteane()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteanlike</code>
 */
fun byteanlike(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Byteanlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteanlike</code> as a field.
 */
fun byteanlike(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Byteanlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteanlike</code> as a field.
 */
fun byteanlike(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Byteanlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaout(
      configuration: Configuration
    , __1: ByteArray?
): Any? {
    val f = Byteaout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaout(
      __1: ByteArray?
): Field<Any?> {
    val f = Byteaout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun byteaout(
      __1: Field<ByteArray?>
): Field<Any?> {
    val f = Byteaout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bytearecv(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Bytearecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bytearecv(
      __1: Any?
): Field<ByteArray?> {
    val f = Bytearecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun bytearecv(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Bytearecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.byteasend</code>
 */
fun byteasend(
      configuration: Configuration
    , __1: ByteArray?
): ByteArray? {
    val f = Byteasend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.byteasend</code> as a field.
 */
fun byteasend(
      __1: ByteArray?
): Field<ByteArray?> {
    val f = Byteasend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.byteasend</code> as a field.
 */
fun byteasend(
      __1: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Byteasend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cardinality</code>
 */
fun cardinality(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Cardinality()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cardinality</code> as a field.
 */
fun cardinality(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Cardinality()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cardinality</code> as a field.
 */
fun cardinality(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Cardinality()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = CashCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = CashCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = CashCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivCash(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = CashDivCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivCash(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = CashDivCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivCash(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = CashDivCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt4(
      configuration: Configuration
    , __1: Any?
    , __2: Float?
): Any? {
    val f = CashDivFlt4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt4(
      __1: Any?
    , __2: Float?
): Field<Any?> {
    val f = CashDivFlt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt4(
      __1: Field<Any?>
    , __2: Field<Float?>
): Field<Any?> {
    val f = CashDivFlt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt8(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
): Any? {
    val f = CashDivFlt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt8(
      __1: Any?
    , __2: Double?
): Field<Any?> {
    val f = CashDivFlt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivFlt8(
      __1: Field<Any?>
    , __2: Field<Double?>
): Field<Any?> {
    val f = CashDivFlt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt2(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
): Any? {
    val f = CashDivInt2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt2(
      __1: Any?
    , __2: Short?
): Field<Any?> {
    val f = CashDivInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt2(
      __1: Field<Any?>
    , __2: Field<Short?>
): Field<Any?> {
    val f = CashDivInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt4(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = CashDivInt4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt4(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = CashDivInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt4(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = CashDivInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt8(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = CashDivInt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt8(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = CashDivInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashDivInt8(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = CashDivInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CashIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashIn(
      __1: Any?
): Field<Any?> {
    val f = CashIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = CashIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMi(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CashMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMi(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CashMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMi(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CashMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt4(
      configuration: Configuration
    , __1: Any?
    , __2: Float?
): Any? {
    val f = CashMulFlt4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt4(
      __1: Any?
    , __2: Float?
): Field<Any?> {
    val f = CashMulFlt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt4(
      __1: Field<Any?>
    , __2: Field<Float?>
): Field<Any?> {
    val f = CashMulFlt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt8(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
): Any? {
    val f = CashMulFlt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt8(
      __1: Any?
    , __2: Double?
): Field<Any?> {
    val f = CashMulFlt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulFlt8(
      __1: Field<Any?>
    , __2: Field<Double?>
): Field<Any?> {
    val f = CashMulFlt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt2(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
): Any? {
    val f = CashMulInt2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt2(
      __1: Any?
    , __2: Short?
): Field<Any?> {
    val f = CashMulInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt2(
      __1: Field<Any?>
    , __2: Field<Short?>
): Field<Any?> {
    val f = CashMulInt2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt4(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = CashMulInt4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt4(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = CashMulInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt4(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = CashMulInt4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt8(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = CashMulInt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt8(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = CashMulInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashMulInt8(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = CashMulInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CashNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CashNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CashNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CashOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashOut(
      __1: Any?
): Field<Any?> {
    val f = CashOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = CashOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashPl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CashPl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashPl(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CashPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashPl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CashPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CashRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashRecv(
      __1: Any?
): Field<Any?> {
    val f = CashRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = CashRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = CashSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashSend(
      __1: Any?
): Field<ByteArray?> {
    val f = CashSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = CashSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashWords(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = CashWords()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashWords(
      __1: Any?
): Field<String?> {
    val f = CashWords()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashWords(
      __1: Field<Any?>
): Field<String?> {
    val f = CashWords()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashlarger(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Cashlarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashlarger(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Cashlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashlarger(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Cashlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashsmaller(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Cashsmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashsmaller(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Cashsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cashsmaller(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Cashsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cbrt</code>
 */
fun cbrt(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cbrt()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cbrt</code> as a field.
 */
fun cbrt(
      __1: Double?
): Field<Double?> {
    val f = Cbrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cbrt</code> as a field.
 */
fun cbrt(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cbrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ceil</code>
 */
fun ceil1(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Ceil1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ceil</code> as a field.
 */
fun ceil1(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Ceil1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ceil</code> as a field.
 */
fun ceil1(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Ceil1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ceil</code>
 */
fun ceil2(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Ceil2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ceil</code> as a field.
 */
fun ceil2(
      __1: Double?
): Field<Double?> {
    val f = Ceil2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ceil</code> as a field.
 */
fun ceil2(
      __1: Field<Double?>
): Field<Double?> {
    val f = Ceil2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ceiling</code>
 */
fun ceiling1(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Ceiling1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ceiling</code> as a field.
 */
fun ceiling1(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Ceiling1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ceiling</code> as a field.
 */
fun ceiling1(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Ceiling1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ceiling</code>
 */
fun ceiling2(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Ceiling2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ceiling</code> as a field.
 */
fun ceiling2(
      __1: Double?
): Field<Double?> {
    val f = Ceiling2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ceiling</code> as a field.
 */
fun ceiling2(
      __1: Field<Double?>
): Field<Double?> {
    val f = Ceiling2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Center1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center1(
      __1: Any?
): Field<Any?> {
    val f = Center1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Center1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Center2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center2(
      __1: Any?
): Field<Any?> {
    val f = Center2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun center2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Center2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.char</code>
 */
fun char1(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = Char1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.char</code> as a field.
 */
fun char1(
      __1: Int?
): Field<String?> {
    val f = Char1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.char</code> as a field.
 */
fun char1(
      __1: Field<Int?>
): Field<String?> {
    val f = Char1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.char</code>
 */
fun char2(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Char2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.char</code> as a field.
 */
fun char2(
      __1: String?
): Field<String?> {
    val f = Char2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.char</code> as a field.
 */
fun char2(
      __1: Field<String?>
): Field<String?> {
    val f = Char2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.char_length</code>
 */
fun charLength1(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = CharLength1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.char_length</code> as a field.
 */
fun charLength1(
      __1: String?
): Field<Int?> {
    val f = CharLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.char_length</code> as a field.
 */
fun charLength1(
      __1: Field<String?>
): Field<Int?> {
    val f = CharLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.char_length</code>
 */
fun charLength2(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = CharLength2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.char_length</code> as a field.
 */
fun charLength2(
      __1: String?
): Field<Int?> {
    val f = CharLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.char_length</code> as a field.
 */
fun charLength2(
      __1: Field<String?>
): Field<Int?> {
    val f = CharLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.character_length</code>
 */
fun characterLength1(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = CharacterLength1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.character_length</code> as a field.
 */
fun characterLength1(
      __1: String?
): Field<Int?> {
    val f = CharacterLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.character_length</code> as a field.
 */
fun characterLength1(
      __1: Field<String?>
): Field<Int?> {
    val f = CharacterLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.character_length</code>
 */
fun characterLength2(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = CharacterLength2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.character_length</code> as a field.
 */
fun characterLength2(
      __1: String?
): Field<Int?> {
    val f = CharacterLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.character_length</code> as a field.
 */
fun characterLength2(
      __1: Field<String?>
): Field<Int?> {
    val f = CharacterLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.chareq</code>
 */
fun chareq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Chareq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.chareq</code> as a field.
 */
fun chareq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Chareq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.chareq</code> as a field.
 */
fun chareq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Chareq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.charge</code>
 */
fun charge(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Charge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.charge</code> as a field.
 */
fun charge(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Charge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.charge</code> as a field.
 */
fun charge(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Charge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.chargt</code>
 */
fun chargt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Chargt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.chargt</code> as a field.
 */
fun chargt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Chargt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.chargt</code> as a field.
 */
fun chargt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Chargt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charin(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Charin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charin(
      __1: Any?
): Field<String?> {
    val f = Charin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charin(
      __1: Field<Any?>
): Field<String?> {
    val f = Charin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.charle</code>
 */
fun charle(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Charle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.charle</code> as a field.
 */
fun charle(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Charle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.charle</code> as a field.
 */
fun charle(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Charle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.charlt</code>
 */
fun charlt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Charlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.charlt</code> as a field.
 */
fun charlt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Charlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.charlt</code> as a field.
 */
fun charlt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Charlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.charne</code>
 */
fun charne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Charne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.charne</code> as a field.
 */
fun charne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Charne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.charne</code> as a field.
 */
fun charne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Charne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Charout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charout(
      __1: String?
): Field<Any?> {
    val f = Charout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charout(
      __1: Field<String?>
): Field<Any?> {
    val f = Charout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charrecv(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Charrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charrecv(
      __1: Any?
): Field<String?> {
    val f = Charrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun charrecv(
      __1: Field<Any?>
): Field<String?> {
    val f = Charrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.charsend</code>
 */
fun charsend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Charsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.charsend</code> as a field.
 */
fun charsend(
      __1: String?
): Field<ByteArray?> {
    val f = Charsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.charsend</code> as a field.
 */
fun charsend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Charsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.chr</code>
 */
fun chr(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = Chr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.chr</code> as a field.
 */
fun chr(
      __1: Int?
): Field<String?> {
    val f = Chr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.chr</code> as a field.
 */
fun chr(
      __1: Field<Int?>
): Field<String?> {
    val f = Chr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cideq</code>
 */
fun cideq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Cideq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cideq</code> as a field.
 */
fun cideq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Cideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cideq</code> as a field.
 */
fun cideq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Cideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidin(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Cidin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidin(
      __1: Any?
): Field<Long?> {
    val f = Cidin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidin(
      __1: Field<Any?>
): Field<Long?> {
    val f = Cidin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidout(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Cidout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidout(
      __1: Long?
): Field<Any?> {
    val f = Cidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidout(
      __1: Field<Long?>
): Field<Any?> {
    val f = Cidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidr(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Cidr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidr(
      __1: Any?
): Field<Any?> {
    val f = Cidr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidr(
      __1: Field<Any?>
): Field<Any?> {
    val f = Cidr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CidrIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrIn(
      __1: Any?
): Field<Any?> {
    val f = CidrIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = CidrIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CidrOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrOut(
      __1: Any?
): Field<Any?> {
    val f = CidrOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = CidrOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CidrRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrRecv(
      __1: Any?
): Field<Any?> {
    val f = CidrRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = CidrRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = CidrSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrSend(
      __1: Any?
): Field<ByteArray?> {
    val f = CidrSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = CidrSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrecv(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Cidrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrecv(
      __1: Any?
): Field<Long?> {
    val f = Cidrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cidrecv(
      __1: Field<Any?>
): Field<Long?> {
    val f = Cidrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cidsend</code>
 */
fun cidsend(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = Cidsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cidsend</code> as a field.
 */
fun cidsend(
      __1: Long?
): Field<ByteArray?> {
    val f = Cidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cidsend</code> as a field.
 */
fun cidsend(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = Cidsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle1(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
): Any? {
    val f = Circle1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle1(
      __1: Any?
    , __2: Double?
): Field<Any?> {
    val f = Circle1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle1(
      __1: Field<Any?>
    , __2: Field<Double?>
): Field<Any?> {
    val f = Circle1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Circle2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle2(
      __1: Any?
): Field<Any?> {
    val f = Circle2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Circle2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle3(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Circle3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle3(
      __1: Any?
): Field<Any?> {
    val f = Circle3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circle3(
      __1: Field<Any?>
): Field<Any?> {
    val f = Circle3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAbove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleAbove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAbove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAbove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAddPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CircleAddPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAddPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CircleAddPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleAddPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CircleAddPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleBelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleBelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleBelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleBelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleCenter(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CircleCenter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleCenter(
      __1: Any?
): Field<Any?> {
    val f = CircleCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleCenter(
      __1: Field<Any?>
): Field<Any?> {
    val f = CircleCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContain(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleContain()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContain(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContain(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContainPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleContainPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContainPt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContainPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContained(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleContained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContained(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleContained(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = CircleDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = CircleDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = CircleDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDivPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CircleDivPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDivPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CircleDivPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleDivPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CircleDivPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CircleIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleIn(
      __1: Any?
): Field<Any?> {
    val f = CircleIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = CircleIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLeft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleLeft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLeft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLeft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleMulPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CircleMulPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleMulPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CircleMulPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleMulPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CircleMulPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CircleOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOut(
      __1: Any?
): Field<Any?> {
    val f = CircleOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = CircleOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverabove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleOverabove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverabove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverabove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverbelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverbelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverbelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverlap(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleOverlap()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverlap(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverlap(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverleft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleOverleft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverleft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverleft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverright(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleOverright()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverright(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleOverright(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CircleRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRecv(
      __1: Any?
): Field<Any?> {
    val f = CircleRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = CircleRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRight(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleRight()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRight(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleRight(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = CircleSame()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSame(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = CircleSame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSame(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = CircleSame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = CircleSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSend(
      __1: Any?
): Field<ByteArray?> {
    val f = CircleSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = CircleSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSubPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CircleSubPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSubPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CircleSubPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun circleSubPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CircleSubPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.clock_timestamp</code>
 */
fun clockTimestamp(
      configuration: Configuration
): OffsetDateTime? {
    val f = ClockTimestamp()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.clock_timestamp</code> as a field.
 */
fun clockTimestamp(): Field<OffsetDateTime?> {
    val f = ClockTimestamp()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CloseLb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLb(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CloseLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CloseLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CloseLs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLs(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CloseLs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CloseLs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLseg(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CloseLseg()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLseg(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CloseLseg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeLseg(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CloseLseg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ClosePb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePb(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ClosePb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ClosePb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ClosePl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePl(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ClosePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ClosePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ClosePs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePs(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ClosePs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closePs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ClosePs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CloseSb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSb(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CloseSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CloseSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = CloseSl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSl(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = CloseSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun closeSl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = CloseSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.col_description</code>
 */
fun colDescription(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): String? {
    val f = ColDescription()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.col_description</code> as a field.
 */
fun colDescription(
      __1: Long?
    , __2: Int?
): Field<String?> {
    val f = ColDescription()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.col_description</code> as a field.
 */
fun colDescription(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<String?> {
    val f = ColDescription()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concat(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Concat()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concat(
      __1: Any?
): Field<String?> {
    val f = Concat()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concat(
      __1: Field<Any?>
): Field<String?> {
    val f = Concat()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concatWs(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): String? {
    val f = ConcatWs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concatWs(
      __1: String?
    , __2: Any?
): Field<String?> {
    val f = ConcatWs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun concatWs(
      __1: Field<String?>
    , __2: Field<Any?>
): Field<String?> {
    val f = ConcatWs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Contjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Contjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Contjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Contsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Contsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun contsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Contsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.convert</code>
 */
fun convert(
      configuration: Configuration
    , __1: ByteArray?
    , __2: String?
    , __3: String?
): ByteArray? {
    val f = Convert()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.convert</code> as a field.
 */
fun convert(
      __1: ByteArray?
    , __2: String?
    , __3: String?
): Field<ByteArray?> {
    val f = Convert()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.convert</code> as a field.
 */
fun convert(
      __1: Field<ByteArray?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<ByteArray?> {
    val f = Convert()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.convert_from</code>
 */
fun convertFrom(
      configuration: Configuration
    , __1: ByteArray?
    , __2: String?
): String? {
    val f = ConvertFrom()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.convert_from</code> as a field.
 */
fun convertFrom(
      __1: ByteArray?
    , __2: String?
): Field<String?> {
    val f = ConvertFrom()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.convert_from</code> as a field.
 */
fun convertFrom(
      __1: Field<ByteArray?>
    , __2: Field<String?>
): Field<String?> {
    val f = ConvertFrom()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.convert_to</code>
 */
fun convertTo(
      configuration: Configuration
    , __1: String?
    , __2: String?
): ByteArray? {
    val f = ConvertTo()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.convert_to</code> as a field.
 */
fun convertTo(
      __1: String?
    , __2: String?
): Field<ByteArray?> {
    val f = ConvertTo()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.convert_to</code> as a field.
 */
fun convertTo(
      __1: Field<String?>
    , __2: Field<String?>
): Field<ByteArray?> {
    val f = ConvertTo()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.corr</code> as a field.
 */
fun corr(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = Corr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.corr</code> as a field.
 */
fun corr(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = Corr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.cos</code>
 */
fun cos(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cos()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cos</code> as a field.
 */
fun cos(
      __1: Double?
): Field<Double?> {
    val f = Cos()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cos</code> as a field.
 */
fun cos(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cos()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cosd</code>
 */
fun cosd(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cosd()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cosd</code> as a field.
 */
fun cosd(
      __1: Double?
): Field<Double?> {
    val f = Cosd()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cosd</code> as a field.
 */
fun cosd(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cosd()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cosh</code>
 */
fun cosh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cosh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cosh</code> as a field.
 */
fun cosh(
      __1: Double?
): Field<Double?> {
    val f = Cosh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cosh</code> as a field.
 */
fun cosh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cosh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cot</code>
 */
fun cot(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cot</code> as a field.
 */
fun cot(
      __1: Double?
): Field<Double?> {
    val f = Cot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cot</code> as a field.
 */
fun cot(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cotd</code>
 */
fun cotd(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Cotd()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cotd</code> as a field.
 */
fun cotd(
      __1: Double?
): Field<Double?> {
    val f = Cotd()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cotd</code> as a field.
 */
fun cotd(
      __1: Field<Double?>
): Field<Double?> {
    val f = Cotd()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun count1(
      __1: Any?
): AggregateFunction<Long?> {
    val f = Count1()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun count1(
      __1: Field<Any?>
): AggregateFunction<Long?> {
    val f = Count1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.count</code> as a field.
 */
fun count2(): AggregateFunction<Long?> {
    val f = Count2()

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.covar_pop</code> as a field.
 */
fun covarPop(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = CovarPop()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.covar_pop</code> as a field.
 */
fun covarPop(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = CovarPop()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.covar_samp</code> as a field.
 */
fun covarSamp(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = CovarSamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.covar_samp</code> as a field.
 */
fun covarSamp(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = CovarSamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CstringIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringIn(
      __1: Any?
): Field<Any?> {
    val f = CstringIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = CstringIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CstringOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringOut(
      __1: Any?
): Field<Any?> {
    val f = CstringOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = CstringOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = CstringRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringRecv(
      __1: Any?
): Field<Any?> {
    val f = CstringRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = CstringRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = CstringSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringSend(
      __1: Any?
): Field<ByteArray?> {
    val f = CstringSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cstringSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = CstringSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cume_dist</code>
 */
fun cumeDist1(
      configuration: Configuration
): Double? {
    val f = CumeDist1()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cume_dist</code> as a field.
 */
fun cumeDist1(): Field<Double?> {
    val f = CumeDist1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cumeDist2(
      __1: Any?
): AggregateFunction<Double?> {
    val f = CumeDist2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cumeDist2(
      __1: Field<Any?>
): AggregateFunction<Double?> {
    val f = CumeDist2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cumeDistFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = CumeDistFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cumeDistFinal(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = CumeDistFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun cumeDistFinal(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = CumeDistFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_database</code>
 */
fun currentDatabase(
      configuration: Configuration
): String? {
    val f = CurrentDatabase()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_database</code> as a field.
 */
fun currentDatabase(): Field<String?> {
    val f = CurrentDatabase()

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_query</code>
 */
fun currentQuery(
      configuration: Configuration
): String? {
    val f = CurrentQuery()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_query</code> as a field.
 */
fun currentQuery(): Field<String?> {
    val f = CurrentQuery()

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_schema</code>
 */
fun currentSchema(
      configuration: Configuration
): String? {
    val f = CurrentSchema()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_schema</code> as a field.
 */
fun currentSchema(): Field<String?> {
    val f = CurrentSchema()

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_schemas</code>
 */
fun currentSchemas(
      configuration: Configuration
    , __1: Boolean?
): Array<String?>? {
    val f = CurrentSchemas()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_schemas</code> as a field.
 */
fun currentSchemas(
      __1: Boolean?
): Field<Array<String?>?> {
    val f = CurrentSchemas()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.current_schemas</code> as a field.
 */
fun currentSchemas(
      __1: Field<Boolean?>
): Field<Array<String?>?> {
    val f = CurrentSchemas()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_setting</code>
 */
fun currentSetting1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = CurrentSetting1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_setting</code> as a field.
 */
fun currentSetting1(
      __1: String?
): Field<String?> {
    val f = CurrentSetting1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.current_setting</code> as a field.
 */
fun currentSetting1(
      __1: Field<String?>
): Field<String?> {
    val f = CurrentSetting1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_setting</code>
 */
fun currentSetting2(
      configuration: Configuration
    , __1: String?
    , __2: Boolean?
): String? {
    val f = CurrentSetting2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_setting</code> as a field.
 */
fun currentSetting2(
      __1: String?
    , __2: Boolean?
): Field<String?> {
    val f = CurrentSetting2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.current_setting</code> as a field.
 */
fun currentSetting2(
      __1: Field<String?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = CurrentSetting2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.current_user</code>
 */
fun currentUser(
      configuration: Configuration
): String? {
    val f = CurrentUser()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.current_user</code> as a field.
 */
fun currentUser(): Field<String?> {
    val f = CurrentUser()

    return f.asField()
}

/**
 * Call <code>pg_catalog.currtid2</code>
 */
fun currtid2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = Currtid2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.currtid2</code> as a field.
 */
fun currtid2(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = Currtid2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.currtid2</code> as a field.
 */
fun currtid2(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Currtid2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun currval(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Currval()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun currval(
      __1: Any?
): Field<Long?> {
    val f = Currval()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun currval(
      __1: Field<Any?>
): Field<Long?> {
    val f = Currval()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cursor_to_xml</code>
 */
fun cursorToXml(
      configuration: Configuration
    , cursor: Result<Record>?
    , count: Int?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = CursorToXml()
    f.setCursor(cursor)
    f.setCount(count)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cursor_to_xml</code> as a field.
 */
fun cursorToXml(
      cursor: Result<Record>?
    , count: Int?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = CursorToXml()
    f.setCursor(cursor)
    f.setCount(count)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cursor_to_xml</code> as a field.
 */
fun cursorToXml(
      cursor: Field<Result<Record>?>
    , count: Field<Int?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = CursorToXml()
    f.setCursor(cursor)
    f.setCount(count)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.cursor_to_xmlschema</code>
 */
fun cursorToXmlschema(
      configuration: Configuration
    , cursor: Result<Record>?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = CursorToXmlschema()
    f.setCursor(cursor)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.cursor_to_xmlschema</code> as a field.
 */
fun cursorToXmlschema(
      cursor: Result<Record>?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = CursorToXmlschema()
    f.setCursor(cursor)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.cursor_to_xmlschema</code> as a field.
 */
fun cursorToXmlschema(
      cursor: Field<Result<Record>?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = CursorToXmlschema()
    f.setCursor(cursor)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.database_to_xml</code>
 */
fun databaseToXml(
      configuration: Configuration
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = DatabaseToXml()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.database_to_xml</code> as a field.
 */
fun databaseToXml(
      nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = DatabaseToXml()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.database_to_xml</code> as a field.
 */
fun databaseToXml(
      nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = DatabaseToXml()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.database_to_xml_and_xmlschema</code>
 */
fun databaseToXmlAndXmlschema(
      configuration: Configuration
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = DatabaseToXmlAndXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.database_to_xml_and_xmlschema</code> as a field.
 */
fun databaseToXmlAndXmlschema(
      nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = DatabaseToXmlAndXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.database_to_xml_and_xmlschema</code> as a field.
 */
fun databaseToXmlAndXmlschema(
      nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = DatabaseToXmlAndXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.database_to_xmlschema</code>
 */
fun databaseToXmlschema(
      configuration: Configuration
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = DatabaseToXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.database_to_xmlschema</code> as a field.
 */
fun databaseToXmlschema(
      nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = DatabaseToXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.database_to_xmlschema</code> as a field.
 */
fun databaseToXmlschema(
      nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = DatabaseToXmlschema()
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date</code>
 */
fun date1(
      configuration: Configuration
    , __1: OffsetDateTime?
): LocalDate? {
    val f = Date1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date</code> as a field.
 */
fun date1(
      __1: OffsetDateTime?
): Field<LocalDate?> {
    val f = Date1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date</code> as a field.
 */
fun date1(
      __1: Field<OffsetDateTime?>
): Field<LocalDate?> {
    val f = Date1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date</code>
 */
fun date2(
      configuration: Configuration
    , __1: LocalDateTime?
): LocalDate? {
    val f = Date2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date</code> as a field.
 */
fun date2(
      __1: LocalDateTime?
): Field<LocalDate?> {
    val f = Date2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date</code> as a field.
 */
fun date2(
      __1: Field<LocalDateTime?>
): Field<LocalDate?> {
    val f = Date2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_bin</code>
 */
fun dateBin1(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
): LocalDateTime? {
    val f = DateBin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_bin</code> as a field.
 */
fun dateBin1(
      __1: YearToSecond?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
): Field<LocalDateTime?> {
    val f = DateBin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_bin</code> as a field.
 */
fun dateBin1(
      __1: Field<YearToSecond?>
    , __2: Field<LocalDateTime?>
    , __3: Field<LocalDateTime?>
): Field<LocalDateTime?> {
    val f = DateBin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_bin</code>
 */
fun dateBin2(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
): OffsetDateTime? {
    val f = DateBin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_bin</code> as a field.
 */
fun dateBin2(
      __1: YearToSecond?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
): Field<OffsetDateTime?> {
    val f = DateBin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_bin</code> as a field.
 */
fun dateBin2(
      __1: Field<YearToSecond?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<OffsetDateTime?>
): Field<OffsetDateTime?> {
    val f = DateBin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_cmp</code>
 */
fun dateCmp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Int? {
    val f = DateCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_cmp</code> as a field.
 */
fun dateCmp(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Int?> {
    val f = DateCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_cmp</code> as a field.
 */
fun dateCmp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Int?> {
    val f = DateCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_cmp_timestamp</code>
 */
fun dateCmpTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Int? {
    val f = DateCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_cmp_timestamp</code> as a field.
 */
fun dateCmpTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Int?> {
    val f = DateCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_cmp_timestamp</code> as a field.
 */
fun dateCmpTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Int?> {
    val f = DateCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_cmp_timestamptz</code>
 */
fun dateCmpTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Int? {
    val f = DateCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_cmp_timestamptz</code> as a field.
 */
fun dateCmpTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Int?> {
    val f = DateCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_cmp_timestamptz</code> as a field.
 */
fun dateCmpTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Int?> {
    val f = DateCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_eq</code>
 */
fun dateEq(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_eq</code> as a field.
 */
fun dateEq(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_eq</code> as a field.
 */
fun dateEq(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_eq_timestamp</code>
 */
fun dateEqTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_eq_timestamp</code> as a field.
 */
fun dateEqTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_eq_timestamp</code> as a field.
 */
fun dateEqTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_eq_timestamptz</code>
 */
fun dateEqTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_eq_timestamptz</code> as a field.
 */
fun dateEqTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_eq_timestamptz</code> as a field.
 */
fun dateEqTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ge</code>
 */
fun dateGe(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ge</code> as a field.
 */
fun dateGe(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ge</code> as a field.
 */
fun dateGe(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ge_timestamp</code>
 */
fun dateGeTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ge_timestamp</code> as a field.
 */
fun dateGeTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ge_timestamp</code> as a field.
 */
fun dateGeTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ge_timestamptz</code>
 */
fun dateGeTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ge_timestamptz</code> as a field.
 */
fun dateGeTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ge_timestamptz</code> as a field.
 */
fun dateGeTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_gt</code>
 */
fun dateGt(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_gt</code> as a field.
 */
fun dateGt(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_gt</code> as a field.
 */
fun dateGt(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_gt_timestamp</code>
 */
fun dateGtTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_gt_timestamp</code> as a field.
 */
fun dateGtTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_gt_timestamp</code> as a field.
 */
fun dateGtTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_gt_timestamptz</code>
 */
fun dateGtTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_gt_timestamptz</code> as a field.
 */
fun dateGtTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_gt_timestamptz</code> as a field.
 */
fun dateGtTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateIn(
      configuration: Configuration
    , __1: Any?
): LocalDate? {
    val f = DateIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateIn(
      __1: Any?
): Field<LocalDate?> {
    val f = DateIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateIn(
      __1: Field<Any?>
): Field<LocalDate?> {
    val f = DateIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_larger</code>
 */
fun dateLarger(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): LocalDate? {
    val f = DateLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_larger</code> as a field.
 */
fun dateLarger(
      __1: LocalDate?
    , __2: LocalDate?
): Field<LocalDate?> {
    val f = DateLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_larger</code> as a field.
 */
fun dateLarger(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<LocalDate?> {
    val f = DateLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_le</code>
 */
fun dateLe(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_le</code> as a field.
 */
fun dateLe(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_le</code> as a field.
 */
fun dateLe(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_le_timestamp</code>
 */
fun dateLeTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_le_timestamp</code> as a field.
 */
fun dateLeTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_le_timestamp</code> as a field.
 */
fun dateLeTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_le_timestamptz</code>
 */
fun dateLeTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_le_timestamptz</code> as a field.
 */
fun dateLeTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_le_timestamptz</code> as a field.
 */
fun dateLeTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_lt</code>
 */
fun dateLt(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_lt</code> as a field.
 */
fun dateLt(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_lt</code> as a field.
 */
fun dateLt(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_lt_timestamp</code>
 */
fun dateLtTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_lt_timestamp</code> as a field.
 */
fun dateLtTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_lt_timestamp</code> as a field.
 */
fun dateLtTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_lt_timestamptz</code>
 */
fun dateLtTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_lt_timestamptz</code> as a field.
 */
fun dateLtTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_lt_timestamptz</code> as a field.
 */
fun dateLtTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_mi</code>
 */
fun dateMi(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Int? {
    val f = DateMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_mi</code> as a field.
 */
fun dateMi(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Int?> {
    val f = DateMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_mi</code> as a field.
 */
fun dateMi(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Int?> {
    val f = DateMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_mi_interval</code>
 */
fun dateMiInterval(
      configuration: Configuration
    , __1: LocalDate?
    , __2: YearToSecond?
): LocalDateTime? {
    val f = DateMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_mi_interval</code> as a field.
 */
fun dateMiInterval(
      __1: LocalDate?
    , __2: YearToSecond?
): Field<LocalDateTime?> {
    val f = DateMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_mi_interval</code> as a field.
 */
fun dateMiInterval(
      __1: Field<LocalDate?>
    , __2: Field<YearToSecond?>
): Field<LocalDateTime?> {
    val f = DateMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_mii</code>
 */
fun dateMii(
      configuration: Configuration
    , __1: LocalDate?
    , __2: Int?
): LocalDate? {
    val f = DateMii()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_mii</code> as a field.
 */
fun dateMii(
      __1: LocalDate?
    , __2: Int?
): Field<LocalDate?> {
    val f = DateMii()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_mii</code> as a field.
 */
fun dateMii(
      __1: Field<LocalDate?>
    , __2: Field<Int?>
): Field<LocalDate?> {
    val f = DateMii()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ne</code>
 */
fun dateNe(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Boolean? {
    val f = DateNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ne</code> as a field.
 */
fun dateNe(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = DateNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ne</code> as a field.
 */
fun dateNe(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = DateNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ne_timestamp</code>
 */
fun dateNeTimestamp(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDateTime?
): Boolean? {
    val f = DateNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ne_timestamp</code> as a field.
 */
fun dateNeTimestamp(
      __1: LocalDate?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = DateNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ne_timestamp</code> as a field.
 */
fun dateNeTimestamp(
      __1: Field<LocalDate?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = DateNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_ne_timestamptz</code>
 */
fun dateNeTimestamptz(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetDateTime?
): Boolean? {
    val f = DateNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_ne_timestamptz</code> as a field.
 */
fun dateNeTimestamptz(
      __1: LocalDate?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = DateNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_ne_timestamptz</code> as a field.
 */
fun dateNeTimestamptz(
      __1: Field<LocalDate?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = DateNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateOut(
      configuration: Configuration
    , __1: LocalDate?
): Any? {
    val f = DateOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateOut(
      __1: LocalDate?
): Field<Any?> {
    val f = DateOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateOut(
      __1: Field<LocalDate?>
): Field<Any?> {
    val f = DateOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart1(
      configuration: Configuration
    , __1: String?
    , __2: OffsetDateTime?
): Double? {
    val f = DatePart1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart1(
      __1: String?
    , __2: OffsetDateTime?
): Field<Double?> {
    val f = DatePart1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart1(
      __1: Field<String?>
    , __2: Field<OffsetDateTime?>
): Field<Double?> {
    val f = DatePart1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart2(
      configuration: Configuration
    , __1: String?
    , __2: YearToSecond?
): Double? {
    val f = DatePart2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart2(
      __1: String?
    , __2: YearToSecond?
): Field<Double?> {
    val f = DatePart2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart2(
      __1: Field<String?>
    , __2: Field<YearToSecond?>
): Field<Double?> {
    val f = DatePart2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart3(
      configuration: Configuration
    , __1: String?
    , __2: OffsetTime?
): Double? {
    val f = DatePart3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart3(
      __1: String?
    , __2: OffsetTime?
): Field<Double?> {
    val f = DatePart3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart3(
      __1: Field<String?>
    , __2: Field<OffsetTime?>
): Field<Double?> {
    val f = DatePart3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart4(
      configuration: Configuration
    , __1: String?
    , __2: LocalDate?
): Double? {
    val f = DatePart4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart4(
      __1: String?
    , __2: LocalDate?
): Field<Double?> {
    val f = DatePart4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart4(
      __1: Field<String?>
    , __2: Field<LocalDate?>
): Field<Double?> {
    val f = DatePart4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart5(
      configuration: Configuration
    , __1: String?
    , __2: LocalTime?
): Double? {
    val f = DatePart5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart5(
      __1: String?
    , __2: LocalTime?
): Field<Double?> {
    val f = DatePart5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart5(
      __1: Field<String?>
    , __2: Field<LocalTime?>
): Field<Double?> {
    val f = DatePart5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_part</code>
 */
fun datePart6(
      configuration: Configuration
    , __1: String?
    , __2: LocalDateTime?
): Double? {
    val f = DatePart6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart6(
      __1: String?
    , __2: LocalDateTime?
): Field<Double?> {
    val f = DatePart6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_part</code> as a field.
 */
fun datePart6(
      __1: Field<String?>
    , __2: Field<LocalDateTime?>
): Field<Double?> {
    val f = DatePart6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_pl_interval</code>
 */
fun datePlInterval(
      configuration: Configuration
    , __1: LocalDate?
    , __2: YearToSecond?
): LocalDateTime? {
    val f = DatePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_pl_interval</code> as a field.
 */
fun datePlInterval(
      __1: LocalDate?
    , __2: YearToSecond?
): Field<LocalDateTime?> {
    val f = DatePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_pl_interval</code> as a field.
 */
fun datePlInterval(
      __1: Field<LocalDate?>
    , __2: Field<YearToSecond?>
): Field<LocalDateTime?> {
    val f = DatePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_pli</code>
 */
fun datePli(
      configuration: Configuration
    , __1: LocalDate?
    , __2: Int?
): LocalDate? {
    val f = DatePli()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_pli</code> as a field.
 */
fun datePli(
      __1: LocalDate?
    , __2: Int?
): Field<LocalDate?> {
    val f = DatePli()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_pli</code> as a field.
 */
fun datePli(
      __1: Field<LocalDate?>
    , __2: Field<Int?>
): Field<LocalDate?> {
    val f = DatePli()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateRecv(
      configuration: Configuration
    , __1: Any?
): LocalDate? {
    val f = DateRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateRecv(
      __1: Any?
): Field<LocalDate?> {
    val f = DateRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateRecv(
      __1: Field<Any?>
): Field<LocalDate?> {
    val f = DateRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_send</code>
 */
fun dateSend(
      configuration: Configuration
    , __1: LocalDate?
): ByteArray? {
    val f = DateSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_send</code> as a field.
 */
fun dateSend(
      __1: LocalDate?
): Field<ByteArray?> {
    val f = DateSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_send</code> as a field.
 */
fun dateSend(
      __1: Field<LocalDate?>
): Field<ByteArray?> {
    val f = DateSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_smaller</code>
 */
fun dateSmaller(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): LocalDate? {
    val f = DateSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_smaller</code> as a field.
 */
fun dateSmaller(
      __1: LocalDate?
    , __2: LocalDate?
): Field<LocalDate?> {
    val f = DateSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_smaller</code> as a field.
 */
fun dateSmaller(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<LocalDate?> {
    val f = DateSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dateSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = DateSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.date_trunc</code>
 */
fun dateTrunc1(
      configuration: Configuration
    , __1: String?
    , __2: OffsetDateTime?
): OffsetDateTime? {
    val f = DateTrunc1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc1(
      __1: String?
    , __2: OffsetDateTime?
): Field<OffsetDateTime?> {
    val f = DateTrunc1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc1(
      __1: Field<String?>
    , __2: Field<OffsetDateTime?>
): Field<OffsetDateTime?> {
    val f = DateTrunc1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_trunc</code>
 */
fun dateTrunc2(
      configuration: Configuration
    , __1: String?
    , __2: YearToSecond?
): YearToSecond? {
    val f = DateTrunc2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc2(
      __1: String?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = DateTrunc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc2(
      __1: Field<String?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = DateTrunc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_trunc</code>
 */
fun dateTrunc3(
      configuration: Configuration
    , __1: String?
    , __2: OffsetDateTime?
    , __3: String?
): OffsetDateTime? {
    val f = DateTrunc3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc3(
      __1: String?
    , __2: OffsetDateTime?
    , __3: String?
): Field<OffsetDateTime?> {
    val f = DateTrunc3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc3(
      __1: Field<String?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<String?>
): Field<OffsetDateTime?> {
    val f = DateTrunc3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.date_trunc</code>
 */
fun dateTrunc4(
      configuration: Configuration
    , __1: String?
    , __2: LocalDateTime?
): LocalDateTime? {
    val f = DateTrunc4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc4(
      __1: String?
    , __2: LocalDateTime?
): Field<LocalDateTime?> {
    val f = DateTrunc4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.date_trunc</code> as a field.
 */
fun dateTrunc4(
      __1: Field<String?>
    , __2: Field<LocalDateTime?>
): Field<LocalDateTime?> {
    val f = DateTrunc4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange1(
      configuration: Configuration
): Any? {
    val f = Datemultirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange1(): Field<Any?> {
    val f = Datemultirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Datemultirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange2(
      __1: Any?
): Field<Any?> {
    val f = Datemultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Datemultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Datemultirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Datemultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun datemultirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Datemultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange1(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Any? {
    val f = Daterange1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange1(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Any?> {
    val f = Daterange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange1(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Any?> {
    val f = Daterange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange2(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
    , __3: String?
): Any? {
    val f = Daterange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange2(
      __1: LocalDate?
    , __2: LocalDate?
    , __3: String?
): Field<Any?> {
    val f = Daterange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterange2(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Daterange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterangeCanonical(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = DaterangeCanonical()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterangeCanonical(
      __1: Any?
): Field<Any?> {
    val f = DaterangeCanonical()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun daterangeCanonical(
      __1: Field<Any?>
): Field<Any?> {
    val f = DaterangeCanonical()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.daterange_subdiff</code>
 */
fun daterangeSubdiff(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
): Double? {
    val f = DaterangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.daterange_subdiff</code> as a field.
 */
fun daterangeSubdiff(
      __1: LocalDate?
    , __2: LocalDate?
): Field<Double?> {
    val f = DaterangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.daterange_subdiff</code> as a field.
 */
fun daterangeSubdiff(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
): Field<Double?> {
    val f = DaterangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.datetime_pl</code>
 */
fun datetimePl(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalTime?
): LocalDateTime? {
    val f = DatetimePl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.datetime_pl</code> as a field.
 */
fun datetimePl(
      __1: LocalDate?
    , __2: LocalTime?
): Field<LocalDateTime?> {
    val f = DatetimePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.datetime_pl</code> as a field.
 */
fun datetimePl(
      __1: Field<LocalDate?>
    , __2: Field<LocalTime?>
): Field<LocalDateTime?> {
    val f = DatetimePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.datetimetz_pl</code>
 */
fun datetimetzPl(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetTime?
): OffsetDateTime? {
    val f = DatetimetzPl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.datetimetz_pl</code> as a field.
 */
fun datetimetzPl(
      __1: LocalDate?
    , __2: OffsetTime?
): Field<OffsetDateTime?> {
    val f = DatetimetzPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.datetimetz_pl</code> as a field.
 */
fun datetimetzPl(
      __1: Field<LocalDate?>
    , __2: Field<OffsetTime?>
): Field<OffsetDateTime?> {
    val f = DatetimetzPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dcbrt</code>
 */
fun dcbrt(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dcbrt()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dcbrt</code> as a field.
 */
fun dcbrt(
      __1: Double?
): Field<Double?> {
    val f = Dcbrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dcbrt</code> as a field.
 */
fun dcbrt(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dcbrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.decode</code>
 */
fun decode(
      configuration: Configuration
    , __1: String?
    , __2: String?
): ByteArray? {
    val f = Decode()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.decode</code> as a field.
 */
fun decode(
      __1: String?
    , __2: String?
): Field<ByteArray?> {
    val f = Decode()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.decode</code> as a field.
 */
fun decode(
      __1: Field<String?>
    , __2: Field<String?>
): Field<ByteArray?> {
    val f = Decode()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.degrees</code>
 */
fun degrees(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Degrees()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.degrees</code> as a field.
 */
fun degrees(
      __1: Double?
): Field<Double?> {
    val f = Degrees()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.degrees</code> as a field.
 */
fun degrees(
      __1: Field<Double?>
): Field<Double?> {
    val f = Degrees()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dense_rank</code>
 */
fun denseRank1(
      configuration: Configuration
): Long? {
    val f = DenseRank1()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dense_rank</code> as a field.
 */
fun denseRank1(): Field<Long?> {
    val f = DenseRank1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun denseRank2(
      __1: Any?
): AggregateFunction<Long?> {
    val f = DenseRank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun denseRank2(
      __1: Field<Any?>
): AggregateFunction<Long?> {
    val f = DenseRank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun denseRankFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Long? {
    val f = DenseRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun denseRankFinal(
      __1: Any?
    , __2: Any?
): Field<Long?> {
    val f = DenseRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun denseRankFinal(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = DenseRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dexp</code>
 */
fun dexp(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dexp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dexp</code> as a field.
 */
fun dexp(
      __1: Double?
): Field<Double?> {
    val f = Dexp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dexp</code> as a field.
 */
fun dexp(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dexp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diagonal(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Diagonal()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diagonal(
      __1: Any?
): Field<Any?> {
    val f = Diagonal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diagonal(
      __1: Field<Any?>
): Field<Any?> {
    val f = Diagonal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diameter(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Diameter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diameter(
      __1: Any?
): Field<Double?> {
    val f = Diameter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun diameter(
      __1: Field<Any?>
): Field<Double?> {
    val f = Diameter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellInit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = DispellInit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellInit(
      __1: Any?
): Field<Any?> {
    val f = DispellInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellInit(
      __1: Field<Any?>
): Field<Any?> {
    val f = DispellInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellLexize(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Any? {
    val f = DispellLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellLexize(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Any?> {
    val f = DispellLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dispellLexize(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Any?> {
    val f = DispellLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistBl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBl(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistBl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistBl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistBp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistBp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistBp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistBs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBs(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistBs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distBs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistBs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoint(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistCpoint()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoint(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistCpoint()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoint(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistCpoint()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoly(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistCpoly()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoly(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistCpoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distCpoly(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistCpoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistLb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLb(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistLp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistLp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistLp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistLs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLs(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistLs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distLs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistLs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPathp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPathp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPathp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPathp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPathp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPathp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPb(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPc(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPc()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPc(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPc(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPl(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyc(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPolyc()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyc(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPolyc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyc(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPolyc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPolyp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPolyp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPolyp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPolyp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpath(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPpath()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpath(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPpath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpath(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPpath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpoly(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPpoly()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpoly(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPpoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPpoly(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPpoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistPs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPs(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistPs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distPs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistPs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistSb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSb(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistSl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSl(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = DistSp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSp(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = DistSp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun distSp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = DistSp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.div</code>
 */
fun div(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.div</code> as a field.
 */
fun div(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.div</code> as a field.
 */
fun div(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dlog1</code>
 */
fun dlog1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dlog1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dlog1</code> as a field.
 */
fun dlog1(
      __1: Double?
): Field<Double?> {
    val f = Dlog1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dlog1</code> as a field.
 */
fun dlog1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dlog1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dlog10</code>
 */
fun dlog10(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dlog10()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dlog10</code> as a field.
 */
fun dlog10(
      __1: Double?
): Field<Double?> {
    val f = Dlog10()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dlog10</code> as a field.
 */
fun dlog10(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dlog10()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = DomainIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = DomainIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = DomainIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = DomainRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = DomainRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun domainRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = DomainRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dpow</code>
 */
fun dpow(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Dpow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dpow</code> as a field.
 */
fun dpow(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Dpow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dpow</code> as a field.
 */
fun dpow(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Dpow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dround</code>
 */
fun dround(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dround()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dround</code> as a field.
 */
fun dround(
      __1: Double?
): Field<Double?> {
    val f = Dround()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dround</code> as a field.
 */
fun dround(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dround()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleInit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = DsimpleInit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleInit(
      __1: Any?
): Field<Any?> {
    val f = DsimpleInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleInit(
      __1: Field<Any?>
): Field<Any?> {
    val f = DsimpleInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleLexize(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Any? {
    val f = DsimpleLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleLexize(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Any?> {
    val f = DsimpleLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsimpleLexize(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Any?> {
    val f = DsimpleLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballInit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = DsnowballInit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballInit(
      __1: Any?
): Field<Any?> {
    val f = DsnowballInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballInit(
      __1: Field<Any?>
): Field<Any?> {
    val f = DsnowballInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballLexize(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Any? {
    val f = DsnowballLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballLexize(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Any?> {
    val f = DsnowballLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsnowballLexize(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Any?> {
    val f = DsnowballLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dsqrt</code>
 */
fun dsqrt(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dsqrt()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dsqrt</code> as a field.
 */
fun dsqrt(
      __1: Double?
): Field<Double?> {
    val f = Dsqrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dsqrt</code> as a field.
 */
fun dsqrt(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dsqrt()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymInit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = DsynonymInit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymInit(
      __1: Any?
): Field<Any?> {
    val f = DsynonymInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymInit(
      __1: Field<Any?>
): Field<Any?> {
    val f = DsynonymInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymLexize(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Any? {
    val f = DsynonymLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymLexize(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Any?> {
    val f = DsynonymLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun dsynonymLexize(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Any?> {
    val f = DsynonymLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.dtrunc</code>
 */
fun dtrunc(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Dtrunc()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.dtrunc</code> as a field.
 */
fun dtrunc(
      __1: Double?
): Field<Double?> {
    val f = Dtrunc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.dtrunc</code> as a field.
 */
fun dtrunc(
      __1: Field<Double?>
): Field<Double?> {
    val f = Dtrunc()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = ElemContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = ElemContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = ElemContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = ElemContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = ElemContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun elemContainedByRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = ElemContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.encode</code>
 */
fun encode(
      configuration: Configuration
    , __1: ByteArray?
    , __2: String?
): String? {
    val f = Encode()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.encode</code> as a field.
 */
fun encode(
      __1: ByteArray?
    , __2: String?
): Field<String?> {
    val f = Encode()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.encode</code> as a field.
 */
fun encode(
      __1: Field<ByteArray?>
    , __2: Field<String?>
): Field<String?> {
    val f = Encode()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = EnumCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = EnumCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = EnumCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumFirst(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = EnumFirst()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumFirst(
      __1: Any?
): Field<Any?> {
    val f = EnumFirst()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumFirst(
      __1: Field<Any?>
): Field<Any?> {
    val f = EnumFirst()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = EnumIn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumIn(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = EnumIn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumIn(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = EnumIn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLarger(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = EnumLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLarger(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = EnumLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLarger(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = EnumLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLast(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = EnumLast()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLast(
      __1: Any?
): Field<Any?> {
    val f = EnumLast()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLast(
      __1: Field<Any?>
): Field<Any?> {
    val f = EnumLast()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = EnumNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = EnumNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = EnumNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = EnumOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumOut(
      __1: Any?
): Field<Any?> {
    val f = EnumOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = EnumOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Array<Any?>? {
    val f = EnumRange1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange1(
      __1: Any?
    , __2: Any?
): Field<Array<Any?>?> {
    val f = EnumRange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Array<Any?>?> {
    val f = EnumRange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange2(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = EnumRange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange2(
      __1: Any?
): Field<Array<Any?>?> {
    val f = EnumRange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRange2(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = EnumRange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = EnumRecv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRecv(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = EnumRecv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = EnumRecv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = EnumSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSend(
      __1: Any?
): Field<ByteArray?> {
    val f = EnumSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = EnumSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSmaller(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = EnumSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSmaller(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = EnumSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun enumSmaller(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = EnumSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Eqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Eqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Eqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Eqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Eqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eqsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Eqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucCnToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucCnToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucCnToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucCnToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucCnToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucCnToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucCnToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToShiftJis_2004(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucJis_2004ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToShiftJis_2004(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucJis_2004ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToShiftJis_2004(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucJis_2004ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJis_2004ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucJpToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucJpToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucJpToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToSjis(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucJpToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToSjis(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucJpToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToSjis(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucJpToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucJpToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucJpToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucJpToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucJpToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucKrToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucKrToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucKrToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucKrToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucKrToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucKrToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucKrToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToBig5(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucTwToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToBig5(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucTwToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToBig5(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucTwToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucTwToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucTwToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucTwToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = EucTwToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = EucTwToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eucTwToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = EucTwToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = EventTriggerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerIn(
      __1: Any?
): Field<Any?> {
    val f = EventTriggerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = EventTriggerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = EventTriggerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerOut(
      __1: Any?
): Field<Any?> {
    val f = EventTriggerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun eventTriggerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = EventTriggerOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.every</code> as a field.
 */
fun every(
      __1: Boolean?
): AggregateFunction<Boolean?> {
    val f = Every()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.every</code> as a field.
 */
fun every(
      __1: Field<Boolean?>
): AggregateFunction<Boolean?> {
    val f = Every()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.exp</code>
 */
fun exp1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Exp1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.exp</code> as a field.
 */
fun exp1(
      __1: Double?
): Field<Double?> {
    val f = Exp1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.exp</code> as a field.
 */
fun exp1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Exp1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.exp</code>
 */
fun exp2(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Exp2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.exp</code> as a field.
 */
fun exp2(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Exp2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.exp</code> as a field.
 */
fun exp2(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Exp2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract1(
      configuration: Configuration
    , __1: String?
    , __2: LocalDate?
): BigDecimal? {
    val f = Extract1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract1(
      __1: String?
    , __2: LocalDate?
): Field<BigDecimal?> {
    val f = Extract1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract1(
      __1: Field<String?>
    , __2: Field<LocalDate?>
): Field<BigDecimal?> {
    val f = Extract1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract2(
      configuration: Configuration
    , __1: String?
    , __2: LocalTime?
): BigDecimal? {
    val f = Extract2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract2(
      __1: String?
    , __2: LocalTime?
): Field<BigDecimal?> {
    val f = Extract2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract2(
      __1: Field<String?>
    , __2: Field<LocalTime?>
): Field<BigDecimal?> {
    val f = Extract2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract3(
      configuration: Configuration
    , __1: String?
    , __2: OffsetTime?
): BigDecimal? {
    val f = Extract3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract3(
      __1: String?
    , __2: OffsetTime?
): Field<BigDecimal?> {
    val f = Extract3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract3(
      __1: Field<String?>
    , __2: Field<OffsetTime?>
): Field<BigDecimal?> {
    val f = Extract3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract4(
      configuration: Configuration
    , __1: String?
    , __2: LocalDateTime?
): BigDecimal? {
    val f = Extract4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract4(
      __1: String?
    , __2: LocalDateTime?
): Field<BigDecimal?> {
    val f = Extract4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract4(
      __1: Field<String?>
    , __2: Field<LocalDateTime?>
): Field<BigDecimal?> {
    val f = Extract4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract5(
      configuration: Configuration
    , __1: String?
    , __2: OffsetDateTime?
): BigDecimal? {
    val f = Extract5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract5(
      __1: String?
    , __2: OffsetDateTime?
): Field<BigDecimal?> {
    val f = Extract5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract5(
      __1: Field<String?>
    , __2: Field<OffsetDateTime?>
): Field<BigDecimal?> {
    val f = Extract5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.extract</code>
 */
fun extract6(
      configuration: Configuration
    , __1: String?
    , __2: YearToSecond?
): BigDecimal? {
    val f = Extract6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract6(
      __1: String?
    , __2: YearToSecond?
): Field<BigDecimal?> {
    val f = Extract6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.extract</code> as a field.
 */
fun extract6(
      __1: Field<String?>
    , __2: Field<YearToSecond?>
): Field<BigDecimal?> {
    val f = Extract6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.factorial</code>
 */
fun factorial(
      configuration: Configuration
    , __1: Long?
): BigDecimal? {
    val f = Factorial()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.factorial</code> as a field.
 */
fun factorial(
      __1: Long?
): Field<BigDecimal?> {
    val f = Factorial()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.factorial</code> as a field.
 */
fun factorial(
      __1: Field<Long?>
): Field<BigDecimal?> {
    val f = Factorial()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun family(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Family()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun family(
      __1: Any?
): Field<Int?> {
    val f = Family()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun family(
      __1: Field<Any?>
): Field<Int?> {
    val f = Family()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = FdwHandlerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerIn(
      __1: Any?
): Field<Any?> {
    val f = FdwHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = FdwHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = FdwHandlerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerOut(
      __1: Any?
): Field<Any?> {
    val f = FdwHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun fdwHandlerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = FdwHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun firstValue(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = FirstValue()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun firstValue(
      __1: Any?
): Field<Any?> {
    val f = FirstValue()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun firstValue(
      __1: Field<Any?>
): Field<Any?> {
    val f = FirstValue()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float41(
      configuration: Configuration
    , __1: BigDecimal?
): Float? {
    val f = Float41()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float41(
      __1: BigDecimal?
): Field<Float?> {
    val f = Float41()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float41(
      __1: Field<BigDecimal?>
): Field<Float?> {
    val f = Float41()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float42(
      configuration: Configuration
    , __1: Short?
): Float? {
    val f = Float42()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float42(
      __1: Short?
): Field<Float?> {
    val f = Float42()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float42(
      __1: Field<Short?>
): Field<Float?> {
    val f = Float42()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float43(
      configuration: Configuration
    , __1: Double?
): Float? {
    val f = Float43()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float43(
      __1: Double?
): Field<Float?> {
    val f = Float43()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float43(
      __1: Field<Double?>
): Field<Float?> {
    val f = Float43()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float44(
      configuration: Configuration
    , __1: Int?
): Float? {
    val f = Float44()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float44(
      __1: Int?
): Field<Float?> {
    val f = Float44()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float44(
      __1: Field<Int?>
): Field<Float?> {
    val f = Float44()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float45(
      configuration: Configuration
    , __1: JSONB?
): Float? {
    val f = Float45()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float45(
      __1: JSONB?
): Field<Float?> {
    val f = Float45()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float45(
      __1: Field<JSONB?>
): Field<Float?> {
    val f = Float45()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4</code>
 */
fun float46(
      configuration: Configuration
    , __1: Long?
): Float? {
    val f = Float46()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float46(
      __1: Long?
): Field<Float?> {
    val f = Float46()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4</code> as a field.
 */
fun float46(
      __1: Field<Long?>
): Field<Float?> {
    val f = Float46()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48div</code>
 */
fun float48div(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Double? {
    val f = Float48div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48div</code> as a field.
 */
fun float48div(
      __1: Float?
    , __2: Double?
): Field<Double?> {
    val f = Float48div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48div</code> as a field.
 */
fun float48div(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float48div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48eq</code>
 */
fun float48eq(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48eq</code> as a field.
 */
fun float48eq(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48eq</code> as a field.
 */
fun float48eq(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48ge</code>
 */
fun float48ge(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48ge</code> as a field.
 */
fun float48ge(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48ge</code> as a field.
 */
fun float48ge(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48gt</code>
 */
fun float48gt(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48gt</code> as a field.
 */
fun float48gt(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48gt</code> as a field.
 */
fun float48gt(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48le</code>
 */
fun float48le(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48le</code> as a field.
 */
fun float48le(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48le</code> as a field.
 */
fun float48le(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48lt</code>
 */
fun float48lt(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48lt</code> as a field.
 */
fun float48lt(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48lt</code> as a field.
 */
fun float48lt(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48mi</code>
 */
fun float48mi(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Double? {
    val f = Float48mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48mi</code> as a field.
 */
fun float48mi(
      __1: Float?
    , __2: Double?
): Field<Double?> {
    val f = Float48mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48mi</code> as a field.
 */
fun float48mi(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float48mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48mul</code>
 */
fun float48mul(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Double? {
    val f = Float48mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48mul</code> as a field.
 */
fun float48mul(
      __1: Float?
    , __2: Double?
): Field<Double?> {
    val f = Float48mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48mul</code> as a field.
 */
fun float48mul(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float48mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48ne</code>
 */
fun float48ne(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Boolean? {
    val f = Float48ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48ne</code> as a field.
 */
fun float48ne(
      __1: Float?
    , __2: Double?
): Field<Boolean?> {
    val f = Float48ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48ne</code> as a field.
 */
fun float48ne(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float48ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float48pl</code>
 */
fun float48pl(
      configuration: Configuration
    , __1: Float?
    , __2: Double?
): Double? {
    val f = Float48pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float48pl</code> as a field.
 */
fun float48pl(
      __1: Float?
    , __2: Double?
): Field<Double?> {
    val f = Float48pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float48pl</code> as a field.
 */
fun float48pl(
      __1: Field<Float?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float48pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4_accum</code>
 */
fun float4Accum(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Float?
): Array<Double?>? {
    val f = Float4Accum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4_accum</code> as a field.
 */
fun float4Accum(
      __1: Array<Double?>?
    , __2: Float?
): Field<Array<Double?>?> {
    val f = Float4Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4_accum</code> as a field.
 */
fun float4Accum(
      __1: Field<Array<Double?>?>
    , __2: Field<Float?>
): Field<Array<Double?>?> {
    val f = Float4Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4abs</code>
 */
fun float4abs(
      configuration: Configuration
    , __1: Float?
): Float? {
    val f = Float4abs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4abs</code> as a field.
 */
fun float4abs(
      __1: Float?
): Field<Float?> {
    val f = Float4abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4abs</code> as a field.
 */
fun float4abs(
      __1: Field<Float?>
): Field<Float?> {
    val f = Float4abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4div</code>
 */
fun float4div(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4div</code> as a field.
 */
fun float4div(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4div</code> as a field.
 */
fun float4div(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4eq</code>
 */
fun float4eq(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4eq</code> as a field.
 */
fun float4eq(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4eq</code> as a field.
 */
fun float4eq(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4ge</code>
 */
fun float4ge(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4ge</code> as a field.
 */
fun float4ge(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4ge</code> as a field.
 */
fun float4ge(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4gt</code>
 */
fun float4gt(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4gt</code> as a field.
 */
fun float4gt(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4gt</code> as a field.
 */
fun float4gt(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4in(
      configuration: Configuration
    , __1: Any?
): Float? {
    val f = Float4in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4in(
      __1: Any?
): Field<Float?> {
    val f = Float4in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4in(
      __1: Field<Any?>
): Field<Float?> {
    val f = Float4in()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4larger</code>
 */
fun float4larger(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4larger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4larger</code> as a field.
 */
fun float4larger(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4larger</code> as a field.
 */
fun float4larger(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4le</code>
 */
fun float4le(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4le</code> as a field.
 */
fun float4le(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4le</code> as a field.
 */
fun float4le(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4lt</code>
 */
fun float4lt(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4lt</code> as a field.
 */
fun float4lt(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4lt</code> as a field.
 */
fun float4lt(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4mi</code>
 */
fun float4mi(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4mi</code> as a field.
 */
fun float4mi(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4mi</code> as a field.
 */
fun float4mi(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4mul</code>
 */
fun float4mul(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4mul</code> as a field.
 */
fun float4mul(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4mul</code> as a field.
 */
fun float4mul(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4ne</code>
 */
fun float4ne(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Boolean? {
    val f = Float4ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4ne</code> as a field.
 */
fun float4ne(
      __1: Float?
    , __2: Float?
): Field<Boolean?> {
    val f = Float4ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4ne</code> as a field.
 */
fun float4ne(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float4ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4out(
      configuration: Configuration
    , __1: Float?
): Any? {
    val f = Float4out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4out(
      __1: Float?
): Field<Any?> {
    val f = Float4out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4out(
      __1: Field<Float?>
): Field<Any?> {
    val f = Float4out()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4pl</code>
 */
fun float4pl(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4pl</code> as a field.
 */
fun float4pl(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4pl</code> as a field.
 */
fun float4pl(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4recv(
      configuration: Configuration
    , __1: Any?
): Float? {
    val f = Float4recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4recv(
      __1: Any?
): Field<Float?> {
    val f = Float4recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float4recv(
      __1: Field<Any?>
): Field<Float?> {
    val f = Float4recv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4send</code>
 */
fun float4send(
      configuration: Configuration
    , __1: Float?
): ByteArray? {
    val f = Float4send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4send</code> as a field.
 */
fun float4send(
      __1: Float?
): Field<ByteArray?> {
    val f = Float4send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4send</code> as a field.
 */
fun float4send(
      __1: Field<Float?>
): Field<ByteArray?> {
    val f = Float4send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4smaller</code>
 */
fun float4smaller(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
): Float? {
    val f = Float4smaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4smaller</code> as a field.
 */
fun float4smaller(
      __1: Float?
    , __2: Float?
): Field<Float?> {
    val f = Float4smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4smaller</code> as a field.
 */
fun float4smaller(
      __1: Field<Float?>
    , __2: Field<Float?>
): Field<Float?> {
    val f = Float4smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4um</code>
 */
fun float4um(
      configuration: Configuration
    , __1: Float?
): Float? {
    val f = Float4um()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4um</code> as a field.
 */
fun float4um(
      __1: Float?
): Field<Float?> {
    val f = Float4um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4um</code> as a field.
 */
fun float4um(
      __1: Field<Float?>
): Field<Float?> {
    val f = Float4um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float4up</code>
 */
fun float4up(
      configuration: Configuration
    , __1: Float?
): Float? {
    val f = Float4up()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float4up</code> as a field.
 */
fun float4up(
      __1: Float?
): Field<Float?> {
    val f = Float4up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float4up</code> as a field.
 */
fun float4up(
      __1: Field<Float?>
): Field<Float?> {
    val f = Float4up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float81(
      configuration: Configuration
    , __1: BigDecimal?
): Double? {
    val f = Float81()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float81(
      __1: BigDecimal?
): Field<Double?> {
    val f = Float81()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float81(
      __1: Field<BigDecimal?>
): Field<Double?> {
    val f = Float81()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float82(
      configuration: Configuration
    , __1: Short?
): Double? {
    val f = Float82()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float82(
      __1: Short?
): Field<Double?> {
    val f = Float82()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float82(
      __1: Field<Short?>
): Field<Double?> {
    val f = Float82()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float83(
      configuration: Configuration
    , __1: JSONB?
): Double? {
    val f = Float83()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float83(
      __1: JSONB?
): Field<Double?> {
    val f = Float83()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float83(
      __1: Field<JSONB?>
): Field<Double?> {
    val f = Float83()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float84(
      configuration: Configuration
    , __1: Float?
): Double? {
    val f = Float84()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float84(
      __1: Float?
): Field<Double?> {
    val f = Float84()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float84(
      __1: Field<Float?>
): Field<Double?> {
    val f = Float84()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float85(
      configuration: Configuration
    , __1: Int?
): Double? {
    val f = Float85()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float85(
      __1: Int?
): Field<Double?> {
    val f = Float85()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float85(
      __1: Field<Int?>
): Field<Double?> {
    val f = Float85()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8</code>
 */
fun float86(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = Float86()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float86(
      __1: Long?
): Field<Double?> {
    val f = Float86()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8</code> as a field.
 */
fun float86(
      __1: Field<Long?>
): Field<Double?> {
    val f = Float86()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84div</code>
 */
fun float84div(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Double? {
    val f = Float84div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84div</code> as a field.
 */
fun float84div(
      __1: Double?
    , __2: Float?
): Field<Double?> {
    val f = Float84div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84div</code> as a field.
 */
fun float84div(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Double?> {
    val f = Float84div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84eq</code>
 */
fun float84eq(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84eq</code> as a field.
 */
fun float84eq(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84eq</code> as a field.
 */
fun float84eq(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84ge</code>
 */
fun float84ge(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84ge</code> as a field.
 */
fun float84ge(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84ge</code> as a field.
 */
fun float84ge(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84gt</code>
 */
fun float84gt(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84gt</code> as a field.
 */
fun float84gt(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84gt</code> as a field.
 */
fun float84gt(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84le</code>
 */
fun float84le(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84le</code> as a field.
 */
fun float84le(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84le</code> as a field.
 */
fun float84le(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84lt</code>
 */
fun float84lt(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84lt</code> as a field.
 */
fun float84lt(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84lt</code> as a field.
 */
fun float84lt(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84mi</code>
 */
fun float84mi(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Double? {
    val f = Float84mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84mi</code> as a field.
 */
fun float84mi(
      __1: Double?
    , __2: Float?
): Field<Double?> {
    val f = Float84mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84mi</code> as a field.
 */
fun float84mi(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Double?> {
    val f = Float84mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84mul</code>
 */
fun float84mul(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Double? {
    val f = Float84mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84mul</code> as a field.
 */
fun float84mul(
      __1: Double?
    , __2: Float?
): Field<Double?> {
    val f = Float84mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84mul</code> as a field.
 */
fun float84mul(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Double?> {
    val f = Float84mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84ne</code>
 */
fun float84ne(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Boolean? {
    val f = Float84ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84ne</code> as a field.
 */
fun float84ne(
      __1: Double?
    , __2: Float?
): Field<Boolean?> {
    val f = Float84ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84ne</code> as a field.
 */
fun float84ne(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Boolean?> {
    val f = Float84ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float84pl</code>
 */
fun float84pl(
      configuration: Configuration
    , __1: Double?
    , __2: Float?
): Double? {
    val f = Float84pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float84pl</code> as a field.
 */
fun float84pl(
      __1: Double?
    , __2: Float?
): Field<Double?> {
    val f = Float84pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float84pl</code> as a field.
 */
fun float84pl(
      __1: Field<Double?>
    , __2: Field<Float?>
): Field<Double?> {
    val f = Float84pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_accum</code>
 */
fun float8Accum(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Double?
): Array<Double?>? {
    val f = Float8Accum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_accum</code> as a field.
 */
fun float8Accum(
      __1: Array<Double?>?
    , __2: Double?
): Field<Array<Double?>?> {
    val f = Float8Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_accum</code> as a field.
 */
fun float8Accum(
      __1: Field<Array<Double?>?>
    , __2: Field<Double?>
): Field<Array<Double?>?> {
    val f = Float8Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_avg</code>
 */
fun float8Avg(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8Avg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_avg</code> as a field.
 */
fun float8Avg(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8Avg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_avg</code> as a field.
 */
fun float8Avg(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8Avg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_combine</code>
 */
fun float8Combine(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Array<Double?>?
): Array<Double?>? {
    val f = Float8Combine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_combine</code> as a field.
 */
fun float8Combine(
      __1: Array<Double?>?
    , __2: Array<Double?>?
): Field<Array<Double?>?> {
    val f = Float8Combine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_combine</code> as a field.
 */
fun float8Combine(
      __1: Field<Array<Double?>?>
    , __2: Field<Array<Double?>?>
): Field<Array<Double?>?> {
    val f = Float8Combine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_corr</code>
 */
fun float8Corr(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8Corr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_corr</code> as a field.
 */
fun float8Corr(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8Corr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_corr</code> as a field.
 */
fun float8Corr(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8Corr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_covar_pop</code>
 */
fun float8CovarPop(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8CovarPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_covar_pop</code> as a field.
 */
fun float8CovarPop(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8CovarPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_covar_pop</code> as a field.
 */
fun float8CovarPop(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8CovarPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_covar_samp</code>
 */
fun float8CovarSamp(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8CovarSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_covar_samp</code> as a field.
 */
fun float8CovarSamp(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8CovarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_covar_samp</code> as a field.
 */
fun float8CovarSamp(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8CovarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_accum</code>
 */
fun float8RegrAccum(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Double?
    , __3: Double?
): Array<Double?>? {
    val f = Float8RegrAccum()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_accum</code> as a field.
 */
fun float8RegrAccum(
      __1: Array<Double?>?
    , __2: Double?
    , __3: Double?
): Field<Array<Double?>?> {
    val f = Float8RegrAccum()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_accum</code> as a field.
 */
fun float8RegrAccum(
      __1: Field<Array<Double?>?>
    , __2: Field<Double?>
    , __3: Field<Double?>
): Field<Array<Double?>?> {
    val f = Float8RegrAccum()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_avgx</code>
 */
fun float8RegrAvgx(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrAvgx()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_avgx</code> as a field.
 */
fun float8RegrAvgx(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrAvgx()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_avgx</code> as a field.
 */
fun float8RegrAvgx(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrAvgx()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_avgy</code>
 */
fun float8RegrAvgy(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrAvgy()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_avgy</code> as a field.
 */
fun float8RegrAvgy(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrAvgy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_avgy</code> as a field.
 */
fun float8RegrAvgy(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrAvgy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_combine</code>
 */
fun float8RegrCombine(
      configuration: Configuration
    , __1: Array<Double?>?
    , __2: Array<Double?>?
): Array<Double?>? {
    val f = Float8RegrCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_combine</code> as a field.
 */
fun float8RegrCombine(
      __1: Array<Double?>?
    , __2: Array<Double?>?
): Field<Array<Double?>?> {
    val f = Float8RegrCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_combine</code> as a field.
 */
fun float8RegrCombine(
      __1: Field<Array<Double?>?>
    , __2: Field<Array<Double?>?>
): Field<Array<Double?>?> {
    val f = Float8RegrCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_intercept</code>
 */
fun float8RegrIntercept(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrIntercept()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_intercept</code> as a field.
 */
fun float8RegrIntercept(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrIntercept()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_intercept</code> as a field.
 */
fun float8RegrIntercept(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrIntercept()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_r2</code>
 */
fun float8RegrR2(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrR2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_r2</code> as a field.
 */
fun float8RegrR2(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrR2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_r2</code> as a field.
 */
fun float8RegrR2(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrR2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_slope</code>
 */
fun float8RegrSlope(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrSlope()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_slope</code> as a field.
 */
fun float8RegrSlope(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrSlope()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_slope</code> as a field.
 */
fun float8RegrSlope(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrSlope()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_sxx</code>
 */
fun float8RegrSxx(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrSxx()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_sxx</code> as a field.
 */
fun float8RegrSxx(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrSxx()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_sxx</code> as a field.
 */
fun float8RegrSxx(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrSxx()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_sxy</code>
 */
fun float8RegrSxy(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrSxy()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_sxy</code> as a field.
 */
fun float8RegrSxy(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrSxy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_sxy</code> as a field.
 */
fun float8RegrSxy(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrSxy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_regr_syy</code>
 */
fun float8RegrSyy(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8RegrSyy()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_regr_syy</code> as a field.
 */
fun float8RegrSyy(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8RegrSyy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_regr_syy</code> as a field.
 */
fun float8RegrSyy(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8RegrSyy()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_stddev_pop</code>
 */
fun float8StddevPop(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8StddevPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_stddev_pop</code> as a field.
 */
fun float8StddevPop(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8StddevPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_stddev_pop</code> as a field.
 */
fun float8StddevPop(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8StddevPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_stddev_samp</code>
 */
fun float8StddevSamp(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8StddevSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_stddev_samp</code> as a field.
 */
fun float8StddevSamp(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8StddevSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_stddev_samp</code> as a field.
 */
fun float8StddevSamp(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8StddevSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_var_pop</code>
 */
fun float8VarPop(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8VarPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_var_pop</code> as a field.
 */
fun float8VarPop(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8VarPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_var_pop</code> as a field.
 */
fun float8VarPop(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8VarPop()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8_var_samp</code>
 */
fun float8VarSamp(
      configuration: Configuration
    , __1: Array<Double?>?
): Double? {
    val f = Float8VarSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8_var_samp</code> as a field.
 */
fun float8VarSamp(
      __1: Array<Double?>?
): Field<Double?> {
    val f = Float8VarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8_var_samp</code> as a field.
 */
fun float8VarSamp(
      __1: Field<Array<Double?>?>
): Field<Double?> {
    val f = Float8VarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8abs</code>
 */
fun float8abs(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Float8abs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8abs</code> as a field.
 */
fun float8abs(
      __1: Double?
): Field<Double?> {
    val f = Float8abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8abs</code> as a field.
 */
fun float8abs(
      __1: Field<Double?>
): Field<Double?> {
    val f = Float8abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8div</code>
 */
fun float8div(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8div</code> as a field.
 */
fun float8div(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8div</code> as a field.
 */
fun float8div(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8eq</code>
 */
fun float8eq(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8eq</code> as a field.
 */
fun float8eq(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8eq</code> as a field.
 */
fun float8eq(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8ge</code>
 */
fun float8ge(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8ge</code> as a field.
 */
fun float8ge(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8ge</code> as a field.
 */
fun float8ge(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8gt</code>
 */
fun float8gt(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8gt</code> as a field.
 */
fun float8gt(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8gt</code> as a field.
 */
fun float8gt(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8in(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Float8in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8in(
      __1: Any?
): Field<Double?> {
    val f = Float8in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8in(
      __1: Field<Any?>
): Field<Double?> {
    val f = Float8in()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8larger</code>
 */
fun float8larger(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8larger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8larger</code> as a field.
 */
fun float8larger(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8larger</code> as a field.
 */
fun float8larger(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8le</code>
 */
fun float8le(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8le</code> as a field.
 */
fun float8le(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8le</code> as a field.
 */
fun float8le(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8lt</code>
 */
fun float8lt(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8lt</code> as a field.
 */
fun float8lt(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8lt</code> as a field.
 */
fun float8lt(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8mi</code>
 */
fun float8mi(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8mi</code> as a field.
 */
fun float8mi(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8mi</code> as a field.
 */
fun float8mi(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8mul</code>
 */
fun float8mul(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8mul</code> as a field.
 */
fun float8mul(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8mul</code> as a field.
 */
fun float8mul(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8ne</code>
 */
fun float8ne(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Boolean? {
    val f = Float8ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8ne</code> as a field.
 */
fun float8ne(
      __1: Double?
    , __2: Double?
): Field<Boolean?> {
    val f = Float8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8ne</code> as a field.
 */
fun float8ne(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Boolean?> {
    val f = Float8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8out(
      configuration: Configuration
    , __1: Double?
): Any? {
    val f = Float8out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8out(
      __1: Double?
): Field<Any?> {
    val f = Float8out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8out(
      __1: Field<Double?>
): Field<Any?> {
    val f = Float8out()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8pl</code>
 */
fun float8pl(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8pl</code> as a field.
 */
fun float8pl(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8pl</code> as a field.
 */
fun float8pl(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8recv(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Float8recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8recv(
      __1: Any?
): Field<Double?> {
    val f = Float8recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun float8recv(
      __1: Field<Any?>
): Field<Double?> {
    val f = Float8recv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8send</code>
 */
fun float8send(
      configuration: Configuration
    , __1: Double?
): ByteArray? {
    val f = Float8send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8send</code> as a field.
 */
fun float8send(
      __1: Double?
): Field<ByteArray?> {
    val f = Float8send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8send</code> as a field.
 */
fun float8send(
      __1: Field<Double?>
): Field<ByteArray?> {
    val f = Float8send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8smaller</code>
 */
fun float8smaller(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Float8smaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8smaller</code> as a field.
 */
fun float8smaller(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Float8smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8smaller</code> as a field.
 */
fun float8smaller(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Float8smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8um</code>
 */
fun float8um(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Float8um()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8um</code> as a field.
 */
fun float8um(
      __1: Double?
): Field<Double?> {
    val f = Float8um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8um</code> as a field.
 */
fun float8um(
      __1: Field<Double?>
): Field<Double?> {
    val f = Float8um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.float8up</code>
 */
fun float8up(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Float8up()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.float8up</code> as a field.
 */
fun float8up(
      __1: Double?
): Field<Double?> {
    val f = Float8up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.float8up</code> as a field.
 */
fun float8up(
      __1: Field<Double?>
): Field<Double?> {
    val f = Float8up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.floor</code>
 */
fun floor1(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Floor1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.floor</code> as a field.
 */
fun floor1(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Floor1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.floor</code> as a field.
 */
fun floor1(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Floor1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.floor</code>
 */
fun floor2(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Floor2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.floor</code> as a field.
 */
fun floor2(
      __1: Double?
): Field<Double?> {
    val f = Floor2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.floor</code> as a field.
 */
fun floor2(
      __1: Field<Double?>
): Field<Double?> {
    val f = Floor2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt4MulCash(
      configuration: Configuration
    , __1: Float?
    , __2: Any?
): Any? {
    val f = Flt4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt4MulCash(
      __1: Float?
    , __2: Any?
): Field<Any?> {
    val f = Flt4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt4MulCash(
      __1: Field<Float?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Flt4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt8MulCash(
      configuration: Configuration
    , __1: Double?
    , __2: Any?
): Any? {
    val f = Flt8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt8MulCash(
      __1: Double?
    , __2: Any?
): Field<Any?> {
    val f = Flt8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun flt8MulCash(
      __1: Field<Double?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Flt8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.fmgr_c_validator</code>
 */
fun fmgrCValidator(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = FmgrCValidator()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.fmgr_internal_validator</code>
 */
fun fmgrInternalValidator(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = FmgrInternalValidator()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.fmgr_sql_validator</code>
 */
fun fmgrSqlValidator(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = FmgrSqlValidator()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun format1(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): String? {
    val f = Format1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun format1(
      __1: String?
    , __2: Any?
): Field<String?> {
    val f = Format1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun format1(
      __1: Field<String?>
    , __2: Field<Any?>
): Field<String?> {
    val f = Format1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.format</code>
 */
fun format2(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Format2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.format</code> as a field.
 */
fun format2(
      __1: String?
): Field<String?> {
    val f = Format2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.format</code> as a field.
 */
fun format2(
      __1: Field<String?>
): Field<String?> {
    val f = Format2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.format_type</code>
 */
fun formatType(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): String? {
    val f = FormatType()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.format_type</code> as a field.
 */
fun formatType(
      __1: Long?
    , __2: Int?
): Field<String?> {
    val f = FormatType()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.format_type</code> as a field.
 */
fun formatType(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<String?> {
    val f = FormatType()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gb18030ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Gb18030ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gb18030ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Gb18030ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gb18030ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Gb18030ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gbkToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = GbkToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gbkToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = GbkToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gbkToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = GbkToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gcd</code>
 */
fun gcd1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Gcd1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd1(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Gcd1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd1(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Gcd1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gcd</code>
 */
fun gcd2(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Gcd2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd2(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Gcd2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd2(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Gcd2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gcd</code>
 */
fun gcd3(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Gcd3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd3(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Gcd3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.gcd</code> as a field.
 */
fun gcd3(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Gcd3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gen_random_uuid</code>
 */
fun genRandomUuid(
      configuration: Configuration
): UUID? {
    val f = GenRandomUuid()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gen_random_uuid</code> as a field.
 */
fun genRandomUuid(): Field<UUID?> {
    val f = GenRandomUuid()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt4Support(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GenerateSeriesInt4Support()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt4Support(
      __1: Any?
): Field<Any?> {
    val f = GenerateSeriesInt4Support()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt4Support(
      __1: Field<Any?>
): Field<Any?> {
    val f = GenerateSeriesInt4Support()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt8Support(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GenerateSeriesInt8Support()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt8Support(
      __1: Any?
): Field<Any?> {
    val f = GenerateSeriesInt8Support()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun generateSeriesInt8Support(
      __1: Field<Any?>
): Field<Any?> {
    val f = GenerateSeriesInt8Support()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.get_bit</code>
 */
fun getBit1(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): Int? {
    val f = GetBit1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.get_bit</code> as a field.
 */
fun getBit1(
      __1: String?
    , __2: Int?
): Field<Int?> {
    val f = GetBit1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.get_bit</code> as a field.
 */
fun getBit1(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = GetBit1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.get_bit</code>
 */
fun getBit2(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Long?
): Int? {
    val f = GetBit2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.get_bit</code> as a field.
 */
fun getBit2(
      __1: ByteArray?
    , __2: Long?
): Field<Int?> {
    val f = GetBit2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.get_bit</code> as a field.
 */
fun getBit2(
      __1: Field<ByteArray?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = GetBit2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.get_byte</code>
 */
fun getByte(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
): Int? {
    val f = GetByte()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.get_byte</code> as a field.
 */
fun getByte(
      __1: ByteArray?
    , __2: Int?
): Field<Int?> {
    val f = GetByte()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.get_byte</code> as a field.
 */
fun getByte(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = GetByte()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun getCurrentTsConfig(
      configuration: Configuration
): Any? {
    val f = GetCurrentTsConfig()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun getCurrentTsConfig(): Field<Any?> {
    val f = GetCurrentTsConfig()

    return f.asField()
}

/**
 * Call <code>pg_catalog.getdatabaseencoding</code>
 */
fun getdatabaseencoding(
      configuration: Configuration
): String? {
    val f = Getdatabaseencoding()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.getdatabaseencoding</code> as a field.
 */
fun getdatabaseencoding(): Field<String?> {
    val f = Getdatabaseencoding()

    return f.asField()
}

/**
 * Call <code>pg_catalog.getpgusername</code>
 */
fun getpgusername(
      configuration: Configuration
): String? {
    val f = Getpgusername()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.getpgusername</code> as a field.
 */
fun getpgusername(): Field<String?> {
    val f = Getpgusername()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCleanPendingList(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = GinCleanPendingList()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCleanPendingList(
      __1: Any?
): Field<Long?> {
    val f = GinCleanPendingList()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCleanPendingList(
      __1: Field<Any?>
): Field<Long?> {
    val f = GinCleanPendingList()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCmpPrefix(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Short?
    , __4: Any?
): Int? {
    val f = GinCmpPrefix()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCmpPrefix(
      __1: String?
    , __2: String?
    , __3: Short?
    , __4: Any?
): Field<Int?> {
    val f = GinCmpPrefix()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginCmpPrefix(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Short?>
    , __4: Field<Any?>
): Field<Int?> {
    val f = GinCmpPrefix()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gin_cmp_tslexeme</code>
 */
fun ginCmpTslexeme(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = GinCmpTslexeme()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gin_cmp_tslexeme</code> as a field.
 */
fun ginCmpTslexeme(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = GinCmpTslexeme()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.gin_cmp_tslexeme</code> as a field.
 */
fun ginCmpTslexeme(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = GinCmpTslexeme()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.gin_compare_jsonb</code>
 */
fun ginCompareJsonb(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = GinCompareJsonb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.gin_compare_jsonb</code> as a field.
 */
fun ginCompareJsonb(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = GinCompareJsonb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.gin_compare_jsonb</code> as a field.
 */
fun ginCompareJsonb(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = GinCompareJsonb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonb(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Boolean? {
    val f = GinConsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonb(
      __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Field<Boolean?> {
    val f = GinConsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonb(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<JSONB?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
    , __8: Field<Any?>
): Field<Boolean?> {
    val f = GinConsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonbPath(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Boolean? {
    val f = GinConsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonbPath(
      __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Field<Boolean?> {
    val f = GinConsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginConsistentJsonbPath(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<JSONB?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
    , __8: Field<Any?>
): Field<Boolean?> {
    val f = GinConsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonb(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GinExtractJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonb(
      __1: JSONB?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GinExtractJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonb(
      __1: Field<JSONB?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GinExtractJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbPath(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GinExtractJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbPath(
      __1: JSONB?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GinExtractJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbPath(
      __1: Field<JSONB?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GinExtractJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQuery(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Any? {
    val f = GinExtractJsonbQuery()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQuery(
      __1: JSONB?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<Any?> {
    val f = GinExtractJsonbQuery()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQuery(
      __1: Field<JSONB?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<Any?> {
    val f = GinExtractJsonbQuery()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQueryPath(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Any? {
    val f = GinExtractJsonbQueryPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQueryPath(
      __1: JSONB?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<Any?> {
    val f = GinExtractJsonbQueryPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractJsonbQueryPath(
      __1: Field<JSONB?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<Any?> {
    val f = GinExtractJsonbQueryPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
): Any? {
    val f = GinExtractTsquery1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery1(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
): Field<Any?> {
    val f = GinExtractTsquery1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery1(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
): Field<Any?> {
    val f = GinExtractTsquery1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Any? {
    val f = GinExtractTsquery2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery2(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<Any?> {
    val f = GinExtractTsquery2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<Any?> {
    val f = GinExtractTsquery2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery3(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Any? {
    val f = GinExtractTsquery3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery3(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<Any?> {
    val f = GinExtractTsquery3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsquery3(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<Any?> {
    val f = GinExtractTsquery3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GinExtractTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector1(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GinExtractTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GinExtractTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GinExtractTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector2(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GinExtractTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginExtractTsvector2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GinExtractTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonb(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): String? {
    val f = GinTriconsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonb(
      __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<String?> {
    val f = GinTriconsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonb(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<JSONB?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<String?> {
    val f = GinTriconsistentJsonb()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonbPath(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): String? {
    val f = GinTriconsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonbPath(
      __1: Any?
    , __2: Short?
    , __3: JSONB?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<String?> {
    val f = GinTriconsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTriconsistentJsonbPath(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<JSONB?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<String?> {
    val f = GinTriconsistentJsonbPath()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent1(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
): Boolean? {
    val f = GinTsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent1(
      __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
): Field<Boolean?> {
    val f = GinTsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent1(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Any?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
): Field<Boolean?> {
    val f = GinTsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent2(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Boolean? {
    val f = GinTsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent2(
      __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Field<Boolean?> {
    val f = GinTsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent2(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Any?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
    , __8: Field<Any?>
): Field<Boolean?> {
    val f = GinTsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent3(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Boolean? {
    val f = GinTsqueryConsistent3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent3(
      __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Field<Boolean?> {
    val f = GinTsqueryConsistent3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryConsistent3(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Any?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
    , __8: Field<Any?>
): Field<Boolean?> {
    val f = GinTsqueryConsistent3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryTriconsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): String? {
    val f = GinTsqueryTriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryTriconsistent(
      __1: Any?
    , __2: Short?
    , __3: Any?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<String?> {
    val f = GinTsqueryTriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginTsqueryTriconsistent(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Any?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<String?> {
    val f = GinTsqueryTriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayconsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Array<Any?>?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Boolean? {
    val f = Ginarrayconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayconsistent(
      __1: Any?
    , __2: Short?
    , __3: Array<Any?>?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
    , __8: Any?
): Field<Boolean?> {
    val f = Ginarrayconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayconsistent(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Array<Any?>?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
    , __8: Field<Any?>
): Field<Boolean?> {
    val f = Ginarrayconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)
    f.set__8(__8)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract1(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = Ginarrayextract1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract1(
      __1: Array<Any?>?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = Ginarrayextract1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract1(
      __1: Field<Array<Any?>?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = Ginarrayextract1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract2(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Any?
): Any? {
    val f = Ginarrayextract2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract2(
      __1: Array<Any?>?
    , __2: Any?
): Field<Any?> {
    val f = Ginarrayextract2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarrayextract2(
      __1: Field<Array<Any?>?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Ginarrayextract2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarraytriconsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Array<Any?>?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): String? {
    val f = Ginarraytriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarraytriconsistent(
      __1: Any?
    , __2: Short?
    , __3: Array<Any?>?
    , __4: Int?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<String?> {
    val f = Ginarraytriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginarraytriconsistent(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Array<Any?>?>
    , __4: Field<Int?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<String?> {
    val f = Ginarraytriconsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginhandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Ginhandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginhandler(
      __1: Any?
): Field<Any?> {
    val f = Ginhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginhandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Ginhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginqueryarrayextract(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Any? {
    val f = Ginqueryarrayextract()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginqueryarrayextract(
      __1: Array<Any?>?
    , __2: Any?
    , __3: Short?
    , __4: Any?
    , __5: Any?
    , __6: Any?
    , __7: Any?
): Field<Any?> {
    val f = Ginqueryarrayextract()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ginqueryarrayextract(
      __1: Field<Array<Any?>?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Any?>
    , __5: Field<Any?>
    , __6: Field<Any?>
    , __7: Field<Any?>
): Field<Any?> {
    val f = Ginqueryarrayextract()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)
    f.set__7(__7)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GistBoxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GistBoxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GistBoxConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Double? {
    val f = GistBoxDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxDistance(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Double?> {
    val f = GistBoxDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = GistBoxDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPenalty(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GistBoxPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPenalty(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GistBoxPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPenalty(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GistBoxPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GistBoxPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPicksplit(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GistBoxPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxPicksplit(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GistBoxPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GistBoxSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxSame(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GistBoxSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxSame(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GistBoxSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GistBoxUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GistBoxUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistBoxUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GistBoxUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GistCircleCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleCompress(
      __1: Any?
): Field<Any?> {
    val f = GistCircleCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GistCircleCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GistCircleConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GistCircleConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GistCircleConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Double? {
    val f = GistCircleDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleDistance(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Double?> {
    val f = GistCircleDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistCircleDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = GistCircleDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GistPointCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointCompress(
      __1: Any?
): Field<Any?> {
    val f = GistPointCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GistPointCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GistPointConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GistPointConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GistPointConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Double? {
    val f = GistPointDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointDistance(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Double?> {
    val f = GistPointDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = GistPointDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointFetch(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GistPointFetch()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointFetch(
      __1: Any?
): Field<Any?> {
    val f = GistPointFetch()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointFetch(
      __1: Field<Any?>
): Field<Any?> {
    val f = GistPointFetch()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPointSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = GistPointSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GistPolyCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyCompress(
      __1: Any?
): Field<Any?> {
    val f = GistPolyCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GistPolyCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GistPolyConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GistPolyConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GistPolyConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Double? {
    val f = GistPolyDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyDistance(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Double?> {
    val f = GistPolyDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gistPolyDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = GistPolyDistance()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gisthandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Gisthandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gisthandler(
      __1: Any?
): Field<Any?> {
    val f = Gisthandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gisthandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Gisthandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GtsqueryCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryCompress(
      __1: Any?
): Field<Any?> {
    val f = GtsqueryCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GtsqueryCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GtsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent1(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GtsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent1(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GtsqueryConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GtsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent2(
      __1: Any?
    , __2: Any?
    , __3: Int?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GtsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryConsistent2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GtsqueryConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPenalty(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GtsqueryPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPenalty(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GtsqueryPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPenalty(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GtsqueryPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GtsqueryPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPicksplit(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GtsqueryPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryPicksplit(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GtsqueryPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsquerySame(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: Any?
): Any? {
    val f = GtsquerySame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsquerySame(
      __1: Long?
    , __2: Long?
    , __3: Any?
): Field<Any?> {
    val f = GtsquerySame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsquerySame(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GtsquerySame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Long? {
    val f = GtsqueryUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryUnion(
      __1: Any?
    , __2: Any?
): Field<Long?> {
    val f = GtsqueryUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsqueryUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = GtsqueryUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GtsvectorCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorCompress(
      __1: Any?
): Field<Any?> {
    val f = GtsvectorCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GtsvectorCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GtsvectorConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent1(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GtsvectorConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent1(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GtsvectorConsistent1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = GtsvectorConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent2(
      __1: Any?
    , __2: Any?
    , __3: Int?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = GtsvectorConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorConsistent2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = GtsvectorConsistent2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorDecompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = GtsvectorDecompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorDecompress(
      __1: Any?
): Field<Any?> {
    val f = GtsvectorDecompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorDecompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = GtsvectorDecompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorOptions(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = GtsvectorOptions()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPenalty(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GtsvectorPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPenalty(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GtsvectorPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPenalty(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GtsvectorPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GtsvectorPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPicksplit(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GtsvectorPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorPicksplit(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GtsvectorPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = GtsvectorSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorSame(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = GtsvectorSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorSame(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = GtsvectorSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = GtsvectorUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = GtsvectorUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = GtsvectorUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Gtsvectorin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorin(
      __1: Any?
): Field<Any?> {
    val f = Gtsvectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Gtsvectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Gtsvectorout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorout(
      __1: Any?
): Field<Any?> {
    val f = Gtsvectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun gtsvectorout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Gtsvectorout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasAnyColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasAnyColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasAnyColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasAnyColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasAnyColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_any_column_privilege</code>
 */
fun hasAnyColumnPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasAnyColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_any_column_privilege</code> as a field.
 */
fun hasAnyColumnPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasAnyColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege10(
      configuration: Configuration
    , __1: String?
    , __2: Short?
    , __3: String?
): Boolean? {
    val f = HasColumnPrivilege10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege10(
      __1: String?
    , __2: Short?
    , __3: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege10(
      __1: Field<String?>
    , __2: Field<Short?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege11(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasColumnPrivilege11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege11(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege11(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege12(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
    , __3: String?
): Boolean? {
    val f = HasColumnPrivilege12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege12(
      __1: Long?
    , __2: Short?
    , __3: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege12(
      __1: Field<Long?>
    , __2: Field<Short?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Short?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege2(
      __1: String?
    , __2: String?
    , __3: Short?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege2(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Short?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege3(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege3(
      __1: String?
    , __2: Long?
    , __3: String?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege3(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege4(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Short?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege4(
      __1: String?
    , __2: Long?
    , __3: Short?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege4(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Short?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege5(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege5(
      __1: Long?
    , __2: String?
    , __3: String?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege5(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: Short?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege6(
      __1: Long?
    , __2: String?
    , __3: Short?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<Short?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege7(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege7(
      __1: Long?
    , __2: Long?
    , __3: String?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege7(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege8(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: Short?
    , __4: String?
): Boolean? {
    val f = HasColumnPrivilege8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege8(
      __1: Long?
    , __2: Long?
    , __3: Short?
    , __4: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege8(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<Short?>
    , __4: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_column_privilege</code>
 */
fun hasColumnPrivilege9(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasColumnPrivilege9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege9(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasColumnPrivilege9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_column_privilege</code> as a field.
 */
fun hasColumnPrivilege9(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasColumnPrivilege9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasDatabasePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasDatabasePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasDatabasePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasDatabasePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasDatabasePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_database_privilege</code>
 */
fun hasDatabasePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasDatabasePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasDatabasePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_database_privilege</code> as a field.
 */
fun hasDatabasePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasDatabasePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_foreign_data_wrapper_privilege</code>
 */
fun hasForeignDataWrapperPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasForeignDataWrapperPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_foreign_data_wrapper_privilege</code> as a field.
 */
fun hasForeignDataWrapperPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasForeignDataWrapperPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasFunctionPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasFunctionPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasFunctionPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasFunctionPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasFunctionPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_function_privilege</code>
 */
fun hasFunctionPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasFunctionPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasFunctionPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_function_privilege</code> as a field.
 */
fun hasFunctionPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasFunctionPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasLanguagePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasLanguagePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasLanguagePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasLanguagePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasLanguagePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_language_privilege</code>
 */
fun hasLanguagePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasLanguagePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasLanguagePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_language_privilege</code> as a field.
 */
fun hasLanguagePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasLanguagePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasSchemaPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasSchemaPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasSchemaPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasSchemaPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasSchemaPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_schema_privilege</code>
 */
fun hasSchemaPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasSchemaPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasSchemaPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_schema_privilege</code> as a field.
 */
fun hasSchemaPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasSchemaPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasSequencePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasSequencePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasSequencePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasSequencePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasSequencePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_sequence_privilege</code>
 */
fun hasSequencePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasSequencePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasSequencePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_sequence_privilege</code> as a field.
 */
fun hasSequencePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasSequencePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasServerPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasServerPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasServerPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasServerPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasServerPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasServerPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasServerPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasServerPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasServerPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasServerPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_server_privilege</code>
 */
fun hasServerPrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasServerPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasServerPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_server_privilege</code> as a field.
 */
fun hasServerPrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasServerPrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTablePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTablePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTablePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTablePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasTablePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasTablePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_table_privilege</code>
 */
fun hasTablePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasTablePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasTablePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_table_privilege</code> as a field.
 */
fun hasTablePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTablePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTablespacePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTablespacePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTablespacePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTablespacePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasTablespacePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_tablespace_privilege</code>
 */
fun hasTablespacePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasTablespacePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasTablespacePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_tablespace_privilege</code> as a field.
 */
fun hasTablespacePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTablespacePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTypePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTypePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTypePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTypePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = HasTypePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = HasTypePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = HasTypePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = HasTypePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = HasTypePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = HasTypePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.has_type_privilege</code>
 */
fun hasTypePrivilege6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = HasTypePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = HasTypePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.has_type_privilege</code> as a field.
 */
fun hasTypePrivilege6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = HasTypePrivilege6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_aclitem</code>
 */
fun hashAclitem(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = HashAclitem()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_aclitem</code> as a field.
 */
fun hashAclitem(
      __1: String?
): Field<Int?> {
    val f = HashAclitem()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_aclitem</code> as a field.
 */
fun hashAclitem(
      __1: Field<String?>
): Field<Int?> {
    val f = HashAclitem()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_aclitem_extended</code>
 */
fun hashAclitemExtended(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = HashAclitemExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_aclitem_extended</code> as a field.
 */
fun hashAclitemExtended(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = HashAclitemExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_aclitem_extended</code> as a field.
 */
fun hashAclitemExtended(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashAclitemExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_array</code>
 */
fun hashArray(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = HashArray()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_array</code> as a field.
 */
fun hashArray(
      __1: Array<Any?>?
): Field<Int?> {
    val f = HashArray()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_array</code> as a field.
 */
fun hashArray(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = HashArray()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_array_extended</code>
 */
fun hashArrayExtended(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Long?
): Long? {
    val f = HashArrayExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_array_extended</code> as a field.
 */
fun hashArrayExtended(
      __1: Array<Any?>?
    , __2: Long?
): Field<Long?> {
    val f = HashArrayExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_array_extended</code> as a field.
 */
fun hashArrayExtended(
      __1: Field<Array<Any?>?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashArrayExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirange(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = HashMultirange()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirange(
      __1: Any?
): Field<Int?> {
    val f = HashMultirange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirange(
      __1: Field<Any?>
): Field<Int?> {
    val f = HashMultirange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirangeExtended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = HashMultirangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirangeExtended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = HashMultirangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashMultirangeExtended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashMultirangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_numeric</code>
 */
fun hashNumeric(
      configuration: Configuration
    , __1: BigDecimal?
): Int? {
    val f = HashNumeric()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_numeric</code> as a field.
 */
fun hashNumeric(
      __1: BigDecimal?
): Field<Int?> {
    val f = HashNumeric()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_numeric</code> as a field.
 */
fun hashNumeric(
      __1: Field<BigDecimal?>
): Field<Int?> {
    val f = HashNumeric()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_numeric_extended</code>
 */
fun hashNumericExtended(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Long?
): Long? {
    val f = HashNumericExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_numeric_extended</code> as a field.
 */
fun hashNumericExtended(
      __1: BigDecimal?
    , __2: Long?
): Field<Long?> {
    val f = HashNumericExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_numeric_extended</code> as a field.
 */
fun hashNumericExtended(
      __1: Field<BigDecimal?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashNumericExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRange(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = HashRange()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRange(
      __1: Any?
): Field<Int?> {
    val f = HashRange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRange(
      __1: Field<Any?>
): Field<Int?> {
    val f = HashRange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRangeExtended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = HashRangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRangeExtended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = HashRangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashRangeExtended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashRangeExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_record</code>
 */
fun hashRecord(
      configuration: Configuration
    , __1: Record?
): Int? {
    val f = HashRecord()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_record</code> as a field.
 */
fun hashRecord(
      __1: Record?
): Field<Int?> {
    val f = HashRecord()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_record</code> as a field.
 */
fun hashRecord(
      __1: Field<Record?>
): Field<Int?> {
    val f = HashRecord()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hash_record_extended</code>
 */
fun hashRecordExtended(
      configuration: Configuration
    , __1: Record?
    , __2: Long?
): Long? {
    val f = HashRecordExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hash_record_extended</code> as a field.
 */
fun hashRecordExtended(
      __1: Record?
    , __2: Long?
): Field<Long?> {
    val f = HashRecordExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hash_record_extended</code> as a field.
 */
fun hashRecordExtended(
      __1: Field<Record?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = HashRecordExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashbpchar</code>
 */
fun hashbpchar(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Hashbpchar()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashbpchar</code> as a field.
 */
fun hashbpchar(
      __1: String?
): Field<Int?> {
    val f = Hashbpchar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashbpchar</code> as a field.
 */
fun hashbpchar(
      __1: Field<String?>
): Field<Int?> {
    val f = Hashbpchar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashbpcharextended</code>
 */
fun hashbpcharextended(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = Hashbpcharextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashbpcharextended</code> as a field.
 */
fun hashbpcharextended(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = Hashbpcharextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashbpcharextended</code> as a field.
 */
fun hashbpcharextended(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashbpcharextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashchar</code>
 */
fun hashchar(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Hashchar()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashchar</code> as a field.
 */
fun hashchar(
      __1: String?
): Field<Int?> {
    val f = Hashchar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashchar</code> as a field.
 */
fun hashchar(
      __1: Field<String?>
): Field<Int?> {
    val f = Hashchar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashcharextended</code>
 */
fun hashcharextended(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = Hashcharextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashcharextended</code> as a field.
 */
fun hashcharextended(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = Hashcharextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashcharextended</code> as a field.
 */
fun hashcharextended(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashcharextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenum(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Hashenum()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenum(
      __1: Any?
): Field<Int?> {
    val f = Hashenum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenum(
      __1: Field<Any?>
): Field<Int?> {
    val f = Hashenum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenumextended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Hashenumextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenumextended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Hashenumextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashenumextended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashenumextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashfloat4</code>
 */
fun hashfloat4(
      configuration: Configuration
    , __1: Float?
): Int? {
    val f = Hashfloat4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashfloat4</code> as a field.
 */
fun hashfloat4(
      __1: Float?
): Field<Int?> {
    val f = Hashfloat4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashfloat4</code> as a field.
 */
fun hashfloat4(
      __1: Field<Float?>
): Field<Int?> {
    val f = Hashfloat4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashfloat4extended</code>
 */
fun hashfloat4extended(
      configuration: Configuration
    , __1: Float?
    , __2: Long?
): Long? {
    val f = Hashfloat4extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashfloat4extended</code> as a field.
 */
fun hashfloat4extended(
      __1: Float?
    , __2: Long?
): Field<Long?> {
    val f = Hashfloat4extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashfloat4extended</code> as a field.
 */
fun hashfloat4extended(
      __1: Field<Float?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashfloat4extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashfloat8</code>
 */
fun hashfloat8(
      configuration: Configuration
    , __1: Double?
): Int? {
    val f = Hashfloat8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashfloat8</code> as a field.
 */
fun hashfloat8(
      __1: Double?
): Field<Int?> {
    val f = Hashfloat8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashfloat8</code> as a field.
 */
fun hashfloat8(
      __1: Field<Double?>
): Field<Int?> {
    val f = Hashfloat8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashfloat8extended</code>
 */
fun hashfloat8extended(
      configuration: Configuration
    , __1: Double?
    , __2: Long?
): Long? {
    val f = Hashfloat8extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashfloat8extended</code> as a field.
 */
fun hashfloat8extended(
      __1: Double?
    , __2: Long?
): Field<Long?> {
    val f = Hashfloat8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashfloat8extended</code> as a field.
 */
fun hashfloat8extended(
      __1: Field<Double?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashfloat8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashhandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Hashhandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashhandler(
      __1: Any?
): Field<Any?> {
    val f = Hashhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashhandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Hashhandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinet(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Hashinet()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinet(
      __1: Any?
): Field<Int?> {
    val f = Hashinet()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinet(
      __1: Field<Any?>
): Field<Int?> {
    val f = Hashinet()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinetextended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Hashinetextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinetextended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Hashinetextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashinetextended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashinetextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint2</code>
 */
fun hashint2(
      configuration: Configuration
    , __1: Short?
): Int? {
    val f = Hashint2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint2</code> as a field.
 */
fun hashint2(
      __1: Short?
): Field<Int?> {
    val f = Hashint2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint2</code> as a field.
 */
fun hashint2(
      __1: Field<Short?>
): Field<Int?> {
    val f = Hashint2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint2extended</code>
 */
fun hashint2extended(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Long? {
    val f = Hashint2extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint2extended</code> as a field.
 */
fun hashint2extended(
      __1: Short?
    , __2: Long?
): Field<Long?> {
    val f = Hashint2extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint2extended</code> as a field.
 */
fun hashint2extended(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashint2extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint4</code>
 */
fun hashint4(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Hashint4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint4</code> as a field.
 */
fun hashint4(
      __1: Int?
): Field<Int?> {
    val f = Hashint4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint4</code> as a field.
 */
fun hashint4(
      __1: Field<Int?>
): Field<Int?> {
    val f = Hashint4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint4extended</code>
 */
fun hashint4extended(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Long? {
    val f = Hashint4extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint4extended</code> as a field.
 */
fun hashint4extended(
      __1: Int?
    , __2: Long?
): Field<Long?> {
    val f = Hashint4extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint4extended</code> as a field.
 */
fun hashint4extended(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashint4extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint8</code>
 */
fun hashint8(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = Hashint8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint8</code> as a field.
 */
fun hashint8(
      __1: Long?
): Field<Int?> {
    val f = Hashint8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint8</code> as a field.
 */
fun hashint8(
      __1: Field<Long?>
): Field<Int?> {
    val f = Hashint8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashint8extended</code>
 */
fun hashint8extended(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Hashint8extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashint8extended</code> as a field.
 */
fun hashint8extended(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Hashint8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashint8extended</code> as a field.
 */
fun hashint8extended(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashint8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Hashmacaddr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr(
      __1: Any?
): Field<Int?> {
    val f = Hashmacaddr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr(
      __1: Field<Any?>
): Field<Int?> {
    val f = Hashmacaddr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Hashmacaddr8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8(
      __1: Any?
): Field<Int?> {
    val f = Hashmacaddr8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8(
      __1: Field<Any?>
): Field<Int?> {
    val f = Hashmacaddr8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8extended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Hashmacaddr8extended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8extended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Hashmacaddr8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddr8extended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashmacaddr8extended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddrextended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Hashmacaddrextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddrextended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Hashmacaddrextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashmacaddrextended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashmacaddrextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashname</code>
 */
fun hashname(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Hashname()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashname</code> as a field.
 */
fun hashname(
      __1: String?
): Field<Int?> {
    val f = Hashname()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashname</code> as a field.
 */
fun hashname(
      __1: Field<String?>
): Field<Int?> {
    val f = Hashname()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashnameextended</code>
 */
fun hashnameextended(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = Hashnameextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashnameextended</code> as a field.
 */
fun hashnameextended(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = Hashnameextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashnameextended</code> as a field.
 */
fun hashnameextended(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashnameextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashoid</code>
 */
fun hashoid(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = Hashoid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashoid</code> as a field.
 */
fun hashoid(
      __1: Long?
): Field<Int?> {
    val f = Hashoid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashoid</code> as a field.
 */
fun hashoid(
      __1: Field<Long?>
): Field<Int?> {
    val f = Hashoid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashoidextended</code>
 */
fun hashoidextended(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Hashoidextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashoidextended</code> as a field.
 */
fun hashoidextended(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Hashoidextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashoidextended</code> as a field.
 */
fun hashoidextended(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashoidextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashoidvector</code>
 */
fun hashoidvector(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Hashoidvector()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashoidvector</code> as a field.
 */
fun hashoidvector(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Hashoidvector()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashoidvector</code> as a field.
 */
fun hashoidvector(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Hashoidvector()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashoidvectorextended</code>
 */
fun hashoidvectorextended(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Long?
): Long? {
    val f = Hashoidvectorextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashoidvectorextended</code> as a field.
 */
fun hashoidvectorextended(
      __1: Array<Any?>?
    , __2: Long?
): Field<Long?> {
    val f = Hashoidvectorextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashoidvectorextended</code> as a field.
 */
fun hashoidvectorextended(
      __1: Field<Array<Any?>?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashoidvectorextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashtext</code>
 */
fun hashtext(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Hashtext()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashtext</code> as a field.
 */
fun hashtext(
      __1: String?
): Field<Int?> {
    val f = Hashtext()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashtext</code> as a field.
 */
fun hashtext(
      __1: Field<String?>
): Field<Int?> {
    val f = Hashtext()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashtextextended</code>
 */
fun hashtextextended(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = Hashtextextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashtextextended</code> as a field.
 */
fun hashtextextended(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = Hashtextextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashtextextended</code> as a field.
 */
fun hashtextextended(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashtextextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashtid</code>
 */
fun hashtid(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = Hashtid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashtid</code> as a field.
 */
fun hashtid(
      __1: Long?
): Field<Int?> {
    val f = Hashtid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashtid</code> as a field.
 */
fun hashtid(
      __1: Field<Long?>
): Field<Int?> {
    val f = Hashtid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.hashtidextended</code>
 */
fun hashtidextended(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Hashtidextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.hashtidextended</code> as a field.
 */
fun hashtidextended(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Hashtidextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.hashtidextended</code> as a field.
 */
fun hashtidextended(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashtidextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlena(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Hashvarlena()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlena(
      __1: Any?
): Field<Int?> {
    val f = Hashvarlena()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlena(
      __1: Field<Any?>
): Field<Int?> {
    val f = Hashvarlena()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlenaextended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Hashvarlenaextended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlenaextended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Hashvarlenaextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hashvarlenaextended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Hashvarlenaextended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun heapTableamHandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = HeapTableamHandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun heapTableamHandler(
      __1: Any?
): Field<Any?> {
    val f = HeapTableamHandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun heapTableamHandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = HeapTableamHandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun height(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Height()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun height(
      __1: Any?
): Field<Double?> {
    val f = Height()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun height(
      __1: Field<Any?>
): Field<Double?> {
    val f = Height()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun host(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Host()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun host(
      __1: Any?
): Field<String?> {
    val f = Host()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun host(
      __1: Field<Any?>
): Field<String?> {
    val f = Host()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hostmask(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Hostmask()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hostmask(
      __1: Any?
): Field<Any?> {
    val f = Hostmask()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun hostmask(
      __1: Field<Any?>
): Field<Any?> {
    val f = Hostmask()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Iclikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Iclikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Iclikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Iclikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Iclikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iclikesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Iclikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Icnlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Icnlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Icnlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Icnlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Icnlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icnlikesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Icnlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Icregexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Icregexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Icregexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Icregexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Icregexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexeqsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Icregexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Icregexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Icregexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Icregexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Icregexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Icregexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun icregexnesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Icregexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange1(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange1(
      __1: Long?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange1(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<Long?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange10(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange10(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange10(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange11(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange11(
      __1: YearToSecond?
    , __2: YearToSecond?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange11(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange12(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange12(
      __1: LocalTime?
    , __2: LocalTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange12(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange13(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange13(
      __1: OffsetTime?
    , __2: OffsetTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange13(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange14(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
    , __3: Double?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange14()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange14(
      __1: Double?
    , __2: Double?
    , __3: Double?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange14()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange14(
      __1: Field<Double?>
    , __2: Field<Double?>
    , __3: Field<Double?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange14()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange15(
      configuration: Configuration
    , __1: Float?
    , __2: Float?
    , __3: Double?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange15()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange15(
      __1: Float?
    , __2: Float?
    , __3: Double?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange15()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange15(
      __1: Field<Float?>
    , __2: Field<Float?>
    , __3: Field<Double?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange15()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange16(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
    , __3: BigDecimal?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange16()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange16(
      __1: BigDecimal?
    , __2: BigDecimal?
    , __3: BigDecimal?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange16()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange16(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
    , __3: Field<BigDecimal?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange16()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange2(
      __1: Int?
    , __2: Int?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange2(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Long?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange3(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Int?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange3(
      __1: Int?
    , __2: Int?
    , __3: Int?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange3(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Int?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange4(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Short?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange4(
      __1: Int?
    , __2: Int?
    , __3: Short?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange4(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Short?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange5(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange5(
      __1: Short?
    , __2: Short?
    , __3: Long?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange5(
      __1: Field<Short?>
    , __2: Field<Short?>
    , __3: Field<Long?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange6(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
    , __3: Int?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange6(
      __1: Short?
    , __2: Short?
    , __3: Int?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange6(
      __1: Field<Short?>
    , __2: Field<Short?>
    , __3: Field<Int?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange7(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
    , __3: Short?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange7(
      __1: Short?
    , __2: Short?
    , __3: Short?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange7(
      __1: Field<Short?>
    , __2: Field<Short?>
    , __3: Field<Short?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange8(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalDate?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange8(
      __1: LocalDate?
    , __2: LocalDate?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange8(
      __1: Field<LocalDate?>
    , __2: Field<LocalDate?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Call <code>pg_catalog.in_range</code>
 */
fun inRange9(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Boolean? {
    val f = InRange9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange9(
      __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: YearToSecond?
    , __4: Boolean?
    , __5: Boolean?
): Field<Boolean?> {
    val f = InRange9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}

/**
 * Get <code>pg_catalog.in_range</code> as a field.
 */
fun inRange9(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
    , __3: Field<YearToSecond?>
    , __4: Field<Boolean?>
    , __5: Field<Boolean?>
): Field<Boolean?> {
    val f = InRange9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = IndexAmHandlerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerIn(
      __1: Any?
): Field<Any?> {
    val f = IndexAmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = IndexAmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = IndexAmHandlerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerOut(
      __1: Any?
): Field<Any?> {
    val f = IndexAmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun indexAmHandlerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = IndexAmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetClientAddr(
      configuration: Configuration
): Any? {
    val f = InetClientAddr()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetClientAddr(): Field<Any?> {
    val f = InetClientAddr()

    return f.asField()
}

/**
 * Call <code>pg_catalog.inet_client_port</code>
 */
fun inetClientPort(
      configuration: Configuration
): Int? {
    val f = InetClientPort()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.inet_client_port</code> as a field.
 */
fun inetClientPort(): Field<Int?> {
    val f = InetClientPort()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InetGistCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistCompress(
      __1: Any?
): Field<Any?> {
    val f = InetGistCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = InetGistCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = InetGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = InetGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = InetGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistFetch(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InetGistFetch()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistFetch(
      __1: Any?
): Field<Any?> {
    val f = InetGistFetch()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistFetch(
      __1: Field<Any?>
): Field<Any?> {
    val f = InetGistFetch()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPenalty(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = InetGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPenalty(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = InetGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPenalty(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = InetGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = InetGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPicksplit(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = InetGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistPicksplit(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = InetGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = InetGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistSame(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = InetGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistSame(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = InetGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = InetGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = InetGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetGistUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = InetGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InetIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetIn(
      __1: Any?
): Field<Any?> {
    val f = InetIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = InetIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetMerge(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = InetMerge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetMerge(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = InetMerge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetMerge(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = InetMerge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InetOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetOut(
      __1: Any?
): Field<Any?> {
    val f = InetOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = InetOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InetRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetRecv(
      __1: Any?
): Field<Any?> {
    val f = InetRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = InetRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSameFamily(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = InetSameFamily()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSameFamily(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = InetSameFamily()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSameFamily(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = InetSameFamily()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = InetSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSend(
      __1: Any?
): Field<ByteArray?> {
    val f = InetSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = InetSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetServerAddr(
      configuration: Configuration
): Any? {
    val f = InetServerAddr()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetServerAddr(): Field<Any?> {
    val f = InetServerAddr()

    return f.asField()
}

/**
 * Call <code>pg_catalog.inet_server_port</code>
 */
fun inetServerPort(
      configuration: Configuration
): Int? {
    val f = InetServerPort()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.inet_server_port</code> as a field.
 */
fun inetServerPort(): Field<Int?> {
    val f = InetServerPort()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = InetSpgChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = InetSpgConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = InetSpgInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgLeafConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = InetSpgLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgLeafConsistent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = InetSpgLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgLeafConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = InetSpgLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetSpgPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = InetSpgPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetand(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Inetand()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetand(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Inetand()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetand(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Inetand()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmi(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Long? {
    val f = Inetmi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmi(
      __1: Any?
    , __2: Any?
): Field<Long?> {
    val f = Inetmi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmi(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = Inetmi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmiInt8(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = InetmiInt8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmiInt8(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = InetmiInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetmiInt8(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = InetmiInt8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetnot(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Inetnot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetnot(
      __1: Any?
): Field<Any?> {
    val f = Inetnot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetnot(
      __1: Field<Any?>
): Field<Any?> {
    val f = Inetnot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetor(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Inetor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetor(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Inetor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetor(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Inetor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetpl(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = Inetpl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetpl(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = Inetpl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun inetpl(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Inetpl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.initcap</code>
 */
fun initcap(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Initcap()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.initcap</code> as a field.
 */
fun initcap(
      __1: String?
): Field<String?> {
    val f = Initcap()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.initcap</code> as a field.
 */
fun initcap(
      __1: Field<String?>
): Field<String?> {
    val f = Initcap()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int21(
      configuration: Configuration
    , __1: BigDecimal?
): Short? {
    val f = Int21()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int21(
      __1: BigDecimal?
): Field<Short?> {
    val f = Int21()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int21(
      __1: Field<BigDecimal?>
): Field<Short?> {
    val f = Int21()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int22(
      configuration: Configuration
    , __1: Double?
): Short? {
    val f = Int22()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int22(
      __1: Double?
): Field<Short?> {
    val f = Int22()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int22(
      __1: Field<Double?>
): Field<Short?> {
    val f = Int22()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int23(
      configuration: Configuration
    , __1: Float?
): Short? {
    val f = Int23()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int23(
      __1: Float?
): Field<Short?> {
    val f = Int23()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int23(
      __1: Field<Float?>
): Field<Short?> {
    val f = Int23()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int24(
      configuration: Configuration
    , __1: Int?
): Short? {
    val f = Int24()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int24(
      __1: Int?
): Field<Short?> {
    val f = Int24()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int24(
      __1: Field<Int?>
): Field<Short?> {
    val f = Int24()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int25(
      configuration: Configuration
    , __1: JSONB?
): Short? {
    val f = Int25()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int25(
      __1: JSONB?
): Field<Short?> {
    val f = Int25()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int25(
      __1: Field<JSONB?>
): Field<Short?> {
    val f = Int25()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2</code>
 */
fun int26(
      configuration: Configuration
    , __1: Long?
): Short? {
    val f = Int26()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int26(
      __1: Long?
): Field<Short?> {
    val f = Int26()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2</code> as a field.
 */
fun int26(
      __1: Field<Long?>
): Field<Short?> {
    val f = Int26()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24div</code>
 */
fun int24div(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Int? {
    val f = Int24div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24div</code> as a field.
 */
fun int24div(
      __1: Short?
    , __2: Int?
): Field<Int?> {
    val f = Int24div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24div</code> as a field.
 */
fun int24div(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int24div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24eq</code>
 */
fun int24eq(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24eq</code> as a field.
 */
fun int24eq(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24eq</code> as a field.
 */
fun int24eq(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24ge</code>
 */
fun int24ge(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24ge</code> as a field.
 */
fun int24ge(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24ge</code> as a field.
 */
fun int24ge(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24gt</code>
 */
fun int24gt(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24gt</code> as a field.
 */
fun int24gt(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24gt</code> as a field.
 */
fun int24gt(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24le</code>
 */
fun int24le(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24le</code> as a field.
 */
fun int24le(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24le</code> as a field.
 */
fun int24le(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24lt</code>
 */
fun int24lt(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24lt</code> as a field.
 */
fun int24lt(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24lt</code> as a field.
 */
fun int24lt(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24mi</code>
 */
fun int24mi(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Int? {
    val f = Int24mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24mi</code> as a field.
 */
fun int24mi(
      __1: Short?
    , __2: Int?
): Field<Int?> {
    val f = Int24mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24mi</code> as a field.
 */
fun int24mi(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int24mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24mul</code>
 */
fun int24mul(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Int? {
    val f = Int24mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24mul</code> as a field.
 */
fun int24mul(
      __1: Short?
    , __2: Int?
): Field<Int?> {
    val f = Int24mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24mul</code> as a field.
 */
fun int24mul(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int24mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24ne</code>
 */
fun int24ne(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Boolean? {
    val f = Int24ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24ne</code> as a field.
 */
fun int24ne(
      __1: Short?
    , __2: Int?
): Field<Boolean?> {
    val f = Int24ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24ne</code> as a field.
 */
fun int24ne(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int24ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int24pl</code>
 */
fun int24pl(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Int? {
    val f = Int24pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int24pl</code> as a field.
 */
fun int24pl(
      __1: Short?
    , __2: Int?
): Field<Int?> {
    val f = Int24pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int24pl</code> as a field.
 */
fun int24pl(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int24pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28div</code>
 */
fun int28div(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Long? {
    val f = Int28div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28div</code> as a field.
 */
fun int28div(
      __1: Short?
    , __2: Long?
): Field<Long?> {
    val f = Int28div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28div</code> as a field.
 */
fun int28div(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int28div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28eq</code>
 */
fun int28eq(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28eq</code> as a field.
 */
fun int28eq(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28eq</code> as a field.
 */
fun int28eq(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28ge</code>
 */
fun int28ge(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28ge</code> as a field.
 */
fun int28ge(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28ge</code> as a field.
 */
fun int28ge(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28gt</code>
 */
fun int28gt(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28gt</code> as a field.
 */
fun int28gt(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28gt</code> as a field.
 */
fun int28gt(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28le</code>
 */
fun int28le(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28le</code> as a field.
 */
fun int28le(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28le</code> as a field.
 */
fun int28le(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28lt</code>
 */
fun int28lt(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28lt</code> as a field.
 */
fun int28lt(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28lt</code> as a field.
 */
fun int28lt(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28mi</code>
 */
fun int28mi(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Long? {
    val f = Int28mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28mi</code> as a field.
 */
fun int28mi(
      __1: Short?
    , __2: Long?
): Field<Long?> {
    val f = Int28mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28mi</code> as a field.
 */
fun int28mi(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int28mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28mul</code>
 */
fun int28mul(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Long? {
    val f = Int28mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28mul</code> as a field.
 */
fun int28mul(
      __1: Short?
    , __2: Long?
): Field<Long?> {
    val f = Int28mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28mul</code> as a field.
 */
fun int28mul(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int28mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28ne</code>
 */
fun int28ne(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Boolean? {
    val f = Int28ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28ne</code> as a field.
 */
fun int28ne(
      __1: Short?
    , __2: Long?
): Field<Boolean?> {
    val f = Int28ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28ne</code> as a field.
 */
fun int28ne(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int28ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int28pl</code>
 */
fun int28pl(
      configuration: Configuration
    , __1: Short?
    , __2: Long?
): Long? {
    val f = Int28pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int28pl</code> as a field.
 */
fun int28pl(
      __1: Short?
    , __2: Long?
): Field<Long?> {
    val f = Int28pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int28pl</code> as a field.
 */
fun int28pl(
      __1: Field<Short?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int28pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2Accum(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
): Any? {
    val f = Int2Accum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2Accum(
      __1: Any?
    , __2: Short?
): Field<Any?> {
    val f = Int2Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2Accum(
      __1: Field<Any?>
    , __2: Field<Short?>
): Field<Any?> {
    val f = Int2Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2AccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
): Any? {
    val f = Int2AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2AccumInv(
      __1: Any?
    , __2: Short?
): Field<Any?> {
    val f = Int2AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2AccumInv(
      __1: Field<Any?>
    , __2: Field<Short?>
): Field<Any?> {
    val f = Int2AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2_avg_accum</code>
 */
fun int2AvgAccum(
      configuration: Configuration
    , __1: Array<Long?>?
    , __2: Short?
): Array<Long?>? {
    val f = Int2AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2_avg_accum</code> as a field.
 */
fun int2AvgAccum(
      __1: Array<Long?>?
    , __2: Short?
): Field<Array<Long?>?> {
    val f = Int2AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2_avg_accum</code> as a field.
 */
fun int2AvgAccum(
      __1: Field<Array<Long?>?>
    , __2: Field<Short?>
): Field<Array<Long?>?> {
    val f = Int2AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2_avg_accum_inv</code>
 */
fun int2AvgAccumInv(
      configuration: Configuration
    , __1: Array<Long?>?
    , __2: Short?
): Array<Long?>? {
    val f = Int2AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2_avg_accum_inv</code> as a field.
 */
fun int2AvgAccumInv(
      __1: Array<Long?>?
    , __2: Short?
): Field<Array<Long?>?> {
    val f = Int2AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2_avg_accum_inv</code> as a field.
 */
fun int2AvgAccumInv(
      __1: Field<Array<Long?>?>
    , __2: Field<Short?>
): Field<Array<Long?>?> {
    val f = Int2AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2MulCash(
      configuration: Configuration
    , __1: Short?
    , __2: Any?
): Any? {
    val f = Int2MulCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2MulCash(
      __1: Short?
    , __2: Any?
): Field<Any?> {
    val f = Int2MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2MulCash(
      __1: Field<Short?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int2MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2_sum</code>
 */
fun int2Sum(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Long? {
    val f = Int2Sum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2_sum</code> as a field.
 */
fun int2Sum(
      __1: Long?
    , __2: Short?
): Field<Long?> {
    val f = Int2Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2_sum</code> as a field.
 */
fun int2Sum(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Long?> {
    val f = Int2Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2abs</code>
 */
fun int2abs(
      configuration: Configuration
    , __1: Short?
): Short? {
    val f = Int2abs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2abs</code> as a field.
 */
fun int2abs(
      __1: Short?
): Field<Short?> {
    val f = Int2abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2abs</code> as a field.
 */
fun int2abs(
      __1: Field<Short?>
): Field<Short?> {
    val f = Int2abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2and</code>
 */
fun int2and(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2and()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2and</code> as a field.
 */
fun int2and(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2and</code> as a field.
 */
fun int2and(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2div</code>
 */
fun int2div(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2div</code> as a field.
 */
fun int2div(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2div</code> as a field.
 */
fun int2div(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2eq</code>
 */
fun int2eq(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2eq</code> as a field.
 */
fun int2eq(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2eq</code> as a field.
 */
fun int2eq(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2ge</code>
 */
fun int2ge(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2ge</code> as a field.
 */
fun int2ge(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2ge</code> as a field.
 */
fun int2ge(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2gt</code>
 */
fun int2gt(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2gt</code> as a field.
 */
fun int2gt(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2gt</code> as a field.
 */
fun int2gt(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2in(
      configuration: Configuration
    , __1: Any?
): Short? {
    val f = Int2in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2in(
      __1: Any?
): Field<Short?> {
    val f = Int2in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2in(
      __1: Field<Any?>
): Field<Short?> {
    val f = Int2in()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2int4_sum</code>
 */
fun int2int4Sum(
      configuration: Configuration
    , __1: Array<Long?>?
): Long? {
    val f = Int2int4Sum()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2int4_sum</code> as a field.
 */
fun int2int4Sum(
      __1: Array<Long?>?
): Field<Long?> {
    val f = Int2int4Sum()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2int4_sum</code> as a field.
 */
fun int2int4Sum(
      __1: Field<Array<Long?>?>
): Field<Long?> {
    val f = Int2int4Sum()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2larger</code>
 */
fun int2larger(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2larger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2larger</code> as a field.
 */
fun int2larger(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2larger</code> as a field.
 */
fun int2larger(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2le</code>
 */
fun int2le(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2le</code> as a field.
 */
fun int2le(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2le</code> as a field.
 */
fun int2le(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2lt</code>
 */
fun int2lt(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2lt</code> as a field.
 */
fun int2lt(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2lt</code> as a field.
 */
fun int2lt(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2mi</code>
 */
fun int2mi(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2mi</code> as a field.
 */
fun int2mi(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2mi</code> as a field.
 */
fun int2mi(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2mod</code>
 */
fun int2mod(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2mod()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2mod</code> as a field.
 */
fun int2mod(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2mod</code> as a field.
 */
fun int2mod(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2mul</code>
 */
fun int2mul(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2mul</code> as a field.
 */
fun int2mul(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2mul</code> as a field.
 */
fun int2mul(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2ne</code>
 */
fun int2ne(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Boolean? {
    val f = Int2ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2ne</code> as a field.
 */
fun int2ne(
      __1: Short?
    , __2: Short?
): Field<Boolean?> {
    val f = Int2ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2ne</code> as a field.
 */
fun int2ne(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int2ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2not</code>
 */
fun int2not(
      configuration: Configuration
    , __1: Short?
): Short? {
    val f = Int2not()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2not</code> as a field.
 */
fun int2not(
      __1: Short?
): Field<Short?> {
    val f = Int2not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2not</code> as a field.
 */
fun int2not(
      __1: Field<Short?>
): Field<Short?> {
    val f = Int2not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2or</code>
 */
fun int2or(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2or()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2or</code> as a field.
 */
fun int2or(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2or</code> as a field.
 */
fun int2or(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2out(
      configuration: Configuration
    , __1: Short?
): Any? {
    val f = Int2out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2out(
      __1: Short?
): Field<Any?> {
    val f = Int2out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2out(
      __1: Field<Short?>
): Field<Any?> {
    val f = Int2out()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2pl</code>
 */
fun int2pl(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2pl</code> as a field.
 */
fun int2pl(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2pl</code> as a field.
 */
fun int2pl(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2recv(
      configuration: Configuration
    , __1: Any?
): Short? {
    val f = Int2recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2recv(
      __1: Any?
): Field<Short?> {
    val f = Int2recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2recv(
      __1: Field<Any?>
): Field<Short?> {
    val f = Int2recv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2send</code>
 */
fun int2send(
      configuration: Configuration
    , __1: Short?
): ByteArray? {
    val f = Int2send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2send</code> as a field.
 */
fun int2send(
      __1: Short?
): Field<ByteArray?> {
    val f = Int2send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2send</code> as a field.
 */
fun int2send(
      __1: Field<Short?>
): Field<ByteArray?> {
    val f = Int2send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2shl</code>
 */
fun int2shl(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Short? {
    val f = Int2shl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2shl</code> as a field.
 */
fun int2shl(
      __1: Short?
    , __2: Int?
): Field<Short?> {
    val f = Int2shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2shl</code> as a field.
 */
fun int2shl(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Short?> {
    val f = Int2shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2shr</code>
 */
fun int2shr(
      configuration: Configuration
    , __1: Short?
    , __2: Int?
): Short? {
    val f = Int2shr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2shr</code> as a field.
 */
fun int2shr(
      __1: Short?
    , __2: Int?
): Field<Short?> {
    val f = Int2shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2shr</code> as a field.
 */
fun int2shr(
      __1: Field<Short?>
    , __2: Field<Int?>
): Field<Short?> {
    val f = Int2shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2smaller</code>
 */
fun int2smaller(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2smaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2smaller</code> as a field.
 */
fun int2smaller(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2smaller</code> as a field.
 */
fun int2smaller(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2um</code>
 */
fun int2um(
      configuration: Configuration
    , __1: Short?
): Short? {
    val f = Int2um()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2um</code> as a field.
 */
fun int2um(
      __1: Short?
): Field<Short?> {
    val f = Int2um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2um</code> as a field.
 */
fun int2um(
      __1: Field<Short?>
): Field<Short?> {
    val f = Int2um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2up</code>
 */
fun int2up(
      configuration: Configuration
    , __1: Short?
): Short? {
    val f = Int2up()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2up</code> as a field.
 */
fun int2up(
      __1: Short?
): Field<Short?> {
    val f = Int2up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2up</code> as a field.
 */
fun int2up(
      __1: Field<Short?>
): Field<Short?> {
    val f = Int2up()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorin(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = Int2vectorin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorin(
      __1: Any?
): Field<Array<Any?>?> {
    val f = Int2vectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorin(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = Int2vectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorout(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Int2vectorout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorout(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Int2vectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorout(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Int2vectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorrecv(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = Int2vectorrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorrecv(
      __1: Any?
): Field<Array<Any?>?> {
    val f = Int2vectorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int2vectorrecv(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = Int2vectorrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2vectorsend</code>
 */
fun int2vectorsend(
      configuration: Configuration
    , __1: Array<Any?>?
): ByteArray? {
    val f = Int2vectorsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2vectorsend</code> as a field.
 */
fun int2vectorsend(
      __1: Array<Any?>?
): Field<ByteArray?> {
    val f = Int2vectorsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2vectorsend</code> as a field.
 */
fun int2vectorsend(
      __1: Field<Array<Any?>?>
): Field<ByteArray?> {
    val f = Int2vectorsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int2xor</code>
 */
fun int2xor(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Int2xor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int2xor</code> as a field.
 */
fun int2xor(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Int2xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int2xor</code> as a field.
 */
fun int2xor(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Int2xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int41(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Int41()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int41(
      __1: String?
): Field<Int?> {
    val f = Int41()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int41(
      __1: Field<String?>
): Field<Int?> {
    val f = Int41()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int42(
      configuration: Configuration
    , __1: BigDecimal?
): Int? {
    val f = Int42()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int42(
      __1: BigDecimal?
): Field<Int?> {
    val f = Int42()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int42(
      __1: Field<BigDecimal?>
): Field<Int?> {
    val f = Int42()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int43(
      configuration: Configuration
    , __1: Boolean?
): Int? {
    val f = Int43()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int43(
      __1: Boolean?
): Field<Int?> {
    val f = Int43()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int43(
      __1: Field<Boolean?>
): Field<Int?> {
    val f = Int43()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int44(
      configuration: Configuration
    , __1: Short?
): Int? {
    val f = Int44()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int44(
      __1: Short?
): Field<Int?> {
    val f = Int44()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int44(
      __1: Field<Short?>
): Field<Int?> {
    val f = Int44()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int45(
      configuration: Configuration
    , __1: Double?
): Int? {
    val f = Int45()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int45(
      __1: Double?
): Field<Int?> {
    val f = Int45()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int45(
      __1: Field<Double?>
): Field<Int?> {
    val f = Int45()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int46(
      configuration: Configuration
    , __1: Float?
): Int? {
    val f = Int46()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int46(
      __1: Float?
): Field<Int?> {
    val f = Int46()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int46(
      __1: Field<Float?>
): Field<Int?> {
    val f = Int46()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int47(
      configuration: Configuration
    , __1: JSONB?
): Int? {
    val f = Int47()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int47(
      __1: JSONB?
): Field<Int?> {
    val f = Int47()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int47(
      __1: Field<JSONB?>
): Field<Int?> {
    val f = Int47()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int48(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = Int48()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int48(
      __1: Long?
): Field<Int?> {
    val f = Int48()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int48(
      __1: Field<Long?>
): Field<Int?> {
    val f = Int48()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4</code>
 */
fun int49(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Int49()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int49(
      __1: String?
): Field<Int?> {
    val f = Int49()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4</code> as a field.
 */
fun int49(
      __1: Field<String?>
): Field<Int?> {
    val f = Int49()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42div</code>
 */
fun int42div(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Int? {
    val f = Int42div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42div</code> as a field.
 */
fun int42div(
      __1: Int?
    , __2: Short?
): Field<Int?> {
    val f = Int42div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42div</code> as a field.
 */
fun int42div(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Int42div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42eq</code>
 */
fun int42eq(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42eq</code> as a field.
 */
fun int42eq(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42eq</code> as a field.
 */
fun int42eq(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42ge</code>
 */
fun int42ge(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42ge</code> as a field.
 */
fun int42ge(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42ge</code> as a field.
 */
fun int42ge(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42gt</code>
 */
fun int42gt(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42gt</code> as a field.
 */
fun int42gt(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42gt</code> as a field.
 */
fun int42gt(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42le</code>
 */
fun int42le(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42le</code> as a field.
 */
fun int42le(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42le</code> as a field.
 */
fun int42le(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42lt</code>
 */
fun int42lt(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42lt</code> as a field.
 */
fun int42lt(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42lt</code> as a field.
 */
fun int42lt(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42mi</code>
 */
fun int42mi(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Int? {
    val f = Int42mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42mi</code> as a field.
 */
fun int42mi(
      __1: Int?
    , __2: Short?
): Field<Int?> {
    val f = Int42mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42mi</code> as a field.
 */
fun int42mi(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Int42mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42mul</code>
 */
fun int42mul(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Int? {
    val f = Int42mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42mul</code> as a field.
 */
fun int42mul(
      __1: Int?
    , __2: Short?
): Field<Int?> {
    val f = Int42mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42mul</code> as a field.
 */
fun int42mul(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Int42mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42ne</code>
 */
fun int42ne(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Boolean? {
    val f = Int42ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42ne</code> as a field.
 */
fun int42ne(
      __1: Int?
    , __2: Short?
): Field<Boolean?> {
    val f = Int42ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42ne</code> as a field.
 */
fun int42ne(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int42ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int42pl</code>
 */
fun int42pl(
      configuration: Configuration
    , __1: Int?
    , __2: Short?
): Int? {
    val f = Int42pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int42pl</code> as a field.
 */
fun int42pl(
      __1: Int?
    , __2: Short?
): Field<Int?> {
    val f = Int42pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int42pl</code> as a field.
 */
fun int42pl(
      __1: Field<Int?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = Int42pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48div</code>
 */
fun int48div(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Long? {
    val f = Int48div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48div</code> as a field.
 */
fun int48div(
      __1: Int?
    , __2: Long?
): Field<Long?> {
    val f = Int48div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48div</code> as a field.
 */
fun int48div(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int48div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48eq</code>
 */
fun int48eq(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48eq</code> as a field.
 */
fun int48eq(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48eq</code> as a field.
 */
fun int48eq(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48ge</code>
 */
fun int48ge(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48ge</code> as a field.
 */
fun int48ge(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48ge</code> as a field.
 */
fun int48ge(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48gt</code>
 */
fun int48gt(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48gt</code> as a field.
 */
fun int48gt(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48gt</code> as a field.
 */
fun int48gt(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48le</code>
 */
fun int48le(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48le</code> as a field.
 */
fun int48le(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48le</code> as a field.
 */
fun int48le(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48lt</code>
 */
fun int48lt(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48lt</code> as a field.
 */
fun int48lt(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48lt</code> as a field.
 */
fun int48lt(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48mi</code>
 */
fun int48mi(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Long? {
    val f = Int48mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48mi</code> as a field.
 */
fun int48mi(
      __1: Int?
    , __2: Long?
): Field<Long?> {
    val f = Int48mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48mi</code> as a field.
 */
fun int48mi(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int48mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48mul</code>
 */
fun int48mul(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Long? {
    val f = Int48mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48mul</code> as a field.
 */
fun int48mul(
      __1: Int?
    , __2: Long?
): Field<Long?> {
    val f = Int48mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48mul</code> as a field.
 */
fun int48mul(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int48mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48ne</code>
 */
fun int48ne(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Boolean? {
    val f = Int48ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48ne</code> as a field.
 */
fun int48ne(
      __1: Int?
    , __2: Long?
): Field<Boolean?> {
    val f = Int48ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48ne</code> as a field.
 */
fun int48ne(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int48ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int48pl</code>
 */
fun int48pl(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Long? {
    val f = Int48pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int48pl</code> as a field.
 */
fun int48pl(
      __1: Int?
    , __2: Long?
): Field<Long?> {
    val f = Int48pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int48pl</code> as a field.
 */
fun int48pl(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int48pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4Accum(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = Int4Accum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4Accum(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = Int4Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4Accum(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = Int4Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4AccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = Int4AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4AccumInv(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = Int4AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4AccumInv(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = Int4AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4_avg_accum</code>
 */
fun int4AvgAccum(
      configuration: Configuration
    , __1: Array<Long?>?
    , __2: Int?
): Array<Long?>? {
    val f = Int4AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4_avg_accum</code> as a field.
 */
fun int4AvgAccum(
      __1: Array<Long?>?
    , __2: Int?
): Field<Array<Long?>?> {
    val f = Int4AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4_avg_accum</code> as a field.
 */
fun int4AvgAccum(
      __1: Field<Array<Long?>?>
    , __2: Field<Int?>
): Field<Array<Long?>?> {
    val f = Int4AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4_avg_accum_inv</code>
 */
fun int4AvgAccumInv(
      configuration: Configuration
    , __1: Array<Long?>?
    , __2: Int?
): Array<Long?>? {
    val f = Int4AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4_avg_accum_inv</code> as a field.
 */
fun int4AvgAccumInv(
      __1: Array<Long?>?
    , __2: Int?
): Field<Array<Long?>?> {
    val f = Int4AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4_avg_accum_inv</code> as a field.
 */
fun int4AvgAccumInv(
      __1: Field<Array<Long?>?>
    , __2: Field<Int?>
): Field<Array<Long?>?> {
    val f = Int4AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4_avg_combine</code>
 */
fun int4AvgCombine(
      configuration: Configuration
    , __1: Array<Long?>?
    , __2: Array<Long?>?
): Array<Long?>? {
    val f = Int4AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4_avg_combine</code> as a field.
 */
fun int4AvgCombine(
      __1: Array<Long?>?
    , __2: Array<Long?>?
): Field<Array<Long?>?> {
    val f = Int4AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4_avg_combine</code> as a field.
 */
fun int4AvgCombine(
      __1: Field<Array<Long?>?>
    , __2: Field<Array<Long?>?>
): Field<Array<Long?>?> {
    val f = Int4AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4MulCash(
      configuration: Configuration
    , __1: Int?
    , __2: Any?
): Any? {
    val f = Int4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4MulCash(
      __1: Int?
    , __2: Any?
): Field<Any?> {
    val f = Int4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4MulCash(
      __1: Field<Int?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int4MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4_sum</code>
 */
fun int4Sum(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int4Sum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4_sum</code> as a field.
 */
fun int4Sum(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int4Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4_sum</code> as a field.
 */
fun int4Sum(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int4Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4abs</code>
 */
fun int4abs(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Int4abs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4abs</code> as a field.
 */
fun int4abs(
      __1: Int?
): Field<Int?> {
    val f = Int4abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4abs</code> as a field.
 */
fun int4abs(
      __1: Field<Int?>
): Field<Int?> {
    val f = Int4abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4and</code>
 */
fun int4and(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4and()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4and</code> as a field.
 */
fun int4and(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4and</code> as a field.
 */
fun int4and(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4div</code>
 */
fun int4div(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4div</code> as a field.
 */
fun int4div(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4div</code> as a field.
 */
fun int4div(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4eq</code>
 */
fun int4eq(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4eq</code> as a field.
 */
fun int4eq(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4eq</code> as a field.
 */
fun int4eq(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4ge</code>
 */
fun int4ge(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4ge</code> as a field.
 */
fun int4ge(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4ge</code> as a field.
 */
fun int4ge(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4gt</code>
 */
fun int4gt(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4gt</code> as a field.
 */
fun int4gt(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4gt</code> as a field.
 */
fun int4gt(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4in(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Int4in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4in(
      __1: Any?
): Field<Int?> {
    val f = Int4in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4in(
      __1: Field<Any?>
): Field<Int?> {
    val f = Int4in()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4inc</code>
 */
fun int4inc(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Int4inc()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4inc</code> as a field.
 */
fun int4inc(
      __1: Int?
): Field<Int?> {
    val f = Int4inc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4inc</code> as a field.
 */
fun int4inc(
      __1: Field<Int?>
): Field<Int?> {
    val f = Int4inc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4larger</code>
 */
fun int4larger(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4larger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4larger</code> as a field.
 */
fun int4larger(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4larger</code> as a field.
 */
fun int4larger(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4le</code>
 */
fun int4le(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4le</code> as a field.
 */
fun int4le(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4le</code> as a field.
 */
fun int4le(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4lt</code>
 */
fun int4lt(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4lt</code> as a field.
 */
fun int4lt(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4lt</code> as a field.
 */
fun int4lt(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4mi</code>
 */
fun int4mi(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4mi</code> as a field.
 */
fun int4mi(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4mi</code> as a field.
 */
fun int4mi(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4mod</code>
 */
fun int4mod(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4mod()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4mod</code> as a field.
 */
fun int4mod(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4mod</code> as a field.
 */
fun int4mod(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4mul</code>
 */
fun int4mul(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4mul</code> as a field.
 */
fun int4mul(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4mul</code> as a field.
 */
fun int4mul(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange1(
      configuration: Configuration
): Any? {
    val f = Int4multirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange1(): Field<Any?> {
    val f = Int4multirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Int4multirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange2(
      __1: Any?
): Field<Any?> {
    val f = Int4multirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Int4multirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Int4multirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Int4multirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4multirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Int4multirange3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4ne</code>
 */
fun int4ne(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = Int4ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4ne</code> as a field.
 */
fun int4ne(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = Int4ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4ne</code> as a field.
 */
fun int4ne(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int4ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4not</code>
 */
fun int4not(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Int4not()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4not</code> as a field.
 */
fun int4not(
      __1: Int?
): Field<Int?> {
    val f = Int4not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4not</code> as a field.
 */
fun int4not(
      __1: Field<Int?>
): Field<Int?> {
    val f = Int4not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4or</code>
 */
fun int4or(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4or()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4or</code> as a field.
 */
fun int4or(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4or</code> as a field.
 */
fun int4or(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4out(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Int4out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4out(
      __1: Int?
): Field<Any?> {
    val f = Int4out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4out(
      __1: Field<Int?>
): Field<Any?> {
    val f = Int4out()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4pl</code>
 */
fun int4pl(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4pl</code> as a field.
 */
fun int4pl(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4pl</code> as a field.
 */
fun int4pl(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Any? {
    val f = Int4range1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range1(
      __1: Int?
    , __2: Int?
): Field<Any?> {
    val f = Int4range1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range1(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = Int4range1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: String?
): Any? {
    val f = Int4range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range2(
      __1: Int?
    , __2: Int?
    , __3: String?
): Field<Any?> {
    val f = Int4range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4range2(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Int4range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4rangeCanonical(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Int4rangeCanonical()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4rangeCanonical(
      __1: Any?
): Field<Any?> {
    val f = Int4rangeCanonical()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4rangeCanonical(
      __1: Field<Any?>
): Field<Any?> {
    val f = Int4rangeCanonical()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4range_subdiff</code>
 */
fun int4rangeSubdiff(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Double? {
    val f = Int4rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4range_subdiff</code> as a field.
 */
fun int4rangeSubdiff(
      __1: Int?
    , __2: Int?
): Field<Double?> {
    val f = Int4rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4range_subdiff</code> as a field.
 */
fun int4rangeSubdiff(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Double?> {
    val f = Int4rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4recv(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Int4recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4recv(
      __1: Any?
): Field<Int?> {
    val f = Int4recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int4recv(
      __1: Field<Any?>
): Field<Int?> {
    val f = Int4recv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4send</code>
 */
fun int4send(
      configuration: Configuration
    , __1: Int?
): ByteArray? {
    val f = Int4send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4send</code> as a field.
 */
fun int4send(
      __1: Int?
): Field<ByteArray?> {
    val f = Int4send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4send</code> as a field.
 */
fun int4send(
      __1: Field<Int?>
): Field<ByteArray?> {
    val f = Int4send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4shl</code>
 */
fun int4shl(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4shl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4shl</code> as a field.
 */
fun int4shl(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4shl</code> as a field.
 */
fun int4shl(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4shr</code>
 */
fun int4shr(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4shr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4shr</code> as a field.
 */
fun int4shr(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4shr</code> as a field.
 */
fun int4shr(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4smaller</code>
 */
fun int4smaller(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4smaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4smaller</code> as a field.
 */
fun int4smaller(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4smaller</code> as a field.
 */
fun int4smaller(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4um</code>
 */
fun int4um(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Int4um()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4um</code> as a field.
 */
fun int4um(
      __1: Int?
): Field<Int?> {
    val f = Int4um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4um</code> as a field.
 */
fun int4um(
      __1: Field<Int?>
): Field<Int?> {
    val f = Int4um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4up</code>
 */
fun int4up(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Int4up()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4up</code> as a field.
 */
fun int4up(
      __1: Int?
): Field<Int?> {
    val f = Int4up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4up</code> as a field.
 */
fun int4up(
      __1: Field<Int?>
): Field<Int?> {
    val f = Int4up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int4xor</code>
 */
fun int4xor(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Int4xor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int4xor</code> as a field.
 */
fun int4xor(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Int4xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int4xor</code> as a field.
 */
fun int4xor(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Int4xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int81(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int81()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int81(
      __1: Long?
): Field<Long?> {
    val f = Int81()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int81(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int81()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int82(
      configuration: Configuration
    , __1: BigDecimal?
): Long? {
    val f = Int82()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int82(
      __1: BigDecimal?
): Field<Long?> {
    val f = Int82()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int82(
      __1: Field<BigDecimal?>
): Field<Long?> {
    val f = Int82()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int83(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = Int83()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int83(
      __1: String?
): Field<Long?> {
    val f = Int83()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int83(
      __1: Field<String?>
): Field<Long?> {
    val f = Int83()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int84(
      configuration: Configuration
    , __1: JSONB?
): Long? {
    val f = Int84()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int84(
      __1: JSONB?
): Field<Long?> {
    val f = Int84()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int84(
      __1: Field<JSONB?>
): Field<Long?> {
    val f = Int84()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int85(
      configuration: Configuration
    , __1: Int?
): Long? {
    val f = Int85()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int85(
      __1: Int?
): Field<Long?> {
    val f = Int85()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int85(
      __1: Field<Int?>
): Field<Long?> {
    val f = Int85()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int86(
      configuration: Configuration
    , __1: Double?
): Long? {
    val f = Int86()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int86(
      __1: Double?
): Field<Long?> {
    val f = Int86()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int86(
      __1: Field<Double?>
): Field<Long?> {
    val f = Int86()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int87(
      configuration: Configuration
    , __1: Float?
): Long? {
    val f = Int87()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int87(
      __1: Float?
): Field<Long?> {
    val f = Int87()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int87(
      __1: Field<Float?>
): Field<Long?> {
    val f = Int87()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8</code>
 */
fun int88(
      configuration: Configuration
    , __1: Short?
): Long? {
    val f = Int88()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int88(
      __1: Short?
): Field<Long?> {
    val f = Int88()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8</code> as a field.
 */
fun int88(
      __1: Field<Short?>
): Field<Long?> {
    val f = Int88()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82div</code>
 */
fun int82div(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Long? {
    val f = Int82div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82div</code> as a field.
 */
fun int82div(
      __1: Long?
    , __2: Short?
): Field<Long?> {
    val f = Int82div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82div</code> as a field.
 */
fun int82div(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Long?> {
    val f = Int82div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82eq</code>
 */
fun int82eq(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82eq</code> as a field.
 */
fun int82eq(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82eq</code> as a field.
 */
fun int82eq(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82ge</code>
 */
fun int82ge(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82ge</code> as a field.
 */
fun int82ge(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82ge</code> as a field.
 */
fun int82ge(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82gt</code>
 */
fun int82gt(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82gt</code> as a field.
 */
fun int82gt(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82gt</code> as a field.
 */
fun int82gt(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82le</code>
 */
fun int82le(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82le</code> as a field.
 */
fun int82le(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82le</code> as a field.
 */
fun int82le(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82lt</code>
 */
fun int82lt(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82lt</code> as a field.
 */
fun int82lt(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82lt</code> as a field.
 */
fun int82lt(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82mi</code>
 */
fun int82mi(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Long? {
    val f = Int82mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82mi</code> as a field.
 */
fun int82mi(
      __1: Long?
    , __2: Short?
): Field<Long?> {
    val f = Int82mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82mi</code> as a field.
 */
fun int82mi(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Long?> {
    val f = Int82mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82mul</code>
 */
fun int82mul(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Long? {
    val f = Int82mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82mul</code> as a field.
 */
fun int82mul(
      __1: Long?
    , __2: Short?
): Field<Long?> {
    val f = Int82mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82mul</code> as a field.
 */
fun int82mul(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Long?> {
    val f = Int82mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82ne</code>
 */
fun int82ne(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Boolean? {
    val f = Int82ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82ne</code> as a field.
 */
fun int82ne(
      __1: Long?
    , __2: Short?
): Field<Boolean?> {
    val f = Int82ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82ne</code> as a field.
 */
fun int82ne(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Boolean?> {
    val f = Int82ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int82pl</code>
 */
fun int82pl(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Long? {
    val f = Int82pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int82pl</code> as a field.
 */
fun int82pl(
      __1: Long?
    , __2: Short?
): Field<Long?> {
    val f = Int82pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int82pl</code> as a field.
 */
fun int82pl(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Long?> {
    val f = Int82pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84div</code>
 */
fun int84div(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int84div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84div</code> as a field.
 */
fun int84div(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int84div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84div</code> as a field.
 */
fun int84div(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int84div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84eq</code>
 */
fun int84eq(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84eq</code> as a field.
 */
fun int84eq(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84eq</code> as a field.
 */
fun int84eq(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84ge</code>
 */
fun int84ge(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84ge</code> as a field.
 */
fun int84ge(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84ge</code> as a field.
 */
fun int84ge(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84gt</code>
 */
fun int84gt(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84gt</code> as a field.
 */
fun int84gt(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84gt</code> as a field.
 */
fun int84gt(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84le</code>
 */
fun int84le(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84le</code> as a field.
 */
fun int84le(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84le</code> as a field.
 */
fun int84le(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84lt</code>
 */
fun int84lt(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84lt</code> as a field.
 */
fun int84lt(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84lt</code> as a field.
 */
fun int84lt(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84mi</code>
 */
fun int84mi(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int84mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84mi</code> as a field.
 */
fun int84mi(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int84mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84mi</code> as a field.
 */
fun int84mi(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int84mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84mul</code>
 */
fun int84mul(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int84mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84mul</code> as a field.
 */
fun int84mul(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int84mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84mul</code> as a field.
 */
fun int84mul(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int84mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84ne</code>
 */
fun int84ne(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Int84ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84ne</code> as a field.
 */
fun int84ne(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Int84ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84ne</code> as a field.
 */
fun int84ne(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Int84ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int84pl</code>
 */
fun int84pl(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int84pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int84pl</code> as a field.
 */
fun int84pl(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int84pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int84pl</code> as a field.
 */
fun int84pl(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int84pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8Accum(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = Int8Accum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8Accum(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = Int8Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8Accum(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Int8Accum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = Int8AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AccumInv(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = Int8AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AccumInv(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Int8AccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8_avg</code>
 */
fun int8Avg(
      configuration: Configuration
    , __1: Array<Long?>?
): BigDecimal? {
    val f = Int8Avg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8_avg</code> as a field.
 */
fun int8Avg(
      __1: Array<Long?>?
): Field<BigDecimal?> {
    val f = Int8Avg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8_avg</code> as a field.
 */
fun int8Avg(
      __1: Field<Array<Long?>?>
): Field<BigDecimal?> {
    val f = Int8Avg()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccum(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = Int8AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccum(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = Int8AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccum(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Int8AvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Any? {
    val f = Int8AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccumInv(
      __1: Any?
    , __2: Long?
): Field<Any?> {
    val f = Int8AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgAccumInv(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Int8AvgAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgCombine(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Int8AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgCombine(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Int8AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgCombine(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int8AvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgDeserialize(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Any?
): Any? {
    val f = Int8AvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgDeserialize(
      __1: ByteArray?
    , __2: Any?
): Field<Any?> {
    val f = Int8AvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgDeserialize(
      __1: Field<ByteArray?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int8AvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgSerialize(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Int8AvgSerialize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgSerialize(
      __1: Any?
): Field<ByteArray?> {
    val f = Int8AvgSerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8AvgSerialize(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Int8AvgSerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8MulCash(
      configuration: Configuration
    , __1: Long?
    , __2: Any?
): Any? {
    val f = Int8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8MulCash(
      __1: Long?
    , __2: Any?
): Field<Any?> {
    val f = Int8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8MulCash(
      __1: Field<Long?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int8MulCash()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8_sum</code>
 */
fun int8Sum(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Long?
): BigDecimal? {
    val f = Int8Sum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8_sum</code> as a field.
 */
fun int8Sum(
      __1: BigDecimal?
    , __2: Long?
): Field<BigDecimal?> {
    val f = Int8Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8_sum</code> as a field.
 */
fun int8Sum(
      __1: Field<BigDecimal?>
    , __2: Field<Long?>
): Field<BigDecimal?> {
    val f = Int8Sum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8abs</code>
 */
fun int8abs(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8abs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8abs</code> as a field.
 */
fun int8abs(
      __1: Long?
): Field<Long?> {
    val f = Int8abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8abs</code> as a field.
 */
fun int8abs(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8abs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8and</code>
 */
fun int8and(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8and()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8and</code> as a field.
 */
fun int8and(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8and</code> as a field.
 */
fun int8and(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8and()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8dec</code>
 */
fun int8dec(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8dec()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8dec</code> as a field.
 */
fun int8dec(
      __1: Long?
): Field<Long?> {
    val f = Int8dec()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8dec</code> as a field.
 */
fun int8dec(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8dec()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8decAny(
      configuration: Configuration
    , __1: Long?
    , __2: Any?
): Long? {
    val f = Int8decAny()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8decAny(
      __1: Long?
    , __2: Any?
): Field<Long?> {
    val f = Int8decAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8decAny(
      __1: Field<Long?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = Int8decAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8div</code>
 */
fun int8div(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8div()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8div</code> as a field.
 */
fun int8div(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8div</code> as a field.
 */
fun int8div(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8div()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8eq</code>
 */
fun int8eq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8eq</code> as a field.
 */
fun int8eq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8eq</code> as a field.
 */
fun int8eq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8ge</code>
 */
fun int8ge(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8ge</code> as a field.
 */
fun int8ge(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8ge</code> as a field.
 */
fun int8ge(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8gt</code>
 */
fun int8gt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8gt</code> as a field.
 */
fun int8gt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8gt</code> as a field.
 */
fun int8gt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8in(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Int8in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8in(
      __1: Any?
): Field<Long?> {
    val f = Int8in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8in(
      __1: Field<Any?>
): Field<Long?> {
    val f = Int8in()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8inc</code>
 */
fun int8inc(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8inc()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8inc</code> as a field.
 */
fun int8inc(
      __1: Long?
): Field<Long?> {
    val f = Int8inc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8inc</code> as a field.
 */
fun int8inc(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8inc()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8incAny(
      configuration: Configuration
    , __1: Long?
    , __2: Any?
): Long? {
    val f = Int8incAny()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8incAny(
      __1: Long?
    , __2: Any?
): Field<Long?> {
    val f = Int8incAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8incAny(
      __1: Field<Long?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = Int8incAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8inc_float8_float8</code>
 */
fun int8incFloat8Float8(
      configuration: Configuration
    , __1: Long?
    , __2: Double?
    , __3: Double?
): Long? {
    val f = Int8incFloat8Float8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8inc_float8_float8</code> as a field.
 */
fun int8incFloat8Float8(
      __1: Long?
    , __2: Double?
    , __3: Double?
): Field<Long?> {
    val f = Int8incFloat8Float8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8inc_float8_float8</code> as a field.
 */
fun int8incFloat8Float8(
      __1: Field<Long?>
    , __2: Field<Double?>
    , __3: Field<Double?>
): Field<Long?> {
    val f = Int8incFloat8Float8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8larger</code>
 */
fun int8larger(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8larger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8larger</code> as a field.
 */
fun int8larger(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8larger</code> as a field.
 */
fun int8larger(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8larger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8le</code>
 */
fun int8le(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8le</code> as a field.
 */
fun int8le(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8le</code> as a field.
 */
fun int8le(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8lt</code>
 */
fun int8lt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8lt</code> as a field.
 */
fun int8lt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8lt</code> as a field.
 */
fun int8lt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8mi</code>
 */
fun int8mi(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8mi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8mi</code> as a field.
 */
fun int8mi(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8mi</code> as a field.
 */
fun int8mi(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8mi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8mod</code>
 */
fun int8mod(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8mod()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8mod</code> as a field.
 */
fun int8mod(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8mod</code> as a field.
 */
fun int8mod(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8mod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8mul</code>
 */
fun int8mul(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8mul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8mul</code> as a field.
 */
fun int8mul(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8mul</code> as a field.
 */
fun int8mul(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8mul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange1(
      configuration: Configuration
): Any? {
    val f = Int8multirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange1(): Field<Any?> {
    val f = Int8multirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Int8multirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange2(
      __1: Any?
): Field<Any?> {
    val f = Int8multirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Int8multirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Int8multirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Int8multirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8multirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Int8multirange3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8ne</code>
 */
fun int8ne(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Int8ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8ne</code> as a field.
 */
fun int8ne(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Int8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8ne</code> as a field.
 */
fun int8ne(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Int8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8not</code>
 */
fun int8not(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8not()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8not</code> as a field.
 */
fun int8not(
      __1: Long?
): Field<Long?> {
    val f = Int8not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8not</code> as a field.
 */
fun int8not(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8not()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8or</code>
 */
fun int8or(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8or()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8or</code> as a field.
 */
fun int8or(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8or</code> as a field.
 */
fun int8or(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8out(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Int8out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8out(
      __1: Long?
): Field<Any?> {
    val f = Int8out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8out(
      __1: Field<Long?>
): Field<Any?> {
    val f = Int8out()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8pl</code>
 */
fun int8pl(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8pl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8pl</code> as a field.
 */
fun int8pl(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8pl</code> as a field.
 */
fun int8pl(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8pl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8plInet(
      configuration: Configuration
    , __1: Long?
    , __2: Any?
): Any? {
    val f = Int8plInet()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8plInet(
      __1: Long?
    , __2: Any?
): Field<Any?> {
    val f = Int8plInet()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8plInet(
      __1: Field<Long?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Int8plInet()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range1(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Any? {
    val f = Int8range1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range1(
      __1: Long?
    , __2: Long?
): Field<Any?> {
    val f = Int8range1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range1(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = Int8range1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range2(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Any? {
    val f = Int8range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range2(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Any?> {
    val f = Int8range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8range2(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Int8range2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8rangeCanonical(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Int8rangeCanonical()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8rangeCanonical(
      __1: Any?
): Field<Any?> {
    val f = Int8rangeCanonical()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8rangeCanonical(
      __1: Field<Any?>
): Field<Any?> {
    val f = Int8rangeCanonical()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8range_subdiff</code>
 */
fun int8rangeSubdiff(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Double? {
    val f = Int8rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8range_subdiff</code> as a field.
 */
fun int8rangeSubdiff(
      __1: Long?
    , __2: Long?
): Field<Double?> {
    val f = Int8rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8range_subdiff</code> as a field.
 */
fun int8rangeSubdiff(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Double?> {
    val f = Int8rangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8recv(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Int8recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8recv(
      __1: Any?
): Field<Long?> {
    val f = Int8recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun int8recv(
      __1: Field<Any?>
): Field<Long?> {
    val f = Int8recv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8send</code>
 */
fun int8send(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = Int8send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8send</code> as a field.
 */
fun int8send(
      __1: Long?
): Field<ByteArray?> {
    val f = Int8send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8send</code> as a field.
 */
fun int8send(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = Int8send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8shl</code>
 */
fun int8shl(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int8shl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8shl</code> as a field.
 */
fun int8shl(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int8shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8shl</code> as a field.
 */
fun int8shl(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int8shl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8shr</code>
 */
fun int8shr(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Long? {
    val f = Int8shr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8shr</code> as a field.
 */
fun int8shr(
      __1: Long?
    , __2: Int?
): Field<Long?> {
    val f = Int8shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8shr</code> as a field.
 */
fun int8shr(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Long?> {
    val f = Int8shr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8smaller</code>
 */
fun int8smaller(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8smaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8smaller</code> as a field.
 */
fun int8smaller(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8smaller</code> as a field.
 */
fun int8smaller(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8smaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8um</code>
 */
fun int8um(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8um()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8um</code> as a field.
 */
fun int8um(
      __1: Long?
): Field<Long?> {
    val f = Int8um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8um</code> as a field.
 */
fun int8um(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8um()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8up</code>
 */
fun int8up(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Int8up()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8up</code> as a field.
 */
fun int8up(
      __1: Long?
): Field<Long?> {
    val f = Int8up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8up</code> as a field.
 */
fun int8up(
      __1: Field<Long?>
): Field<Long?> {
    val f = Int8up()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.int8xor</code>
 */
fun int8xor(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Int8xor()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.int8xor</code> as a field.
 */
fun int8xor(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Int8xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.int8xor</code> as a field.
 */
fun int8xor(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Int8xor()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.integer_pl_date</code>
 */
fun integerPlDate(
      configuration: Configuration
    , __1: Int?
    , __2: LocalDate?
): LocalDate? {
    val f = IntegerPlDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.integer_pl_date</code> as a field.
 */
fun integerPlDate(
      __1: Int?
    , __2: LocalDate?
): Field<LocalDate?> {
    val f = IntegerPlDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.integer_pl_date</code> as a field.
 */
fun integerPlDate(
      __1: Field<Int?>
    , __2: Field<LocalDate?>
): Field<LocalDate?> {
    val f = IntegerPlDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interLb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = InterLb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interLb(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = InterLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interLb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = InterLb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = InterSb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSb(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = InterSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = InterSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = InterSl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSl(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = InterSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun interSl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = InterSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InternalIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalIn(
      __1: Any?
): Field<Any?> {
    val f = InternalIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = InternalIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = InternalOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalOut(
      __1: Any?
): Field<Any?> {
    val f = InternalOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun internalOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = InternalOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval</code>
 */
fun interval1(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: Int?
): YearToSecond? {
    val f = Interval1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval</code> as a field.
 */
fun interval1(
      __1: YearToSecond?
    , __2: Int?
): Field<YearToSecond?> {
    val f = Interval1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval</code> as a field.
 */
fun interval1(
      __1: Field<YearToSecond?>
    , __2: Field<Int?>
): Field<YearToSecond?> {
    val f = Interval1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval</code>
 */
fun interval2(
      configuration: Configuration
    , __1: LocalTime?
): YearToSecond? {
    val f = Interval2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval</code> as a field.
 */
fun interval2(
      __1: LocalTime?
): Field<YearToSecond?> {
    val f = Interval2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval</code> as a field.
 */
fun interval2(
      __1: Field<LocalTime?>
): Field<YearToSecond?> {
    val f = Interval2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_accum</code>
 */
fun intervalAccum(
      configuration: Configuration
    , __1: Array<YearToSecond?>?
    , __2: YearToSecond?
): Array<YearToSecond?>? {
    val f = IntervalAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_accum</code> as a field.
 */
fun intervalAccum(
      __1: Array<YearToSecond?>?
    , __2: YearToSecond?
): Field<Array<YearToSecond?>?> {
    val f = IntervalAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_accum</code> as a field.
 */
fun intervalAccum(
      __1: Field<Array<YearToSecond?>?>
    , __2: Field<YearToSecond?>
): Field<Array<YearToSecond?>?> {
    val f = IntervalAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_accum_inv</code>
 */
fun intervalAccumInv(
      configuration: Configuration
    , __1: Array<YearToSecond?>?
    , __2: YearToSecond?
): Array<YearToSecond?>? {
    val f = IntervalAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_accum_inv</code> as a field.
 */
fun intervalAccumInv(
      __1: Array<YearToSecond?>?
    , __2: YearToSecond?
): Field<Array<YearToSecond?>?> {
    val f = IntervalAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_accum_inv</code> as a field.
 */
fun intervalAccumInv(
      __1: Field<Array<YearToSecond?>?>
    , __2: Field<YearToSecond?>
): Field<Array<YearToSecond?>?> {
    val f = IntervalAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_avg</code>
 */
fun intervalAvg(
      configuration: Configuration
    , __1: Array<YearToSecond?>?
): YearToSecond? {
    val f = IntervalAvg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_avg</code> as a field.
 */
fun intervalAvg(
      __1: Array<YearToSecond?>?
): Field<YearToSecond?> {
    val f = IntervalAvg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_avg</code> as a field.
 */
fun intervalAvg(
      __1: Field<Array<YearToSecond?>?>
): Field<YearToSecond?> {
    val f = IntervalAvg()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_cmp</code>
 */
fun intervalCmp(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Int? {
    val f = IntervalCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_cmp</code> as a field.
 */
fun intervalCmp(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Int?> {
    val f = IntervalCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_cmp</code> as a field.
 */
fun intervalCmp(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Int?> {
    val f = IntervalCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_combine</code>
 */
fun intervalCombine(
      configuration: Configuration
    , __1: Array<YearToSecond?>?
    , __2: Array<YearToSecond?>?
): Array<YearToSecond?>? {
    val f = IntervalCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_combine</code> as a field.
 */
fun intervalCombine(
      __1: Array<YearToSecond?>?
    , __2: Array<YearToSecond?>?
): Field<Array<YearToSecond?>?> {
    val f = IntervalCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_combine</code> as a field.
 */
fun intervalCombine(
      __1: Field<Array<YearToSecond?>?>
    , __2: Field<Array<YearToSecond?>?>
): Field<Array<YearToSecond?>?> {
    val f = IntervalCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_div</code>
 */
fun intervalDiv(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: Double?
): YearToSecond? {
    val f = IntervalDiv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_div</code> as a field.
 */
fun intervalDiv(
      __1: YearToSecond?
    , __2: Double?
): Field<YearToSecond?> {
    val f = IntervalDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_div</code> as a field.
 */
fun intervalDiv(
      __1: Field<YearToSecond?>
    , __2: Field<Double?>
): Field<YearToSecond?> {
    val f = IntervalDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_eq</code>
 */
fun intervalEq(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_eq</code> as a field.
 */
fun intervalEq(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_eq</code> as a field.
 */
fun intervalEq(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_ge</code>
 */
fun intervalGe(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_ge</code> as a field.
 */
fun intervalGe(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_ge</code> as a field.
 */
fun intervalGe(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_gt</code>
 */
fun intervalGt(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_gt</code> as a field.
 */
fun intervalGt(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_gt</code> as a field.
 */
fun intervalGt(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_hash</code>
 */
fun intervalHash(
      configuration: Configuration
    , __1: YearToSecond?
): Int? {
    val f = IntervalHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_hash</code> as a field.
 */
fun intervalHash(
      __1: YearToSecond?
): Field<Int?> {
    val f = IntervalHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_hash</code> as a field.
 */
fun intervalHash(
      __1: Field<YearToSecond?>
): Field<Int?> {
    val f = IntervalHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_hash_extended</code>
 */
fun intervalHashExtended(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: Long?
): Long? {
    val f = IntervalHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_hash_extended</code> as a field.
 */
fun intervalHashExtended(
      __1: YearToSecond?
    , __2: Long?
): Field<Long?> {
    val f = IntervalHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_hash_extended</code> as a field.
 */
fun intervalHashExtended(
      __1: Field<YearToSecond?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = IntervalHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): YearToSecond? {
    val f = IntervalIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<YearToSecond?> {
    val f = IntervalIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<YearToSecond?> {
    val f = IntervalIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_larger</code>
 */
fun intervalLarger(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): YearToSecond? {
    val f = IntervalLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_larger</code> as a field.
 */
fun intervalLarger(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = IntervalLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_larger</code> as a field.
 */
fun intervalLarger(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = IntervalLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_le</code>
 */
fun intervalLe(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_le</code> as a field.
 */
fun intervalLe(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_le</code> as a field.
 */
fun intervalLe(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_lt</code>
 */
fun intervalLt(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_lt</code> as a field.
 */
fun intervalLt(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_lt</code> as a field.
 */
fun intervalLt(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_mi</code>
 */
fun intervalMi(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): YearToSecond? {
    val f = IntervalMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_mi</code> as a field.
 */
fun intervalMi(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = IntervalMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_mi</code> as a field.
 */
fun intervalMi(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = IntervalMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_mul</code>
 */
fun intervalMul(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: Double?
): YearToSecond? {
    val f = IntervalMul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_mul</code> as a field.
 */
fun intervalMul(
      __1: YearToSecond?
    , __2: Double?
): Field<YearToSecond?> {
    val f = IntervalMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_mul</code> as a field.
 */
fun intervalMul(
      __1: Field<YearToSecond?>
    , __2: Field<Double?>
): Field<YearToSecond?> {
    val f = IntervalMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_ne</code>
 */
fun intervalNe(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): Boolean? {
    val f = IntervalNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_ne</code> as a field.
 */
fun intervalNe(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<Boolean?> {
    val f = IntervalNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_ne</code> as a field.
 */
fun intervalNe(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<Boolean?> {
    val f = IntervalNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalOut(
      configuration: Configuration
    , __1: YearToSecond?
): Any? {
    val f = IntervalOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalOut(
      __1: YearToSecond?
): Field<Any?> {
    val f = IntervalOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalOut(
      __1: Field<YearToSecond?>
): Field<Any?> {
    val f = IntervalOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl</code>
 */
fun intervalPl(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): YearToSecond? {
    val f = IntervalPl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl</code> as a field.
 */
fun intervalPl(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = IntervalPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl</code> as a field.
 */
fun intervalPl(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = IntervalPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl_date</code>
 */
fun intervalPlDate(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: LocalDate?
): LocalDateTime? {
    val f = IntervalPlDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl_date</code> as a field.
 */
fun intervalPlDate(
      __1: YearToSecond?
    , __2: LocalDate?
): Field<LocalDateTime?> {
    val f = IntervalPlDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl_date</code> as a field.
 */
fun intervalPlDate(
      __1: Field<YearToSecond?>
    , __2: Field<LocalDate?>
): Field<LocalDateTime?> {
    val f = IntervalPlDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl_time</code>
 */
fun intervalPlTime(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: LocalTime?
): LocalTime? {
    val f = IntervalPlTime()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl_time</code> as a field.
 */
fun intervalPlTime(
      __1: YearToSecond?
    , __2: LocalTime?
): Field<LocalTime?> {
    val f = IntervalPlTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl_time</code> as a field.
 */
fun intervalPlTime(
      __1: Field<YearToSecond?>
    , __2: Field<LocalTime?>
): Field<LocalTime?> {
    val f = IntervalPlTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl_timestamp</code>
 */
fun intervalPlTimestamp(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: LocalDateTime?
): LocalDateTime? {
    val f = IntervalPlTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl_timestamp</code> as a field.
 */
fun intervalPlTimestamp(
      __1: YearToSecond?
    , __2: LocalDateTime?
): Field<LocalDateTime?> {
    val f = IntervalPlTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl_timestamp</code> as a field.
 */
fun intervalPlTimestamp(
      __1: Field<YearToSecond?>
    , __2: Field<LocalDateTime?>
): Field<LocalDateTime?> {
    val f = IntervalPlTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl_timestamptz</code>
 */
fun intervalPlTimestamptz(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: OffsetDateTime?
): OffsetDateTime? {
    val f = IntervalPlTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl_timestamptz</code> as a field.
 */
fun intervalPlTimestamptz(
      __1: YearToSecond?
    , __2: OffsetDateTime?
): Field<OffsetDateTime?> {
    val f = IntervalPlTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl_timestamptz</code> as a field.
 */
fun intervalPlTimestamptz(
      __1: Field<YearToSecond?>
    , __2: Field<OffsetDateTime?>
): Field<OffsetDateTime?> {
    val f = IntervalPlTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_pl_timetz</code>
 */
fun intervalPlTimetz(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: OffsetTime?
): OffsetTime? {
    val f = IntervalPlTimetz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_pl_timetz</code> as a field.
 */
fun intervalPlTimetz(
      __1: YearToSecond?
    , __2: OffsetTime?
): Field<OffsetTime?> {
    val f = IntervalPlTimetz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_pl_timetz</code> as a field.
 */
fun intervalPlTimetz(
      __1: Field<YearToSecond?>
    , __2: Field<OffsetTime?>
): Field<OffsetTime?> {
    val f = IntervalPlTimetz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): YearToSecond? {
    val f = IntervalRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<YearToSecond?> {
    val f = IntervalRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<YearToSecond?> {
    val f = IntervalRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_send</code>
 */
fun intervalSend(
      configuration: Configuration
    , __1: YearToSecond?
): ByteArray? {
    val f = IntervalSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_send</code> as a field.
 */
fun intervalSend(
      __1: YearToSecond?
): Field<ByteArray?> {
    val f = IntervalSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_send</code> as a field.
 */
fun intervalSend(
      __1: Field<YearToSecond?>
): Field<ByteArray?> {
    val f = IntervalSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_smaller</code>
 */
fun intervalSmaller(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: YearToSecond?
): YearToSecond? {
    val f = IntervalSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_smaller</code> as a field.
 */
fun intervalSmaller(
      __1: YearToSecond?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = IntervalSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_smaller</code> as a field.
 */
fun intervalSmaller(
      __1: Field<YearToSecond?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = IntervalSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = IntervalSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalSupport(
      __1: Any?
): Field<Any?> {
    val f = IntervalSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervalSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = IntervalSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.interval_um</code>
 */
fun intervalUm(
      configuration: Configuration
    , __1: YearToSecond?
): YearToSecond? {
    val f = IntervalUm()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.interval_um</code> as a field.
 */
fun intervalUm(
      __1: YearToSecond?
): Field<YearToSecond?> {
    val f = IntervalUm()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.interval_um</code> as a field.
 */
fun intervalUm(
      __1: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = IntervalUm()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.intervaltypmodin</code>
 */
fun intervaltypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Intervaltypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.intervaltypmodin</code> as a field.
 */
fun intervaltypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Intervaltypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.intervaltypmodin</code> as a field.
 */
fun intervaltypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Intervaltypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervaltypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Intervaltypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervaltypmodout(
      __1: Int?
): Field<Any?> {
    val f = Intervaltypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun intervaltypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Intervaltypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.is_normalized</code>
 */
fun isNormalized(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = IsNormalized()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.is_normalized</code> as a field.
 */
fun isNormalized(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = IsNormalized()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.is_normalized</code> as a field.
 */
fun isNormalized(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = IsNormalized()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isclosed(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isclosed()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isclosed(
      __1: Any?
): Field<Boolean?> {
    val f = Isclosed()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isclosed(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isclosed()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty1(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isempty1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty1(
      __1: Any?
): Field<Boolean?> {
    val f = Isempty1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty1(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isempty1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isempty2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty2(
      __1: Any?
): Field<Boolean?> {
    val f = Isempty2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isempty2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isempty2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.isfinite</code>
 */
fun isfinite1(
      configuration: Configuration
    , __1: LocalDate?
): Boolean? {
    val f = Isfinite1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite1(
      __1: LocalDate?
): Field<Boolean?> {
    val f = Isfinite1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite1(
      __1: Field<LocalDate?>
): Field<Boolean?> {
    val f = Isfinite1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.isfinite</code>
 */
fun isfinite2(
      configuration: Configuration
    , __1: OffsetDateTime?
): Boolean? {
    val f = Isfinite2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite2(
      __1: OffsetDateTime?
): Field<Boolean?> {
    val f = Isfinite2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite2(
      __1: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = Isfinite2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.isfinite</code>
 */
fun isfinite3(
      configuration: Configuration
    , __1: YearToSecond?
): Boolean? {
    val f = Isfinite3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite3(
      __1: YearToSecond?
): Field<Boolean?> {
    val f = Isfinite3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite3(
      __1: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Isfinite3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.isfinite</code>
 */
fun isfinite4(
      configuration: Configuration
    , __1: LocalDateTime?
): Boolean? {
    val f = Isfinite4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite4(
      __1: LocalDateTime?
): Field<Boolean?> {
    val f = Isfinite4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.isfinite</code> as a field.
 */
fun isfinite4(
      __1: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = Isfinite4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Ishorizontal1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal1(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Ishorizontal1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Ishorizontal1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Ishorizontal2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal2(
      __1: Any?
): Field<Boolean?> {
    val f = Ishorizontal2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Ishorizontal2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal3(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Ishorizontal3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal3(
      __1: Any?
): Field<Boolean?> {
    val f = Ishorizontal3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ishorizontal3(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Ishorizontal3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859_1ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Iso8859_1ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859_1ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Iso8859_1ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859_1ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Iso8859_1ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Iso8859ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Iso8859ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun iso8859ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Iso8859ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToKoi8r(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = IsoToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToKoi8r(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = IsoToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToKoi8r(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = IsoToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = IsoToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = IsoToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = IsoToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin1251(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = IsoToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin1251(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = IsoToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin1251(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = IsoToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin866(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = IsoToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin866(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = IsoToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isoToWin866(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = IsoToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isopen(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isopen()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isopen(
      __1: Any?
): Field<Boolean?> {
    val f = Isopen()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isopen(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isopen()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Isparallel1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel1(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Isparallel1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Isparallel1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Isparallel2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel2(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Isparallel2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isparallel2(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Isparallel2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Isperp1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp1(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Isperp1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Isperp1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Isperp2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp2(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Isperp2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isperp2(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Isperp2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Isvertical1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical1(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Isvertical1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Isvertical1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isvertical2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical2(
      __1: Any?
): Field<Boolean?> {
    val f = Isvertical2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isvertical2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical3(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = Isvertical3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical3(
      __1: Any?
): Field<Boolean?> {
    val f = Isvertical3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun isvertical3(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = Isvertical3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun johabToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = JohabToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun johabToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = JohabToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun johabToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = JohabToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAgg(
      __1: Any?
): AggregateFunction<JSON?> {
    val f = JsonAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAgg(
      __1: Field<Any?>
): AggregateFunction<JSON?> {
    val f = JsonAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggFinalfn(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggFinalfn(
      __1: Any?
): Field<JSON?> {
    val f = JsonAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggFinalfn(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = JsonAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = JsonAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = JsonAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_array_element</code>
 */
fun jsonArrayElement(
      configuration: Configuration
    , fromJson: JSON?
    , elementIndex: Int?
): JSON? {
    val f = JsonArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_array_element</code> as a field.
 */
fun jsonArrayElement(
      fromJson: JSON?
    , elementIndex: Int?
): Field<JSON?> {
    val f = JsonArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_array_element</code> as a field.
 */
fun jsonArrayElement(
      fromJson: Field<JSON?>
    , elementIndex: Field<Int?>
): Field<JSON?> {
    val f = JsonArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_array_element_text</code>
 */
fun jsonArrayElementText(
      configuration: Configuration
    , fromJson: JSON?
    , elementIndex: Int?
): String? {
    val f = JsonArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_array_element_text</code> as a field.
 */
fun jsonArrayElementText(
      fromJson: JSON?
    , elementIndex: Int?
): Field<String?> {
    val f = JsonArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_array_element_text</code> as a field.
 */
fun jsonArrayElementText(
      fromJson: Field<JSON?>
    , elementIndex: Field<Int?>
): Field<String?> {
    val f = JsonArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_array_length</code>
 */
fun jsonArrayLength(
      configuration: Configuration
    , __1: JSON?
): Int? {
    val f = JsonArrayLength()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_array_length</code> as a field.
 */
fun jsonArrayLength(
      __1: JSON?
): Field<Int?> {
    val f = JsonArrayLength()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_array_length</code> as a field.
 */
fun jsonArrayLength(
      __1: Field<JSON?>
): Field<Int?> {
    val f = JsonArrayLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildArray1(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonBuildArray1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildArray1(
      __1: Any?
): Field<JSON?> {
    val f = JsonBuildArray1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildArray1(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonBuildArray1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_build_array</code>
 */
fun jsonBuildArray2(
      configuration: Configuration
): JSON? {
    val f = JsonBuildArray2()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_build_array</code> as a field.
 */
fun jsonBuildArray2(): Field<JSON?> {
    val f = JsonBuildArray2()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildObject1(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonBuildObject1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildObject1(
      __1: Any?
): Field<JSON?> {
    val f = JsonBuildObject1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonBuildObject1(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonBuildObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_build_object</code>
 */
fun jsonBuildObject2(
      configuration: Configuration
): JSON? {
    val f = JsonBuildObject2()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_build_object</code> as a field.
 */
fun jsonBuildObject2(): Field<JSON?> {
    val f = JsonBuildObject2()

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_extract_path</code>
 */
fun jsonExtractPath(
      configuration: Configuration
    , fromJson: JSON?
    , pathElems: Array<String?>?
): JSON? {
    val f = JsonExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_extract_path</code> as a field.
 */
fun jsonExtractPath(
      fromJson: JSON?
    , pathElems: Array<String?>?
): Field<JSON?> {
    val f = JsonExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_extract_path</code> as a field.
 */
fun jsonExtractPath(
      fromJson: Field<JSON?>
    , pathElems: Field<Array<String?>?>
): Field<JSON?> {
    val f = JsonExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_extract_path_text</code>
 */
fun jsonExtractPathText(
      configuration: Configuration
    , fromJson: JSON?
    , pathElems: Array<String?>?
): String? {
    val f = JsonExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_extract_path_text</code> as a field.
 */
fun jsonExtractPathText(
      fromJson: JSON?
    , pathElems: Array<String?>?
): Field<String?> {
    val f = JsonExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_extract_path_text</code> as a field.
 */
fun jsonExtractPathText(
      fromJson: Field<JSON?>
    , pathElems: Field<Array<String?>?>
): Field<String?> {
    val f = JsonExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonIn(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonIn(
      __1: Any?
): Field<JSON?> {
    val f = JsonIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonIn(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_object</code>
 */
fun jsonObject1(
      configuration: Configuration
    , __1: Array<String?>?
): JSON? {
    val f = JsonObject1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_object</code> as a field.
 */
fun jsonObject1(
      __1: Array<String?>?
): Field<JSON?> {
    val f = JsonObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_object</code> as a field.
 */
fun jsonObject1(
      __1: Field<Array<String?>?>
): Field<JSON?> {
    val f = JsonObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_object</code>
 */
fun jsonObject2(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: Array<String?>?
): JSON? {
    val f = JsonObject2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_object</code> as a field.
 */
fun jsonObject2(
      __1: Array<String?>?
    , __2: Array<String?>?
): Field<JSON?> {
    val f = JsonObject2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_object</code> as a field.
 */
fun jsonObject2(
      __1: Field<Array<String?>?>
    , __2: Field<Array<String?>?>
): Field<JSON?> {
    val f = JsonObject2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAgg(
      __1: Any?
    , __2: Any?
): AggregateFunction<JSON?> {
    val f = JsonObjectAgg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAgg(
      __1: Field<Any?>
    , __2: Field<Any?>
): AggregateFunction<JSON?> {
    val f = JsonObjectAgg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggFinalfn(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonObjectAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggFinalfn(
      __1: Any?
): Field<JSON?> {
    val f = JsonObjectAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggFinalfn(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonObjectAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = JsonObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggTransfn(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = JsonObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonObjectAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = JsonObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_object_field</code>
 */
fun jsonObjectField(
      configuration: Configuration
    , fromJson: JSON?
    , fieldName: String?
): JSON? {
    val f = JsonObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_object_field</code> as a field.
 */
fun jsonObjectField(
      fromJson: JSON?
    , fieldName: String?
): Field<JSON?> {
    val f = JsonObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_object_field</code> as a field.
 */
fun jsonObjectField(
      fromJson: Field<JSON?>
    , fieldName: Field<String?>
): Field<JSON?> {
    val f = JsonObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_object_field_text</code>
 */
fun jsonObjectFieldText(
      configuration: Configuration
    , fromJson: JSON?
    , fieldName: String?
): String? {
    val f = JsonObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_object_field_text</code> as a field.
 */
fun jsonObjectFieldText(
      fromJson: JSON?
    , fieldName: String?
): Field<String?> {
    val f = JsonObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_object_field_text</code> as a field.
 */
fun jsonObjectFieldText(
      fromJson: Field<JSON?>
    , fieldName: Field<String?>
): Field<String?> {
    val f = JsonObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonOut(
      configuration: Configuration
    , __1: JSON?
): Any? {
    val f = JsonOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonOut(
      __1: JSON?
): Field<Any?> {
    val f = JsonOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonOut(
      __1: Field<JSON?>
): Field<Any?> {
    val f = JsonOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecord(
      configuration: Configuration
    , base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): Any? {
    val f = JsonPopulateRecord()
    f.setBase(base)
    f.setFromJson(fromJson)
    f.setUseJsonAsText(useJsonAsText)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecord(
      base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): Field<Any?> {
    val f = JsonPopulateRecord()
    f.setBase(base)
    f.setFromJson(fromJson)
    f.setUseJsonAsText(useJsonAsText)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecord(
      base: Field<Any?>
    , fromJson: Field<JSON?>
    , useJsonAsText: Field<Boolean?>
): Field<Any?> {
    val f = JsonPopulateRecord()
    f.setBase(base)
    f.setFromJson(fromJson)
    f.setUseJsonAsText(useJsonAsText)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonRecv(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = JsonRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonRecv(
      __1: Any?
): Field<JSON?> {
    val f = JsonRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonRecv(
      __1: Field<Any?>
): Field<JSON?> {
    val f = JsonRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_send</code>
 */
fun jsonSend(
      configuration: Configuration
    , __1: JSON?
): ByteArray? {
    val f = JsonSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_send</code> as a field.
 */
fun jsonSend(
      __1: JSON?
): Field<ByteArray?> {
    val f = JsonSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_send</code> as a field.
 */
fun jsonSend(
      __1: Field<JSON?>
): Field<ByteArray?> {
    val f = JsonSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_strip_nulls</code>
 */
fun jsonStripNulls(
      configuration: Configuration
    , __1: JSON?
): JSON? {
    val f = JsonStripNulls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_strip_nulls</code> as a field.
 */
fun jsonStripNulls(
      __1: JSON?
): Field<JSON?> {
    val f = JsonStripNulls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_strip_nulls</code> as a field.
 */
fun jsonStripNulls(
      __1: Field<JSON?>
): Field<JSON?> {
    val f = JsonStripNulls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_to_record</code>
 */
fun jsonToRecord(
      configuration: Configuration
    , __1: JSON?
): Record? {
    val f = JsonToRecord()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_to_record</code> as a field.
 */
fun jsonToRecord(
      __1: JSON?
): Field<Record?> {
    val f = JsonToRecord()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_to_record</code> as a field.
 */
fun jsonToRecord(
      __1: Field<JSON?>
): Field<Record?> {
    val f = JsonToRecord()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector1(
      configuration: Configuration
    , __1: JSON?
    , __2: JSONB?
): Any? {
    val f = JsonToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector1(
      __1: JSON?
    , __2: JSONB?
): Field<Any?> {
    val f = JsonToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector1(
      __1: Field<JSON?>
    , __2: Field<JSONB?>
): Field<Any?> {
    val f = JsonToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector2(
      configuration: Configuration
    , __1: Any?
    , __2: JSON?
    , __3: JSONB?
): Any? {
    val f = JsonToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector2(
      __1: Any?
    , __2: JSON?
    , __3: JSONB?
): Field<Any?> {
    val f = JsonToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonToTsvector2(
      __1: Field<Any?>
    , __2: Field<JSON?>
    , __3: Field<JSONB?>
): Field<Any?> {
    val f = JsonToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.json_typeof</code>
 */
fun jsonTypeof(
      configuration: Configuration
    , __1: JSON?
): String? {
    val f = JsonTypeof()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.json_typeof</code> as a field.
 */
fun jsonTypeof(
      __1: JSON?
): Field<String?> {
    val f = JsonTypeof()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.json_typeof</code> as a field.
 */
fun jsonTypeof(
      __1: Field<JSON?>
): Field<String?> {
    val f = JsonTypeof()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAgg(
      __1: Any?
): AggregateFunction<JSONB?> {
    val f = JsonbAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAgg(
      __1: Field<Any?>
): AggregateFunction<JSONB?> {
    val f = JsonbAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggFinalfn(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggFinalfn(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggFinalfn(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = JsonbAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = JsonbAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = JsonbAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_array_element</code>
 */
fun jsonbArrayElement(
      configuration: Configuration
    , fromJson: JSONB?
    , elementIndex: Int?
): JSONB? {
    val f = JsonbArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_array_element</code> as a field.
 */
fun jsonbArrayElement(
      fromJson: JSONB?
    , elementIndex: Int?
): Field<JSONB?> {
    val f = JsonbArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_array_element</code> as a field.
 */
fun jsonbArrayElement(
      fromJson: Field<JSONB?>
    , elementIndex: Field<Int?>
): Field<JSONB?> {
    val f = JsonbArrayElement()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_array_element_text</code>
 */
fun jsonbArrayElementText(
      configuration: Configuration
    , fromJson: JSONB?
    , elementIndex: Int?
): String? {
    val f = JsonbArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_array_element_text</code> as a field.
 */
fun jsonbArrayElementText(
      fromJson: JSONB?
    , elementIndex: Int?
): Field<String?> {
    val f = JsonbArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_array_element_text</code> as a field.
 */
fun jsonbArrayElementText(
      fromJson: Field<JSONB?>
    , elementIndex: Field<Int?>
): Field<String?> {
    val f = JsonbArrayElementText()
    f.setFromJson(fromJson)
    f.setElementIndex(elementIndex)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_array_length</code>
 */
fun jsonbArrayLength(
      configuration: Configuration
    , __1: JSONB?
): Int? {
    val f = JsonbArrayLength()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_array_length</code> as a field.
 */
fun jsonbArrayLength(
      __1: JSONB?
): Field<Int?> {
    val f = JsonbArrayLength()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_array_length</code> as a field.
 */
fun jsonbArrayLength(
      __1: Field<JSONB?>
): Field<Int?> {
    val f = JsonbArrayLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildArray1(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbBuildArray1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildArray1(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbBuildArray1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildArray1(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbBuildArray1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_build_array</code>
 */
fun jsonbBuildArray2(
      configuration: Configuration
): JSONB? {
    val f = JsonbBuildArray2()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_build_array</code> as a field.
 */
fun jsonbBuildArray2(): Field<JSONB?> {
    val f = JsonbBuildArray2()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildObject1(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbBuildObject1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildObject1(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbBuildObject1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbBuildObject1(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbBuildObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_build_object</code>
 */
fun jsonbBuildObject2(
      configuration: Configuration
): JSONB? {
    val f = JsonbBuildObject2()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_build_object</code> as a field.
 */
fun jsonbBuildObject2(): Field<JSONB?> {
    val f = JsonbBuildObject2()

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_cmp</code>
 */
fun jsonbCmp(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Int? {
    val f = JsonbCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_cmp</code> as a field.
 */
fun jsonbCmp(
      __1: JSONB?
    , __2: JSONB?
): Field<Int?> {
    val f = JsonbCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_cmp</code> as a field.
 */
fun jsonbCmp(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Int?> {
    val f = JsonbCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_concat</code>
 */
fun jsonbConcat(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): JSONB? {
    val f = JsonbConcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_concat</code> as a field.
 */
fun jsonbConcat(
      __1: JSONB?
    , __2: JSONB?
): Field<JSONB?> {
    val f = JsonbConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_concat</code> as a field.
 */
fun jsonbConcat(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<JSONB?> {
    val f = JsonbConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_contained</code>
 */
fun jsonbContained(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbContained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_contained</code> as a field.
 */
fun jsonbContained(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_contained</code> as a field.
 */
fun jsonbContained(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_contains</code>
 */
fun jsonbContains(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbContains()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_contains</code> as a field.
 */
fun jsonbContains(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbContains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_contains</code> as a field.
 */
fun jsonbContains(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbContains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_delete</code>
 */
fun jsonbDelete1(
      configuration: Configuration
    , __1: JSONB?
    , __2: String?
): JSONB? {
    val f = JsonbDelete1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete1(
      __1: JSONB?
    , __2: String?
): Field<JSONB?> {
    val f = JsonbDelete1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete1(
      __1: Field<JSONB?>
    , __2: Field<String?>
): Field<JSONB?> {
    val f = JsonbDelete1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_delete</code>
 */
fun jsonbDelete2(
      configuration: Configuration
    , __1: JSONB?
    , __2: Int?
): JSONB? {
    val f = JsonbDelete2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete2(
      __1: JSONB?
    , __2: Int?
): Field<JSONB?> {
    val f = JsonbDelete2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete2(
      __1: Field<JSONB?>
    , __2: Field<Int?>
): Field<JSONB?> {
    val f = JsonbDelete2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_delete</code>
 */
fun jsonbDelete3(
      configuration: Configuration
    , fromJson: JSONB?
    , pathElems: Array<String?>?
): JSONB? {
    val f = JsonbDelete3()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete3(
      fromJson: JSONB?
    , pathElems: Array<String?>?
): Field<JSONB?> {
    val f = JsonbDelete3()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_delete</code> as a field.
 */
fun jsonbDelete3(
      fromJson: Field<JSONB?>
    , pathElems: Field<Array<String?>?>
): Field<JSONB?> {
    val f = JsonbDelete3()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_delete_path</code>
 */
fun jsonbDeletePath(
      configuration: Configuration
    , __1: JSONB?
    , __2: Array<String?>?
): JSONB? {
    val f = JsonbDeletePath()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_delete_path</code> as a field.
 */
fun jsonbDeletePath(
      __1: JSONB?
    , __2: Array<String?>?
): Field<JSONB?> {
    val f = JsonbDeletePath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_delete_path</code> as a field.
 */
fun jsonbDeletePath(
      __1: Field<JSONB?>
    , __2: Field<Array<String?>?>
): Field<JSONB?> {
    val f = JsonbDeletePath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_eq</code>
 */
fun jsonbEq(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_eq</code> as a field.
 */
fun jsonbEq(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_eq</code> as a field.
 */
fun jsonbEq(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_exists</code>
 */
fun jsonbExists(
      configuration: Configuration
    , __1: JSONB?
    , __2: String?
): Boolean? {
    val f = JsonbExists()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_exists</code> as a field.
 */
fun jsonbExists(
      __1: JSONB?
    , __2: String?
): Field<Boolean?> {
    val f = JsonbExists()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_exists</code> as a field.
 */
fun jsonbExists(
      __1: Field<JSONB?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = JsonbExists()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_exists_all</code>
 */
fun jsonbExistsAll(
      configuration: Configuration
    , __1: JSONB?
    , __2: Array<String?>?
): Boolean? {
    val f = JsonbExistsAll()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_exists_all</code> as a field.
 */
fun jsonbExistsAll(
      __1: JSONB?
    , __2: Array<String?>?
): Field<Boolean?> {
    val f = JsonbExistsAll()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_exists_all</code> as a field.
 */
fun jsonbExistsAll(
      __1: Field<JSONB?>
    , __2: Field<Array<String?>?>
): Field<Boolean?> {
    val f = JsonbExistsAll()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_exists_any</code>
 */
fun jsonbExistsAny(
      configuration: Configuration
    , __1: JSONB?
    , __2: Array<String?>?
): Boolean? {
    val f = JsonbExistsAny()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_exists_any</code> as a field.
 */
fun jsonbExistsAny(
      __1: JSONB?
    , __2: Array<String?>?
): Field<Boolean?> {
    val f = JsonbExistsAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_exists_any</code> as a field.
 */
fun jsonbExistsAny(
      __1: Field<JSONB?>
    , __2: Field<Array<String?>?>
): Field<Boolean?> {
    val f = JsonbExistsAny()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_extract_path</code>
 */
fun jsonbExtractPath(
      configuration: Configuration
    , fromJson: JSONB?
    , pathElems: Array<String?>?
): JSONB? {
    val f = JsonbExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_extract_path</code> as a field.
 */
fun jsonbExtractPath(
      fromJson: JSONB?
    , pathElems: Array<String?>?
): Field<JSONB?> {
    val f = JsonbExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_extract_path</code> as a field.
 */
fun jsonbExtractPath(
      fromJson: Field<JSONB?>
    , pathElems: Field<Array<String?>?>
): Field<JSONB?> {
    val f = JsonbExtractPath()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_extract_path_text</code>
 */
fun jsonbExtractPathText(
      configuration: Configuration
    , fromJson: JSONB?
    , pathElems: Array<String?>?
): String? {
    val f = JsonbExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_extract_path_text</code> as a field.
 */
fun jsonbExtractPathText(
      fromJson: JSONB?
    , pathElems: Array<String?>?
): Field<String?> {
    val f = JsonbExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_extract_path_text</code> as a field.
 */
fun jsonbExtractPathText(
      fromJson: Field<JSONB?>
    , pathElems: Field<Array<String?>?>
): Field<String?> {
    val f = JsonbExtractPathText()
    f.setFromJson(fromJson)
    f.setPathElems(pathElems)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_ge</code>
 */
fun jsonbGe(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_ge</code> as a field.
 */
fun jsonbGe(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_ge</code> as a field.
 */
fun jsonbGe(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_gt</code>
 */
fun jsonbGt(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_gt</code> as a field.
 */
fun jsonbGt(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_gt</code> as a field.
 */
fun jsonbGt(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_hash</code>
 */
fun jsonbHash(
      configuration: Configuration
    , __1: JSONB?
): Int? {
    val f = JsonbHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_hash</code> as a field.
 */
fun jsonbHash(
      __1: JSONB?
): Field<Int?> {
    val f = JsonbHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_hash</code> as a field.
 */
fun jsonbHash(
      __1: Field<JSONB?>
): Field<Int?> {
    val f = JsonbHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_hash_extended</code>
 */
fun jsonbHashExtended(
      configuration: Configuration
    , __1: JSONB?
    , __2: Long?
): Long? {
    val f = JsonbHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_hash_extended</code> as a field.
 */
fun jsonbHashExtended(
      __1: JSONB?
    , __2: Long?
): Field<Long?> {
    val f = JsonbHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_hash_extended</code> as a field.
 */
fun jsonbHashExtended(
      __1: Field<JSONB?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = JsonbHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbIn(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbIn(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbIn(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_insert</code>
 */
fun jsonbInsert(
      configuration: Configuration
    , jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , insertAfter: Boolean?
): JSONB? {
    val f = JsonbInsert()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setInsertAfter(insertAfter)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_insert</code> as a field.
 */
fun jsonbInsert(
      jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , insertAfter: Boolean?
): Field<JSONB?> {
    val f = JsonbInsert()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setInsertAfter(insertAfter)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_insert</code> as a field.
 */
fun jsonbInsert(
      jsonbIn: Field<JSONB?>
    , path: Field<Array<String?>?>
    , replacement: Field<JSONB?>
    , insertAfter: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbInsert()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setInsertAfter(insertAfter)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_le</code>
 */
fun jsonbLe(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_le</code> as a field.
 */
fun jsonbLe(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_le</code> as a field.
 */
fun jsonbLe(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_lt</code>
 */
fun jsonbLt(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_lt</code> as a field.
 */
fun jsonbLt(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_lt</code> as a field.
 */
fun jsonbLt(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_ne</code>
 */
fun jsonbNe(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Boolean? {
    val f = JsonbNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_ne</code> as a field.
 */
fun jsonbNe(
      __1: JSONB?
    , __2: JSONB?
): Field<Boolean?> {
    val f = JsonbNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_ne</code> as a field.
 */
fun jsonbNe(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Boolean?> {
    val f = JsonbNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_object</code>
 */
fun jsonbObject1(
      configuration: Configuration
    , __1: Array<String?>?
): JSONB? {
    val f = JsonbObject1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_object</code> as a field.
 */
fun jsonbObject1(
      __1: Array<String?>?
): Field<JSONB?> {
    val f = JsonbObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_object</code> as a field.
 */
fun jsonbObject1(
      __1: Field<Array<String?>?>
): Field<JSONB?> {
    val f = JsonbObject1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_object</code>
 */
fun jsonbObject2(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: Array<String?>?
): JSONB? {
    val f = JsonbObject2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_object</code> as a field.
 */
fun jsonbObject2(
      __1: Array<String?>?
    , __2: Array<String?>?
): Field<JSONB?> {
    val f = JsonbObject2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_object</code> as a field.
 */
fun jsonbObject2(
      __1: Field<Array<String?>?>
    , __2: Field<Array<String?>?>
): Field<JSONB?> {
    val f = JsonbObject2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAgg(
      __1: Any?
    , __2: Any?
): AggregateFunction<JSONB?> {
    val f = JsonbObjectAgg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAgg(
      __1: Field<Any?>
    , __2: Field<Any?>
): AggregateFunction<JSONB?> {
    val f = JsonbObjectAgg()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggFinalfn(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbObjectAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggFinalfn(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbObjectAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggFinalfn(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbObjectAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = JsonbObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggTransfn(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = JsonbObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbObjectAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = JsonbObjectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_object_field</code>
 */
fun jsonbObjectField(
      configuration: Configuration
    , fromJson: JSONB?
    , fieldName: String?
): JSONB? {
    val f = JsonbObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_object_field</code> as a field.
 */
fun jsonbObjectField(
      fromJson: JSONB?
    , fieldName: String?
): Field<JSONB?> {
    val f = JsonbObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_object_field</code> as a field.
 */
fun jsonbObjectField(
      fromJson: Field<JSONB?>
    , fieldName: Field<String?>
): Field<JSONB?> {
    val f = JsonbObjectField()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_object_field_text</code>
 */
fun jsonbObjectFieldText(
      configuration: Configuration
    , fromJson: JSONB?
    , fieldName: String?
): String? {
    val f = JsonbObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_object_field_text</code> as a field.
 */
fun jsonbObjectFieldText(
      fromJson: JSONB?
    , fieldName: String?
): Field<String?> {
    val f = JsonbObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_object_field_text</code> as a field.
 */
fun jsonbObjectFieldText(
      fromJson: Field<JSONB?>
    , fieldName: Field<String?>
): Field<String?> {
    val f = JsonbObjectFieldText()
    f.setFromJson(fromJson)
    f.setFieldName(fieldName)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbOut(
      configuration: Configuration
    , __1: JSONB?
): Any? {
    val f = JsonbOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbOut(
      __1: JSONB?
): Field<Any?> {
    val f = JsonbOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbOut(
      __1: Field<JSONB?>
): Field<Any?> {
    val f = JsonbOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExists(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Boolean? {
    val f = JsonbPathExists()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExists(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<Boolean?> {
    val f = JsonbPathExists()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExists(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<Boolean?> {
    val f = JsonbPathExists()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsOpr(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
): Boolean? {
    val f = JsonbPathExistsOpr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsOpr(
      __1: JSONB?
    , __2: Any?
): Field<Boolean?> {
    val f = JsonbPathExistsOpr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsOpr(
      __1: Field<JSONB?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = JsonbPathExistsOpr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsTz(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Boolean? {
    val f = JsonbPathExistsTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsTz(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<Boolean?> {
    val f = JsonbPathExistsTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathExistsTz(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<Boolean?> {
    val f = JsonbPathExistsTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatch(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Boolean? {
    val f = JsonbPathMatch()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatch(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<Boolean?> {
    val f = JsonbPathMatch()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatch(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<Boolean?> {
    val f = JsonbPathMatch()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchOpr(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
): Boolean? {
    val f = JsonbPathMatchOpr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchOpr(
      __1: JSONB?
    , __2: Any?
): Field<Boolean?> {
    val f = JsonbPathMatchOpr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchOpr(
      __1: Field<JSONB?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = JsonbPathMatchOpr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchTz(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Boolean? {
    val f = JsonbPathMatchTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchTz(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<Boolean?> {
    val f = JsonbPathMatchTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathMatchTz(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<Boolean?> {
    val f = JsonbPathMatchTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArray(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JSONB? {
    val f = JsonbPathQueryArray()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArray(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<JSONB?> {
    val f = JsonbPathQueryArray()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArray(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbPathQueryArray()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArrayTz(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JSONB? {
    val f = JsonbPathQueryArrayTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArrayTz(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<JSONB?> {
    val f = JsonbPathQueryArrayTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryArrayTz(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbPathQueryArrayTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirst(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JSONB? {
    val f = JsonbPathQueryFirst()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirst(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<JSONB?> {
    val f = JsonbPathQueryFirst()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirst(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbPathQueryFirst()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirstTz(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JSONB? {
    val f = JsonbPathQueryFirstTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirstTz(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Field<JSONB?> {
    val f = JsonbPathQueryFirstTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryFirstTz(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbPathQueryFirstTz()
    f.setTarget(target)
    f.setPath(path)
    f.setVars(vars)
    f.setSilent(silent)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecord(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
): Any? {
    val f = JsonbPopulateRecord()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecord(
      __1: Any?
    , __2: JSONB?
): Field<Any?> {
    val f = JsonbPopulateRecord()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecord(
      __1: Field<Any?>
    , __2: Field<JSONB?>
): Field<Any?> {
    val f = JsonbPopulateRecord()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_pretty</code>
 */
fun jsonbPretty(
      configuration: Configuration
    , __1: JSONB?
): String? {
    val f = JsonbPretty()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_pretty</code> as a field.
 */
fun jsonbPretty(
      __1: JSONB?
): Field<String?> {
    val f = JsonbPretty()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_pretty</code> as a field.
 */
fun jsonbPretty(
      __1: Field<JSONB?>
): Field<String?> {
    val f = JsonbPretty()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbRecv(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = JsonbRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbRecv(
      __1: Any?
): Field<JSONB?> {
    val f = JsonbRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbRecv(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = JsonbRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_send</code>
 */
fun jsonbSend(
      configuration: Configuration
    , __1: JSONB?
): ByteArray? {
    val f = JsonbSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_send</code> as a field.
 */
fun jsonbSend(
      __1: JSONB?
): Field<ByteArray?> {
    val f = JsonbSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_send</code> as a field.
 */
fun jsonbSend(
      __1: Field<JSONB?>
): Field<ByteArray?> {
    val f = JsonbSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_set</code>
 */
fun jsonbSet(
      configuration: Configuration
    , jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , createIfMissing: Boolean?
): JSONB? {
    val f = JsonbSet()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_set</code> as a field.
 */
fun jsonbSet(
      jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , createIfMissing: Boolean?
): Field<JSONB?> {
    val f = JsonbSet()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_set</code> as a field.
 */
fun jsonbSet(
      jsonbIn: Field<JSONB?>
    , path: Field<Array<String?>?>
    , replacement: Field<JSONB?>
    , createIfMissing: Field<Boolean?>
): Field<JSONB?> {
    val f = JsonbSet()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_set_lax</code>
 */
fun jsonbSetLax(
      configuration: Configuration
    , jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , createIfMissing: Boolean?
    , nullValueTreatment: String?
): JSONB? {
    val f = JsonbSetLax()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)
    f.setNullValueTreatment(nullValueTreatment)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_set_lax</code> as a field.
 */
fun jsonbSetLax(
      jsonbIn: JSONB?
    , path: Array<String?>?
    , replacement: JSONB?
    , createIfMissing: Boolean?
    , nullValueTreatment: String?
): Field<JSONB?> {
    val f = JsonbSetLax()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)
    f.setNullValueTreatment(nullValueTreatment)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_set_lax</code> as a field.
 */
fun jsonbSetLax(
      jsonbIn: Field<JSONB?>
    , path: Field<Array<String?>?>
    , replacement: Field<JSONB?>
    , createIfMissing: Field<Boolean?>
    , nullValueTreatment: Field<String?>
): Field<JSONB?> {
    val f = JsonbSetLax()
    f.setJsonbIn(jsonbIn)
    f.setPath(path)
    f.setReplacement(replacement)
    f.setCreateIfMissing(createIfMissing)
    f.setNullValueTreatment(nullValueTreatment)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_strip_nulls</code>
 */
fun jsonbStripNulls(
      configuration: Configuration
    , __1: JSONB?
): JSONB? {
    val f = JsonbStripNulls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_strip_nulls</code> as a field.
 */
fun jsonbStripNulls(
      __1: JSONB?
): Field<JSONB?> {
    val f = JsonbStripNulls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_strip_nulls</code> as a field.
 */
fun jsonbStripNulls(
      __1: Field<JSONB?>
): Field<JSONB?> {
    val f = JsonbStripNulls()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbSubscriptHandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = JsonbSubscriptHandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbSubscriptHandler(
      __1: Any?
): Field<Any?> {
    val f = JsonbSubscriptHandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbSubscriptHandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = JsonbSubscriptHandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_to_record</code>
 */
fun jsonbToRecord(
      configuration: Configuration
    , __1: JSONB?
): Record? {
    val f = JsonbToRecord()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_to_record</code> as a field.
 */
fun jsonbToRecord(
      __1: JSONB?
): Field<Record?> {
    val f = JsonbToRecord()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_to_record</code> as a field.
 */
fun jsonbToRecord(
      __1: Field<JSONB?>
): Field<Record?> {
    val f = JsonbToRecord()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector1(
      configuration: Configuration
    , __1: JSONB?
    , __2: JSONB?
): Any? {
    val f = JsonbToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector1(
      __1: JSONB?
    , __2: JSONB?
): Field<Any?> {
    val f = JsonbToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector1(
      __1: Field<JSONB?>
    , __2: Field<JSONB?>
): Field<Any?> {
    val f = JsonbToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector2(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
    , __3: JSONB?
): Any? {
    val f = JsonbToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector2(
      __1: Any?
    , __2: JSONB?
    , __3: JSONB?
): Field<Any?> {
    val f = JsonbToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbToTsvector2(
      __1: Field<Any?>
    , __2: Field<JSONB?>
    , __3: Field<JSONB?>
): Field<Any?> {
    val f = JsonbToTsvector2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.jsonb_typeof</code>
 */
fun jsonbTypeof(
      configuration: Configuration
    , __1: JSONB?
): String? {
    val f = JsonbTypeof()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.jsonb_typeof</code> as a field.
 */
fun jsonbTypeof(
      __1: JSONB?
): Field<String?> {
    val f = JsonbTypeof()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.jsonb_typeof</code> as a field.
 */
fun jsonbTypeof(
      __1: Field<JSONB?>
): Field<String?> {
    val f = JsonbTypeof()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = JsonpathIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathIn(
      __1: Any?
): Field<Any?> {
    val f = JsonpathIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = JsonpathIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = JsonpathOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathOut(
      __1: Any?
): Field<Any?> {
    val f = JsonpathOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = JsonpathOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = JsonpathRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathRecv(
      __1: Any?
): Field<Any?> {
    val f = JsonpathRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = JsonpathRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = JsonpathSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathSend(
      __1: Any?
): Field<ByteArray?> {
    val f = JsonpathSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonpathSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = JsonpathSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.justify_days</code>
 */
fun justifyDays(
      configuration: Configuration
    , __1: YearToSecond?
): YearToSecond? {
    val f = JustifyDays()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.justify_days</code> as a field.
 */
fun justifyDays(
      __1: YearToSecond?
): Field<YearToSecond?> {
    val f = JustifyDays()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.justify_days</code> as a field.
 */
fun justifyDays(
      __1: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = JustifyDays()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.justify_hours</code>
 */
fun justifyHours(
      configuration: Configuration
    , __1: YearToSecond?
): YearToSecond? {
    val f = JustifyHours()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.justify_hours</code> as a field.
 */
fun justifyHours(
      __1: YearToSecond?
): Field<YearToSecond?> {
    val f = JustifyHours()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.justify_hours</code> as a field.
 */
fun justifyHours(
      __1: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = JustifyHours()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.justify_interval</code>
 */
fun justifyInterval(
      configuration: Configuration
    , __1: YearToSecond?
): YearToSecond? {
    val f = JustifyInterval()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.justify_interval</code> as a field.
 */
fun justifyInterval(
      __1: YearToSecond?
): Field<YearToSecond?> {
    val f = JustifyInterval()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.justify_interval</code> as a field.
 */
fun justifyInterval(
      __1: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = JustifyInterval()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToIso(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8rToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToIso(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8rToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToIso(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8rToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8rToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8rToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8rToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8rToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8rToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8rToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin1251(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8rToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin1251(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8rToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin1251(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8rToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin866(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8rToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin866(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8rToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8rToWin866(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8rToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8uToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Koi8uToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8uToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Koi8uToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun koi8uToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Koi8uToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Lag1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag1(
      __1: Any?
): Field<Any?> {
    val f = Lag1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Lag1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag2(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = Lag2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag2(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = Lag2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag2(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = Lag2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag3(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
    , __3: Any?
): Any? {
    val f = Lag3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag3(
      __1: Any?
    , __2: Int?
    , __3: Any?
): Field<Any?> {
    val f = Lag3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lag3(
      __1: Field<Any?>
    , __2: Field<Int?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = Lag3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LanguageHandlerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerIn(
      __1: Any?
): Field<Any?> {
    val f = LanguageHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = LanguageHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LanguageHandlerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerOut(
      __1: Any?
): Field<Any?> {
    val f = LanguageHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun languageHandlerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = LanguageHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lastValue(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LastValue()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lastValue(
      __1: Any?
): Field<Any?> {
    val f = LastValue()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lastValue(
      __1: Field<Any?>
): Field<Any?> {
    val f = LastValue()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lastval</code>
 */
fun lastval(
      configuration: Configuration
): Long? {
    val f = Lastval()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lastval</code> as a field.
 */
fun lastval(): Field<Long?> {
    val f = Lastval()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin1ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Latin1ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin1ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Latin1ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin1ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Latin1ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Latin2ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Latin2ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Latin2ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToWin1250(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Latin2ToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToWin1250(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Latin2ToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin2ToWin1250(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Latin2ToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin3ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Latin3ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin3ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Latin3ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin3ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Latin3ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin4ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Latin4ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin4ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Latin4ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun latin4ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Latin4ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lcm</code>
 */
fun lcm1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Lcm1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm1(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Lcm1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm1(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Lcm1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lcm</code>
 */
fun lcm2(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Lcm2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm2(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Lcm2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm2(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Lcm2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lcm</code>
 */
fun lcm3(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Lcm3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm3(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Lcm3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lcm</code> as a field.
 */
fun lcm3(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Lcm3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Lead1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead1(
      __1: Any?
): Field<Any?> {
    val f = Lead1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Lead1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead2(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = Lead2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead2(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = Lead2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead2(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = Lead2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead3(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
    , __3: Any?
): Any? {
    val f = Lead3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead3(
      __1: Any?
    , __2: Int?
    , __3: Any?
): Field<Any?> {
    val f = Lead3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lead3(
      __1: Field<Any?>
    , __2: Field<Int?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = Lead3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.left</code>
 */
fun left(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Left()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.left</code> as a field.
 */
fun left(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Left()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.left</code> as a field.
 */
fun left(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Left()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.length</code>
 */
fun length1(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Length1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length1(
      __1: String?
): Field<Int?> {
    val f = Length1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length1(
      __1: Field<String?>
): Field<Int?> {
    val f = Length1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.length</code>
 */
fun length2(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Length2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length2(
      __1: String?
): Field<Int?> {
    val f = Length2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length2(
      __1: Field<String?>
): Field<Int?> {
    val f = Length2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length3(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Length3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length3(
      __1: Any?
): Field<Double?> {
    val f = Length3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length3(
      __1: Field<Any?>
): Field<Double?> {
    val f = Length3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length4(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Length4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length4(
      __1: Any?
): Field<Double?> {
    val f = Length4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length4(
      __1: Field<Any?>
): Field<Double?> {
    val f = Length4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.length</code>
 */
fun length5(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Length5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length5(
      __1: String?
): Field<Int?> {
    val f = Length5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length5(
      __1: Field<String?>
): Field<Int?> {
    val f = Length5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.length</code>
 */
fun length6(
      configuration: Configuration
    , __1: ByteArray?
    , __2: String?
): Int? {
    val f = Length6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length6(
      __1: ByteArray?
    , __2: String?
): Field<Int?> {
    val f = Length6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length6(
      __1: Field<ByteArray?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Length6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.length</code>
 */
fun length7(
      configuration: Configuration
    , __1: ByteArray?
): Int? {
    val f = Length7()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length7(
      __1: ByteArray?
): Field<Int?> {
    val f = Length7()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.length</code> as a field.
 */
fun length7(
      __1: Field<ByteArray?>
): Field<Int?> {
    val f = Length7()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length8(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Length8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length8(
      __1: Any?
): Field<Int?> {
    val f = Length8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun length8(
      __1: Field<Any?>
): Field<Int?> {
    val f = Length8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.like</code>
 */
fun like1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Like1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like1(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Like1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Like1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.like</code>
 */
fun like2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Like2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like2(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Like2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Like2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.like</code>
 */
fun like3(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Like3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like3(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Like3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.like</code> as a field.
 */
fun like3(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Like3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.like_escape</code>
 */
fun likeEscape1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = LikeEscape1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.like_escape</code> as a field.
 */
fun likeEscape1(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = LikeEscape1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.like_escape</code> as a field.
 */
fun likeEscape1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = LikeEscape1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.like_escape</code>
 */
fun likeEscape2(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): ByteArray? {
    val f = LikeEscape2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.like_escape</code> as a field.
 */
fun likeEscape2(
      __1: ByteArray?
    , __2: ByteArray?
): Field<ByteArray?> {
    val f = LikeEscape2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.like_escape</code> as a field.
 */
fun likeEscape2(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<ByteArray?> {
    val f = LikeEscape2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Likejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Likejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Likejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Likesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Likesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun likesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Likesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun line(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Line()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun line(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Line()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun line(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Line()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = LineDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = LineDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = LineDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LineEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LineEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LineEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineHorizontal(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LineHorizontal()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineHorizontal(
      __1: Any?
): Field<Boolean?> {
    val f = LineHorizontal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineHorizontal(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LineHorizontal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LineIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIn(
      __1: Any?
): Field<Any?> {
    val f = LineIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = LineIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineInterpt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = LineInterpt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineInterpt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = LineInterpt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineInterpt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = LineInterpt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIntersect(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LineIntersect()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIntersect(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LineIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineIntersect(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LineIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LineOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineOut(
      __1: Any?
): Field<Any?> {
    val f = LineOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = LineOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineParallel(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LineParallel()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineParallel(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LineParallel()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineParallel(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LineParallel()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun linePerp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LinePerp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun linePerp(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LinePerp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun linePerp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LinePerp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LineRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineRecv(
      __1: Any?
): Field<Any?> {
    val f = LineRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = LineRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = LineSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineSend(
      __1: Any?
): Field<ByteArray?> {
    val f = LineSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = LineSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineVertical(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LineVertical()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineVertical(
      __1: Any?
): Field<Boolean?> {
    val f = LineVertical()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lineVertical(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LineVertical()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ln</code>
 */
fun ln1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Ln1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ln</code> as a field.
 */
fun ln1(
      __1: Double?
): Field<Double?> {
    val f = Ln1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ln</code> as a field.
 */
fun ln1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Ln1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ln</code>
 */
fun ln2(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Ln2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ln</code> as a field.
 */
fun ln2(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Ln2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ln</code> as a field.
 */
fun ln2(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Ln2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_close</code>
 */
fun loClose(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = LoClose()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_close</code> as a field.
 */
fun loClose(
      __1: Int?
): Field<Int?> {
    val f = LoClose()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_close</code> as a field.
 */
fun loClose(
      __1: Field<Int?>
): Field<Int?> {
    val f = LoClose()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_creat</code>
 */
fun loCreat(
      configuration: Configuration
    , __1: Int?
): Long? {
    val f = LoCreat()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_creat</code> as a field.
 */
fun loCreat(
      __1: Int?
): Field<Long?> {
    val f = LoCreat()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_creat</code> as a field.
 */
fun loCreat(
      __1: Field<Int?>
): Field<Long?> {
    val f = LoCreat()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_create</code>
 */
fun loCreate(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = LoCreate()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_create</code> as a field.
 */
fun loCreate(
      __1: Long?
): Field<Long?> {
    val f = LoCreate()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_create</code> as a field.
 */
fun loCreate(
      __1: Field<Long?>
): Field<Long?> {
    val f = LoCreate()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_export</code>
 */
fun loExport(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Int? {
    val f = LoExport()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_export</code> as a field.
 */
fun loExport(
      __1: Long?
    , __2: String?
): Field<Int?> {
    val f = LoExport()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_export</code> as a field.
 */
fun loExport(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Int?> {
    val f = LoExport()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_from_bytea</code>
 */
fun loFromBytea(
      configuration: Configuration
    , __1: Long?
    , __2: ByteArray?
): Long? {
    val f = LoFromBytea()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_from_bytea</code> as a field.
 */
fun loFromBytea(
      __1: Long?
    , __2: ByteArray?
): Field<Long?> {
    val f = LoFromBytea()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_from_bytea</code> as a field.
 */
fun loFromBytea(
      __1: Field<Long?>
    , __2: Field<ByteArray?>
): Field<Long?> {
    val f = LoFromBytea()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_get</code>
 */
fun loGet1(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = LoGet1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_get</code> as a field.
 */
fun loGet1(
      __1: Long?
): Field<ByteArray?> {
    val f = LoGet1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_get</code> as a field.
 */
fun loGet1(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = LoGet1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_get</code>
 */
fun loGet2(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: Int?
): ByteArray? {
    val f = LoGet2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_get</code> as a field.
 */
fun loGet2(
      __1: Long?
    , __2: Long?
    , __3: Int?
): Field<ByteArray?> {
    val f = LoGet2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_get</code> as a field.
 */
fun loGet2(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = LoGet2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_import</code>
 */
fun loImport1(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = LoImport1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_import</code> as a field.
 */
fun loImport1(
      __1: String?
): Field<Long?> {
    val f = LoImport1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_import</code> as a field.
 */
fun loImport1(
      __1: Field<String?>
): Field<Long?> {
    val f = LoImport1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_import</code>
 */
fun loImport2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): Long? {
    val f = LoImport2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_import</code> as a field.
 */
fun loImport2(
      __1: String?
    , __2: Long?
): Field<Long?> {
    val f = LoImport2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_import</code> as a field.
 */
fun loImport2(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = LoImport2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_lseek</code>
 */
fun loLseek(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Int?
): Int? {
    val f = LoLseek()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_lseek</code> as a field.
 */
fun loLseek(
      __1: Int?
    , __2: Int?
    , __3: Int?
): Field<Int?> {
    val f = LoLseek()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_lseek</code> as a field.
 */
fun loLseek(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<Int?> {
    val f = LoLseek()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_lseek64</code>
 */
fun loLseek64(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
    , __3: Int?
): Long? {
    val f = LoLseek64()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_lseek64</code> as a field.
 */
fun loLseek64(
      __1: Int?
    , __2: Long?
    , __3: Int?
): Field<Long?> {
    val f = LoLseek64()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_lseek64</code> as a field.
 */
fun loLseek64(
      __1: Field<Int?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Long?> {
    val f = LoLseek64()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_open</code>
 */
fun loOpen(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Int? {
    val f = LoOpen()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_open</code> as a field.
 */
fun loOpen(
      __1: Long?
    , __2: Int?
): Field<Int?> {
    val f = LoOpen()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_open</code> as a field.
 */
fun loOpen(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = LoOpen()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_put</code>
 */
fun loPut(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: ByteArray?
): Unit {
    val p = LoPut()
    p.set__1(__1)
    p.set__2(__2)
    p.set__3(__3)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.lo_tell</code>
 */
fun loTell(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = LoTell()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_tell</code> as a field.
 */
fun loTell(
      __1: Int?
): Field<Int?> {
    val f = LoTell()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_tell</code> as a field.
 */
fun loTell(
      __1: Field<Int?>
): Field<Int?> {
    val f = LoTell()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_tell64</code>
 */
fun loTell64(
      configuration: Configuration
    , __1: Int?
): Long? {
    val f = LoTell64()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_tell64</code> as a field.
 */
fun loTell64(
      __1: Int?
): Field<Long?> {
    val f = LoTell64()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_tell64</code> as a field.
 */
fun loTell64(
      __1: Field<Int?>
): Field<Long?> {
    val f = LoTell64()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_truncate</code>
 */
fun loTruncate(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = LoTruncate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_truncate</code> as a field.
 */
fun loTruncate(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = LoTruncate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_truncate</code> as a field.
 */
fun loTruncate(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = LoTruncate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_truncate64</code>
 */
fun loTruncate64(
      configuration: Configuration
    , __1: Int?
    , __2: Long?
): Int? {
    val f = LoTruncate64()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_truncate64</code> as a field.
 */
fun loTruncate64(
      __1: Int?
    , __2: Long?
): Field<Int?> {
    val f = LoTruncate64()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_truncate64</code> as a field.
 */
fun loTruncate64(
      __1: Field<Int?>
    , __2: Field<Long?>
): Field<Int?> {
    val f = LoTruncate64()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lo_unlink</code>
 */
fun loUnlink(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = LoUnlink()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lo_unlink</code> as a field.
 */
fun loUnlink(
      __1: Long?
): Field<Int?> {
    val f = LoUnlink()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lo_unlink</code> as a field.
 */
fun loUnlink(
      __1: Field<Long?>
): Field<Int?> {
    val f = LoUnlink()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.log</code>
 */
fun log1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Log1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log1(
      __1: Double?
): Field<Double?> {
    val f = Log1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Log1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.log</code>
 */
fun log2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Log2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log2(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Log2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log2(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Log2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.log</code>
 */
fun log3(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Log3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log3(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Log3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.log</code> as a field.
 */
fun log3(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Log3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.log10</code>
 */
fun log101(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Log101()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.log10</code> as a field.
 */
fun log101(
      __1: Double?
): Field<Double?> {
    val f = Log101()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.log10</code> as a field.
 */
fun log101(
      __1: Field<Double?>
): Field<Double?> {
    val f = Log101()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.log10</code>
 */
fun log102(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Log102()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.log10</code> as a field.
 */
fun log102(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Log102()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.log10</code> as a field.
 */
fun log102(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Log102()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.loread</code>
 */
fun loread(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): ByteArray? {
    val f = Loread()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.loread</code> as a field.
 */
fun loread(
      __1: Int?
    , __2: Int?
): Field<ByteArray?> {
    val f = Loread()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.loread</code> as a field.
 */
fun loread(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<ByteArray?> {
    val f = Loread()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Lower1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower1(
      __1: Any?
): Field<Any?> {
    val f = Lower1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Lower1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Lower2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower2(
      __1: Any?
): Field<Any?> {
    val f = Lower2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lower2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Lower2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lower</code>
 */
fun lower3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Lower3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lower</code> as a field.
 */
fun lower3(
      __1: String?
): Field<String?> {
    val f = Lower3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lower</code> as a field.
 */
fun lower3(
      __1: Field<String?>
): Field<String?> {
    val f = Lower3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc1(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LowerInc1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc1(
      __1: Any?
): Field<Boolean?> {
    val f = LowerInc1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc1(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LowerInc1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LowerInc2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc2(
      __1: Any?
): Field<Boolean?> {
    val f = LowerInc2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInc2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LowerInc2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf1(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LowerInf1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf1(
      __1: Any?
): Field<Boolean?> {
    val f = LowerInf1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf1(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LowerInf1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LowerInf2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf2(
      __1: Any?
): Field<Boolean?> {
    val f = LowerInf2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lowerInf2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LowerInf2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lowrite</code>
 */
fun lowrite(
      configuration: Configuration
    , __1: Int?
    , __2: ByteArray?
): Int? {
    val f = Lowrite()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lowrite</code> as a field.
 */
fun lowrite(
      __1: Int?
    , __2: ByteArray?
): Field<Int?> {
    val f = Lowrite()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lowrite</code> as a field.
 */
fun lowrite(
      __1: Field<Int?>
    , __2: Field<ByteArray?>
): Field<Int?> {
    val f = Lowrite()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lpad</code>
 */
fun lpad1(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: String?
): String? {
    val f = Lpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lpad</code> as a field.
 */
fun lpad1(
      __1: String?
    , __2: Int?
    , __3: String?
): Field<String?> {
    val f = Lpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lpad</code> as a field.
 */
fun lpad1(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<String?>
): Field<String?> {
    val f = Lpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.lpad</code>
 */
fun lpad2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Lpad2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.lpad</code> as a field.
 */
fun lpad2(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Lpad2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.lpad</code> as a field.
 */
fun lpad2(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Lpad2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Lseg1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg1(
      __1: Any?
): Field<Any?> {
    val f = Lseg1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Lseg1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Lseg2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg2(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Lseg2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lseg2(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Lseg2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegCenter(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LsegCenter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegCenter(
      __1: Any?
): Field<Any?> {
    val f = LsegCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegCenter(
      __1: Field<Any?>
): Field<Any?> {
    val f = LsegCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = LsegDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = LsegDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = LsegDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegHorizontal(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LsegHorizontal()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegHorizontal(
      __1: Any?
): Field<Boolean?> {
    val f = LsegHorizontal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegHorizontal(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LsegHorizontal()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LsegIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIn(
      __1: Any?
): Field<Any?> {
    val f = LsegIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = LsegIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegInterpt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = LsegInterpt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegInterpt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = LsegInterpt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegInterpt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = LsegInterpt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIntersect(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegIntersect()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIntersect(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegIntersect(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLength(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = LsegLength()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLength(
      __1: Any?
): Field<Double?> {
    val f = LsegLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLength(
      __1: Field<Any?>
): Field<Double?> {
    val f = LsegLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LsegOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegOut(
      __1: Any?
): Field<Any?> {
    val f = LsegOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = LsegOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegParallel(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegParallel()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegParallel(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegParallel()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegParallel(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegParallel()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegPerp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = LsegPerp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegPerp(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = LsegPerp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegPerp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = LsegPerp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = LsegRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegRecv(
      __1: Any?
): Field<Any?> {
    val f = LsegRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = LsegRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = LsegSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegSend(
      __1: Any?
): Field<ByteArray?> {
    val f = LsegSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = LsegSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegVertical(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = LsegVertical()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegVertical(
      __1: Any?
): Field<Boolean?> {
    val f = LsegVertical()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun lsegVertical(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = LsegVertical()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ltrim</code>
 */
fun ltrim1(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): ByteArray? {
    val f = Ltrim1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim1(
      __1: ByteArray?
    , __2: ByteArray?
): Field<ByteArray?> {
    val f = Ltrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim1(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Ltrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ltrim</code>
 */
fun ltrim2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Ltrim2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim2(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Ltrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Ltrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ltrim</code>
 */
fun ltrim3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Ltrim3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim3(
      __1: String?
): Field<String?> {
    val f = Ltrim3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ltrim</code> as a field.
 */
fun ltrim3(
      __1: Field<String?>
): Field<String?> {
    val f = Ltrim3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr(
      __1: Any?
): Field<Any?> {
    val f = Macaddr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8And(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Macaddr8And()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8And(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Macaddr8And()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8And(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Macaddr8And()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Cmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = Macaddr8Cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Cmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = Macaddr8Cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Cmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = Macaddr8Cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Eq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Eq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Eq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ge(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ge(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ge(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Gt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Gt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Gt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8In(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8In()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8In(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8In()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8In(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8In()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Le(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Le(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Le(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Lt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Lt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Lt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ne(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Macaddr8Ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ne(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Macaddr8Ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Ne(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Macaddr8Ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Not(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8Not()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Not(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8Not()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Not(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8Not()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Or(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = Macaddr8Or()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Or(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = Macaddr8Or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Or(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Macaddr8Or()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Out(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8Out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Out(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8Out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Out(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8Out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Recv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8Recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Recv(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8Recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Recv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8Recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Send(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Macaddr8Send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Send(
      __1: Any?
): Field<ByteArray?> {
    val f = Macaddr8Send()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Send(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Macaddr8Send()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Set7bit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Macaddr8Set7bit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Set7bit(
      __1: Any?
): Field<Any?> {
    val f = Macaddr8Set7bit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddr8Set7bit(
      __1: Field<Any?>
): Field<Any?> {
    val f = Macaddr8Set7bit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrAnd(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MacaddrAnd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrAnd(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MacaddrAnd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrAnd(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MacaddrAnd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = MacaddrCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = MacaddrCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = MacaddrCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MacaddrIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrIn(
      __1: Any?
): Field<Any?> {
    val f = MacaddrIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = MacaddrIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MacaddrNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MacaddrNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MacaddrNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNot(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MacaddrNot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNot(
      __1: Any?
): Field<Any?> {
    val f = MacaddrNot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrNot(
      __1: Field<Any?>
): Field<Any?> {
    val f = MacaddrNot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOr(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MacaddrOr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOr(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MacaddrOr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOr(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MacaddrOr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MacaddrOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOut(
      __1: Any?
): Field<Any?> {
    val f = MacaddrOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = MacaddrOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MacaddrRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrRecv(
      __1: Any?
): Field<Any?> {
    val f = MacaddrRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = MacaddrRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = MacaddrSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrSend(
      __1: Any?
): Field<ByteArray?> {
    val f = MacaddrSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = MacaddrSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun macaddrSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = MacaddrSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.make_date</code>
 */
fun makeDate(
      configuration: Configuration
    , year: Int?
    , month: Int?
    , day: Int?
): LocalDate? {
    val f = MakeDate()
    f.setYear(year)
    f.setMonth(month)
    f.setDay(day)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_date</code> as a field.
 */
fun makeDate(
      year: Int?
    , month: Int?
    , day: Int?
): Field<LocalDate?> {
    val f = MakeDate()
    f.setYear(year)
    f.setMonth(month)
    f.setDay(day)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_date</code> as a field.
 */
fun makeDate(
      year: Field<Int?>
    , month: Field<Int?>
    , day: Field<Int?>
): Field<LocalDate?> {
    val f = MakeDate()
    f.setYear(year)
    f.setMonth(month)
    f.setDay(day)

    return f.asField()
}

/**
 * Call <code>pg_catalog.make_interval</code>
 */
fun makeInterval(
      configuration: Configuration
    , years: Int?
    , months: Int?
    , weeks: Int?
    , days: Int?
    , hours: Int?
    , mins: Int?
    , secs: Double?
): YearToSecond? {
    val f = MakeInterval()
    f.setYears(years)
    f.setMonths(months)
    f.setWeeks(weeks)
    f.setDays(days)
    f.setHours(hours)
    f.setMins(mins)
    f.setSecs(secs)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_interval</code> as a field.
 */
fun makeInterval(
      years: Int?
    , months: Int?
    , weeks: Int?
    , days: Int?
    , hours: Int?
    , mins: Int?
    , secs: Double?
): Field<YearToSecond?> {
    val f = MakeInterval()
    f.setYears(years)
    f.setMonths(months)
    f.setWeeks(weeks)
    f.setDays(days)
    f.setHours(hours)
    f.setMins(mins)
    f.setSecs(secs)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_interval</code> as a field.
 */
fun makeInterval(
      years: Field<Int?>
    , months: Field<Int?>
    , weeks: Field<Int?>
    , days: Field<Int?>
    , hours: Field<Int?>
    , mins: Field<Int?>
    , secs: Field<Double?>
): Field<YearToSecond?> {
    val f = MakeInterval()
    f.setYears(years)
    f.setMonths(months)
    f.setWeeks(weeks)
    f.setDays(days)
    f.setHours(hours)
    f.setMins(mins)
    f.setSecs(secs)

    return f.asField()
}

/**
 * Call <code>pg_catalog.make_time</code>
 */
fun makeTime(
      configuration: Configuration
    , hour: Int?
    , min: Int?
    , sec: Double?
): LocalTime? {
    val f = MakeTime()
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_time</code> as a field.
 */
fun makeTime(
      hour: Int?
    , min: Int?
    , sec: Double?
): Field<LocalTime?> {
    val f = MakeTime()
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_time</code> as a field.
 */
fun makeTime(
      hour: Field<Int?>
    , min: Field<Int?>
    , sec: Field<Double?>
): Field<LocalTime?> {
    val f = MakeTime()
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Call <code>pg_catalog.make_timestamp</code>
 */
fun makeTimestamp(
      configuration: Configuration
    , year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
): LocalDateTime? {
    val f = MakeTimestamp()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_timestamp</code> as a field.
 */
fun makeTimestamp(
      year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
): Field<LocalDateTime?> {
    val f = MakeTimestamp()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_timestamp</code> as a field.
 */
fun makeTimestamp(
      year: Field<Int?>
    , month: Field<Int?>
    , mday: Field<Int?>
    , hour: Field<Int?>
    , min: Field<Int?>
    , sec: Field<Double?>
): Field<LocalDateTime?> {
    val f = MakeTimestamp()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Call <code>pg_catalog.make_timestamptz</code>
 */
fun makeTimestamptz1(
      configuration: Configuration
    , year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
): OffsetDateTime? {
    val f = MakeTimestamptz1()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_timestamptz</code> as a field.
 */
fun makeTimestamptz1(
      year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
): Field<OffsetDateTime?> {
    val f = MakeTimestamptz1()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_timestamptz</code> as a field.
 */
fun makeTimestamptz1(
      year: Field<Int?>
    , month: Field<Int?>
    , mday: Field<Int?>
    , hour: Field<Int?>
    , min: Field<Int?>
    , sec: Field<Double?>
): Field<OffsetDateTime?> {
    val f = MakeTimestamptz1()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)

    return f.asField()
}

/**
 * Call <code>pg_catalog.make_timestamptz</code>
 */
fun makeTimestamptz2(
      configuration: Configuration
    , year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
    , timezone: String?
): OffsetDateTime? {
    val f = MakeTimestamptz2()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)
    f.setTimezone(timezone)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.make_timestamptz</code> as a field.
 */
fun makeTimestamptz2(
      year: Int?
    , month: Int?
    , mday: Int?
    , hour: Int?
    , min: Int?
    , sec: Double?
    , timezone: String?
): Field<OffsetDateTime?> {
    val f = MakeTimestamptz2()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)
    f.setTimezone(timezone)

    return f.asField()
}

/**
 * Get <code>pg_catalog.make_timestamptz</code> as a field.
 */
fun makeTimestamptz2(
      year: Field<Int?>
    , month: Field<Int?>
    , mday: Field<Int?>
    , hour: Field<Int?>
    , min: Field<Int?>
    , sec: Field<Double?>
    , timezone: Field<String?>
): Field<OffsetDateTime?> {
    val f = MakeTimestamptz2()
    f.setYear(year)
    f.setMonth(month)
    f.setMday(mday)
    f.setHour(hour)
    f.setMin(min)
    f.setSec(sec)
    f.setTimezone(timezone)

    return f.asField()
}

/**
 * Call <code>pg_catalog.makeaclitem</code>
 */
fun makeaclitem(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
    , __4: Boolean?
): String? {
    val f = Makeaclitem()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.makeaclitem</code> as a field.
 */
fun makeaclitem(
      __1: Long?
    , __2: Long?
    , __3: String?
    , __4: Boolean?
): Field<String?> {
    val f = Makeaclitem()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.makeaclitem</code> as a field.
 */
fun makeaclitem(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
    , __4: Field<Boolean?>
): Field<String?> {
    val f = Makeaclitem()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun masklen(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Masklen()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun masklen(
      __1: Any?
): Field<Int?> {
    val f = Masklen()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun masklen(
      __1: Field<Any?>
): Field<Int?> {
    val f = Masklen()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Matchingjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Matchingjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Matchingjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Matchingsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Matchingsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun matchingsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Matchingsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max1(
      __1: Array<Any?>?
): AggregateFunction<Array<Any?>?> {
    val f = Max1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max1(
      __1: Field<Array<Any?>?>
): AggregateFunction<Array<Any?>?> {
    val f = Max1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max10(
      __1: OffsetTime?
): AggregateFunction<OffsetTime?> {
    val f = Max10()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max10(
      __1: Field<OffsetTime?>
): AggregateFunction<OffsetTime?> {
    val f = Max10()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max11(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Max11()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max11(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Max11()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max12(
      __1: LocalDateTime?
): AggregateFunction<LocalDateTime?> {
    val f = Max12()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max12(
      __1: Field<LocalDateTime?>
): AggregateFunction<LocalDateTime?> {
    val f = Max12()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max13(
      __1: OffsetDateTime?
): AggregateFunction<OffsetDateTime?> {
    val f = Max13()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max13(
      __1: Field<OffsetDateTime?>
): AggregateFunction<OffsetDateTime?> {
    val f = Max13()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max14(
      __1: YearToSecond?
): AggregateFunction<YearToSecond?> {
    val f = Max14()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max14(
      __1: Field<YearToSecond?>
): AggregateFunction<YearToSecond?> {
    val f = Max14()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max15(
      __1: String?
): AggregateFunction<String?> {
    val f = Max15()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max15(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Max15()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max16(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Max16()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max16(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Max16()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max17(
      __1: String?
): AggregateFunction<String?> {
    val f = Max17()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max17(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Max17()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max18(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Max18()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max18(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Max18()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max19(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Max19()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max19(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Max19()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max2(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Max2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max2(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Max2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max20(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Max20()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max20(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Max20()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max21(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Max21()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun max21(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Max21()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max3(
      __1: Int?
): AggregateFunction<Int?> {
    val f = Max3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max3(
      __1: Field<Int?>
): AggregateFunction<Int?> {
    val f = Max3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max4(
      __1: Short?
): AggregateFunction<Short?> {
    val f = Max4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max4(
      __1: Field<Short?>
): AggregateFunction<Short?> {
    val f = Max4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max5(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Max5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max5(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Max5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max6(
      __1: Float?
): AggregateFunction<Float?> {
    val f = Max6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max6(
      __1: Field<Float?>
): AggregateFunction<Float?> {
    val f = Max6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max7(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Max7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max7(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Max7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max8(
      __1: LocalDate?
): AggregateFunction<LocalDate?> {
    val f = Max8()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max8(
      __1: Field<LocalDate?>
): AggregateFunction<LocalDate?> {
    val f = Max8()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max9(
      __1: LocalTime?
): AggregateFunction<LocalTime?> {
    val f = Max9()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.max</code> as a field.
 */
fun max9(
      __1: Field<LocalTime?>
): AggregateFunction<LocalTime?> {
    val f = Max9()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.md5</code>
 */
fun md51(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Md51()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.md5</code> as a field.
 */
fun md51(
      __1: String?
): Field<String?> {
    val f = Md51()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.md5</code> as a field.
 */
fun md51(
      __1: Field<String?>
): Field<String?> {
    val f = Md51()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.md5</code>
 */
fun md52(
      configuration: Configuration
    , __1: ByteArray?
): String? {
    val f = Md52()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.md5</code> as a field.
 */
fun md52(
      __1: ByteArray?
): Field<String?> {
    val f = Md52()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.md5</code> as a field.
 */
fun md52(
      __1: Field<ByteArray?>
): Field<String?> {
    val f = Md52()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToBig5(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToBig5(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToBig5(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucCn(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucCn(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucCn(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucJp(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucJp(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucJp(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucKr(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucKr(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucKr(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucTw(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucTw(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToEucTw(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToIso(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToIso(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToIso(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToKoi8r(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToKoi8r(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToKoi8r(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToLatin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin1(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToLatin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin1(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToLatin1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin2(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin2(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin3(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToLatin3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin3(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToLatin3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin3(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToLatin3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin4(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToLatin4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin4(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToLatin4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToLatin4(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToLatin4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToSjis(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToSjis(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToSjis(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1250(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1250(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1250(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToWin1250()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1251(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1251(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin1251(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin866(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = MicToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin866(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = MicToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun micToWin866(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = MicToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min1(
      __1: Array<Any?>?
): AggregateFunction<Array<Any?>?> {
    val f = Min1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min1(
      __1: Field<Array<Any?>?>
): AggregateFunction<Array<Any?>?> {
    val f = Min1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min10(
      __1: OffsetTime?
): AggregateFunction<OffsetTime?> {
    val f = Min10()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min10(
      __1: Field<OffsetTime?>
): AggregateFunction<OffsetTime?> {
    val f = Min10()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min11(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Min11()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min11(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Min11()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min12(
      __1: LocalDateTime?
): AggregateFunction<LocalDateTime?> {
    val f = Min12()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min12(
      __1: Field<LocalDateTime?>
): AggregateFunction<LocalDateTime?> {
    val f = Min12()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min13(
      __1: OffsetDateTime?
): AggregateFunction<OffsetDateTime?> {
    val f = Min13()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min13(
      __1: Field<OffsetDateTime?>
): AggregateFunction<OffsetDateTime?> {
    val f = Min13()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min14(
      __1: YearToSecond?
): AggregateFunction<YearToSecond?> {
    val f = Min14()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min14(
      __1: Field<YearToSecond?>
): AggregateFunction<YearToSecond?> {
    val f = Min14()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min15(
      __1: String?
): AggregateFunction<String?> {
    val f = Min15()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min15(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Min15()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min16(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Min16()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min16(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Min16()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min17(
      __1: String?
): AggregateFunction<String?> {
    val f = Min17()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min17(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Min17()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min18(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Min18()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min18(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Min18()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min19(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Min19()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min19(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Min19()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min2(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Min2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min2(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Min2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min20(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Min20()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min20(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Min20()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min21(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Min21()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun min21(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Min21()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min3(
      __1: Int?
): AggregateFunction<Int?> {
    val f = Min3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min3(
      __1: Field<Int?>
): AggregateFunction<Int?> {
    val f = Min3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min4(
      __1: Short?
): AggregateFunction<Short?> {
    val f = Min4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min4(
      __1: Field<Short?>
): AggregateFunction<Short?> {
    val f = Min4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min5(
      __1: Long?
): AggregateFunction<Long?> {
    val f = Min5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min5(
      __1: Field<Long?>
): AggregateFunction<Long?> {
    val f = Min5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min6(
      __1: Float?
): AggregateFunction<Float?> {
    val f = Min6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min6(
      __1: Field<Float?>
): AggregateFunction<Float?> {
    val f = Min6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min7(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Min7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min7(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Min7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min8(
      __1: LocalDate?
): AggregateFunction<LocalDate?> {
    val f = Min8()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min8(
      __1: Field<LocalDate?>
): AggregateFunction<LocalDate?> {
    val f = Min8()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min9(
      __1: LocalTime?
): AggregateFunction<LocalTime?> {
    val f = Min9()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.min</code> as a field.
 */
fun min9(
      __1: Field<LocalTime?>
): AggregateFunction<LocalTime?> {
    val f = Min9()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.min_scale</code>
 */
fun minScale(
      configuration: Configuration
    , __1: BigDecimal?
): Int? {
    val f = MinScale()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.min_scale</code> as a field.
 */
fun minScale(
      __1: BigDecimal?
): Field<Int?> {
    val f = MinScale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.min_scale</code> as a field.
 */
fun minScale(
      __1: Field<BigDecimal?>
): Field<Int?> {
    val f = MinScale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mod</code>
 */
fun mod1(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Mod1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod1(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Mod1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod1(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Mod1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mod</code>
 */
fun mod2(
      configuration: Configuration
    , __1: Short?
    , __2: Short?
): Short? {
    val f = Mod2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod2(
      __1: Short?
    , __2: Short?
): Field<Short?> {
    val f = Mod2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod2(
      __1: Field<Short?>
    , __2: Field<Short?>
): Field<Short?> {
    val f = Mod2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mod</code>
 */
fun mod3(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Int? {
    val f = Mod3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod3(
      __1: Int?
    , __2: Int?
): Field<Int?> {
    val f = Mod3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod3(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Int?> {
    val f = Mod3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mod</code>
 */
fun mod4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Mod4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod4(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Mod4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mod</code> as a field.
 */
fun mod4(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Mod4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun mode(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Mode()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun mode(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Mode()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun modeFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = ModeFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun modeFinal(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = ModeFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun modeFinal(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = ModeFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money1(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Money1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money1(
      __1: Int?
): Field<Any?> {
    val f = Money1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money1(
      __1: Field<Int?>
): Field<Any?> {
    val f = Money1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money2(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Money2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money2(
      __1: Long?
): Field<Any?> {
    val f = Money2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money2(
      __1: Field<Long?>
): Field<Any?> {
    val f = Money2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money3(
      configuration: Configuration
    , __1: BigDecimal?
): Any? {
    val f = Money3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money3(
      __1: BigDecimal?
): Field<Any?> {
    val f = Money3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun money3(
      __1: Field<BigDecimal?>
): Field<Any?> {
    val f = Money3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mul_d_interval</code>
 */
fun mulDInterval(
      configuration: Configuration
    , __1: Double?
    , __2: YearToSecond?
): YearToSecond? {
    val f = MulDInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mul_d_interval</code> as a field.
 */
fun mulDInterval(
      __1: Double?
    , __2: YearToSecond?
): Field<YearToSecond?> {
    val f = MulDInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mul_d_interval</code> as a field.
 */
fun mulDInterval(
      __1: Field<Double?>
    , __2: Field<YearToSecond?>
): Field<YearToSecond?> {
    val f = MulDInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirange(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Multirange()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirange(
      __1: Any?
): Field<Any?> {
    val f = Multirange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirange(
      __1: Field<Any?>
): Field<Any?> {
    val f = Multirange()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeAdjacentRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeAdjacentRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAdjacentRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeAdjacentRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeAfterRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeAfterRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeAfterRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeAfterRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeBeforeRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeBeforeRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeBeforeRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeBeforeRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = MultirangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = MultirangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = MultirangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainedByRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeContainedByRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsElem(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsElem(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsElem(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeContainsRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeContainsRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeContainsRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeContainsRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MultirangeGistCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistCompress(
      __1: Any?
): Field<Any?> {
    val f = MultirangeGistCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = MultirangeGistCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = MultirangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = MultirangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGistConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = MultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = MultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = MultirangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersect(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MultirangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersect(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MultirangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersect(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MultirangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersectAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MultirangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersectAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MultirangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeIntersectAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MultirangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeMinus(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MultirangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeMinus(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MultirangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeMinus(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MultirangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = MultirangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOut(
      __1: Any?
): Field<Any?> {
    val f = MultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = MultirangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverlapsRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverlapsRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverlapsRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverlapsRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverleftRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverleftRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverleftRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverleftRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightRange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = MultirangeOverrightRange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightRange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = MultirangeOverrightRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeOverrightRange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeOverrightRange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = MultirangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = MultirangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = MultirangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = MultirangeSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeSend(
      __1: Any?
): Field<ByteArray?> {
    val f = MultirangeSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = MultirangeSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeTypanalyze(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = MultirangeTypanalyze()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeTypanalyze(
      __1: Any?
): Field<Boolean?> {
    val f = MultirangeTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeTypanalyze(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = MultirangeTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = MultirangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = MultirangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangeUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = MultirangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Multirangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Multirangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun multirangesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Multirangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.mxid_age</code>
 */
fun mxidAge(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = MxidAge()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.mxid_age</code> as a field.
 */
fun mxidAge(
      __1: Long?
): Field<Int?> {
    val f = MxidAge()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.mxid_age</code> as a field.
 */
fun mxidAge(
      __1: Field<Long?>
): Field<Int?> {
    val f = MxidAge()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.name</code>
 */
fun name1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Name1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name1(
      __1: String?
): Field<String?> {
    val f = Name1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name1(
      __1: Field<String?>
): Field<String?> {
    val f = Name1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.name</code>
 */
fun name2(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Name2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name2(
      __1: String?
): Field<String?> {
    val f = Name2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name2(
      __1: Field<String?>
): Field<String?> {
    val f = Name2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.name</code>
 */
fun name3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Name3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name3(
      __1: String?
): Field<String?> {
    val f = Name3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.name</code> as a field.
 */
fun name3(
      __1: Field<String?>
): Field<String?> {
    val f = Name3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameconcatoid</code>
 */
fun nameconcatoid(
      configuration: Configuration
    , __1: String?
    , __2: Long?
): String? {
    val f = Nameconcatoid()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameconcatoid</code> as a field.
 */
fun nameconcatoid(
      __1: String?
    , __2: Long?
): Field<String?> {
    val f = Nameconcatoid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameconcatoid</code> as a field.
 */
fun nameconcatoid(
      __1: Field<String?>
    , __2: Field<Long?>
): Field<String?> {
    val f = Nameconcatoid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameeq</code>
 */
fun nameeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameeq</code> as a field.
 */
fun nameeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameeq</code> as a field.
 */
fun nameeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameeqtext</code>
 */
fun nameeqtext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameeqtext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameeqtext</code> as a field.
 */
fun nameeqtext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameeqtext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameeqtext</code> as a field.
 */
fun nameeqtext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameeqtext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namege</code>
 */
fun namege(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namege()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namege</code> as a field.
 */
fun namege(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namege()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namege</code> as a field.
 */
fun namege(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namege()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namegetext</code>
 */
fun namegetext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namegetext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namegetext</code> as a field.
 */
fun namegetext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namegetext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namegetext</code> as a field.
 */
fun namegetext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namegetext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namegt</code>
 */
fun namegt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namegt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namegt</code> as a field.
 */
fun namegt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namegt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namegt</code> as a field.
 */
fun namegt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namegt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namegttext</code>
 */
fun namegttext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namegttext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namegttext</code> as a field.
 */
fun namegttext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namegttext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namegttext</code> as a field.
 */
fun namegttext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namegttext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameiclike</code>
 */
fun nameiclike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameiclike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameiclike</code> as a field.
 */
fun nameiclike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameiclike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameiclike</code> as a field.
 */
fun nameiclike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameiclike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameicnlike</code>
 */
fun nameicnlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameicnlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameicnlike</code> as a field.
 */
fun nameicnlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameicnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameicnlike</code> as a field.
 */
fun nameicnlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameicnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameicregexeq</code>
 */
fun nameicregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameicregexeq</code> as a field.
 */
fun nameicregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameicregexeq</code> as a field.
 */
fun nameicregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameicregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameicregexne</code>
 */
fun nameicregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameicregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameicregexne</code> as a field.
 */
fun nameicregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameicregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameicregexne</code> as a field.
 */
fun nameicregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameicregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namein(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Namein()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namein(
      __1: Any?
): Field<String?> {
    val f = Namein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namein(
      __1: Field<Any?>
): Field<String?> {
    val f = Namein()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namele</code>
 */
fun namele(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namele()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namele</code> as a field.
 */
fun namele(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namele()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namele</code> as a field.
 */
fun namele(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namele()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameletext</code>
 */
fun nameletext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameletext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameletext</code> as a field.
 */
fun nameletext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameletext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameletext</code> as a field.
 */
fun nameletext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameletext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namelike</code>
 */
fun namelike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namelike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namelike</code> as a field.
 */
fun namelike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namelike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namelike</code> as a field.
 */
fun namelike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namelike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namelt</code>
 */
fun namelt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namelt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namelt</code> as a field.
 */
fun namelt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namelt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namelt</code> as a field.
 */
fun namelt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namelt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namelttext</code>
 */
fun namelttext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namelttext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namelttext</code> as a field.
 */
fun namelttext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namelttext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namelttext</code> as a field.
 */
fun namelttext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namelttext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namene</code>
 */
fun namene(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namene()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namene</code> as a field.
 */
fun namene(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namene()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namene</code> as a field.
 */
fun namene(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namene()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namenetext</code>
 */
fun namenetext(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namenetext()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namenetext</code> as a field.
 */
fun namenetext(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namenetext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namenetext</code> as a field.
 */
fun namenetext(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namenetext()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namenlike</code>
 */
fun namenlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Namenlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namenlike</code> as a field.
 */
fun namenlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Namenlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namenlike</code> as a field.
 */
fun namenlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Namenlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nameout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Nameout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nameout(
      __1: String?
): Field<Any?> {
    val f = Nameout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nameout(
      __1: Field<String?>
): Field<Any?> {
    val f = Nameout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namerecv(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Namerecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namerecv(
      __1: Any?
): Field<String?> {
    val f = Namerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun namerecv(
      __1: Field<Any?>
): Field<String?> {
    val f = Namerecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameregexeq</code>
 */
fun nameregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameregexeq</code> as a field.
 */
fun nameregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameregexeq</code> as a field.
 */
fun nameregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.nameregexne</code>
 */
fun nameregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Nameregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.nameregexne</code> as a field.
 */
fun nameregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Nameregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.nameregexne</code> as a field.
 */
fun nameregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Nameregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.namesend</code>
 */
fun namesend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Namesend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.namesend</code> as a field.
 */
fun namesend(
      __1: String?
): Field<ByteArray?> {
    val f = Namesend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.namesend</code> as a field.
 */
fun namesend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Namesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Neqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Neqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Neqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Neqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Neqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun neqsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Neqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun netmask(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Netmask()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun netmask(
      __1: Any?
): Field<Any?> {
    val f = Netmask()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun netmask(
      __1: Field<Any?>
): Field<Any?> {
    val f = Netmask()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun network(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Network()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun network(
      __1: Any?
): Field<Any?> {
    val f = Network()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun network(
      __1: Field<Any?>
): Field<Any?> {
    val f = Network()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = NetworkCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = NetworkCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = NetworkCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLarger(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = NetworkLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLarger(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = NetworkLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLarger(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NetworkLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkOverlap(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkOverlap()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkOverlap(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkOverlap(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSmaller(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = NetworkSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSmaller(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = NetworkSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSmaller(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NetworkSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = NetworkSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSub(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkSub()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSub(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSub(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubeq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkSubeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubeq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkSubeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubeq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkSubeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubsetSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = NetworkSubsetSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubsetSupport(
      __1: Any?
): Field<Any?> {
    val f = NetworkSubsetSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSubsetSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = NetworkSubsetSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSup(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkSup()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSup(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkSup()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSup(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkSup()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSupeq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = NetworkSupeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSupeq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = NetworkSupeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkSupeq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = NetworkSupeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Networkjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Networkjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networkjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Networkjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networksel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Networksel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networksel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Networksel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun networksel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Networksel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nextval(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Nextval()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nextval(
      __1: Any?
): Field<Long?> {
    val f = Nextval()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nextval(
      __1: Field<Any?>
): Field<Long?> {
    val f = Nextval()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Nlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Nlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Nlikejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Nlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Nlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nlikesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Nlikesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.normalize</code>
 */
fun normalize(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Normalize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.normalize</code> as a field.
 */
fun normalize(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Normalize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.normalize</code> as a field.
 */
fun normalize(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Normalize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.notlike</code>
 */
fun notlike1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Notlike1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike1(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Notlike1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Notlike1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.notlike</code>
 */
fun notlike2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Notlike2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike2(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Notlike2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Notlike2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.notlike</code>
 */
fun notlike3(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Boolean? {
    val f = Notlike3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike3(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Boolean?> {
    val f = Notlike3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.notlike</code> as a field.
 */
fun notlike3(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Boolean?> {
    val f = Notlike3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.now</code>
 */
fun now(
      configuration: Configuration
): OffsetDateTime? {
    val f = Now()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.now</code> as a field.
 */
fun now(): Field<OffsetDateTime?> {
    val f = Now()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints1(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Npoints1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints1(
      __1: Any?
): Field<Int?> {
    val f = Npoints1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints1(
      __1: Field<Any?>
): Field<Int?> {
    val f = Npoints1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints2(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Npoints2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints2(
      __1: Any?
): Field<Int?> {
    val f = Npoints2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun npoints2(
      __1: Field<Any?>
): Field<Int?> {
    val f = Npoints2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nthValue(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = NthValue()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nthValue(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = NthValue()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nthValue(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = NthValue()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ntile</code>
 */
fun ntile(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = Ntile()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ntile</code> as a field.
 */
fun ntile(
      __1: Int?
): Field<Int?> {
    val f = Ntile()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ntile</code> as a field.
 */
fun ntile(
      __1: Field<Int?>
): Field<Int?> {
    val f = Ntile()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNonnulls(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = NumNonnulls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNonnulls(
      __1: Any?
): Field<Int?> {
    val f = NumNonnulls()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNonnulls(
      __1: Field<Any?>
): Field<Int?> {
    val f = NumNonnulls()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNulls(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = NumNulls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNulls(
      __1: Any?
): Field<Int?> {
    val f = NumNulls()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numNulls(
      __1: Field<Any?>
): Field<Int?> {
    val f = NumNulls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric1(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Int?
): BigDecimal? {
    val f = Numeric1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric1(
      __1: BigDecimal?
    , __2: Int?
): Field<BigDecimal?> {
    val f = Numeric1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric1(
      __1: Field<BigDecimal?>
    , __2: Field<Int?>
): Field<BigDecimal?> {
    val f = Numeric1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric2(
      configuration: Configuration
    , __1: Int?
): BigDecimal? {
    val f = Numeric2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric2(
      __1: Int?
): Field<BigDecimal?> {
    val f = Numeric2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric2(
      __1: Field<Int?>
): Field<BigDecimal?> {
    val f = Numeric2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric3(
      configuration: Configuration
    , __1: Float?
): BigDecimal? {
    val f = Numeric3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric3(
      __1: Float?
): Field<BigDecimal?> {
    val f = Numeric3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric3(
      __1: Field<Float?>
): Field<BigDecimal?> {
    val f = Numeric3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric4(
      configuration: Configuration
    , __1: Double?
): BigDecimal? {
    val f = Numeric4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric4(
      __1: Double?
): Field<BigDecimal?> {
    val f = Numeric4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric4(
      __1: Field<Double?>
): Field<BigDecimal?> {
    val f = Numeric4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric5(
      configuration: Configuration
    , __1: Long?
): BigDecimal? {
    val f = Numeric5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric5(
      __1: Long?
): Field<BigDecimal?> {
    val f = Numeric5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric5(
      __1: Field<Long?>
): Field<BigDecimal?> {
    val f = Numeric5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric6(
      configuration: Configuration
    , __1: Short?
): BigDecimal? {
    val f = Numeric6()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric6(
      __1: Short?
): Field<BigDecimal?> {
    val f = Numeric6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric6(
      __1: Field<Short?>
): Field<BigDecimal?> {
    val f = Numeric6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric</code>
 */
fun numeric7(
      configuration: Configuration
    , __1: JSONB?
): BigDecimal? {
    val f = Numeric7()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric7(
      __1: JSONB?
): Field<BigDecimal?> {
    val f = Numeric7()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric</code> as a field.
 */
fun numeric7(
      __1: Field<JSONB?>
): Field<BigDecimal?> {
    val f = Numeric7()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numeric8(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = Numeric8()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numeric8(
      __1: Any?
): Field<BigDecimal?> {
    val f = Numeric8()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numeric8(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = Numeric8()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_abs</code>
 */
fun numericAbs(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericAbs()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_abs</code> as a field.
 */
fun numericAbs(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericAbs()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_abs</code> as a field.
 */
fun numericAbs(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericAbs()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccum(
      configuration: Configuration
    , __1: Any?
    , __2: BigDecimal?
): Any? {
    val f = NumericAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccum(
      __1: Any?
    , __2: BigDecimal?
): Field<Any?> {
    val f = NumericAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccum(
      __1: Field<Any?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = NumericAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccumInv(
      configuration: Configuration
    , __1: Any?
    , __2: BigDecimal?
): Any? {
    val f = NumericAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccumInv(
      __1: Any?
    , __2: BigDecimal?
): Field<Any?> {
    val f = NumericAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAccumInv(
      __1: Field<Any?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = NumericAccumInv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_add</code>
 */
fun numericAdd(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericAdd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_add</code> as a field.
 */
fun numericAdd(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_add</code> as a field.
 */
fun numericAdd(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvg(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericAvg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvg(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericAvg()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvg(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericAvg()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgAccum(
      configuration: Configuration
    , __1: Any?
    , __2: BigDecimal?
): Any? {
    val f = NumericAvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgAccum(
      __1: Any?
    , __2: BigDecimal?
): Field<Any?> {
    val f = NumericAvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgAccum(
      __1: Field<Any?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = NumericAvgAccum()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgCombine(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = NumericAvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgCombine(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = NumericAvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgCombine(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericAvgCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgDeserialize(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Any?
): Any? {
    val f = NumericAvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgDeserialize(
      __1: ByteArray?
    , __2: Any?
): Field<Any?> {
    val f = NumericAvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgDeserialize(
      __1: Field<ByteArray?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericAvgDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgSerialize(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = NumericAvgSerialize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgSerialize(
      __1: Any?
): Field<ByteArray?> {
    val f = NumericAvgSerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericAvgSerialize(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = NumericAvgSerialize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_cmp</code>
 */
fun numericCmp(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Int? {
    val f = NumericCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_cmp</code> as a field.
 */
fun numericCmp(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Int?> {
    val f = NumericCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_cmp</code> as a field.
 */
fun numericCmp(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Int?> {
    val f = NumericCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericCombine(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = NumericCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericCombine(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = NumericCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericCombine(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericDeserialize(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Any?
): Any? {
    val f = NumericDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericDeserialize(
      __1: ByteArray?
    , __2: Any?
): Field<Any?> {
    val f = NumericDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericDeserialize(
      __1: Field<ByteArray?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_div</code>
 */
fun numericDiv(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericDiv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_div</code> as a field.
 */
fun numericDiv(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_div</code> as a field.
 */
fun numericDiv(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_div_trunc</code>
 */
fun numericDivTrunc(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericDivTrunc()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_div_trunc</code> as a field.
 */
fun numericDivTrunc(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericDivTrunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_div_trunc</code> as a field.
 */
fun numericDivTrunc(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericDivTrunc()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_eq</code>
 */
fun numericEq(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_eq</code> as a field.
 */
fun numericEq(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_eq</code> as a field.
 */
fun numericEq(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_exp</code>
 */
fun numericExp(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericExp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_exp</code> as a field.
 */
fun numericExp(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericExp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_exp</code> as a field.
 */
fun numericExp(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericExp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_ge</code>
 */
fun numericGe(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_ge</code> as a field.
 */
fun numericGe(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_ge</code> as a field.
 */
fun numericGe(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_gt</code>
 */
fun numericGt(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_gt</code> as a field.
 */
fun numericGt(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_gt</code> as a field.
 */
fun numericGt(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): BigDecimal? {
    val f = NumericIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<BigDecimal?> {
    val f = NumericIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<BigDecimal?> {
    val f = NumericIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_inc</code>
 */
fun numericInc(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericInc()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_inc</code> as a field.
 */
fun numericInc(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericInc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_inc</code> as a field.
 */
fun numericInc(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericInc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_larger</code>
 */
fun numericLarger(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_larger</code> as a field.
 */
fun numericLarger(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_larger</code> as a field.
 */
fun numericLarger(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_le</code>
 */
fun numericLe(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_le</code> as a field.
 */
fun numericLe(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_le</code> as a field.
 */
fun numericLe(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_ln</code>
 */
fun numericLn(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericLn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_ln</code> as a field.
 */
fun numericLn(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericLn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_ln</code> as a field.
 */
fun numericLn(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericLn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_log</code>
 */
fun numericLog(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericLog()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_log</code> as a field.
 */
fun numericLog(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericLog()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_log</code> as a field.
 */
fun numericLog(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericLog()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_lt</code>
 */
fun numericLt(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_lt</code> as a field.
 */
fun numericLt(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_lt</code> as a field.
 */
fun numericLt(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_mod</code>
 */
fun numericMod(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericMod()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_mod</code> as a field.
 */
fun numericMod(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericMod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_mod</code> as a field.
 */
fun numericMod(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericMod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_mul</code>
 */
fun numericMul(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericMul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_mul</code> as a field.
 */
fun numericMul(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_mul</code> as a field.
 */
fun numericMul(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_ne</code>
 */
fun numericNe(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Boolean? {
    val f = NumericNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_ne</code> as a field.
 */
fun numericNe(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Boolean?> {
    val f = NumericNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_ne</code> as a field.
 */
fun numericNe(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Boolean?> {
    val f = NumericNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericOut(
      configuration: Configuration
    , __1: BigDecimal?
): Any? {
    val f = NumericOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericOut(
      __1: BigDecimal?
): Field<Any?> {
    val f = NumericOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericOut(
      __1: Field<BigDecimal?>
): Field<Any?> {
    val f = NumericOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPlPgLsn(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Any?
): Any? {
    val f = NumericPlPgLsn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPlPgLsn(
      __1: BigDecimal?
    , __2: Any?
): Field<Any?> {
    val f = NumericPlPgLsn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPlPgLsn(
      __1: Field<BigDecimal?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericPlPgLsn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyAvg(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolyAvg()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyAvg(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolyAvg()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyAvg(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolyAvg()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyCombine(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = NumericPolyCombine()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyCombine(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = NumericPolyCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyCombine(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericPolyCombine()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyDeserialize(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Any?
): Any? {
    val f = NumericPolyDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyDeserialize(
      __1: ByteArray?
    , __2: Any?
): Field<Any?> {
    val f = NumericPolyDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyDeserialize(
      __1: Field<ByteArray?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = NumericPolyDeserialize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySerialize(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = NumericPolySerialize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySerialize(
      __1: Any?
): Field<ByteArray?> {
    val f = NumericPolySerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySerialize(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = NumericPolySerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevPop(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolyStddevPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevPop(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolyStddevPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevPop(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolyStddevPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevSamp(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolyStddevSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevSamp(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolyStddevSamp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyStddevSamp(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolyStddevSamp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySum(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolySum()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySum(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolySum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolySum(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolySum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarPop(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolyVarPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarPop(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolyVarPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarPop(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolyVarPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarSamp(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericPolyVarSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarSamp(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericPolyVarSamp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericPolyVarSamp(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericPolyVarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_power</code>
 */
fun numericPower(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericPower()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_power</code> as a field.
 */
fun numericPower(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericPower()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_power</code> as a field.
 */
fun numericPower(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericPower()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): BigDecimal? {
    val f = NumericRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<BigDecimal?> {
    val f = NumericRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<BigDecimal?> {
    val f = NumericRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_send</code>
 */
fun numericSend(
      configuration: Configuration
    , __1: BigDecimal?
): ByteArray? {
    val f = NumericSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_send</code> as a field.
 */
fun numericSend(
      __1: BigDecimal?
): Field<ByteArray?> {
    val f = NumericSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_send</code> as a field.
 */
fun numericSend(
      __1: Field<BigDecimal?>
): Field<ByteArray?> {
    val f = NumericSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSerialize(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = NumericSerialize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSerialize(
      __1: Any?
): Field<ByteArray?> {
    val f = NumericSerialize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSerialize(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = NumericSerialize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_smaller</code>
 */
fun numericSmaller(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_smaller</code> as a field.
 */
fun numericSmaller(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_smaller</code> as a field.
 */
fun numericSmaller(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = NumericSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.numeric_sqrt</code>
 */
fun numericSqrt(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericSqrt()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_sqrt</code> as a field.
 */
fun numericSqrt(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericSqrt()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_sqrt</code> as a field.
 */
fun numericSqrt(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericSqrt()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevPop(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericStddevPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevPop(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericStddevPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevPop(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericStddevPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevSamp(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericStddevSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevSamp(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericStddevSamp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericStddevSamp(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericStddevSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_sub</code>
 */
fun numericSub(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = NumericSub()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_sub</code> as a field.
 */
fun numericSub(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_sub</code> as a field.
 */
fun numericSub(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSum(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericSum()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSum(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericSum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSum(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericSum()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = NumericSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSupport(
      __1: Any?
): Field<Any?> {
    val f = NumericSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = NumericSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_uminus</code>
 */
fun numericUminus(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericUminus()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_uminus</code> as a field.
 */
fun numericUminus(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericUminus()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_uminus</code> as a field.
 */
fun numericUminus(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericUminus()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numeric_uplus</code>
 */
fun numericUplus(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = NumericUplus()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numeric_uplus</code> as a field.
 */
fun numericUplus(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = NumericUplus()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numeric_uplus</code> as a field.
 */
fun numericUplus(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = NumericUplus()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarPop(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericVarPop()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarPop(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericVarPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarPop(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericVarPop()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarSamp(
      configuration: Configuration
    , __1: Any?
): BigDecimal? {
    val f = NumericVarSamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarSamp(
      __1: Any?
): Field<BigDecimal?> {
    val f = NumericVarSamp()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numericVarSamp(
      __1: Field<Any?>
): Field<BigDecimal?> {
    val f = NumericVarSamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numerictypmodin</code>
 */
fun numerictypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Numerictypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numerictypmodin</code> as a field.
 */
fun numerictypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Numerictypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numerictypmodin</code> as a field.
 */
fun numerictypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Numerictypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numerictypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Numerictypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numerictypmodout(
      __1: Int?
): Field<Any?> {
    val f = Numerictypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numerictypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Numerictypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange1(
      configuration: Configuration
): Any? {
    val f = Nummultirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange1(): Field<Any?> {
    val f = Nummultirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Nummultirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange2(
      __1: Any?
): Field<Any?> {
    val f = Nummultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Nummultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Nummultirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Nummultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun nummultirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Nummultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numnode(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = Numnode()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numnode(
      __1: Any?
): Field<Int?> {
    val f = Numnode()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numnode(
      __1: Field<Any?>
): Field<Int?> {
    val f = Numnode()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange1(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Any? {
    val f = Numrange1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange1(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Any?> {
    val f = Numrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange1(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = Numrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
    , __3: String?
): Any? {
    val f = Numrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange2(
      __1: BigDecimal?
    , __2: BigDecimal?
    , __3: String?
): Field<Any?> {
    val f = Numrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun numrange2(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Numrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.numrange_subdiff</code>
 */
fun numrangeSubdiff(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): Double? {
    val f = NumrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.numrange_subdiff</code> as a field.
 */
fun numrangeSubdiff(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<Double?> {
    val f = NumrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.numrange_subdiff</code> as a field.
 */
fun numrangeSubdiff(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<Double?> {
    val f = NumrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.obj_description</code>
 */
fun objDescription1(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): String? {
    val f = ObjDescription1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.obj_description</code> as a field.
 */
fun objDescription1(
      __1: Long?
    , __2: String?
): Field<String?> {
    val f = ObjDescription1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.obj_description</code> as a field.
 */
fun objDescription1(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<String?> {
    val f = ObjDescription1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.obj_description</code>
 */
fun objDescription2(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = ObjDescription2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.obj_description</code> as a field.
 */
fun objDescription2(
      __1: Long?
): Field<String?> {
    val f = ObjDescription2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.obj_description</code> as a field.
 */
fun objDescription2(
      __1: Field<Long?>
): Field<String?> {
    val f = ObjDescription2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.octet_length</code>
 */
fun octetLength1(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = OctetLength1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength1(
      __1: String?
): Field<Int?> {
    val f = OctetLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength1(
      __1: Field<String?>
): Field<Int?> {
    val f = OctetLength1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.octet_length</code>
 */
fun octetLength2(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = OctetLength2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength2(
      __1: String?
): Field<Int?> {
    val f = OctetLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength2(
      __1: Field<String?>
): Field<Int?> {
    val f = OctetLength2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.octet_length</code>
 */
fun octetLength3(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = OctetLength3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength3(
      __1: String?
): Field<Int?> {
    val f = OctetLength3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength3(
      __1: Field<String?>
): Field<Int?> {
    val f = OctetLength3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.octet_length</code>
 */
fun octetLength4(
      configuration: Configuration
    , __1: ByteArray?
): Int? {
    val f = OctetLength4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength4(
      __1: ByteArray?
): Field<Int?> {
    val f = OctetLength4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.octet_length</code> as a field.
 */
fun octetLength4(
      __1: Field<ByteArray?>
): Field<Int?> {
    val f = OctetLength4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oid</code>
 */
fun oid(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = Oid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oid</code> as a field.
 */
fun oid(
      __1: Long?
): Field<Long?> {
    val f = Oid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oid</code> as a field.
 */
fun oid(
      __1: Field<Long?>
): Field<Long?> {
    val f = Oid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oideq</code>
 */
fun oideq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oideq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oideq</code> as a field.
 */
fun oideq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oideq</code> as a field.
 */
fun oideq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidge</code>
 */
fun oidge(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oidge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidge</code> as a field.
 */
fun oidge(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oidge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidge</code> as a field.
 */
fun oidge(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oidge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidgt</code>
 */
fun oidgt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oidgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidgt</code> as a field.
 */
fun oidgt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oidgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidgt</code> as a field.
 */
fun oidgt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oidgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidin(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Oidin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidin(
      __1: Any?
): Field<Long?> {
    val f = Oidin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidin(
      __1: Field<Any?>
): Field<Long?> {
    val f = Oidin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidlarger</code>
 */
fun oidlarger(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Oidlarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidlarger</code> as a field.
 */
fun oidlarger(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Oidlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidlarger</code> as a field.
 */
fun oidlarger(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Oidlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidle</code>
 */
fun oidle(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oidle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidle</code> as a field.
 */
fun oidle(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oidle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidle</code> as a field.
 */
fun oidle(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oidle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidlt</code>
 */
fun oidlt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oidlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidlt</code> as a field.
 */
fun oidlt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oidlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidlt</code> as a field.
 */
fun oidlt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oidlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidne</code>
 */
fun oidne(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Oidne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidne</code> as a field.
 */
fun oidne(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Oidne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidne</code> as a field.
 */
fun oidne(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Oidne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidout(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Oidout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidout(
      __1: Long?
): Field<Any?> {
    val f = Oidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidout(
      __1: Field<Long?>
): Field<Any?> {
    val f = Oidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidrecv(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Oidrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidrecv(
      __1: Any?
): Field<Long?> {
    val f = Oidrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidrecv(
      __1: Field<Any?>
): Field<Long?> {
    val f = Oidrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidsend</code>
 */
fun oidsend(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = Oidsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidsend</code> as a field.
 */
fun oidsend(
      __1: Long?
): Field<ByteArray?> {
    val f = Oidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidsend</code> as a field.
 */
fun oidsend(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = Oidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidsmaller</code>
 */
fun oidsmaller(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Oidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidsmaller</code> as a field.
 */
fun oidsmaller(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Oidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidsmaller</code> as a field.
 */
fun oidsmaller(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Oidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectoreq</code>
 */
fun oidvectoreq(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectoreq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectoreq</code> as a field.
 */
fun oidvectoreq(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectoreq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectoreq</code> as a field.
 */
fun oidvectoreq(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectoreq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorge</code>
 */
fun oidvectorge(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectorge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorge</code> as a field.
 */
fun oidvectorge(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectorge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorge</code> as a field.
 */
fun oidvectorge(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectorge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorgt</code>
 */
fun oidvectorgt(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectorgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorgt</code> as a field.
 */
fun oidvectorgt(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectorgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorgt</code> as a field.
 */
fun oidvectorgt(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectorgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorin(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = Oidvectorin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorin(
      __1: Any?
): Field<Array<Any?>?> {
    val f = Oidvectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorin(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = Oidvectorin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorle</code>
 */
fun oidvectorle(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectorle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorle</code> as a field.
 */
fun oidvectorle(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectorle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorle</code> as a field.
 */
fun oidvectorle(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectorle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorlt</code>
 */
fun oidvectorlt(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectorlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorlt</code> as a field.
 */
fun oidvectorlt(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectorlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorlt</code> as a field.
 */
fun oidvectorlt(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectorlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorne</code>
 */
fun oidvectorne(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Array<Any?>?
): Boolean? {
    val f = Oidvectorne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorne</code> as a field.
 */
fun oidvectorne(
      __1: Array<Any?>?
    , __2: Array<Any?>?
): Field<Boolean?> {
    val f = Oidvectorne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorne</code> as a field.
 */
fun oidvectorne(
      __1: Field<Array<Any?>?>
    , __2: Field<Array<Any?>?>
): Field<Boolean?> {
    val f = Oidvectorne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorout(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Oidvectorout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorout(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Oidvectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorout(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Oidvectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorrecv(
      configuration: Configuration
    , __1: Any?
): Array<Any?>? {
    val f = Oidvectorrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorrecv(
      __1: Any?
): Field<Array<Any?>?> {
    val f = Oidvectorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun oidvectorrecv(
      __1: Field<Any?>
): Field<Array<Any?>?> {
    val f = Oidvectorrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectorsend</code>
 */
fun oidvectorsend(
      configuration: Configuration
    , __1: Array<Any?>?
): ByteArray? {
    val f = Oidvectorsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectorsend</code> as a field.
 */
fun oidvectorsend(
      __1: Array<Any?>?
): Field<ByteArray?> {
    val f = Oidvectorsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectorsend</code> as a field.
 */
fun oidvectorsend(
      __1: Field<Array<Any?>?>
): Field<ByteArray?> {
    val f = Oidvectorsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.oidvectortypes</code>
 */
fun oidvectortypes(
      configuration: Configuration
    , __1: Array<Any?>?
): String? {
    val f = Oidvectortypes()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.oidvectortypes</code> as a field.
 */
fun oidvectortypes(
      __1: Array<Any?>?
): Field<String?> {
    val f = Oidvectortypes()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.oidvectortypes</code> as a field.
 */
fun oidvectortypes(
      __1: Field<Array<Any?>?>
): Field<String?> {
    val f = Oidvectortypes()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnPb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPb(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnPb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnPb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnPl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPl(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnPl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPpath(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnPpath()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPpath(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnPpath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPpath(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnPpath()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPs(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnPs()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPs(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnPs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onPs(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnPs()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSb(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnSb()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSb(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSb(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnSb()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSl(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = OnSl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSl(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = OnSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun onSl(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = OnSl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransition(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = OrderedSetTransition()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransition(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = OrderedSetTransition()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransition(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = OrderedSetTransition()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransitionMulti(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = OrderedSetTransitionMulti()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransitionMulti(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = OrderedSetTransitionMulti()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun orderedSetTransitionMulti(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = OrderedSetTransitionMulti()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps1(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
    , __3: OffsetTime?
    , __4: OffsetTime?
): Boolean? {
    val f = Overlaps1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps1(
      __1: OffsetTime?
    , __2: OffsetTime?
    , __3: OffsetTime?
    , __4: OffsetTime?
): Field<Boolean?> {
    val f = Overlaps1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps1(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
    , __3: Field<OffsetTime?>
    , __4: Field<OffsetTime?>
): Field<Boolean?> {
    val f = Overlaps1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps10(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
    , __4: LocalDateTime?
): Boolean? {
    val f = Overlaps10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps10(
      __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
    , __4: LocalDateTime?
): Field<Boolean?> {
    val f = Overlaps10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps10(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
    , __3: Field<LocalDateTime?>
    , __4: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = Overlaps10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps11(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: YearToSecond?
    , __3: LocalDateTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps11(
      __1: LocalDateTime?
    , __2: YearToSecond?
    , __3: LocalDateTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps11(
      __1: Field<LocalDateTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<LocalDateTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps12(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps12(
      __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: LocalDateTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps12(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
    , __3: Field<LocalDateTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps12()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps13(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: YearToSecond?
    , __3: LocalDateTime?
    , __4: LocalDateTime?
): Boolean? {
    val f = Overlaps13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps13(
      __1: LocalDateTime?
    , __2: YearToSecond?
    , __3: LocalDateTime?
    , __4: LocalDateTime?
): Field<Boolean?> {
    val f = Overlaps13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps13(
      __1: Field<LocalDateTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<LocalDateTime?>
    , __4: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = Overlaps13()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps2(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
    , __4: OffsetDateTime?
): Boolean? {
    val f = Overlaps2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps2(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
    , __4: OffsetDateTime?
): Field<Boolean?> {
    val f = Overlaps2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps2(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<OffsetDateTime?>
    , __4: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = Overlaps2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps3(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: YearToSecond?
    , __3: OffsetDateTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps3(
      __1: OffsetDateTime?
    , __2: YearToSecond?
    , __3: OffsetDateTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps3(
      __1: Field<OffsetDateTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<OffsetDateTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps4(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps4(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: OffsetDateTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps4(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<OffsetDateTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps5(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: YearToSecond?
    , __3: OffsetDateTime?
    , __4: OffsetDateTime?
): Boolean? {
    val f = Overlaps5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps5(
      __1: OffsetDateTime?
    , __2: YearToSecond?
    , __3: OffsetDateTime?
    , __4: OffsetDateTime?
): Field<Boolean?> {
    val f = Overlaps5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps5(
      __1: Field<OffsetDateTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<OffsetDateTime?>
    , __4: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = Overlaps5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps6(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
    , __3: LocalTime?
    , __4: LocalTime?
): Boolean? {
    val f = Overlaps6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps6(
      __1: LocalTime?
    , __2: LocalTime?
    , __3: LocalTime?
    , __4: LocalTime?
): Field<Boolean?> {
    val f = Overlaps6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps6(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
    , __3: Field<LocalTime?>
    , __4: Field<LocalTime?>
): Field<Boolean?> {
    val f = Overlaps6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps7(
      configuration: Configuration
    , __1: LocalTime?
    , __2: YearToSecond?
    , __3: LocalTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps7(
      __1: LocalTime?
    , __2: YearToSecond?
    , __3: LocalTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps7(
      __1: Field<LocalTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<LocalTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps8(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
    , __3: LocalTime?
    , __4: YearToSecond?
): Boolean? {
    val f = Overlaps8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps8(
      __1: LocalTime?
    , __2: LocalTime?
    , __3: LocalTime?
    , __4: YearToSecond?
): Field<Boolean?> {
    val f = Overlaps8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps8(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
    , __3: Field<LocalTime?>
    , __4: Field<YearToSecond?>
): Field<Boolean?> {
    val f = Overlaps8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlaps</code>
 */
fun overlaps9(
      configuration: Configuration
    , __1: LocalTime?
    , __2: YearToSecond?
    , __3: LocalTime?
    , __4: LocalTime?
): Boolean? {
    val f = Overlaps9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps9(
      __1: LocalTime?
    , __2: YearToSecond?
    , __3: LocalTime?
    , __4: LocalTime?
): Field<Boolean?> {
    val f = Overlaps9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlaps</code> as a field.
 */
fun overlaps9(
      __1: Field<LocalTime?>
    , __2: Field<YearToSecond?>
    , __3: Field<LocalTime?>
    , __4: Field<LocalTime?>
): Field<Boolean?> {
    val f = Overlaps9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
    , __4: Int?
): String? {
    val f = Overlay1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay1(
      __1: String?
    , __2: String?
    , __3: Int?
    , __4: Int?
): Field<String?> {
    val f = Overlay1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
    , __4: Field<Int?>
): Field<String?> {
    val f = Overlay1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay2(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
): String? {
    val f = Overlay2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay2(
      __1: String?
    , __2: String?
    , __3: Int?
): Field<String?> {
    val f = Overlay2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay2(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Overlay2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay3(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
    , __4: Int?
): String? {
    val f = Overlay3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay3(
      __1: String?
    , __2: String?
    , __3: Int?
    , __4: Int?
): Field<String?> {
    val f = Overlay3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay3(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
    , __4: Field<Int?>
): Field<String?> {
    val f = Overlay3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay4(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
): String? {
    val f = Overlay4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay4(
      __1: String?
    , __2: String?
    , __3: Int?
): Field<String?> {
    val f = Overlay4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay4(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Overlay4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay5(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
    , __3: Int?
    , __4: Int?
): ByteArray? {
    val f = Overlay5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay5(
      __1: ByteArray?
    , __2: ByteArray?
    , __3: Int?
    , __4: Int?
): Field<ByteArray?> {
    val f = Overlay5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay5(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
    , __3: Field<Int?>
    , __4: Field<Int?>
): Field<ByteArray?> {
    val f = Overlay5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.overlay</code>
 */
fun overlay6(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
    , __3: Int?
): ByteArray? {
    val f = Overlay6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay6(
      __1: ByteArray?
    , __2: ByteArray?
    , __3: Int?
): Field<ByteArray?> {
    val f = Overlay6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.overlay</code> as a field.
 */
fun overlay6(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = Overlay6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.parse_ident</code>
 */
fun parseIdent(
      configuration: Configuration
    , str: String?
    , strict: Boolean?
): Array<String?>? {
    val f = ParseIdent()
    f.setStr(str)
    f.setStrict(strict)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.parse_ident</code> as a field.
 */
fun parseIdent(
      str: String?
    , strict: Boolean?
): Field<Array<String?>?> {
    val f = ParseIdent()
    f.setStr(str)
    f.setStrict(strict)

    return f.asField()
}

/**
 * Get <code>pg_catalog.parse_ident</code> as a field.
 */
fun parseIdent(
      str: Field<String?>
    , strict: Field<Boolean?>
): Field<Array<String?>?> {
    val f = ParseIdent()
    f.setStr(str)
    f.setStrict(strict)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun path(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Path()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun path(
      __1: Any?
): Field<Any?> {
    val f = Path()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun path(
      __1: Field<Any?>
): Field<Any?> {
    val f = Path()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAdd(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PathAdd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAdd(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PathAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAdd(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PathAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAddPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PathAddPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAddPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PathAddPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathAddPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PathAddPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathCenter(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PathCenter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathCenter(
      __1: Any?
): Field<Any?> {
    val f = PathCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathCenter(
      __1: Field<Any?>
): Field<Any?> {
    val f = PathCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathContainPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathContainPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathContainPt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathContainPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = PathDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = PathDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = PathDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDivPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PathDivPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDivPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PathDivPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathDivPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PathDivPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PathIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathIn(
      __1: Any?
): Field<Any?> {
    val f = PathIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PathIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathInter(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathInter()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathInter(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathInter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathInter(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathInter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathLength(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = PathLength()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathLength(
      __1: Any?
): Field<Double?> {
    val f = PathLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathLength(
      __1: Field<Any?>
): Field<Double?> {
    val f = PathLength()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathMulPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PathMulPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathMulPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PathMulPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathMulPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PathMulPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathNEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathNEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathNEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathNGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathNGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathNGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathNGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathNGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathNGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathNLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathNLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathNLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PathNLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PathNLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PathNLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNpoints(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = PathNpoints()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNpoints(
      __1: Any?
): Field<Int?> {
    val f = PathNpoints()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathNpoints(
      __1: Field<Any?>
): Field<Int?> {
    val f = PathNpoints()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PathOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathOut(
      __1: Any?
): Field<Any?> {
    val f = PathOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PathOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PathRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathRecv(
      __1: Any?
): Field<Any?> {
    val f = PathRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PathRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PathSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PathSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PathSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSubPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PathSubPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSubPt(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PathSubPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pathSubPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PathSubPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pclose(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Pclose()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pclose(
      __1: Any?
): Field<Any?> {
    val f = Pclose()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pclose(
      __1: Field<Any?>
): Field<Any?> {
    val f = Pclose()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.percent_rank</code>
 */
fun percentRank1(
      configuration: Configuration
): Double? {
    val f = PercentRank1()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.percent_rank</code> as a field.
 */
fun percentRank1(): Field<Double?> {
    val f = PercentRank1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentRank2(
      __1: Any?
): AggregateFunction<Double?> {
    val f = PercentRank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentRank2(
      __1: Field<Any?>
): AggregateFunction<Double?> {
    val f = PercentRank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentRankFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = PercentRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentRankFinal(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = PercentRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentRankFinal(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = PercentRankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont1(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = PercentileCont1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont1(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = PercentileCont1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont2(
      __1: Double?
    , __2: YearToSecond?
): AggregateFunction<YearToSecond?> {
    val f = PercentileCont2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont2(
      __1: Field<Double?>
    , __2: Field<YearToSecond?>
): AggregateFunction<YearToSecond?> {
    val f = PercentileCont2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont3(
      __1: Array<Double?>?
    , __2: Double?
): AggregateFunction<Array<Double?>?> {
    val f = PercentileCont3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont3(
      __1: Field<Array<Double?>?>
    , __2: Field<Double?>
): AggregateFunction<Array<Double?>?> {
    val f = PercentileCont3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont4(
      __1: Array<Double?>?
    , __2: YearToSecond?
): AggregateFunction<Array<YearToSecond?>?> {
    val f = PercentileCont4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.percentile_cont</code> as a field.
 */
fun percentileCont4(
      __1: Field<Array<Double?>?>
    , __2: Field<YearToSecond?>
): AggregateFunction<Array<YearToSecond?>?> {
    val f = PercentileCont4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8Final(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
): Double? {
    val f = PercentileContFloat8Final()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8Final(
      __1: Any?
    , __2: Double?
): Field<Double?> {
    val f = PercentileContFloat8Final()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8Final(
      __1: Field<Any?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = PercentileContFloat8Final()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8MultiFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Double?>?
): Array<Double?>? {
    val f = PercentileContFloat8MultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8MultiFinal(
      __1: Any?
    , __2: Array<Double?>?
): Field<Array<Double?>?> {
    val f = PercentileContFloat8MultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContFloat8MultiFinal(
      __1: Field<Any?>
    , __2: Field<Array<Double?>?>
): Field<Array<Double?>?> {
    val f = PercentileContFloat8MultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
): YearToSecond? {
    val f = PercentileContIntervalFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalFinal(
      __1: Any?
    , __2: Double?
): Field<YearToSecond?> {
    val f = PercentileContIntervalFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalFinal(
      __1: Field<Any?>
    , __2: Field<Double?>
): Field<YearToSecond?> {
    val f = PercentileContIntervalFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalMultiFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Double?>?
): Array<YearToSecond?>? {
    val f = PercentileContIntervalMultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalMultiFinal(
      __1: Any?
    , __2: Array<Double?>?
): Field<Array<YearToSecond?>?> {
    val f = PercentileContIntervalMultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileContIntervalMultiFinal(
      __1: Field<Any?>
    , __2: Field<Array<Double?>?>
): Field<Array<YearToSecond?>?> {
    val f = PercentileContIntervalMultiFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDisc1(
      __1: Double?
    , __2: Any?
): AggregateFunction<Any?> {
    val f = PercentileDisc1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDisc1(
      __1: Field<Double?>
    , __2: Field<Any?>
): AggregateFunction<Any?> {
    val f = PercentileDisc1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDisc2(
      __1: Array<Double?>?
    , __2: Any?
): AggregateFunction<Array<Any?>?> {
    val f = PercentileDisc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDisc2(
      __1: Field<Array<Double?>?>
    , __2: Field<Any?>
): AggregateFunction<Array<Any?>?> {
    val f = PercentileDisc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Double?
    , __3: Any?
): Any? {
    val f = PercentileDiscFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscFinal(
      __1: Any?
    , __2: Double?
    , __3: Any?
): Field<Any?> {
    val f = PercentileDiscFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscFinal(
      __1: Field<Any?>
    , __2: Field<Double?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = PercentileDiscFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscMultiFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Array<Double?>?
    , __3: Any?
): Array<Any?>? {
    val f = PercentileDiscMultiFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscMultiFinal(
      __1: Any?
    , __2: Array<Double?>?
    , __3: Any?
): Field<Array<Any?>?> {
    val f = PercentileDiscMultiFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun percentileDiscMultiFinal(
      __1: Field<Any?>
    , __2: Field<Array<Double?>?>
    , __3: Field<Any?>
): Field<Array<Any?>?> {
    val f = PercentileDiscMultiFinal()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_advisory_lock</code>
 */
fun pgAdvisoryLock1(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgAdvisoryLock1()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_lock</code>
 */
fun pgAdvisoryLock2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Unit {
    val p = PgAdvisoryLock2()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_lock_shared</code>
 */
fun pgAdvisoryLockShared1(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgAdvisoryLockShared1()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_lock_shared</code>
 */
fun pgAdvisoryLockShared2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Unit {
    val p = PgAdvisoryLockShared2()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_unlock</code>
 */
fun pgAdvisoryUnlock1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgAdvisoryUnlock1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock</code> as a field.
 */
fun pgAdvisoryUnlock1(
      __1: Long?
): Field<Boolean?> {
    val f = PgAdvisoryUnlock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock</code> as a field.
 */
fun pgAdvisoryUnlock1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgAdvisoryUnlock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_advisory_unlock</code>
 */
fun pgAdvisoryUnlock2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgAdvisoryUnlock2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock</code> as a field.
 */
fun pgAdvisoryUnlock2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgAdvisoryUnlock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock</code> as a field.
 */
fun pgAdvisoryUnlock2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgAdvisoryUnlock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_advisory_unlock_all</code>
 */
fun pgAdvisoryUnlockAll(
      configuration: Configuration
): Unit {
    val p = PgAdvisoryUnlockAll()

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_unlock_shared</code>
 */
fun pgAdvisoryUnlockShared1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgAdvisoryUnlockShared1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock_shared</code> as a field.
 */
fun pgAdvisoryUnlockShared1(
      __1: Long?
): Field<Boolean?> {
    val f = PgAdvisoryUnlockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock_shared</code> as a field.
 */
fun pgAdvisoryUnlockShared1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgAdvisoryUnlockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_advisory_unlock_shared</code>
 */
fun pgAdvisoryUnlockShared2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgAdvisoryUnlockShared2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock_shared</code> as a field.
 */
fun pgAdvisoryUnlockShared2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgAdvisoryUnlockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_advisory_unlock_shared</code> as a field.
 */
fun pgAdvisoryUnlockShared2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgAdvisoryUnlockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_advisory_xact_lock</code>
 */
fun pgAdvisoryXactLock1(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgAdvisoryXactLock1()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_xact_lock</code>
 */
fun pgAdvisoryXactLock2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Unit {
    val p = PgAdvisoryXactLock2()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_xact_lock_shared</code>
 */
fun pgAdvisoryXactLockShared1(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgAdvisoryXactLockShared1()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_advisory_xact_lock_shared</code>
 */
fun pgAdvisoryXactLockShared2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Unit {
    val p = PgAdvisoryXactLockShared2()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_backend_pid</code>
 */
fun pgBackendPid(
      configuration: Configuration
): Int? {
    val f = PgBackendPid()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_backend_pid</code> as a field.
 */
fun pgBackendPid(): Field<Int?> {
    val f = PgBackendPid()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_backup_start_time</code>
 */
fun pgBackupStartTime(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgBackupStartTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_backup_start_time</code> as a field.
 */
fun pgBackupStartTime(): Field<OffsetDateTime?> {
    val f = PgBackupStartTime()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_blocking_pids</code>
 */
fun pgBlockingPids(
      configuration: Configuration
    , __1: Int?
): Array<Int?>? {
    val f = PgBlockingPids()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_blocking_pids</code> as a field.
 */
fun pgBlockingPids(
      __1: Int?
): Field<Array<Int?>?> {
    val f = PgBlockingPids()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_blocking_pids</code> as a field.
 */
fun pgBlockingPids(
      __1: Field<Int?>
): Field<Array<Int?>?> {
    val f = PgBlockingPids()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_cancel_backend</code>
 */
fun pgCancelBackend(
      configuration: Configuration
    , __1: Int?
): Boolean? {
    val f = PgCancelBackend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_cancel_backend</code> as a field.
 */
fun pgCancelBackend(
      __1: Int?
): Field<Boolean?> {
    val f = PgCancelBackend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_cancel_backend</code> as a field.
 */
fun pgCancelBackend(
      __1: Field<Int?>
): Field<Boolean?> {
    val f = PgCancelBackend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_char_to_encoding</code>
 */
fun pgCharToEncoding(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = PgCharToEncoding()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_char_to_encoding</code> as a field.
 */
fun pgCharToEncoding(
      __1: String?
): Field<Int?> {
    val f = PgCharToEncoding()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_char_to_encoding</code> as a field.
 */
fun pgCharToEncoding(
      __1: Field<String?>
): Field<Int?> {
    val f = PgCharToEncoding()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_client_encoding</code>
 */
fun pgClientEncoding(
      configuration: Configuration
): String? {
    val f = PgClientEncoding()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_client_encoding</code> as a field.
 */
fun pgClientEncoding(): Field<String?> {
    val f = PgClientEncoding()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_collation_actual_version</code>
 */
fun pgCollationActualVersion(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgCollationActualVersion()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_collation_actual_version</code> as a field.
 */
fun pgCollationActualVersion(
      __1: Long?
): Field<String?> {
    val f = PgCollationActualVersion()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_collation_actual_version</code> as a field.
 */
fun pgCollationActualVersion(
      __1: Field<Long?>
): Field<String?> {
    val f = PgCollationActualVersion()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCollationFor(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = PgCollationFor()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCollationFor(
      __1: Any?
): Field<String?> {
    val f = PgCollationFor()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCollationFor(
      __1: Field<Any?>
): Field<String?> {
    val f = PgCollationFor()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_collation_is_visible</code>
 */
fun pgCollationIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgCollationIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_collation_is_visible</code> as a field.
 */
fun pgCollationIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgCollationIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_collation_is_visible</code> as a field.
 */
fun pgCollationIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgCollationIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnCompression(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = PgColumnCompression()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnCompression(
      __1: Any?
): Field<String?> {
    val f = PgColumnCompression()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnCompression(
      __1: Field<Any?>
): Field<String?> {
    val f = PgColumnCompression()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnIsUpdatable(
      configuration: Configuration
    , __1: Any?
    , __2: Short?
    , __3: Boolean?
): Boolean? {
    val f = PgColumnIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnIsUpdatable(
      __1: Any?
    , __2: Short?
    , __3: Boolean?
): Field<Boolean?> {
    val f = PgColumnIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnIsUpdatable(
      __1: Field<Any?>
    , __2: Field<Short?>
    , __3: Field<Boolean?>
): Field<Boolean?> {
    val f = PgColumnIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnSize(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = PgColumnSize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnSize(
      __1: Any?
): Field<Int?> {
    val f = PgColumnSize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgColumnSize(
      __1: Field<Any?>
): Field<Int?> {
    val f = PgColumnSize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_conf_load_time</code>
 */
fun pgConfLoadTime(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgConfLoadTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_conf_load_time</code> as a field.
 */
fun pgConfLoadTime(): Field<OffsetDateTime?> {
    val f = PgConfLoadTime()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgControlCheckpoint(
      configuration: Configuration
): PgControlCheckpoint {
    val p = PgControlCheckpoint()

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_control_init</code>
 */
fun pgControlInit(
      configuration: Configuration
): PgControlInit {
    val p = PgControlInit()

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgControlRecovery(
      configuration: Configuration
): PgControlRecovery {
    val p = PgControlRecovery()

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_control_system</code>
 */
fun pgControlSystem(
      configuration: Configuration
): PgControlSystem {
    val p = PgControlSystem()

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_conversion_is_visible</code>
 */
fun pgConversionIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgConversionIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_conversion_is_visible</code> as a field.
 */
fun pgConversionIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgConversionIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_conversion_is_visible</code> as a field.
 */
fun pgConversionIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgConversionIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCopyLogicalReplicationSlot1(
      configuration: Configuration
    , srcSlotName: String?
    , dstSlotName: String?
    , temporary: Boolean?
    , plugin: String?
): PgCopyLogicalReplicationSlot1 {
    val p = PgCopyLogicalReplicationSlot1()
    p.setSrcSlotName(srcSlotName)
    p.setDstSlotName(dstSlotName)
    p.setTemporary(temporary)
    p.setPlugin(plugin)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCopyLogicalReplicationSlot2(
      configuration: Configuration
    , srcSlotName: String?
    , dstSlotName: String?
    , temporary: Boolean?
): PgCopyLogicalReplicationSlot2 {
    val p = PgCopyLogicalReplicationSlot2()
    p.setSrcSlotName(srcSlotName)
    p.setDstSlotName(dstSlotName)
    p.setTemporary(temporary)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCopyLogicalReplicationSlot3(
      configuration: Configuration
    , srcSlotName: String?
    , dstSlotName: String?
): PgCopyLogicalReplicationSlot3 {
    val p = PgCopyLogicalReplicationSlot3()
    p.setSrcSlotName(srcSlotName)
    p.setDstSlotName(dstSlotName)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCopyPhysicalReplicationSlot1(
      configuration: Configuration
    , srcSlotName: String?
    , dstSlotName: String?
    , temporary: Boolean?
): PgCopyPhysicalReplicationSlot1 {
    val p = PgCopyPhysicalReplicationSlot1()
    p.setSrcSlotName(srcSlotName)
    p.setDstSlotName(dstSlotName)
    p.setTemporary(temporary)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCopyPhysicalReplicationSlot2(
      configuration: Configuration
    , srcSlotName: String?
    , dstSlotName: String?
): PgCopyPhysicalReplicationSlot2 {
    val p = PgCopyPhysicalReplicationSlot2()
    p.setSrcSlotName(srcSlotName)
    p.setDstSlotName(dstSlotName)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCreateLogicalReplicationSlot(
      configuration: Configuration
    , slotName: String?
    , plugin: String?
    , temporary: Boolean?
    , twophase: Boolean?
): PgCreateLogicalReplicationSlot {
    val p = PgCreateLogicalReplicationSlot()
    p.setSlotName1(slotName)
    p.setPlugin(plugin)
    p.setTemporary(temporary)
    p.setTwophase(twophase)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCreatePhysicalReplicationSlot(
      configuration: Configuration
    , slotName: String?
    , immediatelyReserve: Boolean?
    , temporary: Boolean?
): PgCreatePhysicalReplicationSlot {
    val p = PgCreatePhysicalReplicationSlot()
    p.setSlotName1(slotName)
    p.setImmediatelyReserve(immediatelyReserve)
    p.setTemporary(temporary)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCreateRestorePoint(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = PgCreateRestorePoint()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCreateRestorePoint(
      __1: String?
): Field<Any?> {
    val f = PgCreateRestorePoint()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCreateRestorePoint(
      __1: Field<String?>
): Field<Any?> {
    val f = PgCreateRestorePoint()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_current_logfile</code>
 */
fun pgCurrentLogfile1(
      configuration: Configuration
): String? {
    val f = PgCurrentLogfile1()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_current_logfile</code> as a field.
 */
fun pgCurrentLogfile1(): Field<String?> {
    val f = PgCurrentLogfile1()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_current_logfile</code>
 */
fun pgCurrentLogfile2(
      configuration: Configuration
    , __1: String?
): String? {
    val f = PgCurrentLogfile2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_current_logfile</code> as a field.
 */
fun pgCurrentLogfile2(
      __1: String?
): Field<String?> {
    val f = PgCurrentLogfile2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_current_logfile</code> as a field.
 */
fun pgCurrentLogfile2(
      __1: Field<String?>
): Field<String?> {
    val f = PgCurrentLogfile2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentSnapshot(
      configuration: Configuration
): Any? {
    val f = PgCurrentSnapshot()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentSnapshot(): Field<Any?> {
    val f = PgCurrentSnapshot()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalFlushLsn(
      configuration: Configuration
): Any? {
    val f = PgCurrentWalFlushLsn()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalFlushLsn(): Field<Any?> {
    val f = PgCurrentWalFlushLsn()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalInsertLsn(
      configuration: Configuration
): Any? {
    val f = PgCurrentWalInsertLsn()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalInsertLsn(): Field<Any?> {
    val f = PgCurrentWalInsertLsn()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalLsn(
      configuration: Configuration
): Any? {
    val f = PgCurrentWalLsn()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentWalLsn(): Field<Any?> {
    val f = PgCurrentWalLsn()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentXactId(
      configuration: Configuration
): Any? {
    val f = PgCurrentXactId()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentXactId(): Field<Any?> {
    val f = PgCurrentXactId()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentXactIdIfAssigned(
      configuration: Configuration
): Any? {
    val f = PgCurrentXactIdIfAssigned()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgCurrentXactIdIfAssigned(): Field<Any?> {
    val f = PgCurrentXactIdIfAssigned()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_database_size</code>
 */
fun pgDatabaseSize1(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = PgDatabaseSize1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_database_size</code> as a field.
 */
fun pgDatabaseSize1(
      __1: String?
): Field<Long?> {
    val f = PgDatabaseSize1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_database_size</code> as a field.
 */
fun pgDatabaseSize1(
      __1: Field<String?>
): Field<Long?> {
    val f = PgDatabaseSize1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_database_size</code>
 */
fun pgDatabaseSize2(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgDatabaseSize2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_database_size</code> as a field.
 */
fun pgDatabaseSize2(
      __1: Long?
): Field<Long?> {
    val f = PgDatabaseSize2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_database_size</code> as a field.
 */
fun pgDatabaseSize2(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgDatabaseSize2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDdlCommandIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandIn(
      __1: Any?
): Field<Any?> {
    val f = PgDdlCommandIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDdlCommandIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDdlCommandOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandOut(
      __1: Any?
): Field<Any?> {
    val f = PgDdlCommandOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDdlCommandOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDdlCommandRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandRecv(
      __1: Any?
): Field<Any?> {
    val f = PgDdlCommandRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDdlCommandRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgDdlCommandSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgDdlCommandSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDdlCommandSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgDdlCommandSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDependenciesIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesIn(
      __1: Any?
): Field<Any?> {
    val f = PgDependenciesIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDependenciesIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDependenciesOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesOut(
      __1: Any?
): Field<Any?> {
    val f = PgDependenciesOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDependenciesOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgDependenciesRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesRecv(
      __1: Any?
): Field<Any?> {
    val f = PgDependenciesRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgDependenciesRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgDependenciesSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgDependenciesSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgDependenciesSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgDependenciesSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_describe_object</code>
 */
fun pgDescribeObject(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: Int?
): String? {
    val f = PgDescribeObject()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_describe_object</code> as a field.
 */
fun pgDescribeObject(
      __1: Long?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = PgDescribeObject()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_describe_object</code> as a field.
 */
fun pgDescribeObject(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = PgDescribeObject()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_drop_replication_slot</code>
 */
fun pgDropReplicationSlot(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgDropReplicationSlot()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_encoding_max_length</code>
 */
fun pgEncodingMaxLength(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = PgEncodingMaxLength()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_encoding_max_length</code> as a field.
 */
fun pgEncodingMaxLength(
      __1: Int?
): Field<Int?> {
    val f = PgEncodingMaxLength()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_encoding_max_length</code> as a field.
 */
fun pgEncodingMaxLength(
      __1: Field<Int?>
): Field<Int?> {
    val f = PgEncodingMaxLength()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_encoding_to_char</code>
 */
fun pgEncodingToChar(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = PgEncodingToChar()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_encoding_to_char</code> as a field.
 */
fun pgEncodingToChar(
      __1: Int?
): Field<String?> {
    val f = PgEncodingToChar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_encoding_to_char</code> as a field.
 */
fun pgEncodingToChar(
      __1: Field<Int?>
): Field<String?> {
    val f = PgEncodingToChar()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_event_trigger_table_rewrite_oid</code>
 */
fun pgEventTriggerTableRewriteOid(
      configuration: Configuration
): Long? {
    val p = PgEventTriggerTableRewriteOid()

    p.execute(configuration)
    return p.getOid()
}

/**
 * Call <code>pg_catalog.pg_event_trigger_table_rewrite_reason</code>
 */
fun pgEventTriggerTableRewriteReason(
      configuration: Configuration
): Int? {
    val f = PgEventTriggerTableRewriteReason()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_event_trigger_table_rewrite_reason</code> as a field.
 */
fun pgEventTriggerTableRewriteReason(): Field<Int?> {
    val f = PgEventTriggerTableRewriteReason()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_export_snapshot</code>
 */
fun pgExportSnapshot(
      configuration: Configuration
): String? {
    val f = PgExportSnapshot()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_export_snapshot</code> as a field.
 */
fun pgExportSnapshot(): Field<String?> {
    val f = PgExportSnapshot()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgExtensionConfigDump(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Unit {
    val p = PgExtensionConfigDump()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgFilenodeRelation(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Any? {
    val f = PgFilenodeRelation()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgFilenodeRelation(
      __1: Long?
    , __2: Long?
): Field<Any?> {
    val f = PgFilenodeRelation()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgFilenodeRelation(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Any?> {
    val f = PgFilenodeRelation()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_function_is_visible</code>
 */
fun pgFunctionIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgFunctionIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_function_is_visible</code> as a field.
 */
fun pgFunctionIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgFunctionIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_function_is_visible</code> as a field.
 */
fun pgFunctionIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgFunctionIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_constraintdef</code>
 */
fun pgGetConstraintdef1(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetConstraintdef1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_constraintdef</code> as a field.
 */
fun pgGetConstraintdef1(
      __1: Long?
): Field<String?> {
    val f = PgGetConstraintdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_constraintdef</code> as a field.
 */
fun pgGetConstraintdef1(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetConstraintdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_constraintdef</code>
 */
fun pgGetConstraintdef2(
      configuration: Configuration
    , __1: Long?
    , __2: Boolean?
): String? {
    val f = PgGetConstraintdef2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_constraintdef</code> as a field.
 */
fun pgGetConstraintdef2(
      __1: Long?
    , __2: Boolean?
): Field<String?> {
    val f = PgGetConstraintdef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_constraintdef</code> as a field.
 */
fun pgGetConstraintdef2(
      __1: Field<Long?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = PgGetConstraintdef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr1(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): String? {
    val f = PgGetExpr1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr1(
      __1: Any?
    , __2: Long?
): Field<String?> {
    val f = PgGetExpr1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr1(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<String?> {
    val f = PgGetExpr1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr2(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Boolean?
): String? {
    val f = PgGetExpr2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr2(
      __1: Any?
    , __2: Long?
    , __3: Boolean?
): Field<String?> {
    val f = PgGetExpr2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetExpr2(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = PgGetExpr2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_function_arg_default</code>
 */
fun pgGetFunctionArgDefault(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): String? {
    val f = PgGetFunctionArgDefault()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_function_arg_default</code> as a field.
 */
fun pgGetFunctionArgDefault(
      __1: Long?
    , __2: Int?
): Field<String?> {
    val f = PgGetFunctionArgDefault()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_function_arg_default</code> as a field.
 */
fun pgGetFunctionArgDefault(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<String?> {
    val f = PgGetFunctionArgDefault()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_function_arguments</code>
 */
fun pgGetFunctionArguments(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetFunctionArguments()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_function_arguments</code> as a field.
 */
fun pgGetFunctionArguments(
      __1: Long?
): Field<String?> {
    val f = PgGetFunctionArguments()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_function_arguments</code> as a field.
 */
fun pgGetFunctionArguments(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetFunctionArguments()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_function_identity_arguments</code>
 */
fun pgGetFunctionIdentityArguments(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetFunctionIdentityArguments()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_function_identity_arguments</code> as a field.
 */
fun pgGetFunctionIdentityArguments(
      __1: Long?
): Field<String?> {
    val f = PgGetFunctionIdentityArguments()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_function_identity_arguments</code> as a field.
 */
fun pgGetFunctionIdentityArguments(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetFunctionIdentityArguments()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_function_result</code>
 */
fun pgGetFunctionResult(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetFunctionResult()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_function_result</code> as a field.
 */
fun pgGetFunctionResult(
      __1: Long?
): Field<String?> {
    val f = PgGetFunctionResult()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_function_result</code> as a field.
 */
fun pgGetFunctionResult(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetFunctionResult()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_function_sqlbody</code>
 */
fun pgGetFunctionSqlbody(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetFunctionSqlbody()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_function_sqlbody</code> as a field.
 */
fun pgGetFunctionSqlbody(
      __1: Long?
): Field<String?> {
    val f = PgGetFunctionSqlbody()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_function_sqlbody</code> as a field.
 */
fun pgGetFunctionSqlbody(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetFunctionSqlbody()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_functiondef</code>
 */
fun pgGetFunctiondef(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetFunctiondef()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_functiondef</code> as a field.
 */
fun pgGetFunctiondef(
      __1: Long?
): Field<String?> {
    val f = PgGetFunctiondef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_functiondef</code> as a field.
 */
fun pgGetFunctiondef(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetFunctiondef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_indexdef</code>
 */
fun pgGetIndexdef1(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetIndexdef1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_indexdef</code> as a field.
 */
fun pgGetIndexdef1(
      __1: Long?
): Field<String?> {
    val f = PgGetIndexdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_indexdef</code> as a field.
 */
fun pgGetIndexdef1(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetIndexdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_indexdef</code>
 */
fun pgGetIndexdef2(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
    , __3: Boolean?
): String? {
    val f = PgGetIndexdef2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_indexdef</code> as a field.
 */
fun pgGetIndexdef2(
      __1: Long?
    , __2: Int?
    , __3: Boolean?
): Field<String?> {
    val f = PgGetIndexdef2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_indexdef</code> as a field.
 */
fun pgGetIndexdef2(
      __1: Field<Long?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = PgGetIndexdef2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_object_address</code>
 */
fun pgGetObjectAddress(
      configuration: Configuration
    , type: String?
    , objectNames: Array<String?>?
    , objectArgs: Array<String?>?
): PgGetObjectAddress {
    val p = PgGetObjectAddress()
    p.setType(type)
    p.setObjectNames(objectNames)
    p.setObjectArgs(objectArgs)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_get_partition_constraintdef</code>
 */
fun pgGetPartitionConstraintdef(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetPartitionConstraintdef()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_partition_constraintdef</code> as a field.
 */
fun pgGetPartitionConstraintdef(
      __1: Long?
): Field<String?> {
    val f = PgGetPartitionConstraintdef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_partition_constraintdef</code> as a field.
 */
fun pgGetPartitionConstraintdef(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetPartitionConstraintdef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_partkeydef</code>
 */
fun pgGetPartkeydef(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetPartkeydef()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_partkeydef</code> as a field.
 */
fun pgGetPartkeydef(
      __1: Long?
): Field<String?> {
    val f = PgGetPartkeydef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_partkeydef</code> as a field.
 */
fun pgGetPartkeydef(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetPartkeydef()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetReplicaIdentityIndex(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgGetReplicaIdentityIndex()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetReplicaIdentityIndex(
      __1: Any?
): Field<Any?> {
    val f = PgGetReplicaIdentityIndex()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgGetReplicaIdentityIndex(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgGetReplicaIdentityIndex()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_ruledef</code>
 */
fun pgGetRuledef1(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetRuledef1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_ruledef</code> as a field.
 */
fun pgGetRuledef1(
      __1: Long?
): Field<String?> {
    val f = PgGetRuledef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_ruledef</code> as a field.
 */
fun pgGetRuledef1(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetRuledef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_ruledef</code>
 */
fun pgGetRuledef2(
      configuration: Configuration
    , __1: Long?
    , __2: Boolean?
): String? {
    val f = PgGetRuledef2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_ruledef</code> as a field.
 */
fun pgGetRuledef2(
      __1: Long?
    , __2: Boolean?
): Field<String?> {
    val f = PgGetRuledef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_ruledef</code> as a field.
 */
fun pgGetRuledef2(
      __1: Field<Long?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = PgGetRuledef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_serial_sequence</code>
 */
fun pgGetSerialSequence(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = PgGetSerialSequence()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_serial_sequence</code> as a field.
 */
fun pgGetSerialSequence(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = PgGetSerialSequence()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_serial_sequence</code> as a field.
 */
fun pgGetSerialSequence(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = PgGetSerialSequence()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_statisticsobjdef</code>
 */
fun pgGetStatisticsobjdef(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetStatisticsobjdef()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef</code> as a field.
 */
fun pgGetStatisticsobjdef(
      __1: Long?
): Field<String?> {
    val f = PgGetStatisticsobjdef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef</code> as a field.
 */
fun pgGetStatisticsobjdef(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetStatisticsobjdef()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_statisticsobjdef_columns</code>
 */
fun pgGetStatisticsobjdefColumns(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetStatisticsobjdefColumns()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef_columns</code> as a field.
 */
fun pgGetStatisticsobjdefColumns(
      __1: Long?
): Field<String?> {
    val f = PgGetStatisticsobjdefColumns()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef_columns</code> as a field.
 */
fun pgGetStatisticsobjdefColumns(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetStatisticsobjdefColumns()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_statisticsobjdef_expressions</code>
 */
fun pgGetStatisticsobjdefExpressions(
      configuration: Configuration
    , __1: Long?
): Array<String?>? {
    val f = PgGetStatisticsobjdefExpressions()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef_expressions</code> as a field.
 */
fun pgGetStatisticsobjdefExpressions(
      __1: Long?
): Field<Array<String?>?> {
    val f = PgGetStatisticsobjdefExpressions()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_statisticsobjdef_expressions</code> as a field.
 */
fun pgGetStatisticsobjdefExpressions(
      __1: Field<Long?>
): Field<Array<String?>?> {
    val f = PgGetStatisticsobjdefExpressions()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_triggerdef</code>
 */
fun pgGetTriggerdef1(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetTriggerdef1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_triggerdef</code> as a field.
 */
fun pgGetTriggerdef1(
      __1: Long?
): Field<String?> {
    val f = PgGetTriggerdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_triggerdef</code> as a field.
 */
fun pgGetTriggerdef1(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetTriggerdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_triggerdef</code>
 */
fun pgGetTriggerdef2(
      configuration: Configuration
    , __1: Long?
    , __2: Boolean?
): String? {
    val f = PgGetTriggerdef2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_triggerdef</code> as a field.
 */
fun pgGetTriggerdef2(
      __1: Long?
    , __2: Boolean?
): Field<String?> {
    val f = PgGetTriggerdef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_triggerdef</code> as a field.
 */
fun pgGetTriggerdef2(
      __1: Field<Long?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = PgGetTriggerdef2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_userbyid</code>
 */
fun pgGetUserbyid(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetUserbyid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_userbyid</code> as a field.
 */
fun pgGetUserbyid(
      __1: Long?
): Field<String?> {
    val f = PgGetUserbyid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_userbyid</code> as a field.
 */
fun pgGetUserbyid(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetUserbyid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_viewdef</code>
 */
fun pgGetViewdef1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = PgGetViewdef1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef1(
      __1: String?
): Field<String?> {
    val f = PgGetViewdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef1(
      __1: Field<String?>
): Field<String?> {
    val f = PgGetViewdef1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_viewdef</code>
 */
fun pgGetViewdef2(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgGetViewdef2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef2(
      __1: Long?
): Field<String?> {
    val f = PgGetViewdef2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef2(
      __1: Field<Long?>
): Field<String?> {
    val f = PgGetViewdef2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_viewdef</code>
 */
fun pgGetViewdef3(
      configuration: Configuration
    , __1: String?
    , __2: Boolean?
): String? {
    val f = PgGetViewdef3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef3(
      __1: String?
    , __2: Boolean?
): Field<String?> {
    val f = PgGetViewdef3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef3(
      __1: Field<String?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = PgGetViewdef3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_viewdef</code>
 */
fun pgGetViewdef4(
      configuration: Configuration
    , __1: Long?
    , __2: Boolean?
): String? {
    val f = PgGetViewdef4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef4(
      __1: Long?
    , __2: Boolean?
): Field<String?> {
    val f = PgGetViewdef4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef4(
      __1: Field<Long?>
    , __2: Field<Boolean?>
): Field<String?> {
    val f = PgGetViewdef4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_viewdef</code>
 */
fun pgGetViewdef5(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): String? {
    val f = PgGetViewdef5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef5(
      __1: Long?
    , __2: Int?
): Field<String?> {
    val f = PgGetViewdef5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_get_viewdef</code> as a field.
 */
fun pgGetViewdef5(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<String?> {
    val f = PgGetViewdef5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_get_wal_replay_pause_state</code>
 */
fun pgGetWalReplayPauseState(
      configuration: Configuration
): String? {
    val f = PgGetWalReplayPauseState()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_get_wal_replay_pause_state</code> as a field.
 */
fun pgGetWalReplayPauseState(): Field<String?> {
    val f = PgGetWalReplayPauseState()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = PgHasRole1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = PgHasRole1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = PgHasRole2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole2(
      __1: String?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = PgHasRole2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole3(
      configuration: Configuration
    , __1: Long?
    , __2: String?
    , __3: String?
): Boolean? {
    val f = PgHasRole3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole3(
      __1: Long?
    , __2: String?
    , __3: String?
): Field<Boolean?> {
    val f = PgHasRole3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole3(
      __1: Field<Long?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole4(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
    , __3: String?
): Boolean? {
    val f = PgHasRole4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole4(
      __1: Long?
    , __2: Long?
    , __3: String?
): Field<Boolean?> {
    val f = PgHasRole4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole4(
      __1: Field<Long?>
    , __2: Field<Long?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole4()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = PgHasRole5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole5(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = PgHasRole5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_has_role</code>
 */
fun pgHasRole6(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = PgHasRole6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole6(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = PgHasRole6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_has_role</code> as a field.
 */
fun pgHasRole6(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = PgHasRole6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_identify_object</code>
 */
fun pgIdentifyObject(
      configuration: Configuration
    , classid: Long?
    , objid: Long?
    , objsubid: Int?
): PgIdentifyObject {
    val p = PgIdentifyObject()
    p.setClassid(classid)
    p.setObjid(objid)
    p.setObjsubid(objsubid)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_identify_object_as_address</code>
 */
fun pgIdentifyObjectAsAddress(
      configuration: Configuration
    , classid: Long?
    , objid: Long?
    , objsubid: Int?
): PgIdentifyObjectAsAddress {
    val p = PgIdentifyObjectAsAddress()
    p.setClassid(classid)
    p.setObjid(objid)
    p.setObjsubid(objsubid)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgImportSystemCollations(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = PgImportSystemCollations()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgImportSystemCollations(
      __1: Any?
): Field<Int?> {
    val f = PgImportSystemCollations()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgImportSystemCollations(
      __1: Field<Any?>
): Field<Int?> {
    val f = PgImportSystemCollations()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexColumnHasProperty(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
    , __3: String?
): Boolean? {
    val f = PgIndexColumnHasProperty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexColumnHasProperty(
      __1: Any?
    , __2: Int?
    , __3: String?
): Field<Boolean?> {
    val f = PgIndexColumnHasProperty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexColumnHasProperty(
      __1: Field<Any?>
    , __2: Field<Int?>
    , __3: Field<String?>
): Field<Boolean?> {
    val f = PgIndexColumnHasProperty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexHasProperty(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Boolean? {
    val f = PgIndexHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexHasProperty(
      __1: Any?
    , __2: String?
): Field<Boolean?> {
    val f = PgIndexHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexHasProperty(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = PgIndexHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_indexam_has_property</code>
 */
fun pgIndexamHasProperty(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): Boolean? {
    val f = PgIndexamHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_indexam_has_property</code> as a field.
 */
fun pgIndexamHasProperty(
      __1: Long?
    , __2: String?
): Field<Boolean?> {
    val f = PgIndexamHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_indexam_has_property</code> as a field.
 */
fun pgIndexamHasProperty(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = PgIndexamHasProperty()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_indexam_progress_phasename</code>
 */
fun pgIndexamProgressPhasename(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): String? {
    val f = PgIndexamProgressPhasename()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_indexam_progress_phasename</code> as a field.
 */
fun pgIndexamProgressPhasename(
      __1: Long?
    , __2: Long?
): Field<String?> {
    val f = PgIndexamProgressPhasename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_indexam_progress_phasename</code> as a field.
 */
fun pgIndexamProgressPhasename(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<String?> {
    val f = PgIndexamProgressPhasename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexesSize(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgIndexesSize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexesSize(
      __1: Any?
): Field<Long?> {
    val f = PgIndexesSize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgIndexesSize(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgIndexesSize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_is_in_backup</code>
 */
fun pgIsInBackup(
      configuration: Configuration
): Boolean? {
    val f = PgIsInBackup()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_is_in_backup</code> as a field.
 */
fun pgIsInBackup(): Field<Boolean?> {
    val f = PgIsInBackup()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_is_in_recovery</code>
 */
fun pgIsInRecovery(
      configuration: Configuration
): Boolean? {
    val f = PgIsInRecovery()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_is_in_recovery</code> as a field.
 */
fun pgIsInRecovery(): Field<Boolean?> {
    val f = PgIsInRecovery()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_is_other_temp_schema</code>
 */
fun pgIsOtherTempSchema(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgIsOtherTempSchema()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_is_other_temp_schema</code> as a field.
 */
fun pgIsOtherTempSchema(
      __1: Long?
): Field<Boolean?> {
    val f = PgIsOtherTempSchema()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_is_other_temp_schema</code> as a field.
 */
fun pgIsOtherTempSchema(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgIsOtherTempSchema()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_is_wal_replay_paused</code>
 */
fun pgIsWalReplayPaused(
      configuration: Configuration
): Boolean? {
    val f = PgIsWalReplayPaused()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_is_wal_replay_paused</code> as a field.
 */
fun pgIsWalReplayPaused(): Field<Boolean?> {
    val f = PgIsWalReplayPaused()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_isolation_test_session_is_blocked</code>
 */
fun pgIsolationTestSessionIsBlocked(
      configuration: Configuration
    , __1: Int?
    , __2: Array<Int?>?
): Boolean? {
    val f = PgIsolationTestSessionIsBlocked()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_isolation_test_session_is_blocked</code> as a field.
 */
fun pgIsolationTestSessionIsBlocked(
      __1: Int?
    , __2: Array<Int?>?
): Field<Boolean?> {
    val f = PgIsolationTestSessionIsBlocked()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_isolation_test_session_is_blocked</code> as a field.
 */
fun pgIsolationTestSessionIsBlocked(
      __1: Field<Int?>
    , __2: Field<Array<Int?>?>
): Field<Boolean?> {
    val f = PgIsolationTestSessionIsBlocked()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_jit_available</code>
 */
fun pgJitAvailable(
      configuration: Configuration
): Boolean? {
    val f = PgJitAvailable()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_jit_available</code> as a field.
 */
fun pgJitAvailable(): Field<Boolean?> {
    val f = PgJitAvailable()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_last_committed_xact</code>
 */
fun pgLastCommittedXact(
      configuration: Configuration
): PgLastCommittedXact {
    val p = PgLastCommittedXact()

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLastWalReceiveLsn(
      configuration: Configuration
): Any? {
    val f = PgLastWalReceiveLsn()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLastWalReceiveLsn(): Field<Any?> {
    val f = PgLastWalReceiveLsn()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLastWalReplayLsn(
      configuration: Configuration
): Any? {
    val f = PgLastWalReplayLsn()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLastWalReplayLsn(): Field<Any?> {
    val f = PgLastWalReplayLsn()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_last_xact_replay_timestamp</code>
 */
fun pgLastXactReplayTimestamp(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgLastXactReplayTimestamp()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_last_xact_replay_timestamp</code> as a field.
 */
fun pgLastXactReplayTimestamp(): Field<OffsetDateTime?> {
    val f = PgLastXactReplayTimestamp()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_log_backend_memory_contexts</code>
 */
fun pgLogBackendMemoryContexts(
      configuration: Configuration
    , __1: Int?
): Boolean? {
    val f = PgLogBackendMemoryContexts()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_log_backend_memory_contexts</code> as a field.
 */
fun pgLogBackendMemoryContexts(
      __1: Int?
): Field<Boolean?> {
    val f = PgLogBackendMemoryContexts()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_log_backend_memory_contexts</code> as a field.
 */
fun pgLogBackendMemoryContexts(
      __1: Field<Int?>
): Field<Boolean?> {
    val f = PgLogBackendMemoryContexts()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage1(
      configuration: Configuration
    , __1: Boolean?
    , __2: String?
    , __3: String?
): Any? {
    val f = PgLogicalEmitMessage1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage1(
      __1: Boolean?
    , __2: String?
    , __3: String?
): Field<Any?> {
    val f = PgLogicalEmitMessage1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage1(
      __1: Field<Boolean?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Any?> {
    val f = PgLogicalEmitMessage1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage2(
      configuration: Configuration
    , __1: Boolean?
    , __2: String?
    , __3: ByteArray?
): Any? {
    val f = PgLogicalEmitMessage2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage2(
      __1: Boolean?
    , __2: String?
    , __3: ByteArray?
): Field<Any?> {
    val f = PgLogicalEmitMessage2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalEmitMessage2(
      __1: Field<Boolean?>
    , __2: Field<String?>
    , __3: Field<ByteArray?>
): Field<Any?> {
    val f = PgLogicalEmitMessage2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsn(
      configuration: Configuration
    , __1: BigDecimal?
): Any? {
    val f = PgLsn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsn(
      __1: BigDecimal?
): Field<Any?> {
    val f = PgLsn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsn(
      __1: Field<BigDecimal?>
): Field<Any?> {
    val f = PgLsn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = PgLsnCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = PgLsnCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = PgLsnCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHash(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = PgLsnHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHash(
      __1: Any?
): Field<Int?> {
    val f = PgLsnHash()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHash(
      __1: Field<Any?>
): Field<Int?> {
    val f = PgLsnHash()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHashExtended(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = PgLsnHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHashExtended(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = PgLsnHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnHashExtended(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = PgLsnHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgLsnIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnIn(
      __1: Any?
): Field<Any?> {
    val f = PgLsnIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgLsnIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLarger(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PgLsnLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLarger(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PgLsnLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLarger(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PgLsnLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMi(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): BigDecimal? {
    val f = PgLsnMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMi(
      __1: Any?
    , __2: Any?
): Field<BigDecimal?> {
    val f = PgLsnMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMi(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<BigDecimal?> {
    val f = PgLsnMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMii(
      configuration: Configuration
    , __1: Any?
    , __2: BigDecimal?
): Any? {
    val f = PgLsnMii()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMii(
      __1: Any?
    , __2: BigDecimal?
): Field<Any?> {
    val f = PgLsnMii()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnMii(
      __1: Field<Any?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = PgLsnMii()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgLsnNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgLsnNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgLsnNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgLsnOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnOut(
      __1: Any?
): Field<Any?> {
    val f = PgLsnOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgLsnOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnPli(
      configuration: Configuration
    , __1: Any?
    , __2: BigDecimal?
): Any? {
    val f = PgLsnPli()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnPli(
      __1: Any?
    , __2: BigDecimal?
): Field<Any?> {
    val f = PgLsnPli()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnPli(
      __1: Field<Any?>
    , __2: Field<BigDecimal?>
): Field<Any?> {
    val f = PgLsnPli()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgLsnRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnRecv(
      __1: Any?
): Field<Any?> {
    val f = PgLsnRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgLsnRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgLsnSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgLsnSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgLsnSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSmaller(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PgLsnSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSmaller(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PgLsnSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLsnSmaller(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PgLsnSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgMcvListIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListIn(
      __1: Any?
): Field<Any?> {
    val f = PgMcvListIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgMcvListIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgMcvListOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListOut(
      __1: Any?
): Field<Any?> {
    val f = PgMcvListOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgMcvListOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgMcvListRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListRecv(
      __1: Any?
): Field<Any?> {
    val f = PgMcvListRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgMcvListRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgMcvListSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgMcvListSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgMcvListSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_my_temp_schema</code>
 */
fun pgMyTempSchema(
      configuration: Configuration
): Long? {
    val f = PgMyTempSchema()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_my_temp_schema</code> as a field.
 */
fun pgMyTempSchema(): Field<Long?> {
    val f = PgMyTempSchema()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNdistinctIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctIn(
      __1: Any?
): Field<Any?> {
    val f = PgNdistinctIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNdistinctIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNdistinctOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctOut(
      __1: Any?
): Field<Any?> {
    val f = PgNdistinctOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNdistinctOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNdistinctRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctRecv(
      __1: Any?
): Field<Any?> {
    val f = PgNdistinctRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNdistinctRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgNdistinctSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgNdistinctSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNdistinctSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgNdistinctSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNextoid(
      configuration: Configuration
    , __1: Any?
    , __2: String?
    , __3: Any?
): Long? {
    val f = PgNextoid()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNextoid(
      __1: Any?
    , __2: String?
    , __3: Any?
): Field<Long?> {
    val f = PgNextoid()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNextoid(
      __1: Field<Any?>
    , __2: Field<String?>
    , __3: Field<Any?>
): Field<Long?> {
    val f = PgNextoid()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNodeTreeIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeIn(
      __1: Any?
): Field<Any?> {
    val f = PgNodeTreeIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNodeTreeIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNodeTreeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeOut(
      __1: Any?
): Field<Any?> {
    val f = PgNodeTreeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNodeTreeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgNodeTreeRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeRecv(
      __1: Any?
): Field<Any?> {
    val f = PgNodeTreeRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgNodeTreeRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgNodeTreeSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgNodeTreeSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgNodeTreeSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgNodeTreeSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_notification_queue_usage</code>
 */
fun pgNotificationQueueUsage(
      configuration: Configuration
): Double? {
    val f = PgNotificationQueueUsage()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_notification_queue_usage</code> as a field.
 */
fun pgNotificationQueueUsage(): Field<Double?> {
    val f = PgNotificationQueueUsage()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_notify</code>
 */
fun pgNotify(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Unit {
    val p = PgNotify()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_opclass_is_visible</code>
 */
fun pgOpclassIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgOpclassIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_opclass_is_visible</code> as a field.
 */
fun pgOpclassIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgOpclassIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_opclass_is_visible</code> as a field.
 */
fun pgOpclassIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgOpclassIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_operator_is_visible</code>
 */
fun pgOperatorIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgOperatorIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_operator_is_visible</code> as a field.
 */
fun pgOperatorIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgOperatorIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_operator_is_visible</code> as a field.
 */
fun pgOperatorIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgOperatorIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_opfamily_is_visible</code>
 */
fun pgOpfamilyIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgOpfamilyIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_opfamily_is_visible</code> as a field.
 */
fun pgOpfamilyIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgOpfamilyIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_opfamily_is_visible</code> as a field.
 */
fun pgOpfamilyIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgOpfamilyIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionRoot(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgPartitionRoot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionRoot(
      __1: Any?
): Field<Any?> {
    val f = PgPartitionRoot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionRoot(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgPartitionRoot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_postmaster_start_time</code>
 */
fun pgPostmasterStartTime(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgPostmasterStartTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_postmaster_start_time</code> as a field.
 */
fun pgPostmasterStartTime(): Field<OffsetDateTime?> {
    val f = PgPostmasterStartTime()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_promote</code>
 */
fun pgPromote(
      configuration: Configuration
    , wait: Boolean?
    , waitSeconds: Int?
): Boolean? {
    val f = PgPromote()
    f.setWait(wait)
    f.setWaitSeconds(waitSeconds)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_promote</code> as a field.
 */
fun pgPromote(
      wait: Boolean?
    , waitSeconds: Int?
): Field<Boolean?> {
    val f = PgPromote()
    f.setWait(wait)
    f.setWaitSeconds(waitSeconds)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_promote</code> as a field.
 */
fun pgPromote(
      wait: Field<Boolean?>
    , waitSeconds: Field<Int?>
): Field<Boolean?> {
    val f = PgPromote()
    f.setWait(wait)
    f.setWaitSeconds(waitSeconds)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_binary_file</code>
 */
fun pgReadBinaryFile1(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
): ByteArray? {
    val f = PgReadBinaryFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile1(
      __1: String?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
): Field<ByteArray?> {
    val f = PgReadBinaryFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile1(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Long?>
    , __4: Field<Boolean?>
): Field<ByteArray?> {
    val f = PgReadBinaryFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_binary_file</code>
 */
fun pgReadBinaryFile2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Long?
): ByteArray? {
    val f = PgReadBinaryFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile2(
      __1: String?
    , __2: Long?
    , __3: Long?
): Field<ByteArray?> {
    val f = PgReadBinaryFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Long?>
): Field<ByteArray?> {
    val f = PgReadBinaryFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_binary_file</code>
 */
fun pgReadBinaryFile3(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = PgReadBinaryFile3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile3(
      __1: String?
): Field<ByteArray?> {
    val f = PgReadBinaryFile3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_binary_file</code> as a field.
 */
fun pgReadBinaryFile3(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = PgReadBinaryFile3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_file</code>
 */
fun pgReadFile1(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Long?
): String? {
    val f = PgReadFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile1(
      __1: String?
    , __2: Long?
    , __3: Long?
): Field<String?> {
    val f = PgReadFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile1(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Long?>
): Field<String?> {
    val f = PgReadFile1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_file</code>
 */
fun pgReadFile2(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
): String? {
    val f = PgReadFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile2(
      __1: String?
    , __2: Long?
    , __3: Long?
    , __4: Boolean?
): Field<String?> {
    val f = PgReadFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile2(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Long?>
    , __4: Field<Boolean?>
): Field<String?> {
    val f = PgReadFile2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_file</code>
 */
fun pgReadFile3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = PgReadFile3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile3(
      __1: String?
): Field<String?> {
    val f = PgReadFile3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_file</code> as a field.
 */
fun pgReadFile3(
      __1: Field<String?>
): Field<String?> {
    val f = PgReadFile3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_read_file_old</code>
 */
fun pgReadFileOld(
      configuration: Configuration
    , __1: String?
    , __2: Long?
    , __3: Long?
): String? {
    val f = PgReadFileOld()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_read_file_old</code> as a field.
 */
fun pgReadFileOld(
      __1: String?
    , __2: Long?
    , __3: Long?
): Field<String?> {
    val f = PgReadFileOld()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_read_file_old</code> as a field.
 */
fun pgReadFileOld(
      __1: Field<String?>
    , __2: Field<Long?>
    , __3: Field<Long?>
): Field<String?> {
    val f = PgReadFileOld()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilenode(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgRelationFilenode()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilenode(
      __1: Any?
): Field<Long?> {
    val f = PgRelationFilenode()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilenode(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgRelationFilenode()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilepath(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = PgRelationFilepath()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilepath(
      __1: Any?
): Field<String?> {
    val f = PgRelationFilepath()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationFilepath(
      __1: Field<Any?>
): Field<String?> {
    val f = PgRelationFilepath()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsPublishable(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = PgRelationIsPublishable()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsPublishable(
      __1: Any?
): Field<Boolean?> {
    val f = PgRelationIsPublishable()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsPublishable(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = PgRelationIsPublishable()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsUpdatable(
      configuration: Configuration
    , __1: Any?
    , __2: Boolean?
): Int? {
    val f = PgRelationIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsUpdatable(
      __1: Any?
    , __2: Boolean?
): Field<Int?> {
    val f = PgRelationIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationIsUpdatable(
      __1: Field<Any?>
    , __2: Field<Boolean?>
): Field<Int?> {
    val f = PgRelationIsUpdatable()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize1(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgRelationSize1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize1(
      __1: Any?
): Field<Long?> {
    val f = PgRelationSize1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize1(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgRelationSize1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize2(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Long? {
    val f = PgRelationSize2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize2(
      __1: Any?
    , __2: String?
): Field<Long?> {
    val f = PgRelationSize2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgRelationSize2(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Long?> {
    val f = PgRelationSize2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_reload_conf</code>
 */
fun pgReloadConf(
      configuration: Configuration
): Boolean? {
    val f = PgReloadConf()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_reload_conf</code> as a field.
 */
fun pgReloadConf(): Field<Boolean?> {
    val f = PgReloadConf()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginAdvance(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): Unit {
    val p = PgReplicationOriginAdvance()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_replication_origin_create</code>
 */
fun pgReplicationOriginCreate(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = PgReplicationOriginCreate()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_replication_origin_create</code> as a field.
 */
fun pgReplicationOriginCreate(
      __1: String?
): Field<Long?> {
    val f = PgReplicationOriginCreate()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_replication_origin_create</code> as a field.
 */
fun pgReplicationOriginCreate(
      __1: Field<String?>
): Field<Long?> {
    val f = PgReplicationOriginCreate()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_replication_origin_drop</code>
 */
fun pgReplicationOriginDrop(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgReplicationOriginDrop()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_replication_origin_oid</code>
 */
fun pgReplicationOriginOid(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = PgReplicationOriginOid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_replication_origin_oid</code> as a field.
 */
fun pgReplicationOriginOid(
      __1: String?
): Field<Long?> {
    val f = PgReplicationOriginOid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_replication_origin_oid</code> as a field.
 */
fun pgReplicationOriginOid(
      __1: Field<String?>
): Field<Long?> {
    val f = PgReplicationOriginOid()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginProgress(
      configuration: Configuration
    , __1: String?
    , __2: Boolean?
): Any? {
    val f = PgReplicationOriginProgress()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginProgress(
      __1: String?
    , __2: Boolean?
): Field<Any?> {
    val f = PgReplicationOriginProgress()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginProgress(
      __1: Field<String?>
    , __2: Field<Boolean?>
): Field<Any?> {
    val f = PgReplicationOriginProgress()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_replication_origin_session_is_setup</code>
 */
fun pgReplicationOriginSessionIsSetup(
      configuration: Configuration
): Boolean? {
    val f = PgReplicationOriginSessionIsSetup()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_replication_origin_session_is_setup</code> as a
 * field.
 */
fun pgReplicationOriginSessionIsSetup(): Field<Boolean?> {
    val f = PgReplicationOriginSessionIsSetup()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginSessionProgress(
      configuration: Configuration
    , __1: Boolean?
): Any? {
    val f = PgReplicationOriginSessionProgress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginSessionProgress(
      __1: Boolean?
): Field<Any?> {
    val f = PgReplicationOriginSessionProgress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginSessionProgress(
      __1: Field<Boolean?>
): Field<Any?> {
    val f = PgReplicationOriginSessionProgress()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_replication_origin_session_reset</code>
 */
fun pgReplicationOriginSessionReset(
      configuration: Configuration
): Unit {
    val p = PgReplicationOriginSessionReset()

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_replication_origin_session_setup</code>
 */
fun pgReplicationOriginSessionSetup(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgReplicationOriginSessionSetup()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_replication_origin_xact_reset</code>
 */
fun pgReplicationOriginXactReset(
      configuration: Configuration
): Unit {
    val p = PgReplicationOriginXactReset()

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationOriginXactSetup(
      configuration: Configuration
    , __1: Any?
    , __2: OffsetDateTime?
): Unit {
    val p = PgReplicationOriginXactSetup()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgReplicationSlotAdvance(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
): PgReplicationSlotAdvance {
    val p = PgReplicationSlotAdvance()
    p.setSlotName1(slotName)
    p.setUptoLsn(uptoLsn)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_rotate_logfile</code>
 */
fun pgRotateLogfile(
      configuration: Configuration
): Boolean? {
    val f = PgRotateLogfile()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_rotate_logfile</code> as a field.
 */
fun pgRotateLogfile(): Field<Boolean?> {
    val f = PgRotateLogfile()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_rotate_logfile_old</code>
 */
fun pgRotateLogfileOld(
      configuration: Configuration
): Boolean? {
    val f = PgRotateLogfileOld()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_rotate_logfile_old</code> as a field.
 */
fun pgRotateLogfileOld(): Field<Boolean?> {
    val f = PgRotateLogfileOld()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_safe_snapshot_blocking_pids</code>
 */
fun pgSafeSnapshotBlockingPids(
      configuration: Configuration
    , __1: Int?
): Array<Int?>? {
    val f = PgSafeSnapshotBlockingPids()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_safe_snapshot_blocking_pids</code> as a field.
 */
fun pgSafeSnapshotBlockingPids(
      __1: Int?
): Field<Array<Int?>?> {
    val f = PgSafeSnapshotBlockingPids()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_safe_snapshot_blocking_pids</code> as a field.
 */
fun pgSafeSnapshotBlockingPids(
      __1: Field<Int?>
): Field<Array<Int?>?> {
    val f = PgSafeSnapshotBlockingPids()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSequenceLastValue(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgSequenceLastValue()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSequenceLastValue(
      __1: Any?
): Field<Long?> {
    val f = PgSequenceLastValue()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSequenceLastValue(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgSequenceLastValue()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_sequence_parameters</code>
 */
fun pgSequenceParameters(
      configuration: Configuration
    , sequenceOid: Long?
): PgSequenceParameters {
    val p = PgSequenceParameters()
    p.setSequenceOid(sequenceOid)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_size_bytes</code>
 */
fun pgSizeBytes(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = PgSizeBytes()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_size_bytes</code> as a field.
 */
fun pgSizeBytes(
      __1: String?
): Field<Long?> {
    val f = PgSizeBytes()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_size_bytes</code> as a field.
 */
fun pgSizeBytes(
      __1: Field<String?>
): Field<Long?> {
    val f = PgSizeBytes()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_size_pretty</code>
 */
fun pgSizePretty1(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgSizePretty1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_size_pretty</code> as a field.
 */
fun pgSizePretty1(
      __1: Long?
): Field<String?> {
    val f = PgSizePretty1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_size_pretty</code> as a field.
 */
fun pgSizePretty1(
      __1: Field<Long?>
): Field<String?> {
    val f = PgSizePretty1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_size_pretty</code>
 */
fun pgSizePretty2(
      configuration: Configuration
    , __1: BigDecimal?
): String? {
    val f = PgSizePretty2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_size_pretty</code> as a field.
 */
fun pgSizePretty2(
      __1: BigDecimal?
): Field<String?> {
    val f = PgSizePretty2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_size_pretty</code> as a field.
 */
fun pgSizePretty2(
      __1: Field<BigDecimal?>
): Field<String?> {
    val f = PgSizePretty2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_sleep</code>
 */
fun pgSleep(
      configuration: Configuration
    , __1: Double?
): Unit {
    val p = PgSleep()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_sleep_for</code>
 */
fun pgSleepFor(
      configuration: Configuration
    , __1: YearToSecond?
): Unit {
    val p = PgSleepFor()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_sleep_until</code>
 */
fun pgSleepUntil(
      configuration: Configuration
    , __1: OffsetDateTime?
): Unit {
    val p = PgSleepUntil()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgSnapshotIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotIn(
      __1: Any?
): Field<Any?> {
    val f = PgSnapshotIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgSnapshotIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgSnapshotOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotOut(
      __1: Any?
): Field<Any?> {
    val f = PgSnapshotOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgSnapshotOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgSnapshotRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotRecv(
      __1: Any?
): Field<Any?> {
    val f = PgSnapshotRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgSnapshotRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PgSnapshotSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PgSnapshotSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PgSnapshotSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmax(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgSnapshotXmax()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmax(
      __1: Any?
): Field<Any?> {
    val f = PgSnapshotXmax()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmax(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgSnapshotXmax()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgSnapshotXmin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmin(
      __1: Any?
): Field<Any?> {
    val f = PgSnapshotXmin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXmin(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgSnapshotXmin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStartBackup(
      configuration: Configuration
    , label: String?
    , fast: Boolean?
    , exclusive: Boolean?
): Any? {
    val f = PgStartBackup()
    f.setLabel(label)
    f.setFast(fast)
    f.setExclusive(exclusive)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStartBackup(
      label: String?
    , fast: Boolean?
    , exclusive: Boolean?
): Field<Any?> {
    val f = PgStartBackup()
    f.setLabel(label)
    f.setFast(fast)
    f.setExclusive(exclusive)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStartBackup(
      label: Field<String?>
    , fast: Field<Boolean?>
    , exclusive: Field<Boolean?>
): Field<Any?> {
    val f = PgStartBackup()
    f.setLabel(label)
    f.setFast(fast)
    f.setExclusive(exclusive)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_clear_snapshot</code>
 */
fun pgStatClearSnapshot(
      configuration: Configuration
): Unit {
    val p = PgStatClearSnapshot()

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_file</code>
 */
fun pgStatFile1(
      configuration: Configuration
    , filename: String?
): PgStatFile1 {
    val p = PgStatFile1()
    p.setFilename(filename)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_stat_file</code>
 */
fun pgStatFile2(
      configuration: Configuration
    , filename: String?
    , missingOk: Boolean?
): PgStatFile2 {
    val p = PgStatFile2()
    p.setFilename(filename)
    p.setMissingOk(missingOk)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_stat_get_analyze_count</code>
 */
fun pgStatGetAnalyzeCount(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetAnalyzeCount()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_analyze_count</code> as a field.
 */
fun pgStatGetAnalyzeCount(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetAnalyzeCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_analyze_count</code> as a field.
 */
fun pgStatGetAnalyzeCount(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetAnalyzeCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_archiver</code>
 */
fun pgStatGetArchiver(
      configuration: Configuration
): PgStatGetArchiver {
    val p = PgStatGetArchiver()

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_stat_get_autoanalyze_count</code>
 */
fun pgStatGetAutoanalyzeCount(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetAutoanalyzeCount()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_autoanalyze_count</code> as a field.
 */
fun pgStatGetAutoanalyzeCount(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetAutoanalyzeCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_autoanalyze_count</code> as a field.
 */
fun pgStatGetAutoanalyzeCount(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetAutoanalyzeCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_autovacuum_count</code>
 */
fun pgStatGetAutovacuumCount(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetAutovacuumCount()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_autovacuum_count</code> as a field.
 */
fun pgStatGetAutovacuumCount(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetAutovacuumCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_autovacuum_count</code> as a field.
 */
fun pgStatGetAutovacuumCount(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetAutovacuumCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_activity</code>
 */
fun pgStatGetBackendActivity(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = PgStatGetBackendActivity()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_activity</code> as a field.
 */
fun pgStatGetBackendActivity(
      __1: Int?
): Field<String?> {
    val f = PgStatGetBackendActivity()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_activity</code> as a field.
 */
fun pgStatGetBackendActivity(
      __1: Field<Int?>
): Field<String?> {
    val f = PgStatGetBackendActivity()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_activity_start</code>
 */
fun pgStatGetBackendActivityStart(
      configuration: Configuration
    , __1: Int?
): OffsetDateTime? {
    val f = PgStatGetBackendActivityStart()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_activity_start</code> as a field.
 */
fun pgStatGetBackendActivityStart(
      __1: Int?
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendActivityStart()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_activity_start</code> as a field.
 */
fun pgStatGetBackendActivityStart(
      __1: Field<Int?>
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendActivityStart()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStatGetBackendClientAddr(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = PgStatGetBackendClientAddr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStatGetBackendClientAddr(
      __1: Int?
): Field<Any?> {
    val f = PgStatGetBackendClientAddr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStatGetBackendClientAddr(
      __1: Field<Int?>
): Field<Any?> {
    val f = PgStatGetBackendClientAddr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_client_port</code>
 */
fun pgStatGetBackendClientPort(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = PgStatGetBackendClientPort()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_client_port</code> as a field.
 */
fun pgStatGetBackendClientPort(
      __1: Int?
): Field<Int?> {
    val f = PgStatGetBackendClientPort()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_client_port</code> as a field.
 */
fun pgStatGetBackendClientPort(
      __1: Field<Int?>
): Field<Int?> {
    val f = PgStatGetBackendClientPort()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_dbid</code>
 */
fun pgStatGetBackendDbid(
      configuration: Configuration
    , __1: Int?
): Long? {
    val f = PgStatGetBackendDbid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_dbid</code> as a field.
 */
fun pgStatGetBackendDbid(
      __1: Int?
): Field<Long?> {
    val f = PgStatGetBackendDbid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_dbid</code> as a field.
 */
fun pgStatGetBackendDbid(
      __1: Field<Int?>
): Field<Long?> {
    val f = PgStatGetBackendDbid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_pid</code>
 */
fun pgStatGetBackendPid(
      configuration: Configuration
    , __1: Int?
): Int? {
    val f = PgStatGetBackendPid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_pid</code> as a field.
 */
fun pgStatGetBackendPid(
      __1: Int?
): Field<Int?> {
    val f = PgStatGetBackendPid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_pid</code> as a field.
 */
fun pgStatGetBackendPid(
      __1: Field<Int?>
): Field<Int?> {
    val f = PgStatGetBackendPid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_start</code>
 */
fun pgStatGetBackendStart(
      configuration: Configuration
    , __1: Int?
): OffsetDateTime? {
    val f = PgStatGetBackendStart()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_start</code> as a field.
 */
fun pgStatGetBackendStart(
      __1: Int?
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendStart()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_start</code> as a field.
 */
fun pgStatGetBackendStart(
      __1: Field<Int?>
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendStart()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_userid</code>
 */
fun pgStatGetBackendUserid(
      configuration: Configuration
    , __1: Int?
): Long? {
    val f = PgStatGetBackendUserid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_userid</code> as a field.
 */
fun pgStatGetBackendUserid(
      __1: Int?
): Field<Long?> {
    val f = PgStatGetBackendUserid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_userid</code> as a field.
 */
fun pgStatGetBackendUserid(
      __1: Field<Int?>
): Field<Long?> {
    val f = PgStatGetBackendUserid()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_wait_event</code>
 */
fun pgStatGetBackendWaitEvent(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = PgStatGetBackendWaitEvent()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_wait_event</code> as a field.
 */
fun pgStatGetBackendWaitEvent(
      __1: Int?
): Field<String?> {
    val f = PgStatGetBackendWaitEvent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_wait_event</code> as a field.
 */
fun pgStatGetBackendWaitEvent(
      __1: Field<Int?>
): Field<String?> {
    val f = PgStatGetBackendWaitEvent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_wait_event_type</code>
 */
fun pgStatGetBackendWaitEventType(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = PgStatGetBackendWaitEventType()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_wait_event_type</code> as a field.
 */
fun pgStatGetBackendWaitEventType(
      __1: Int?
): Field<String?> {
    val f = PgStatGetBackendWaitEventType()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_wait_event_type</code> as a field.
 */
fun pgStatGetBackendWaitEventType(
      __1: Field<Int?>
): Field<String?> {
    val f = PgStatGetBackendWaitEventType()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_backend_xact_start</code>
 */
fun pgStatGetBackendXactStart(
      configuration: Configuration
    , __1: Int?
): OffsetDateTime? {
    val f = PgStatGetBackendXactStart()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_xact_start</code> as a field.
 */
fun pgStatGetBackendXactStart(
      __1: Int?
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendXactStart()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_backend_xact_start</code> as a field.
 */
fun pgStatGetBackendXactStart(
      __1: Field<Int?>
): Field<OffsetDateTime?> {
    val f = PgStatGetBackendXactStart()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints</code>
 */
fun pgStatGetBgwriterBufWrittenCheckpoints(
      configuration: Configuration
): Long? {
    val f = PgStatGetBgwriterBufWrittenCheckpoints()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints</code> as a
 * field.
 */
fun pgStatGetBgwriterBufWrittenCheckpoints(): Field<Long?> {
    val f = PgStatGetBgwriterBufWrittenCheckpoints()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_buf_written_clean</code>
 */
fun pgStatGetBgwriterBufWrittenClean(
      configuration: Configuration
): Long? {
    val f = PgStatGetBgwriterBufWrittenClean()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_buf_written_clean</code> as a
 * field.
 */
fun pgStatGetBgwriterBufWrittenClean(): Field<Long?> {
    val f = PgStatGetBgwriterBufWrittenClean()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_maxwritten_clean</code>
 */
fun pgStatGetBgwriterMaxwrittenClean(
      configuration: Configuration
): Long? {
    val f = PgStatGetBgwriterMaxwrittenClean()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_maxwritten_clean</code> as a field.
 */
fun pgStatGetBgwriterMaxwrittenClean(): Field<Long?> {
    val f = PgStatGetBgwriterMaxwrittenClean()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_requested_checkpoints</code>
 */
fun pgStatGetBgwriterRequestedCheckpoints(
      configuration: Configuration
): Long? {
    val f = PgStatGetBgwriterRequestedCheckpoints()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_requested_checkpoints</code> as a
 * field.
 */
fun pgStatGetBgwriterRequestedCheckpoints(): Field<Long?> {
    val f = PgStatGetBgwriterRequestedCheckpoints()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_stat_reset_time</code>
 */
fun pgStatGetBgwriterStatResetTime(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgStatGetBgwriterStatResetTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_stat_reset_time</code> as a field.
 */
fun pgStatGetBgwriterStatResetTime(): Field<OffsetDateTime?> {
    val f = PgStatGetBgwriterStatResetTime()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_bgwriter_timed_checkpoints</code>
 */
fun pgStatGetBgwriterTimedCheckpoints(
      configuration: Configuration
): Long? {
    val f = PgStatGetBgwriterTimedCheckpoints()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_bgwriter_timed_checkpoints</code> as a
 * field.
 */
fun pgStatGetBgwriterTimedCheckpoints(): Field<Long?> {
    val f = PgStatGetBgwriterTimedCheckpoints()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_blocks_fetched</code>
 */
fun pgStatGetBlocksFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetBlocksFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_blocks_fetched</code> as a field.
 */
fun pgStatGetBlocksFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_blocks_fetched</code> as a field.
 */
fun pgStatGetBlocksFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_blocks_hit</code>
 */
fun pgStatGetBlocksHit(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetBlocksHit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_blocks_hit</code> as a field.
 */
fun pgStatGetBlocksHit(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_blocks_hit</code> as a field.
 */
fun pgStatGetBlocksHit(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_buf_alloc</code>
 */
fun pgStatGetBufAlloc(
      configuration: Configuration
): Long? {
    val f = PgStatGetBufAlloc()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_buf_alloc</code> as a field.
 */
fun pgStatGetBufAlloc(): Field<Long?> {
    val f = PgStatGetBufAlloc()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_buf_fsync_backend</code>
 */
fun pgStatGetBufFsyncBackend(
      configuration: Configuration
): Long? {
    val f = PgStatGetBufFsyncBackend()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_buf_fsync_backend</code> as a field.
 */
fun pgStatGetBufFsyncBackend(): Field<Long?> {
    val f = PgStatGetBufFsyncBackend()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_buf_written_backend</code>
 */
fun pgStatGetBufWrittenBackend(
      configuration: Configuration
): Long? {
    val f = PgStatGetBufWrittenBackend()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_buf_written_backend</code> as a field.
 */
fun pgStatGetBufWrittenBackend(): Field<Long?> {
    val f = PgStatGetBufWrittenBackend()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_checkpoint_sync_time</code>
 */
fun pgStatGetCheckpointSyncTime(
      configuration: Configuration
): Double? {
    val f = PgStatGetCheckpointSyncTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_checkpoint_sync_time</code> as a field.
 */
fun pgStatGetCheckpointSyncTime(): Field<Double?> {
    val f = PgStatGetCheckpointSyncTime()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_checkpoint_write_time</code>
 */
fun pgStatGetCheckpointWriteTime(
      configuration: Configuration
): Double? {
    val f = PgStatGetCheckpointWriteTime()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_checkpoint_write_time</code> as a field.
 */
fun pgStatGetCheckpointWriteTime(): Field<Double?> {
    val f = PgStatGetCheckpointWriteTime()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_active_time</code>
 */
fun pgStatGetDbActiveTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetDbActiveTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_active_time</code> as a field.
 */
fun pgStatGetDbActiveTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetDbActiveTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_active_time</code> as a field.
 */
fun pgStatGetDbActiveTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetDbActiveTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_blk_read_time</code>
 */
fun pgStatGetDbBlkReadTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetDbBlkReadTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blk_read_time</code> as a field.
 */
fun pgStatGetDbBlkReadTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetDbBlkReadTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blk_read_time</code> as a field.
 */
fun pgStatGetDbBlkReadTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetDbBlkReadTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_blk_write_time</code>
 */
fun pgStatGetDbBlkWriteTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetDbBlkWriteTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blk_write_time</code> as a field.
 */
fun pgStatGetDbBlkWriteTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetDbBlkWriteTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blk_write_time</code> as a field.
 */
fun pgStatGetDbBlkWriteTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetDbBlkWriteTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_blocks_fetched</code>
 */
fun pgStatGetDbBlocksFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbBlocksFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blocks_fetched</code> as a field.
 */
fun pgStatGetDbBlocksFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blocks_fetched</code> as a field.
 */
fun pgStatGetDbBlocksFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_blocks_hit</code>
 */
fun pgStatGetDbBlocksHit(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbBlocksHit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blocks_hit</code> as a field.
 */
fun pgStatGetDbBlocksHit(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_blocks_hit</code> as a field.
 */
fun pgStatGetDbBlocksHit(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_checksum_failures</code>
 */
fun pgStatGetDbChecksumFailures(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbChecksumFailures()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_checksum_failures</code> as a field.
 */
fun pgStatGetDbChecksumFailures(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbChecksumFailures()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_checksum_failures</code> as a field.
 */
fun pgStatGetDbChecksumFailures(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbChecksumFailures()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_checksum_last_failure</code>
 */
fun pgStatGetDbChecksumLastFailure(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetDbChecksumLastFailure()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_checksum_last_failure</code> as a field.
 */
fun pgStatGetDbChecksumLastFailure(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetDbChecksumLastFailure()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_checksum_last_failure</code> as a field.
 */
fun pgStatGetDbChecksumLastFailure(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetDbChecksumLastFailure()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_all</code>
 */
fun pgStatGetDbConflictAll(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictAll()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_all</code> as a field.
 */
fun pgStatGetDbConflictAll(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictAll()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_all</code> as a field.
 */
fun pgStatGetDbConflictAll(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictAll()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_bufferpin</code>
 */
fun pgStatGetDbConflictBufferpin(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictBufferpin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_bufferpin</code> as a field.
 */
fun pgStatGetDbConflictBufferpin(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictBufferpin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_bufferpin</code> as a field.
 */
fun pgStatGetDbConflictBufferpin(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictBufferpin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_lock</code>
 */
fun pgStatGetDbConflictLock(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictLock()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_lock</code> as a field.
 */
fun pgStatGetDbConflictLock(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictLock()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_lock</code> as a field.
 */
fun pgStatGetDbConflictLock(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictLock()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_snapshot</code>
 */
fun pgStatGetDbConflictSnapshot(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictSnapshot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_snapshot</code> as a field.
 */
fun pgStatGetDbConflictSnapshot(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictSnapshot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_snapshot</code> as a field.
 */
fun pgStatGetDbConflictSnapshot(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictSnapshot()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_startup_deadlock</code>
 */
fun pgStatGetDbConflictStartupDeadlock(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictStartupDeadlock()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_startup_deadlock</code> as a
 * field.
 */
fun pgStatGetDbConflictStartupDeadlock(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictStartupDeadlock()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_startup_deadlock</code> as a
 * field.
 */
fun pgStatGetDbConflictStartupDeadlock(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictStartupDeadlock()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_conflict_tablespace</code>
 */
fun pgStatGetDbConflictTablespace(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbConflictTablespace()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_tablespace</code> as a field.
 */
fun pgStatGetDbConflictTablespace(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbConflictTablespace()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_conflict_tablespace</code> as a field.
 */
fun pgStatGetDbConflictTablespace(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbConflictTablespace()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_deadlocks</code>
 */
fun pgStatGetDbDeadlocks(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbDeadlocks()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_deadlocks</code> as a field.
 */
fun pgStatGetDbDeadlocks(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbDeadlocks()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_deadlocks</code> as a field.
 */
fun pgStatGetDbDeadlocks(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbDeadlocks()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_idle_in_transaction_time</code>
 */
fun pgStatGetDbIdleInTransactionTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetDbIdleInTransactionTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_idle_in_transaction_time</code> as a
 * field.
 */
fun pgStatGetDbIdleInTransactionTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetDbIdleInTransactionTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_idle_in_transaction_time</code> as a
 * field.
 */
fun pgStatGetDbIdleInTransactionTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetDbIdleInTransactionTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_numbackends</code>
 */
fun pgStatGetDbNumbackends(
      configuration: Configuration
    , __1: Long?
): Int? {
    val f = PgStatGetDbNumbackends()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_numbackends</code> as a field.
 */
fun pgStatGetDbNumbackends(
      __1: Long?
): Field<Int?> {
    val f = PgStatGetDbNumbackends()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_numbackends</code> as a field.
 */
fun pgStatGetDbNumbackends(
      __1: Field<Long?>
): Field<Int?> {
    val f = PgStatGetDbNumbackends()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_session_time</code>
 */
fun pgStatGetDbSessionTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetDbSessionTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_session_time</code> as a field.
 */
fun pgStatGetDbSessionTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetDbSessionTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_session_time</code> as a field.
 */
fun pgStatGetDbSessionTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetDbSessionTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_sessions</code>
 */
fun pgStatGetDbSessions(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbSessions()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions</code> as a field.
 */
fun pgStatGetDbSessions(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbSessions()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions</code> as a field.
 */
fun pgStatGetDbSessions(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbSessions()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_sessions_abandoned</code>
 */
fun pgStatGetDbSessionsAbandoned(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbSessionsAbandoned()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_abandoned</code> as a field.
 */
fun pgStatGetDbSessionsAbandoned(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbSessionsAbandoned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_abandoned</code> as a field.
 */
fun pgStatGetDbSessionsAbandoned(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbSessionsAbandoned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_sessions_fatal</code>
 */
fun pgStatGetDbSessionsFatal(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbSessionsFatal()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_fatal</code> as a field.
 */
fun pgStatGetDbSessionsFatal(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbSessionsFatal()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_fatal</code> as a field.
 */
fun pgStatGetDbSessionsFatal(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbSessionsFatal()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_sessions_killed</code>
 */
fun pgStatGetDbSessionsKilled(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbSessionsKilled()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_killed</code> as a field.
 */
fun pgStatGetDbSessionsKilled(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbSessionsKilled()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_sessions_killed</code> as a field.
 */
fun pgStatGetDbSessionsKilled(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbSessionsKilled()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_stat_reset_time</code>
 */
fun pgStatGetDbStatResetTime(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetDbStatResetTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_stat_reset_time</code> as a field.
 */
fun pgStatGetDbStatResetTime(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetDbStatResetTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_stat_reset_time</code> as a field.
 */
fun pgStatGetDbStatResetTime(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetDbStatResetTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_temp_bytes</code>
 */
fun pgStatGetDbTempBytes(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTempBytes()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_temp_bytes</code> as a field.
 */
fun pgStatGetDbTempBytes(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTempBytes()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_temp_bytes</code> as a field.
 */
fun pgStatGetDbTempBytes(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTempBytes()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_temp_files</code>
 */
fun pgStatGetDbTempFiles(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTempFiles()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_temp_files</code> as a field.
 */
fun pgStatGetDbTempFiles(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTempFiles()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_temp_files</code> as a field.
 */
fun pgStatGetDbTempFiles(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTempFiles()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_tuples_deleted</code>
 */
fun pgStatGetDbTuplesDeleted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTuplesDeleted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_deleted</code> as a field.
 */
fun pgStatGetDbTuplesDeleted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_deleted</code> as a field.
 */
fun pgStatGetDbTuplesDeleted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_tuples_fetched</code>
 */
fun pgStatGetDbTuplesFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTuplesFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_fetched</code> as a field.
 */
fun pgStatGetDbTuplesFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_fetched</code> as a field.
 */
fun pgStatGetDbTuplesFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_tuples_inserted</code>
 */
fun pgStatGetDbTuplesInserted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTuplesInserted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_inserted</code> as a field.
 */
fun pgStatGetDbTuplesInserted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_inserted</code> as a field.
 */
fun pgStatGetDbTuplesInserted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_tuples_returned</code>
 */
fun pgStatGetDbTuplesReturned(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTuplesReturned()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_returned</code> as a field.
 */
fun pgStatGetDbTuplesReturned(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_returned</code> as a field.
 */
fun pgStatGetDbTuplesReturned(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_tuples_updated</code>
 */
fun pgStatGetDbTuplesUpdated(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbTuplesUpdated()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_updated</code> as a field.
 */
fun pgStatGetDbTuplesUpdated(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_tuples_updated</code> as a field.
 */
fun pgStatGetDbTuplesUpdated(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_xact_commit</code>
 */
fun pgStatGetDbXactCommit(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbXactCommit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_xact_commit</code> as a field.
 */
fun pgStatGetDbXactCommit(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbXactCommit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_xact_commit</code> as a field.
 */
fun pgStatGetDbXactCommit(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbXactCommit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_db_xact_rollback</code>
 */
fun pgStatGetDbXactRollback(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDbXactRollback()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_xact_rollback</code> as a field.
 */
fun pgStatGetDbXactRollback(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDbXactRollback()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_db_xact_rollback</code> as a field.
 */
fun pgStatGetDbXactRollback(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDbXactRollback()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_dead_tuples</code>
 */
fun pgStatGetDeadTuples(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetDeadTuples()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_dead_tuples</code> as a field.
 */
fun pgStatGetDeadTuples(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetDeadTuples()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_dead_tuples</code> as a field.
 */
fun pgStatGetDeadTuples(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetDeadTuples()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_function_calls</code>
 */
fun pgStatGetFunctionCalls(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetFunctionCalls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_calls</code> as a field.
 */
fun pgStatGetFunctionCalls(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetFunctionCalls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_calls</code> as a field.
 */
fun pgStatGetFunctionCalls(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetFunctionCalls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_function_self_time</code>
 */
fun pgStatGetFunctionSelfTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetFunctionSelfTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_self_time</code> as a field.
 */
fun pgStatGetFunctionSelfTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetFunctionSelfTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_self_time</code> as a field.
 */
fun pgStatGetFunctionSelfTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetFunctionSelfTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_function_total_time</code>
 */
fun pgStatGetFunctionTotalTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetFunctionTotalTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_total_time</code> as a field.
 */
fun pgStatGetFunctionTotalTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetFunctionTotalTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_function_total_time</code> as a field.
 */
fun pgStatGetFunctionTotalTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetFunctionTotalTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_ins_since_vacuum</code>
 */
fun pgStatGetInsSinceVacuum(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetInsSinceVacuum()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_ins_since_vacuum</code> as a field.
 */
fun pgStatGetInsSinceVacuum(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetInsSinceVacuum()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_ins_since_vacuum</code> as a field.
 */
fun pgStatGetInsSinceVacuum(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetInsSinceVacuum()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_last_analyze_time</code>
 */
fun pgStatGetLastAnalyzeTime(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetLastAnalyzeTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_analyze_time</code> as a field.
 */
fun pgStatGetLastAnalyzeTime(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAnalyzeTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_analyze_time</code> as a field.
 */
fun pgStatGetLastAnalyzeTime(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAnalyzeTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_last_autoanalyze_time</code>
 */
fun pgStatGetLastAutoanalyzeTime(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetLastAutoanalyzeTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_autoanalyze_time</code> as a field.
 */
fun pgStatGetLastAutoanalyzeTime(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAutoanalyzeTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_autoanalyze_time</code> as a field.
 */
fun pgStatGetLastAutoanalyzeTime(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAutoanalyzeTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_last_autovacuum_time</code>
 */
fun pgStatGetLastAutovacuumTime(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetLastAutovacuumTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_autovacuum_time</code> as a field.
 */
fun pgStatGetLastAutovacuumTime(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAutovacuumTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_autovacuum_time</code> as a field.
 */
fun pgStatGetLastAutovacuumTime(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetLastAutovacuumTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_last_vacuum_time</code>
 */
fun pgStatGetLastVacuumTime(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgStatGetLastVacuumTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_vacuum_time</code> as a field.
 */
fun pgStatGetLastVacuumTime(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgStatGetLastVacuumTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_last_vacuum_time</code> as a field.
 */
fun pgStatGetLastVacuumTime(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgStatGetLastVacuumTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_live_tuples</code>
 */
fun pgStatGetLiveTuples(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetLiveTuples()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_live_tuples</code> as a field.
 */
fun pgStatGetLiveTuples(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetLiveTuples()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_live_tuples</code> as a field.
 */
fun pgStatGetLiveTuples(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetLiveTuples()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_mod_since_analyze</code>
 */
fun pgStatGetModSinceAnalyze(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetModSinceAnalyze()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_mod_since_analyze</code> as a field.
 */
fun pgStatGetModSinceAnalyze(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetModSinceAnalyze()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_mod_since_analyze</code> as a field.
 */
fun pgStatGetModSinceAnalyze(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetModSinceAnalyze()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_numscans</code>
 */
fun pgStatGetNumscans(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetNumscans()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_numscans</code> as a field.
 */
fun pgStatGetNumscans(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetNumscans()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_numscans</code> as a field.
 */
fun pgStatGetNumscans(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetNumscans()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_snapshot_timestamp</code>
 */
fun pgStatGetSnapshotTimestamp(
      configuration: Configuration
): OffsetDateTime? {
    val f = PgStatGetSnapshotTimestamp()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_snapshot_timestamp</code> as a field.
 */
fun pgStatGetSnapshotTimestamp(): Field<OffsetDateTime?> {
    val f = PgStatGetSnapshotTimestamp()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_deleted</code>
 */
fun pgStatGetTuplesDeleted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesDeleted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_deleted</code> as a field.
 */
fun pgStatGetTuplesDeleted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_deleted</code> as a field.
 */
fun pgStatGetTuplesDeleted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_fetched</code>
 */
fun pgStatGetTuplesFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_fetched</code> as a field.
 */
fun pgStatGetTuplesFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_fetched</code> as a field.
 */
fun pgStatGetTuplesFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_hot_updated</code>
 */
fun pgStatGetTuplesHotUpdated(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesHotUpdated()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_hot_updated</code> as a field.
 */
fun pgStatGetTuplesHotUpdated(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesHotUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_hot_updated</code> as a field.
 */
fun pgStatGetTuplesHotUpdated(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesHotUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_inserted</code>
 */
fun pgStatGetTuplesInserted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesInserted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_inserted</code> as a field.
 */
fun pgStatGetTuplesInserted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_inserted</code> as a field.
 */
fun pgStatGetTuplesInserted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_returned</code>
 */
fun pgStatGetTuplesReturned(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesReturned()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_returned</code> as a field.
 */
fun pgStatGetTuplesReturned(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_returned</code> as a field.
 */
fun pgStatGetTuplesReturned(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_tuples_updated</code>
 */
fun pgStatGetTuplesUpdated(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetTuplesUpdated()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_updated</code> as a field.
 */
fun pgStatGetTuplesUpdated(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_tuples_updated</code> as a field.
 */
fun pgStatGetTuplesUpdated(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_vacuum_count</code>
 */
fun pgStatGetVacuumCount(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetVacuumCount()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_vacuum_count</code> as a field.
 */
fun pgStatGetVacuumCount(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetVacuumCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_vacuum_count</code> as a field.
 */
fun pgStatGetVacuumCount(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetVacuumCount()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_wal</code>
 */
fun pgStatGetWal(
      configuration: Configuration
): PgStatGetWal {
    val p = PgStatGetWal()

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStatGetWalReceiver(
      configuration: Configuration
): PgStatGetWalReceiver {
    val p = PgStatGetWalReceiver()

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_blocks_fetched</code>
 */
fun pgStatGetXactBlocksFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactBlocksFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_blocks_fetched</code> as a field.
 */
fun pgStatGetXactBlocksFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_blocks_fetched</code> as a field.
 */
fun pgStatGetXactBlocksFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactBlocksFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_blocks_hit</code>
 */
fun pgStatGetXactBlocksHit(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactBlocksHit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_blocks_hit</code> as a field.
 */
fun pgStatGetXactBlocksHit(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_blocks_hit</code> as a field.
 */
fun pgStatGetXactBlocksHit(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactBlocksHit()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_function_calls</code>
 */
fun pgStatGetXactFunctionCalls(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactFunctionCalls()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_calls</code> as a field.
 */
fun pgStatGetXactFunctionCalls(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactFunctionCalls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_calls</code> as a field.
 */
fun pgStatGetXactFunctionCalls(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactFunctionCalls()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_function_self_time</code>
 */
fun pgStatGetXactFunctionSelfTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetXactFunctionSelfTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_self_time</code> as a field.
 */
fun pgStatGetXactFunctionSelfTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetXactFunctionSelfTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_self_time</code> as a field.
 */
fun pgStatGetXactFunctionSelfTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetXactFunctionSelfTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_function_total_time</code>
 */
fun pgStatGetXactFunctionTotalTime(
      configuration: Configuration
    , __1: Long?
): Double? {
    val f = PgStatGetXactFunctionTotalTime()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_total_time</code> as a field.
 */
fun pgStatGetXactFunctionTotalTime(
      __1: Long?
): Field<Double?> {
    val f = PgStatGetXactFunctionTotalTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_function_total_time</code> as a field.
 */
fun pgStatGetXactFunctionTotalTime(
      __1: Field<Long?>
): Field<Double?> {
    val f = PgStatGetXactFunctionTotalTime()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_numscans</code>
 */
fun pgStatGetXactNumscans(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactNumscans()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_numscans</code> as a field.
 */
fun pgStatGetXactNumscans(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactNumscans()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_numscans</code> as a field.
 */
fun pgStatGetXactNumscans(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactNumscans()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_deleted</code>
 */
fun pgStatGetXactTuplesDeleted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesDeleted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_deleted</code> as a field.
 */
fun pgStatGetXactTuplesDeleted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_deleted</code> as a field.
 */
fun pgStatGetXactTuplesDeleted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesDeleted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_fetched</code>
 */
fun pgStatGetXactTuplesFetched(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesFetched()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_fetched</code> as a field.
 */
fun pgStatGetXactTuplesFetched(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_fetched</code> as a field.
 */
fun pgStatGetXactTuplesFetched(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesFetched()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_hot_updated</code>
 */
fun pgStatGetXactTuplesHotUpdated(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesHotUpdated()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_hot_updated</code> as a field.
 */
fun pgStatGetXactTuplesHotUpdated(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesHotUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_hot_updated</code> as a field.
 */
fun pgStatGetXactTuplesHotUpdated(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesHotUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_inserted</code>
 */
fun pgStatGetXactTuplesInserted(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesInserted()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_inserted</code> as a field.
 */
fun pgStatGetXactTuplesInserted(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_inserted</code> as a field.
 */
fun pgStatGetXactTuplesInserted(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesInserted()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_returned</code>
 */
fun pgStatGetXactTuplesReturned(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesReturned()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_returned</code> as a field.
 */
fun pgStatGetXactTuplesReturned(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_returned</code> as a field.
 */
fun pgStatGetXactTuplesReturned(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesReturned()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_get_xact_tuples_updated</code>
 */
fun pgStatGetXactTuplesUpdated(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgStatGetXactTuplesUpdated()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_updated</code> as a field.
 */
fun pgStatGetXactTuplesUpdated(
      __1: Long?
): Field<Long?> {
    val f = PgStatGetXactTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_stat_get_xact_tuples_updated</code> as a field.
 */
fun pgStatGetXactTuplesUpdated(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgStatGetXactTuplesUpdated()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_stat_reset</code>
 */
fun pgStatReset(
      configuration: Configuration
): Unit {
    val p = PgStatReset()

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_reset_replication_slot</code>
 */
fun pgStatResetReplicationSlot(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgStatResetReplicationSlot()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_reset_shared</code>
 */
fun pgStatResetShared(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgStatResetShared()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_reset_single_function_counters</code>
 */
fun pgStatResetSingleFunctionCounters(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgStatResetSingleFunctionCounters()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_reset_single_table_counters</code>
 */
fun pgStatResetSingleTableCounters(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PgStatResetSingleTableCounters()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_stat_reset_slru</code>
 */
fun pgStatResetSlru(
      configuration: Configuration
    , __1: String?
): Unit {
    val p = PgStatResetSlru()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_statistics_obj_is_visible</code>
 */
fun pgStatisticsObjIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgStatisticsObjIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_statistics_obj_is_visible</code> as a field.
 */
fun pgStatisticsObjIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgStatisticsObjIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_statistics_obj_is_visible</code> as a field.
 */
fun pgStatisticsObjIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgStatisticsObjIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStopBackup(
      configuration: Configuration
): Any? {
    val f = PgStopBackup()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgStopBackup(): Field<Any?> {
    val f = PgStopBackup()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSwitchWal(
      configuration: Configuration
): Any? {
    val f = PgSwitchWal()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSwitchWal(): Field<Any?> {
    val f = PgSwitchWal()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_table_is_visible</code>
 */
fun pgTableIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTableIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_table_is_visible</code> as a field.
 */
fun pgTableIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTableIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_table_is_visible</code> as a field.
 */
fun pgTableIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTableIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTableSize(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgTableSize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTableSize(
      __1: Any?
): Field<Long?> {
    val f = PgTableSize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTableSize(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgTableSize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_tablespace_location</code>
 */
fun pgTablespaceLocation(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = PgTablespaceLocation()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_tablespace_location</code> as a field.
 */
fun pgTablespaceLocation(
      __1: Long?
): Field<String?> {
    val f = PgTablespaceLocation()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_tablespace_location</code> as a field.
 */
fun pgTablespaceLocation(
      __1: Field<Long?>
): Field<String?> {
    val f = PgTablespaceLocation()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_tablespace_size</code>
 */
fun pgTablespaceSize1(
      configuration: Configuration
    , __1: Long?
): Long? {
    val f = PgTablespaceSize1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_tablespace_size</code> as a field.
 */
fun pgTablespaceSize1(
      __1: Long?
): Field<Long?> {
    val f = PgTablespaceSize1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_tablespace_size</code> as a field.
 */
fun pgTablespaceSize1(
      __1: Field<Long?>
): Field<Long?> {
    val f = PgTablespaceSize1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_tablespace_size</code>
 */
fun pgTablespaceSize2(
      configuration: Configuration
    , __1: String?
): Long? {
    val f = PgTablespaceSize2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_tablespace_size</code> as a field.
 */
fun pgTablespaceSize2(
      __1: String?
): Field<Long?> {
    val f = PgTablespaceSize2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_tablespace_size</code> as a field.
 */
fun pgTablespaceSize2(
      __1: Field<String?>
): Field<Long?> {
    val f = PgTablespaceSize2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_terminate_backend</code>
 */
fun pgTerminateBackend(
      configuration: Configuration
    , pid: Int?
    , timeout: Long?
): Boolean? {
    val f = PgTerminateBackend()
    f.setPid(pid)
    f.setTimeout(timeout)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_terminate_backend</code> as a field.
 */
fun pgTerminateBackend(
      pid: Int?
    , timeout: Long?
): Field<Boolean?> {
    val f = PgTerminateBackend()
    f.setPid(pid)
    f.setTimeout(timeout)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_terminate_backend</code> as a field.
 */
fun pgTerminateBackend(
      pid: Field<Int?>
    , timeout: Field<Long?>
): Field<Boolean?> {
    val f = PgTerminateBackend()
    f.setPid(pid)
    f.setTimeout(timeout)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTotalRelationSize(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = PgTotalRelationSize()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTotalRelationSize(
      __1: Any?
): Field<Long?> {
    val f = PgTotalRelationSize()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTotalRelationSize(
      __1: Field<Any?>
): Field<Long?> {
    val f = PgTotalRelationSize()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_trigger_depth</code>
 */
fun pgTriggerDepth(
      configuration: Configuration
): Int? {
    val f = PgTriggerDepth()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_trigger_depth</code> as a field.
 */
fun pgTriggerDepth(): Field<Int?> {
    val f = PgTriggerDepth()

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_lock</code>
 */
fun pgTryAdvisoryLock1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTryAdvisoryLock1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock</code> as a field.
 */
fun pgTryAdvisoryLock1(
      __1: Long?
): Field<Boolean?> {
    val f = PgTryAdvisoryLock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock</code> as a field.
 */
fun pgTryAdvisoryLock1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTryAdvisoryLock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_lock</code>
 */
fun pgTryAdvisoryLock2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgTryAdvisoryLock2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock</code> as a field.
 */
fun pgTryAdvisoryLock2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgTryAdvisoryLock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock</code> as a field.
 */
fun pgTryAdvisoryLock2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgTryAdvisoryLock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_lock_shared</code>
 */
fun pgTryAdvisoryLockShared1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTryAdvisoryLockShared1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock_shared</code> as a field.
 */
fun pgTryAdvisoryLockShared1(
      __1: Long?
): Field<Boolean?> {
    val f = PgTryAdvisoryLockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock_shared</code> as a field.
 */
fun pgTryAdvisoryLockShared1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTryAdvisoryLockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_lock_shared</code>
 */
fun pgTryAdvisoryLockShared2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgTryAdvisoryLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock_shared</code> as a field.
 */
fun pgTryAdvisoryLockShared2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgTryAdvisoryLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_lock_shared</code> as a field.
 */
fun pgTryAdvisoryLockShared2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgTryAdvisoryLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_xact_lock</code>
 */
fun pgTryAdvisoryXactLock1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTryAdvisoryXactLock1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock</code> as a field.
 */
fun pgTryAdvisoryXactLock1(
      __1: Long?
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock</code> as a field.
 */
fun pgTryAdvisoryXactLock1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLock1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_xact_lock</code>
 */
fun pgTryAdvisoryXactLock2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgTryAdvisoryXactLock2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock</code> as a field.
 */
fun pgTryAdvisoryXactLock2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock</code> as a field.
 */
fun pgTryAdvisoryXactLock2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLock2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_xact_lock_shared</code>
 */
fun pgTryAdvisoryXactLockShared1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTryAdvisoryXactLockShared1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock_shared</code> as a field.
 */
fun pgTryAdvisoryXactLockShared1(
      __1: Long?
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock_shared</code> as a field.
 */
fun pgTryAdvisoryXactLockShared1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLockShared1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_try_advisory_xact_lock_shared</code>
 */
fun pgTryAdvisoryXactLockShared2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
): Boolean? {
    val f = PgTryAdvisoryXactLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock_shared</code> as a field.
 */
fun pgTryAdvisoryXactLockShared2(
      __1: Int?
    , __2: Int?
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_try_advisory_xact_lock_shared</code> as a field.
 */
fun pgTryAdvisoryXactLockShared2(
      __1: Field<Int?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = PgTryAdvisoryXactLockShared2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_ts_config_is_visible</code>
 */
fun pgTsConfigIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTsConfigIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_ts_config_is_visible</code> as a field.
 */
fun pgTsConfigIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTsConfigIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_ts_config_is_visible</code> as a field.
 */
fun pgTsConfigIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTsConfigIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_ts_dict_is_visible</code>
 */
fun pgTsDictIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTsDictIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_ts_dict_is_visible</code> as a field.
 */
fun pgTsDictIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTsDictIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_ts_dict_is_visible</code> as a field.
 */
fun pgTsDictIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTsDictIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_ts_parser_is_visible</code>
 */
fun pgTsParserIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTsParserIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_ts_parser_is_visible</code> as a field.
 */
fun pgTsParserIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTsParserIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_ts_parser_is_visible</code> as a field.
 */
fun pgTsParserIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTsParserIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_ts_template_is_visible</code>
 */
fun pgTsTemplateIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTsTemplateIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_ts_template_is_visible</code> as a field.
 */
fun pgTsTemplateIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTsTemplateIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_ts_template_is_visible</code> as a field.
 */
fun pgTsTemplateIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTsTemplateIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_type_is_visible</code>
 */
fun pgTypeIsVisible(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = PgTypeIsVisible()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_type_is_visible</code> as a field.
 */
fun pgTypeIsVisible(
      __1: Long?
): Field<Boolean?> {
    val f = PgTypeIsVisible()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_type_is_visible</code> as a field.
 */
fun pgTypeIsVisible(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = PgTypeIsVisible()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTypeof(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PgTypeof()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTypeof(
      __1: Any?
): Field<Any?> {
    val f = PgTypeof()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgTypeof(
      __1: Field<Any?>
): Field<Any?> {
    val f = PgTypeof()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgVisibleInSnapshot(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PgVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgVisibleInSnapshot(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PgVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgVisibleInSnapshot(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PgVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalLsnDiff(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): BigDecimal? {
    val f = PgWalLsnDiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalLsnDiff(
      __1: Any?
    , __2: Any?
): Field<BigDecimal?> {
    val f = PgWalLsnDiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalLsnDiff(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<BigDecimal?> {
    val f = PgWalLsnDiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_wal_replay_pause</code>
 */
fun pgWalReplayPause(
      configuration: Configuration
): Unit {
    val p = PgWalReplayPause()

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.pg_wal_replay_resume</code>
 */
fun pgWalReplayResume(
      configuration: Configuration
): Unit {
    val p = PgWalReplayResume()

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalfileName(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = PgWalfileName()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalfileName(
      __1: Any?
): Field<String?> {
    val f = PgWalfileName()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalfileName(
      __1: Field<Any?>
): Field<String?> {
    val f = PgWalfileName()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgWalfileNameOffset(
      configuration: Configuration
    , lsn: Any?
): PgWalfileNameOffset {
    val p = PgWalfileNameOffset()
    p.setLsn(lsn)

    p.execute(configuration)
    return p
}

/**
 * Call <code>pg_catalog.pg_xact_commit_timestamp</code>
 */
fun pgXactCommitTimestamp(
      configuration: Configuration
    , __1: Long?
): OffsetDateTime? {
    val f = PgXactCommitTimestamp()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pg_xact_commit_timestamp</code> as a field.
 */
fun pgXactCommitTimestamp(
      __1: Long?
): Field<OffsetDateTime?> {
    val f = PgXactCommitTimestamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pg_xact_commit_timestamp</code> as a field.
 */
fun pgXactCommitTimestamp(
      __1: Field<Long?>
): Field<OffsetDateTime?> {
    val f = PgXactCommitTimestamp()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pg_xact_commit_timestamp_origin</code>
 */
fun pgXactCommitTimestampOrigin(
      configuration: Configuration
    , xid: Long?
): PgXactCommitTimestampOrigin {
    val p = PgXactCommitTimestampOrigin()
    p.setXid(xid)

    p.execute(configuration)
    return p
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgXactStatus(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = PgXactStatus()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgXactStatus(
      __1: Any?
): Field<String?> {
    val f = PgXactStatus()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgXactStatus(
      __1: Field<Any?>
): Field<String?> {
    val f = PgXactStatus()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery1(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = PhrasetoTsquery1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery1(
      __1: String?
): Field<Any?> {
    val f = PhrasetoTsquery1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery1(
      __1: Field<String?>
): Field<Any?> {
    val f = PhrasetoTsquery1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery2(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = PhrasetoTsquery2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery2(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = PhrasetoTsquery2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun phrasetoTsquery2(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = PhrasetoTsquery2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pi</code>
 */
fun pi(
      configuration: Configuration
): Double? {
    val f = Pi()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pi</code> as a field.
 */
fun pi(): Field<Double?> {
    val f = Pi()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = PlaintoTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery1(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = PlaintoTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery1(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = PlaintoTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery2(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = PlaintoTsquery2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery2(
      __1: String?
): Field<Any?> {
    val f = PlaintoTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plaintoTsquery2(
      __1: Field<String?>
): Field<Any?> {
    val f = PlaintoTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plpgsqlCallHandler(
      configuration: Configuration
): Any? {
    val f = PlpgsqlCallHandler()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plpgsqlCallHandler(): Field<Any?> {
    val f = PlpgsqlCallHandler()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun plpgsqlInlineHandler(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = PlpgsqlInlineHandler()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Call <code>pg_catalog.plpgsql_validator</code>
 */
fun plpgsqlValidator(
      configuration: Configuration
    , __1: Long?
): Unit {
    val p = PlpgsqlValidator()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Point1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point1(
      __1: Any?
): Field<Any?> {
    val f = Point1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Point1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point2(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Any? {
    val f = Point2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point2(
      __1: Double?
    , __2: Double?
): Field<Any?> {
    val f = Point2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point2(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Any?> {
    val f = Point2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point3(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Point3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point3(
      __1: Any?
): Field<Any?> {
    val f = Point3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point3(
      __1: Field<Any?>
): Field<Any?> {
    val f = Point3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point4(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Point4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point4(
      __1: Any?
): Field<Any?> {
    val f = Point4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point4(
      __1: Field<Any?>
): Field<Any?> {
    val f = Point4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point5(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Point5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point5(
      __1: Any?
): Field<Any?> {
    val f = Point5()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point5(
      __1: Field<Any?>
): Field<Any?> {
    val f = Point5()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point6(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Point6()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point6(
      __1: Any?
): Field<Any?> {
    val f = Point6()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun point6(
      __1: Field<Any?>
): Field<Any?> {
    val f = Point6()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAbove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointAbove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAbove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAbove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAdd(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PointAdd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAdd(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PointAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointAdd(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PointAdd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointBelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointBelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointBelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointBelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = PointDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = PointDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = PointDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDiv(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PointDiv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDiv(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PointDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointDiv(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PointDiv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointHoriz(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointHoriz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointHoriz(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointHoriz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointHoriz(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointHoriz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PointIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointIn(
      __1: Any?
): Field<Any?> {
    val f = PointIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PointIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointLeft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointLeft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointLeft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointLeft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointMul(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PointMul()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointMul(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PointMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointMul(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PointMul()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PointOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointOut(
      __1: Any?
): Field<Any?> {
    val f = PointOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PointOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PointRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRecv(
      __1: Any?
): Field<Any?> {
    val f = PointRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PointRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRight(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointRight()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRight(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointRight(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PointSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSend(
      __1: Any?
): Field<ByteArray?> {
    val f = PointSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PointSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSub(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = PointSub()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSub(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = PointSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointSub(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = PointSub()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointVert(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PointVert()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointVert(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PointVert()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pointVert(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PointVert()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyAbove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyAbove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyAbove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyAbove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyAbove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyBelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyBelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyBelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyBelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyBelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyCenter(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PolyCenter()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyCenter(
      __1: Any?
): Field<Any?> {
    val f = PolyCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyCenter(
      __1: Field<Any?>
): Field<Any?> {
    val f = PolyCenter()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContain(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyContain()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContain(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContain(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyContain()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContainPt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyContainPt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContainPt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContainPt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyContainPt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContained(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyContained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContained(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyContained(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyContained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyDistance(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = PolyDistance()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyDistance(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = PolyDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyDistance(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = PolyDistance()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PolyIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyIn(
      __1: Any?
): Field<Any?> {
    val f = PolyIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = PolyIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyLeft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyLeft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyLeft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyLeft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyLeft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyNpoints(
      configuration: Configuration
    , __1: Any?
): Int? {
    val f = PolyNpoints()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyNpoints(
      __1: Any?
): Field<Int?> {
    val f = PolyNpoints()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyNpoints(
      __1: Field<Any?>
): Field<Int?> {
    val f = PolyNpoints()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PolyOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOut(
      __1: Any?
): Field<Any?> {
    val f = PolyOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = PolyOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverabove(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyOverabove()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverabove(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverabove(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyOverabove()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverbelow(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverbelow(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverbelow(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyOverbelow()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverlap(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyOverlap()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverlap(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverlap(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyOverlap()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverleft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyOverleft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverleft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverleft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverright(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyOverright()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverright(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyOverright(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PolyRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRecv(
      __1: Any?
): Field<Any?> {
    val f = PolyRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = PolyRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRight(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolyRight()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRight(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolyRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polyRight(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolyRight()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PolySame()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySame(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PolySame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySame(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PolySame()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = PolySend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySend(
      __1: Any?
): Field<ByteArray?> {
    val f = PolySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polySend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = PolySend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Polygon1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon1(
      __1: Any?
): Field<Any?> {
    val f = Polygon1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Polygon1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Polygon2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon2(
      __1: Any?
): Field<Any?> {
    val f = Polygon2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Polygon2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon3(
      configuration: Configuration
    , __1: Int?
    , __2: Any?
): Any? {
    val f = Polygon3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon3(
      __1: Int?
    , __2: Any?
): Field<Any?> {
    val f = Polygon3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon3(
      __1: Field<Int?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = Polygon3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon4(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Polygon4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon4(
      __1: Any?
): Field<Any?> {
    val f = Polygon4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun polygon4(
      __1: Field<Any?>
): Field<Any?> {
    val f = Polygon4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun popen(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Popen()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun popen(
      __1: Any?
): Field<Any?> {
    val f = Popen()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun popen(
      __1: Field<Any?>
): Field<Any?> {
    val f = Popen()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.position</code>
 */
fun position1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Position1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position1(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Position1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Position1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.position</code>
 */
fun position2(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): Int? {
    val f = Position2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position2(
      __1: ByteArray?
    , __2: ByteArray?
): Field<Int?> {
    val f = Position2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position2(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<Int?> {
    val f = Position2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.position</code>
 */
fun position3(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Position3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position3(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Position3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.position</code> as a field.
 */
fun position3(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Position3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Positionjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Positionjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Positionjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Positionsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Positionsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun positionsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Positionsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.postgresql_fdw_validator</code>
 */
fun postgresqlFdwValidator(
      configuration: Configuration
    , __1: Array<String?>?
    , __2: Long?
): Boolean? {
    val f = PostgresqlFdwValidator()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.postgresql_fdw_validator</code> as a field.
 */
fun postgresqlFdwValidator(
      __1: Array<String?>?
    , __2: Long?
): Field<Boolean?> {
    val f = PostgresqlFdwValidator()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.postgresql_fdw_validator</code> as a field.
 */
fun postgresqlFdwValidator(
      __1: Field<Array<String?>?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = PostgresqlFdwValidator()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pow</code>
 */
fun pow1(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Pow1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pow</code> as a field.
 */
fun pow1(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Pow1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pow</code> as a field.
 */
fun pow1(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Pow1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.pow</code>
 */
fun pow2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Pow2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.pow</code> as a field.
 */
fun pow2(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Pow2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.pow</code> as a field.
 */
fun pow2(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Pow2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.power</code>
 */
fun power1(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
): Double? {
    val f = Power1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.power</code> as a field.
 */
fun power1(
      __1: Double?
    , __2: Double?
): Field<Double?> {
    val f = Power1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.power</code> as a field.
 */
fun power1(
      __1: Field<Double?>
    , __2: Field<Double?>
): Field<Double?> {
    val f = Power1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.power</code>
 */
fun power2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
): BigDecimal? {
    val f = Power2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.power</code> as a field.
 */
fun power2(
      __1: BigDecimal?
    , __2: BigDecimal?
): Field<BigDecimal?> {
    val f = Power2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.power</code> as a field.
 */
fun power2(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Power2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Prefixjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Prefixjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Prefixjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Prefixsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Prefixsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prefixsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Prefixsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdEnd(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = PrsdEnd()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdHeadline(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = PrsdHeadline()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdHeadline(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = PrsdHeadline()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdHeadline(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = PrsdHeadline()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdLextype(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = PrsdLextype()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdLextype(
      __1: Any?
): Field<Any?> {
    val f = PrsdLextype()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdLextype(
      __1: Field<Any?>
): Field<Any?> {
    val f = PrsdLextype()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdNexttoken(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = PrsdNexttoken()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdNexttoken(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = PrsdNexttoken()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdNexttoken(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = PrsdNexttoken()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdStart(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = PrsdStart()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdStart(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = PrsdStart()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun prsdStart(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = PrsdStart()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedCircle(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PtContainedCircle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedCircle(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PtContainedCircle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedCircle(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PtContainedCircle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedPoly(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = PtContainedPoly()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedPoly(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = PtContainedPoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun ptContainedPoly(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = PtContainedPoly()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.query_to_xml</code>
 */
fun queryToXml(
      configuration: Configuration
    , query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = QueryToXml()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.query_to_xml</code> as a field.
 */
fun queryToXml(
      query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = QueryToXml()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.query_to_xml</code> as a field.
 */
fun queryToXml(
      query: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = QueryToXml()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.query_to_xml_and_xmlschema</code>
 */
fun queryToXmlAndXmlschema(
      configuration: Configuration
    , query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = QueryToXmlAndXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.query_to_xml_and_xmlschema</code> as a field.
 */
fun queryToXmlAndXmlschema(
      query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = QueryToXmlAndXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.query_to_xml_and_xmlschema</code> as a field.
 */
fun queryToXmlAndXmlschema(
      query: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = QueryToXmlAndXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.query_to_xmlschema</code>
 */
fun queryToXmlschema(
      configuration: Configuration
    , query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = QueryToXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.query_to_xmlschema</code> as a field.
 */
fun queryToXmlschema(
      query: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = QueryToXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.query_to_xmlschema</code> as a field.
 */
fun queryToXmlschema(
      query: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = QueryToXmlschema()
    f.setQuery(query)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun querytree(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Querytree()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun querytree(
      __1: Any?
): Field<String?> {
    val f = Querytree()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun querytree(
      __1: Field<Any?>
): Field<String?> {
    val f = Querytree()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.quote_ident</code>
 */
fun quoteIdent(
      configuration: Configuration
    , __1: String?
): String? {
    val f = QuoteIdent()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.quote_ident</code> as a field.
 */
fun quoteIdent(
      __1: String?
): Field<String?> {
    val f = QuoteIdent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.quote_ident</code> as a field.
 */
fun quoteIdent(
      __1: Field<String?>
): Field<String?> {
    val f = QuoteIdent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.quote_literal</code>
 */
fun quoteLiteral1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = QuoteLiteral1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.quote_literal</code> as a field.
 */
fun quoteLiteral1(
      __1: String?
): Field<String?> {
    val f = QuoteLiteral1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.quote_literal</code> as a field.
 */
fun quoteLiteral1(
      __1: Field<String?>
): Field<String?> {
    val f = QuoteLiteral1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteLiteral2(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = QuoteLiteral2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteLiteral2(
      __1: Any?
): Field<String?> {
    val f = QuoteLiteral2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteLiteral2(
      __1: Field<Any?>
): Field<String?> {
    val f = QuoteLiteral2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.quote_nullable</code>
 */
fun quoteNullable1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = QuoteNullable1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.quote_nullable</code> as a field.
 */
fun quoteNullable1(
      __1: String?
): Field<String?> {
    val f = QuoteNullable1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.quote_nullable</code> as a field.
 */
fun quoteNullable1(
      __1: Field<String?>
): Field<String?> {
    val f = QuoteNullable1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteNullable2(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = QuoteNullable2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteNullable2(
      __1: Any?
): Field<String?> {
    val f = QuoteNullable2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun quoteNullable2(
      __1: Field<Any?>
): Field<String?> {
    val f = QuoteNullable2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.radians</code>
 */
fun radians(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Radians()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.radians</code> as a field.
 */
fun radians(
      __1: Double?
): Field<Double?> {
    val f = Radians()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.radians</code> as a field.
 */
fun radians(
      __1: Field<Double?>
): Field<Double?> {
    val f = Radians()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun radius(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Radius()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun radius(
      __1: Any?
): Field<Double?> {
    val f = Radius()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun radius(
      __1: Field<Any?>
): Field<Double?> {
    val f = Radius()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.random</code>
 */
fun random(
      configuration: Configuration
): Double? {
    val f = Random()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.random</code> as a field.
 */
fun random(): Field<Double?> {
    val f = Random()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeAdjacent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeAdjacent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeAdjacent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacentMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacentMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAdjacentMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeAdjacentMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfter(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeAfter()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfter(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeAfter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfter(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeAfter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfterMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfterMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAfterMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeAfterMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAgg(
      __1: Any?
): AggregateFunction<Any?> {
    val f = RangeAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAgg(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = RangeAgg()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggFinalfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggFinalfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggFinalfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeAggFinalfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBefore(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeBefore()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBefore(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeBefore()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBefore(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeBefore()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBeforeMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBeforeMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeBeforeMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeBeforeMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = RangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = RangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = RangeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedBy(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeContainedBy()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedBy(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeContainedBy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedBy(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeContainedBy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedByMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedByMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainedByMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeContainedByMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContains(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeContains()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContains(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeContains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContains(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeContains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsElem(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsElem(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsElem(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeContainsElem()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeContainsMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeContainsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Boolean? {
    val f = RangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistConsistent(
      __1: Any?
    , __2: Any?
    , __3: Short?
    , __4: Long?
    , __5: Any?
): Field<Boolean?> {
    val f = RangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Short?>
    , __4: Field<Long?>
    , __5: Field<Any?>
): Field<Boolean?> {
    val f = RangeGistConsistent()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPenalty(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = RangeGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPenalty(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = RangeGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPenalty(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = RangeGistPenalty()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPicksplit(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistPicksplit(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeGistPicksplit()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistSame(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = RangeGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistSame(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = RangeGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistSame(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = RangeGistSame()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGistUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeGistUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = RangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = RangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = RangeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersect(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersect(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersect(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeIntersect()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAgg1(
      __1: Any?
): AggregateFunction<Any?> {
    val f = RangeIntersectAgg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAgg1(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = RangeIntersectAgg1()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAgg2(
      __1: Any?
): AggregateFunction<Any?> {
    val f = RangeIntersectAgg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAgg2(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = RangeIntersectAgg2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAggTransfn(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeIntersectAggTransfn(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeIntersectAggTransfn()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeMerge1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge1(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeMerge1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeMerge1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = RangeMerge2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge2(
      __1: Any?
): Field<Any?> {
    val f = RangeMerge2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMerge2(
      __1: Field<Any?>
): Field<Any?> {
    val f = RangeMerge2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMinus(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMinus(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeMinus(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeMinus()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = RangeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOut(
      __1: Any?
): Field<Any?> {
    val f = RangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = RangeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlaps(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverlaps()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlaps(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverlaps()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlaps(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverlaps()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlapsMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlapsMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverlapsMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverlapsMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleft(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverleft()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleft(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleft(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverleft()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleftMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleftMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverleftMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverleftMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverright(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverright()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverright(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverright(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverright()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverrightMultirange(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = RangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverrightMultirange(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = RangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeOverrightMultirange(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = RangeOverrightMultirange()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Any? {
    val f = RangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Any?> {
    val f = RangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = RangeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = RangeSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeSend(
      __1: Any?
): Field<ByteArray?> {
    val f = RangeSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = RangeSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeTypanalyze(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = RangeTypanalyze()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeTypanalyze(
      __1: Any?
): Field<Boolean?> {
    val f = RangeTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeTypanalyze(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = RangeTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeUnion(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = RangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeUnion(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = RangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangeUnion(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = RangeUnion()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Rangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Rangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rangesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Rangesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rank</code>
 */
fun rank1(
      configuration: Configuration
): Long? {
    val f = Rank1()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rank</code> as a field.
 */
fun rank1(): Field<Long?> {
    val f = Rank1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rank2(
      __1: Any?
): AggregateFunction<Long?> {
    val f = Rank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rank2(
      __1: Field<Any?>
): AggregateFunction<Long?> {
    val f = Rank2()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rankFinal(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Long? {
    val f = RankFinal()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rankFinal(
      __1: Any?
    , __2: Any?
): Field<Long?> {
    val f = RankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rankFinal(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Long?> {
    val f = RankFinal()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rawArraySubscriptHandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = RawArraySubscriptHandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rawArraySubscriptHandler(
      __1: Any?
): Field<Any?> {
    val f = RawArraySubscriptHandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun rawArraySubscriptHandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = RawArraySubscriptHandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_eq</code>
 */
fun recordEq(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_eq</code> as a field.
 */
fun recordEq(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_eq</code> as a field.
 */
fun recordEq(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_ge</code>
 */
fun recordGe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_ge</code> as a field.
 */
fun recordGe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_ge</code> as a field.
 */
fun recordGe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_gt</code>
 */
fun recordGt(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_gt</code> as a field.
 */
fun recordGt(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_gt</code> as a field.
 */
fun recordGt(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_eq</code>
 */
fun recordImageEq(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_eq</code> as a field.
 */
fun recordImageEq(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_eq</code> as a field.
 */
fun recordImageEq(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_ge</code>
 */
fun recordImageGe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_ge</code> as a field.
 */
fun recordImageGe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_ge</code> as a field.
 */
fun recordImageGe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_gt</code>
 */
fun recordImageGt(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_gt</code> as a field.
 */
fun recordImageGt(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_gt</code> as a field.
 */
fun recordImageGt(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_le</code>
 */
fun recordImageLe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_le</code> as a field.
 */
fun recordImageLe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_le</code> as a field.
 */
fun recordImageLe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_lt</code>
 */
fun recordImageLt(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_lt</code> as a field.
 */
fun recordImageLt(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_lt</code> as a field.
 */
fun recordImageLt(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_image_ne</code>
 */
fun recordImageNe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordImageNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_image_ne</code> as a field.
 */
fun recordImageNe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordImageNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_image_ne</code> as a field.
 */
fun recordImageNe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordImageNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Record? {
    val f = RecordIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Record?> {
    val f = RecordIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Record?> {
    val f = RecordIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_le</code>
 */
fun recordLe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_le</code> as a field.
 */
fun recordLe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_le</code> as a field.
 */
fun recordLe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_lt</code>
 */
fun recordLt(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_lt</code> as a field.
 */
fun recordLt(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_lt</code> as a field.
 */
fun recordLt(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_ne</code>
 */
fun recordNe(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Boolean? {
    val f = RecordNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_ne</code> as a field.
 */
fun recordNe(
      __1: Record?
    , __2: Record?
): Field<Boolean?> {
    val f = RecordNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_ne</code> as a field.
 */
fun recordNe(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Boolean?> {
    val f = RecordNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordOut(
      configuration: Configuration
    , __1: Record?
): Any? {
    val f = RecordOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordOut(
      __1: Record?
): Field<Any?> {
    val f = RecordOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordOut(
      __1: Field<Record?>
): Field<Any?> {
    val f = RecordOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): Record? {
    val f = RecordRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<Record?> {
    val f = RecordRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun recordRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<Record?> {
    val f = RecordRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.record_send</code>
 */
fun recordSend(
      configuration: Configuration
    , __1: Record?
): ByteArray? {
    val f = RecordSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.record_send</code> as a field.
 */
fun recordSend(
      __1: Record?
): Field<ByteArray?> {
    val f = RecordSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.record_send</code> as a field.
 */
fun recordSend(
      __1: Field<Record?>
): Field<ByteArray?> {
    val f = RecordSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclass(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Regclass()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclass(
      __1: String?
): Field<Any?> {
    val f = Regclass()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclass(
      __1: Field<String?>
): Field<Any?> {
    val f = Regclass()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regclassin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassin(
      __1: Any?
): Field<Any?> {
    val f = Regclassin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regclassin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regclassout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassout(
      __1: Any?
): Field<Any?> {
    val f = Regclassout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regclassout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regclassrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassrecv(
      __1: Any?
): Field<Any?> {
    val f = Regclassrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclassrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regclassrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclasssend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regclasssend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclasssend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regclasssend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regclasssend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regclasssend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regcollationin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationin(
      __1: Any?
): Field<Any?> {
    val f = Regcollationin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regcollationin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regcollationout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationout(
      __1: Any?
): Field<Any?> {
    val f = Regcollationout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regcollationout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regcollationrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationrecv(
      __1: Any?
): Field<Any?> {
    val f = Regcollationrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regcollationrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationsend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regcollationsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationsend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regcollationsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regcollationsend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regcollationsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regconfigin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigin(
      __1: Any?
): Field<Any?> {
    val f = Regconfigin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regconfigin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regconfigout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigout(
      __1: Any?
): Field<Any?> {
    val f = Regconfigout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regconfigout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regconfigrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigrecv(
      __1: Any?
): Field<Any?> {
    val f = Regconfigrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regconfigrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigsend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regconfigsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigsend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regconfigsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regconfigsend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regconfigsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regdictionaryin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryin(
      __1: Any?
): Field<Any?> {
    val f = Regdictionaryin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regdictionaryin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regdictionaryout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryout(
      __1: Any?
): Field<Any?> {
    val f = Regdictionaryout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regdictionaryout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regdictionaryrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryrecv(
      __1: Any?
): Field<Any?> {
    val f = Regdictionaryrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionaryrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regdictionaryrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionarysend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regdictionarysend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionarysend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regdictionarysend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regdictionarysend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regdictionarysend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Regexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Regexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Regexeqjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Regexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Regexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexeqsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Regexeqsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Regexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Regexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Regexnejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Regexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Regexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regexnesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Regexnesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_match</code>
 */
fun regexpMatch1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Array<String?>? {
    val f = RegexpMatch1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_match</code> as a field.
 */
fun regexpMatch1(
      __1: String?
    , __2: String?
): Field<Array<String?>?> {
    val f = RegexpMatch1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_match</code> as a field.
 */
fun regexpMatch1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = RegexpMatch1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_match</code>
 */
fun regexpMatch2(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Array<String?>? {
    val f = RegexpMatch2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_match</code> as a field.
 */
fun regexpMatch2(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Array<String?>?> {
    val f = RegexpMatch2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_match</code> as a field.
 */
fun regexpMatch2(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Array<String?>?> {
    val f = RegexpMatch2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_replace</code>
 */
fun regexpReplace1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = RegexpReplace1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_replace</code> as a field.
 */
fun regexpReplace1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = RegexpReplace1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_replace</code> as a field.
 */
fun regexpReplace1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = RegexpReplace1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_replace</code>
 */
fun regexpReplace2(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
    , __4: String?
): String? {
    val f = RegexpReplace2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_replace</code> as a field.
 */
fun regexpReplace2(
      __1: String?
    , __2: String?
    , __3: String?
    , __4: String?
): Field<String?> {
    val f = RegexpReplace2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_replace</code> as a field.
 */
fun regexpReplace2(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
    , __4: Field<String?>
): Field<String?> {
    val f = RegexpReplace2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_split_to_array</code>
 */
fun regexpSplitToArray1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Array<String?>? {
    val f = RegexpSplitToArray1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_split_to_array</code> as a field.
 */
fun regexpSplitToArray1(
      __1: String?
    , __2: String?
): Field<Array<String?>?> {
    val f = RegexpSplitToArray1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_split_to_array</code> as a field.
 */
fun regexpSplitToArray1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = RegexpSplitToArray1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regexp_split_to_array</code>
 */
fun regexpSplitToArray2(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Array<String?>? {
    val f = RegexpSplitToArray2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regexp_split_to_array</code> as a field.
 */
fun regexpSplitToArray2(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Array<String?>?> {
    val f = RegexpSplitToArray2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regexp_split_to_array</code> as a field.
 */
fun regexpSplitToArray2(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Array<String?>?> {
    val f = RegexpSplitToArray2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacein(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regnamespacein()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacein(
      __1: Any?
): Field<Any?> {
    val f = Regnamespacein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacein(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regnamespacein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespaceout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regnamespaceout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespaceout(
      __1: Any?
): Field<Any?> {
    val f = Regnamespaceout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespaceout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regnamespaceout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacerecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regnamespacerecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacerecv(
      __1: Any?
): Field<Any?> {
    val f = Regnamespacerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacerecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regnamespacerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacesend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regnamespacesend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacesend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regnamespacesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regnamespacesend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regnamespacesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperatorin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorin(
      __1: Any?
): Field<Any?> {
    val f = Regoperatorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperatorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperatorout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorout(
      __1: Any?
): Field<Any?> {
    val f = Regoperatorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperatorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperatorrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorrecv(
      __1: Any?
): Field<Any?> {
    val f = Regoperatorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperatorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorsend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regoperatorsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorsend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regoperatorsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperatorsend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regoperatorsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperin(
      __1: Any?
): Field<Any?> {
    val f = Regoperin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperout(
      __1: Any?
): Field<Any?> {
    val f = Regoperout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regoperrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperrecv(
      __1: Any?
): Field<Any?> {
    val f = Regoperrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regoperrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regoperrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regopersend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regopersend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regopersend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regopersend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regopersend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regopersend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurein(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regprocedurein()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurein(
      __1: Any?
): Field<Any?> {
    val f = Regprocedurein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurein(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regprocedurein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedureout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regprocedureout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedureout(
      __1: Any?
): Field<Any?> {
    val f = Regprocedureout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedureout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regprocedureout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurerecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regprocedurerecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurerecv(
      __1: Any?
): Field<Any?> {
    val f = Regprocedurerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocedurerecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regprocedurerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regproceduresend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regproceduresend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regproceduresend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regproceduresend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regproceduresend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regproceduresend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocin(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Regprocin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocin(
      __1: Any?
): Field<String?> {
    val f = Regprocin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocin(
      __1: Field<Any?>
): Field<String?> {
    val f = Regprocin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Regprocout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocout(
      __1: String?
): Field<Any?> {
    val f = Regprocout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocout(
      __1: Field<String?>
): Field<Any?> {
    val f = Regprocout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocrecv(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Regprocrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocrecv(
      __1: Any?
): Field<String?> {
    val f = Regprocrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regprocrecv(
      __1: Field<Any?>
): Field<String?> {
    val f = Regprocrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.regprocsend</code>
 */
fun regprocsend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Regprocsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.regprocsend</code> as a field.
 */
fun regprocsend(
      __1: String?
): Field<ByteArray?> {
    val f = Regprocsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regprocsend</code> as a field.
 */
fun regprocsend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Regprocsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.regr_avgx</code> as a field.
 */
fun regrAvgx(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrAvgx()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_avgx</code> as a field.
 */
fun regrAvgx(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrAvgx()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_avgy</code> as a field.
 */
fun regrAvgy(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrAvgy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_avgy</code> as a field.
 */
fun regrAvgy(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrAvgy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_count</code> as a field.
 */
fun regrCount(
      __1: Double?
    , __2: Double?
): AggregateFunction<Long?> {
    val f = RegrCount()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_count</code> as a field.
 */
fun regrCount(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Long?> {
    val f = RegrCount()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_intercept</code> as a field.
 */
fun regrIntercept(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrIntercept()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_intercept</code> as a field.
 */
fun regrIntercept(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrIntercept()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_r2</code> as a field.
 */
fun regrR2(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrR2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_r2</code> as a field.
 */
fun regrR2(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrR2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_slope</code> as a field.
 */
fun regrSlope(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrSlope()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_slope</code> as a field.
 */
fun regrSlope(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrSlope()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_sxx</code> as a field.
 */
fun regrSxx(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrSxx()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_sxx</code> as a field.
 */
fun regrSxx(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrSxx()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_sxy</code> as a field.
 */
fun regrSxy(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrSxy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_sxy</code> as a field.
 */
fun regrSxy(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrSxy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_syy</code> as a field.
 */
fun regrSyy(
      __1: Double?
    , __2: Double?
): AggregateFunction<Double?> {
    val f = RegrSyy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.regr_syy</code> as a field.
 */
fun regrSyy(
      __1: Field<Double?>
    , __2: Field<Double?>
): AggregateFunction<Double?> {
    val f = RegrSyy()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolein(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regrolein()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolein(
      __1: Any?
): Field<Any?> {
    val f = Regrolein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolein(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regrolein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regroleout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regroleout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regroleout(
      __1: Any?
): Field<Any?> {
    val f = Regroleout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regroleout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regroleout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolerecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regrolerecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolerecv(
      __1: Any?
): Field<Any?> {
    val f = Regrolerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolerecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regrolerecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolesend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regrolesend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolesend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regrolesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regrolesend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regrolesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypein(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regtypein()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypein(
      __1: Any?
): Field<Any?> {
    val f = Regtypein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypein(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regtypein()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypeout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regtypeout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypeout(
      __1: Any?
): Field<Any?> {
    val f = Regtypeout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypeout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regtypeout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtyperecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Regtyperecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtyperecv(
      __1: Any?
): Field<Any?> {
    val f = Regtyperecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtyperecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Regtyperecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypesend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Regtypesend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypesend(
      __1: Any?
): Field<ByteArray?> {
    val f = Regtypesend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun regtypesend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Regtypesend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.repeat</code>
 */
fun repeat(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Repeat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.repeat</code> as a field.
 */
fun repeat(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Repeat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.repeat</code> as a field.
 */
fun repeat(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Repeat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.replace</code>
 */
fun replace(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.replace</code> as a field.
 */
fun replace(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.replace</code> as a field.
 */
fun replace(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.reverse</code>
 */
fun reverse(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Reverse()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.reverse</code> as a field.
 */
fun reverse(
      __1: String?
): Field<String?> {
    val f = Reverse()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.reverse</code> as a field.
 */
fun reverse(
      __1: Field<String?>
): Field<String?> {
    val f = Reverse()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.right</code>
 */
fun right(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Right()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.right</code> as a field.
 */
fun right(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Right()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.right</code> as a field.
 */
fun right(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Right()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.round</code>
 */
fun round1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Round1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round1(
      __1: Double?
): Field<Double?> {
    val f = Round1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Round1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.round</code>
 */
fun round2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Int?
): BigDecimal? {
    val f = Round2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round2(
      __1: BigDecimal?
    , __2: Int?
): Field<BigDecimal?> {
    val f = Round2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round2(
      __1: Field<BigDecimal?>
    , __2: Field<Int?>
): Field<BigDecimal?> {
    val f = Round2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.round</code>
 */
fun round3(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Round3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round3(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Round3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.round</code> as a field.
 */
fun round3(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Round3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.row_number</code>
 */
fun rowNumber(
      configuration: Configuration
): Long? {
    val f = RowNumber()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.row_number</code> as a field.
 */
fun rowNumber(): Field<Long?> {
    val f = RowNumber()

    return f.asField()
}

/**
 * Call <code>pg_catalog.row_security_active</code>
 */
fun rowSecurityActive1(
      configuration: Configuration
    , __1: Long?
): Boolean? {
    val f = RowSecurityActive1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.row_security_active</code> as a field.
 */
fun rowSecurityActive1(
      __1: Long?
): Field<Boolean?> {
    val f = RowSecurityActive1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.row_security_active</code> as a field.
 */
fun rowSecurityActive1(
      __1: Field<Long?>
): Field<Boolean?> {
    val f = RowSecurityActive1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.row_security_active</code>
 */
fun rowSecurityActive2(
      configuration: Configuration
    , __1: String?
): Boolean? {
    val f = RowSecurityActive2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.row_security_active</code> as a field.
 */
fun rowSecurityActive2(
      __1: String?
): Field<Boolean?> {
    val f = RowSecurityActive2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.row_security_active</code> as a field.
 */
fun rowSecurityActive2(
      __1: Field<String?>
): Field<Boolean?> {
    val f = RowSecurityActive2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.row_to_json</code>
 */
fun rowToJson1(
      configuration: Configuration
    , __1: Record?
): JSON? {
    val f = RowToJson1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.row_to_json</code> as a field.
 */
fun rowToJson1(
      __1: Record?
): Field<JSON?> {
    val f = RowToJson1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.row_to_json</code> as a field.
 */
fun rowToJson1(
      __1: Field<Record?>
): Field<JSON?> {
    val f = RowToJson1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.row_to_json</code>
 */
fun rowToJson2(
      configuration: Configuration
    , __1: Record?
    , __2: Boolean?
): JSON? {
    val f = RowToJson2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.row_to_json</code> as a field.
 */
fun rowToJson2(
      __1: Record?
    , __2: Boolean?
): Field<JSON?> {
    val f = RowToJson2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.row_to_json</code> as a field.
 */
fun rowToJson2(
      __1: Field<Record?>
    , __2: Field<Boolean?>
): Field<JSON?> {
    val f = RowToJson2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rpad</code>
 */
fun rpad1(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: String?
): String? {
    val f = Rpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rpad</code> as a field.
 */
fun rpad1(
      __1: String?
    , __2: Int?
    , __3: String?
): Field<String?> {
    val f = Rpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.rpad</code> as a field.
 */
fun rpad1(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<String?>
): Field<String?> {
    val f = Rpad1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rpad</code>
 */
fun rpad2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Rpad2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rpad</code> as a field.
 */
fun rpad2(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Rpad2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.rpad</code> as a field.
 */
fun rpad2(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Rpad2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rtrim</code>
 */
fun rtrim1(
      configuration: Configuration
    , __1: ByteArray?
    , __2: ByteArray?
): ByteArray? {
    val f = Rtrim1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim1(
      __1: ByteArray?
    , __2: ByteArray?
): Field<ByteArray?> {
    val f = Rtrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim1(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Rtrim1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rtrim</code>
 */
fun rtrim2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Rtrim2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim2(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Rtrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Rtrim2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.rtrim</code>
 */
fun rtrim3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Rtrim3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim3(
      __1: String?
): Field<String?> {
    val f = Rtrim3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.rtrim</code> as a field.
 */
fun rtrim3(
      __1: Field<String?>
): Field<String?> {
    val f = Rtrim3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun satisfiesHashPartition(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
    , __3: Int?
    , __4: Any?
): Boolean? {
    val f = SatisfiesHashPartition()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun satisfiesHashPartition(
      __1: Long?
    , __2: Int?
    , __3: Int?
    , __4: Any?
): Field<Boolean?> {
    val f = SatisfiesHashPartition()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun satisfiesHashPartition(
      __1: Field<Long?>
    , __2: Field<Int?>
    , __3: Field<Int?>
    , __4: Field<Any?>
): Field<Boolean?> {
    val f = SatisfiesHashPartition()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Scalargejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Scalargejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Scalargejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Scalargesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Scalargesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Scalargesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Scalargtjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Scalargtjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Scalargtjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Scalargtsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Scalargtsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalargtsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Scalargtsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlejoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Scalarlejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlejoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Scalarlejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlejoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Scalarlejoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlesel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Scalarlesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlesel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Scalarlesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarlesel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Scalarlesel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Scalarltjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Scalarltjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Scalarltjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Scalarltsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Scalarltsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun scalarltsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Scalarltsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.scale</code>
 */
fun scale(
      configuration: Configuration
    , __1: BigDecimal?
): Int? {
    val f = Scale()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.scale</code> as a field.
 */
fun scale(
      __1: BigDecimal?
): Field<Int?> {
    val f = Scale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.scale</code> as a field.
 */
fun scale(
      __1: Field<BigDecimal?>
): Field<Int?> {
    val f = Scale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.schema_to_xml</code>
 */
fun schemaToXml(
      configuration: Configuration
    , schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = SchemaToXml()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.schema_to_xml</code> as a field.
 */
fun schemaToXml(
      schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = SchemaToXml()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.schema_to_xml</code> as a field.
 */
fun schemaToXml(
      schema: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = SchemaToXml()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.schema_to_xml_and_xmlschema</code>
 */
fun schemaToXmlAndXmlschema(
      configuration: Configuration
    , schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = SchemaToXmlAndXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.schema_to_xml_and_xmlschema</code> as a field.
 */
fun schemaToXmlAndXmlschema(
      schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = SchemaToXmlAndXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.schema_to_xml_and_xmlschema</code> as a field.
 */
fun schemaToXmlAndXmlschema(
      schema: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = SchemaToXmlAndXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.schema_to_xmlschema</code>
 */
fun schemaToXmlschema(
      configuration: Configuration
    , schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = SchemaToXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.schema_to_xmlschema</code> as a field.
 */
fun schemaToXmlschema(
      schema: String?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = SchemaToXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Get <code>pg_catalog.schema_to_xmlschema</code> as a field.
 */
fun schemaToXmlschema(
      schema: Field<String?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = SchemaToXmlschema()
    f.setSchema_(schema)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.session_user</code>
 */
fun sessionUser(
      configuration: Configuration
): String? {
    val f = SessionUser()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.session_user</code> as a field.
 */
fun sessionUser(): Field<String?> {
    val f = SessionUser()

    return f.asField()
}

/**
 * Call <code>pg_catalog.set_bit</code>
 */
fun setBit1(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Int?
): String? {
    val f = SetBit1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.set_bit</code> as a field.
 */
fun setBit1(
      __1: String?
    , __2: Int?
    , __3: Int?
): Field<String?> {
    val f = SetBit1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.set_bit</code> as a field.
 */
fun setBit1(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<String?> {
    val f = SetBit1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.set_bit</code>
 */
fun setBit2(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Long?
    , __3: Int?
): ByteArray? {
    val f = SetBit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.set_bit</code> as a field.
 */
fun setBit2(
      __1: ByteArray?
    , __2: Long?
    , __3: Int?
): Field<ByteArray?> {
    val f = SetBit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.set_bit</code> as a field.
 */
fun setBit2(
      __1: Field<ByteArray?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = SetBit2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.set_byte</code>
 */
fun setByte(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
    , __3: Int?
): ByteArray? {
    val f = SetByte()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.set_byte</code> as a field.
 */
fun setByte(
      __1: ByteArray?
    , __2: Int?
    , __3: Int?
): Field<ByteArray?> {
    val f = SetByte()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.set_byte</code> as a field.
 */
fun setByte(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = SetByte()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.set_config</code>
 */
fun setConfig(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Boolean?
): String? {
    val f = SetConfig()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.set_config</code> as a field.
 */
fun setConfig(
      __1: String?
    , __2: String?
    , __3: Boolean?
): Field<String?> {
    val f = SetConfig()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.set_config</code> as a field.
 */
fun setConfig(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = SetConfig()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen1(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = SetMasklen1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen1(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = SetMasklen1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen1(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = SetMasklen1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen2(
      configuration: Configuration
    , __1: Any?
    , __2: Int?
): Any? {
    val f = SetMasklen2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen2(
      __1: Any?
    , __2: Int?
): Field<Any?> {
    val f = SetMasklen2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setMasklen2(
      __1: Field<Any?>
    , __2: Field<Int?>
): Field<Any?> {
    val f = SetMasklen2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.setseed</code>
 */
fun setseed(
      configuration: Configuration
    , __1: Double?
): Unit {
    val p = Setseed()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval1(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
): Long? {
    val f = Setval1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval1(
      __1: Any?
    , __2: Long?
): Field<Long?> {
    val f = Setval1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval1(
      __1: Field<Any?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Setval1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval2(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Boolean?
): Long? {
    val f = Setval2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval2(
      __1: Any?
    , __2: Long?
    , __3: Boolean?
): Field<Long?> {
    val f = Setval2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setval2(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Boolean?>
): Field<Long?> {
    val f = Setval2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
    , __3: Array<String?>?
): Any? {
    val f = Setweight1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight1(
      __1: Any?
    , __2: String?
    , __3: Array<String?>?
): Field<Any?> {
    val f = Setweight1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight1(
      __1: Field<Any?>
    , __2: Field<String?>
    , __3: Field<Array<String?>?>
): Field<Any?> {
    val f = Setweight1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight2(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = Setweight2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight2(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = Setweight2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun setweight2(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = Setweight2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sha224</code>
 */
fun sha224(
      configuration: Configuration
    , __1: ByteArray?
): ByteArray? {
    val f = Sha224()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sha224</code> as a field.
 */
fun sha224(
      __1: ByteArray?
): Field<ByteArray?> {
    val f = Sha224()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sha224</code> as a field.
 */
fun sha224(
      __1: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Sha224()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sha256</code>
 */
fun sha256(
      configuration: Configuration
    , __1: ByteArray?
): ByteArray? {
    val f = Sha256()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sha256</code> as a field.
 */
fun sha256(
      __1: ByteArray?
): Field<ByteArray?> {
    val f = Sha256()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sha256</code> as a field.
 */
fun sha256(
      __1: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Sha256()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sha384</code>
 */
fun sha384(
      configuration: Configuration
    , __1: ByteArray?
): ByteArray? {
    val f = Sha384()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sha384</code> as a field.
 */
fun sha384(
      __1: ByteArray?
): Field<ByteArray?> {
    val f = Sha384()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sha384</code> as a field.
 */
fun sha384(
      __1: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Sha384()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sha512</code>
 */
fun sha512(
      configuration: Configuration
    , __1: ByteArray?
): ByteArray? {
    val f = Sha512()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sha512</code> as a field.
 */
fun sha512(
      __1: ByteArray?
): Field<ByteArray?> {
    val f = Sha512()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sha512</code> as a field.
 */
fun sha512(
      __1: Field<ByteArray?>
): Field<ByteArray?> {
    val f = Sha512()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shellIn(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = ShellIn()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shellOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = ShellOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shellOut(
      __1: Any?
): Field<Any?> {
    val f = ShellOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shellOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = ShellOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToEucJis_2004(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = ShiftJis_2004ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToEucJis_2004(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = ShiftJis_2004ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToEucJis_2004(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = ShiftJis_2004ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = ShiftJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = ShiftJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun shiftJis_2004ToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = ShiftJis_2004ToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.shobj_description</code>
 */
fun shobjDescription(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): String? {
    val f = ShobjDescription()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.shobj_description</code> as a field.
 */
fun shobjDescription(
      __1: Long?
    , __2: String?
): Field<String?> {
    val f = ShobjDescription()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.shobj_description</code> as a field.
 */
fun shobjDescription(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<String?> {
    val f = ShobjDescription()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sign</code>
 */
fun sign1(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Sign1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sign</code> as a field.
 */
fun sign1(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Sign1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sign</code> as a field.
 */
fun sign1(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Sign1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sign</code>
 */
fun sign2(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Sign2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sign</code> as a field.
 */
fun sign2(
      __1: Double?
): Field<Double?> {
    val f = Sign2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sign</code> as a field.
 */
fun sign2(
      __1: Field<Double?>
): Field<Double?> {
    val f = Sign2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.similar_escape</code>
 */
fun similarEscape(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = SimilarEscape()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.similar_escape</code> as a field.
 */
fun similarEscape(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = SimilarEscape()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.similar_escape</code> as a field.
 */
fun similarEscape(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = SimilarEscape()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.similar_to_escape</code>
 */
fun similarToEscape1(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = SimilarToEscape1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.similar_to_escape</code> as a field.
 */
fun similarToEscape1(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = SimilarToEscape1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.similar_to_escape</code> as a field.
 */
fun similarToEscape1(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = SimilarToEscape1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.similar_to_escape</code>
 */
fun similarToEscape2(
      configuration: Configuration
    , __1: String?
): String? {
    val f = SimilarToEscape2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.similar_to_escape</code> as a field.
 */
fun similarToEscape2(
      __1: String?
): Field<String?> {
    val f = SimilarToEscape2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.similar_to_escape</code> as a field.
 */
fun similarToEscape2(
      __1: Field<String?>
): Field<String?> {
    val f = SimilarToEscape2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sin</code>
 */
fun sin(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Sin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sin</code> as a field.
 */
fun sin(
      __1: Double?
): Field<Double?> {
    val f = Sin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sin</code> as a field.
 */
fun sin(
      __1: Field<Double?>
): Field<Double?> {
    val f = Sin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sind</code>
 */
fun sind(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Sind()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sind</code> as a field.
 */
fun sind(
      __1: Double?
): Field<Double?> {
    val f = Sind()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sind</code> as a field.
 */
fun sind(
      __1: Field<Double?>
): Field<Double?> {
    val f = Sind()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sinh</code>
 */
fun sinh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Sinh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sinh</code> as a field.
 */
fun sinh(
      __1: Double?
): Field<Double?> {
    val f = Sinh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sinh</code> as a field.
 */
fun sinh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Sinh()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToEucJp(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = SjisToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToEucJp(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = SjisToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToEucJp(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = SjisToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = SjisToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = SjisToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = SjisToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = SjisToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = SjisToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sjisToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = SjisToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun slope(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Double? {
    val f = Slope()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun slope(
      __1: Any?
    , __2: Any?
): Field<Double?> {
    val f = Slope()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun slope(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Double?> {
    val f = Slope()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBboxQuadConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgBboxQuadConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgBoxQuadChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgBoxQuadConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgBoxQuadInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadLeafConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = SpgBoxQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadLeafConsistent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = SpgBoxQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadLeafConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = SpgBoxQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgBoxQuadPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgBoxQuadPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgKdChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgKdChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgKdConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgKdConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgKdInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgKdInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgKdPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgKdPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgPolyQuadCompress(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = SpgPolyQuadCompress()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgPolyQuadCompress(
      __1: Any?
): Field<Any?> {
    val f = SpgPolyQuadCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgPolyQuadCompress(
      __1: Field<Any?>
): Field<Any?> {
    val f = SpgPolyQuadCompress()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgQuadChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgQuadConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgQuadInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadLeafConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = SpgQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadLeafConsistent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = SpgQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadLeafConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = SpgQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgQuadPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgQuadPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgRangeQuadChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgRangeQuadConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgRangeQuadInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadLeafConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = SpgRangeQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadLeafConsistent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = SpgRangeQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadLeafConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = SpgRangeQuadLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgRangeQuadPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgRangeQuadPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextChoose(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgTextChoose()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextConfig(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgTextConfig()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextInnerConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgTextInnerConsistent()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextLeafConsistent(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = SpgTextLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextLeafConsistent(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = SpgTextLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextLeafConsistent(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = SpgTextLeafConsistent()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spgTextPicksplit(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Unit {
    val p = SpgTextPicksplit()
    p.set__1(__1)
    p.set__2(__2)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spghandler(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Spghandler()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spghandler(
      __1: Any?
): Field<Any?> {
    val f = Spghandler()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun spghandler(
      __1: Field<Any?>
): Field<Any?> {
    val f = Spghandler()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.split_part</code>
 */
fun splitPart(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
): String? {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.split_part</code> as a field.
 */
fun splitPart(
      __1: String?
    , __2: String?
    , __3: Int?
): Field<String?> {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.split_part</code> as a field.
 */
fun splitPart(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
): Field<String?> {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sqrt</code>
 */
fun sqrt1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Sqrt1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sqrt</code> as a field.
 */
fun sqrt1(
      __1: Double?
): Field<Double?> {
    val f = Sqrt1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sqrt</code> as a field.
 */
fun sqrt1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Sqrt1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.sqrt</code>
 */
fun sqrt2(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Sqrt2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.sqrt</code> as a field.
 */
fun sqrt2(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Sqrt2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sqrt</code> as a field.
 */
fun sqrt2(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Sqrt2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.starts_with</code>
 */
fun startsWith(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = StartsWith()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.starts_with</code> as a field.
 */
fun startsWith(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = StartsWith()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.starts_with</code> as a field.
 */
fun startsWith(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = StartsWith()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.statement_timestamp</code>
 */
fun statementTimestamp(
      configuration: Configuration
): OffsetDateTime? {
    val f = StatementTimestamp()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.statement_timestamp</code> as a field.
 */
fun statementTimestamp(): Field<OffsetDateTime?> {
    val f = StatementTimestamp()

    return f.asField()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = Stddev1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = Stddev1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = Stddev2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = Stddev2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = Stddev3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = Stddev3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = Stddev4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = Stddev4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Stddev5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Stddev5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Stddev6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev</code> as a field.
 */
fun stddev6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Stddev6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = StddevPop1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = StddevPop1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = StddevPop2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = StddevPop2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = StddevPop3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = StddevPop3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = StddevPop4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = StddevPop4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = StddevPop5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = StddevPop5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = StddevPop6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_pop</code> as a field.
 */
fun stddevPop6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = StddevPop6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = StddevSamp4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = StddevSamp4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = StddevSamp5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = StddevSamp5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.stddev_samp</code> as a field.
 */
fun stddevSamp6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = StddevSamp6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.string_agg</code> as a field.
 */
fun stringAgg1(
      __1: String?
    , __2: String?
): AggregateFunction<String?> {
    val f = StringAgg1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.string_agg</code> as a field.
 */
fun stringAgg1(
      __1: Field<String?>
    , __2: Field<String?>
): AggregateFunction<String?> {
    val f = StringAgg1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.string_agg</code> as a field.
 */
fun stringAgg2(
      __1: ByteArray?
    , __2: ByteArray?
): AggregateFunction<ByteArray?> {
    val f = StringAgg2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.string_agg</code> as a field.
 */
fun stringAgg2(
      __1: Field<ByteArray?>
    , __2: Field<ByteArray?>
): AggregateFunction<ByteArray?> {
    val f = StringAgg2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggFinalfn(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = StringAggFinalfn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggFinalfn(
      __1: Any?
): Field<String?> {
    val f = StringAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggFinalfn(
      __1: Field<Any?>
): Field<String?> {
    val f = StringAggFinalfn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggTransfn(
      configuration: Configuration
    , __1: Any?
    , __2: String?
    , __3: String?
): Any? {
    val f = StringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggTransfn(
      __1: Any?
    , __2: String?
    , __3: String?
): Field<Any?> {
    val f = StringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun stringAggTransfn(
      __1: Field<Any?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Any?> {
    val f = StringAggTransfn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.string_to_array</code>
 */
fun stringToArray1(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): Array<String?>? {
    val f = StringToArray1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.string_to_array</code> as a field.
 */
fun stringToArray1(
      __1: String?
    , __2: String?
    , __3: String?
): Field<Array<String?>?> {
    val f = StringToArray1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.string_to_array</code> as a field.
 */
fun stringToArray1(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<Array<String?>?> {
    val f = StringToArray1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.string_to_array</code>
 */
fun stringToArray2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Array<String?>? {
    val f = StringToArray2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.string_to_array</code> as a field.
 */
fun stringToArray2(
      __1: String?
    , __2: String?
): Field<Array<String?>?> {
    val f = StringToArray2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.string_to_array</code> as a field.
 */
fun stringToArray2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = StringToArray2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun strip(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Strip()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun strip(
      __1: Any?
): Field<Any?> {
    val f = Strip()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun strip(
      __1: Field<Any?>
): Field<Any?> {
    val f = Strip()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.strpos</code>
 */
fun strpos(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.strpos</code> as a field.
 */
fun strpos(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.strpos</code> as a field.
 */
fun strpos(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substr</code>
 */
fun substr1(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
    , __3: Int?
): ByteArray? {
    val f = Substr1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr1(
      __1: ByteArray?
    , __2: Int?
    , __3: Int?
): Field<ByteArray?> {
    val f = Substr1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr1(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = Substr1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substr</code>
 */
fun substr2(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
): ByteArray? {
    val f = Substr2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr2(
      __1: ByteArray?
    , __2: Int?
): Field<ByteArray?> {
    val f = Substr2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr2(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
): Field<ByteArray?> {
    val f = Substr2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substr</code>
 */
fun substr3(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Int?
): String? {
    val f = Substr3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr3(
      __1: String?
    , __2: Int?
    , __3: Int?
): Field<String?> {
    val f = Substr3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr3(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Substr3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substr</code>
 */
fun substr4(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Substr4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr4(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Substr4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substr</code> as a field.
 */
fun substr4(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Substr4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring1(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Int?
): String? {
    val f = Substring1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring1(
      __1: String?
    , __2: Int?
    , __3: Int?
): Field<String?> {
    val f = Substring1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring1(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Substring1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Substring2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring2(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Substring2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring2(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Substring2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring3(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
    , __3: Int?
): ByteArray? {
    val f = Substring3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring3(
      __1: ByteArray?
    , __2: Int?
    , __3: Int?
): Field<ByteArray?> {
    val f = Substring3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring3(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<ByteArray?> {
    val f = Substring3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring4(
      configuration: Configuration
    , __1: ByteArray?
    , __2: Int?
): ByteArray? {
    val f = Substring4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring4(
      __1: ByteArray?
    , __2: Int?
): Field<ByteArray?> {
    val f = Substring4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring4(
      __1: Field<ByteArray?>
    , __2: Field<Int?>
): Field<ByteArray?> {
    val f = Substring4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring5(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Substring5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring5(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Substring5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring5(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Substring5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring6(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = Substring6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring6(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = Substring6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring6(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = Substring6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring7(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Int?
): String? {
    val f = Substring7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring7(
      __1: String?
    , __2: Int?
    , __3: Int?
): Field<String?> {
    val f = Substring7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring7(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Substring7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.substring</code>
 */
fun substring8(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = Substring8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring8(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = Substring8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.substring</code> as a field.
 */
fun substring8(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = Substring8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = Sum1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = Sum1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum2(
      __1: Int?
): AggregateFunction<Long?> {
    val f = Sum2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum2(
      __1: Field<Int?>
): AggregateFunction<Long?> {
    val f = Sum2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum3(
      __1: Short?
): AggregateFunction<Long?> {
    val f = Sum3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum3(
      __1: Field<Short?>
): AggregateFunction<Long?> {
    val f = Sum3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum4(
      __1: Float?
): AggregateFunction<Float?> {
    val f = Sum4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum4(
      __1: Field<Float?>
): AggregateFunction<Float?> {
    val f = Sum4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Sum5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Sum5()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sum6(
      __1: Any?
): AggregateFunction<Any?> {
    val f = Sum6()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun sum6(
      __1: Field<Any?>
): AggregateFunction<Any?> {
    val f = Sum6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum7(
      __1: YearToSecond?
): AggregateFunction<YearToSecond?> {
    val f = Sum7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum7(
      __1: Field<YearToSecond?>
): AggregateFunction<YearToSecond?> {
    val f = Sum7()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum8(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Sum8()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.sum</code> as a field.
 */
fun sum8(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Sum8()
    f.set__1(__1)

    return f.asAggregateFunction()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun system(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = System()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun system(
      __1: Any?
): Field<Any?> {
    val f = System()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun system(
      __1: Field<Any?>
): Field<Any?> {
    val f = System()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TableAmHandlerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerIn(
      __1: Any?
): Field<Any?> {
    val f = TableAmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = TableAmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TableAmHandlerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerOut(
      __1: Any?
): Field<Any?> {
    val f = TableAmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableAmHandlerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = TableAmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXml(
      configuration: Configuration
    , tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = TableToXml()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXml(
      tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = TableToXml()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXml(
      tbl: Field<Any?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = TableToXml()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlAndXmlschema(
      configuration: Configuration
    , tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = TableToXmlAndXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlAndXmlschema(
      tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = TableToXmlAndXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlAndXmlschema(
      tbl: Field<Any?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = TableToXmlAndXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlschema(
      configuration: Configuration
    , tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): XML? {
    val f = TableToXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlschema(
      tbl: Any?
    , nulls: Boolean?
    , tableforest: Boolean?
    , targetns: String?
): Field<XML?> {
    val f = TableToXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tableToXmlschema(
      tbl: Field<Any?>
    , nulls: Field<Boolean?>
    , tableforest: Field<Boolean?>
    , targetns: Field<String?>
): Field<XML?> {
    val f = TableToXmlschema()
    f.setTbl(tbl)
    f.setNulls(nulls)
    f.setTableforest(tableforest)
    f.setTargetns(targetns)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tan</code>
 */
fun tan(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Tan()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tan</code> as a field.
 */
fun tan(
      __1: Double?
): Field<Double?> {
    val f = Tan()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tan</code> as a field.
 */
fun tan(
      __1: Field<Double?>
): Field<Double?> {
    val f = Tan()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tand</code>
 */
fun tand(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Tand()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tand</code> as a field.
 */
fun tand(
      __1: Double?
): Field<Double?> {
    val f = Tand()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tand</code> as a field.
 */
fun tand(
      __1: Field<Double?>
): Field<Double?> {
    val f = Tand()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tanh</code>
 */
fun tanh(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Tanh()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tanh</code> as a field.
 */
fun tanh(
      __1: Double?
): Field<Double?> {
    val f = Tanh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tanh</code> as a field.
 */
fun tanh(
      __1: Field<Double?>
): Field<Double?> {
    val f = Tanh()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text</code>
 */
fun text1(
      configuration: Configuration
    , __1: XML?
): String? {
    val f = Text1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text1(
      __1: XML?
): Field<String?> {
    val f = Text1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text1(
      __1: Field<XML?>
): Field<String?> {
    val f = Text1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text</code>
 */
fun text2(
      configuration: Configuration
    , __1: Boolean?
): String? {
    val f = Text2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text2(
      __1: Boolean?
): Field<String?> {
    val f = Text2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text2(
      __1: Field<Boolean?>
): Field<String?> {
    val f = Text2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text</code>
 */
fun text3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Text3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text3(
      __1: String?
): Field<String?> {
    val f = Text3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text3(
      __1: Field<String?>
): Field<String?> {
    val f = Text3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text</code>
 */
fun text4(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Text4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text4(
      __1: String?
): Field<String?> {
    val f = Text4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text4(
      __1: Field<String?>
): Field<String?> {
    val f = Text4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun text5(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Text5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun text5(
      __1: Any?
): Field<String?> {
    val f = Text5()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun text5(
      __1: Field<Any?>
): Field<String?> {
    val f = Text5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text</code>
 */
fun text6(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Text6()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text6(
      __1: String?
): Field<String?> {
    val f = Text6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text</code> as a field.
 */
fun text6(
      __1: Field<String?>
): Field<String?> {
    val f = Text6()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_ge</code>
 */
fun textGe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_ge</code> as a field.
 */
fun textGe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_ge</code> as a field.
 */
fun textGe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_gt</code>
 */
fun textGt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_gt</code> as a field.
 */
fun textGt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_gt</code> as a field.
 */
fun textGt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_larger</code>
 */
fun textLarger(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = TextLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_larger</code> as a field.
 */
fun textLarger(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = TextLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_larger</code> as a field.
 */
fun textLarger(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = TextLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_le</code>
 */
fun textLe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_le</code> as a field.
 */
fun textLe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_le</code> as a field.
 */
fun textLe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_lt</code>
 */
fun textLt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_lt</code> as a field.
 */
fun textLt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_lt</code> as a field.
 */
fun textLt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_pattern_ge</code>
 */
fun textPatternGe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_pattern_ge</code> as a field.
 */
fun textPatternGe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_pattern_ge</code> as a field.
 */
fun textPatternGe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextPatternGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_pattern_gt</code>
 */
fun textPatternGt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_pattern_gt</code> as a field.
 */
fun textPatternGt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_pattern_gt</code> as a field.
 */
fun textPatternGt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextPatternGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_pattern_le</code>
 */
fun textPatternLe(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_pattern_le</code> as a field.
 */
fun textPatternLe(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_pattern_le</code> as a field.
 */
fun textPatternLe(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextPatternLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_pattern_lt</code>
 */
fun textPatternLt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TextPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_pattern_lt</code> as a field.
 */
fun textPatternLt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TextPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_pattern_lt</code> as a field.
 */
fun textPatternLt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TextPatternLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.text_smaller</code>
 */
fun textSmaller(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = TextSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.text_smaller</code> as a field.
 */
fun textSmaller(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = TextSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.text_smaller</code> as a field.
 */
fun textSmaller(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = TextSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textanycat(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): String? {
    val f = Textanycat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textanycat(
      __1: String?
    , __2: Any?
): Field<String?> {
    val f = Textanycat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textanycat(
      __1: Field<String?>
    , __2: Field<Any?>
): Field<String?> {
    val f = Textanycat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textcat</code>
 */
fun textcat(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = Textcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textcat</code> as a field.
 */
fun textcat(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = Textcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textcat</code> as a field.
 */
fun textcat(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = Textcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texteq</code>
 */
fun texteq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texteq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texteq</code> as a field.
 */
fun texteq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texteq</code> as a field.
 */
fun texteq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texteqname</code>
 */
fun texteqname(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texteqname()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texteqname</code> as a field.
 */
fun texteqname(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texteqname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texteqname</code> as a field.
 */
fun texteqname(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texteqname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textgename</code>
 */
fun textgename(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textgename()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textgename</code> as a field.
 */
fun textgename(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textgename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textgename</code> as a field.
 */
fun textgename(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textgename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textgtname</code>
 */
fun textgtname(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textgtname()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textgtname</code> as a field.
 */
fun textgtname(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textgtname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textgtname</code> as a field.
 */
fun textgtname(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textgtname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texticlike</code>
 */
fun texticlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texticlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texticlike</code> as a field.
 */
fun texticlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texticlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texticlike</code> as a field.
 */
fun texticlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texticlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticlikeSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TexticlikeSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticlikeSupport(
      __1: Any?
): Field<Any?> {
    val f = TexticlikeSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticlikeSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TexticlikeSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texticnlike</code>
 */
fun texticnlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texticnlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texticnlike</code> as a field.
 */
fun texticnlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texticnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texticnlike</code> as a field.
 */
fun texticnlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texticnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texticregexeq</code>
 */
fun texticregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texticregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texticregexeq</code> as a field.
 */
fun texticregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texticregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texticregexeq</code> as a field.
 */
fun texticregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texticregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticregexeqSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TexticregexeqSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticregexeqSupport(
      __1: Any?
): Field<Any?> {
    val f = TexticregexeqSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun texticregexeqSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TexticregexeqSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.texticregexne</code>
 */
fun texticregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Texticregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.texticregexne</code> as a field.
 */
fun texticregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Texticregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.texticregexne</code> as a field.
 */
fun texticregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Texticregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textin(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Textin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textin(
      __1: Any?
): Field<String?> {
    val f = Textin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textin(
      __1: Field<Any?>
): Field<String?> {
    val f = Textin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textlen</code>
 */
fun textlen(
      configuration: Configuration
    , __1: String?
): Int? {
    val f = Textlen()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textlen</code> as a field.
 */
fun textlen(
      __1: String?
): Field<Int?> {
    val f = Textlen()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textlen</code> as a field.
 */
fun textlen(
      __1: Field<String?>
): Field<Int?> {
    val f = Textlen()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textlename</code>
 */
fun textlename(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textlename()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textlename</code> as a field.
 */
fun textlename(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textlename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textlename</code> as a field.
 */
fun textlename(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textlename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textlike</code>
 */
fun textlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textlike</code> as a field.
 */
fun textlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textlike</code> as a field.
 */
fun textlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textlikeSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TextlikeSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textlikeSupport(
      __1: Any?
): Field<Any?> {
    val f = TextlikeSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textlikeSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TextlikeSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textltname</code>
 */
fun textltname(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textltname()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textltname</code> as a field.
 */
fun textltname(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textltname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textltname</code> as a field.
 */
fun textltname(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textltname()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textne</code>
 */
fun textne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textne</code> as a field.
 */
fun textne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textne</code> as a field.
 */
fun textne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textnename</code>
 */
fun textnename(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textnename()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textnename</code> as a field.
 */
fun textnename(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textnename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textnename</code> as a field.
 */
fun textnename(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textnename()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textnlike</code>
 */
fun textnlike(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textnlike()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textnlike</code> as a field.
 */
fun textnlike(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textnlike</code> as a field.
 */
fun textnlike(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textnlike()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Textout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textout(
      __1: String?
): Field<Any?> {
    val f = Textout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textout(
      __1: Field<String?>
): Field<Any?> {
    val f = Textout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textrecv(
      configuration: Configuration
    , __1: Any?
): String? {
    val f = Textrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textrecv(
      __1: Any?
): Field<String?> {
    val f = Textrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textrecv(
      __1: Field<Any?>
): Field<String?> {
    val f = Textrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textregexeq</code>
 */
fun textregexeq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textregexeq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textregexeq</code> as a field.
 */
fun textregexeq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textregexeq</code> as a field.
 */
fun textregexeq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textregexeq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textregexeqSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TextregexeqSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textregexeqSupport(
      __1: Any?
): Field<Any?> {
    val f = TextregexeqSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun textregexeqSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TextregexeqSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textregexne</code>
 */
fun textregexne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Textregexne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textregexne</code> as a field.
 */
fun textregexne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Textregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textregexne</code> as a field.
 */
fun textregexne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Textregexne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.textsend</code>
 */
fun textsend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Textsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.textsend</code> as a field.
 */
fun textsend(
      __1: String?
): Field<ByteArray?> {
    val f = Textsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.textsend</code> as a field.
 */
fun textsend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Textsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusInit(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = ThesaurusInit()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusInit(
      __1: Any?
): Field<Any?> {
    val f = ThesaurusInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusInit(
      __1: Field<Any?>
): Field<Any?> {
    val f = ThesaurusInit()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusLexize(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Any? {
    val f = ThesaurusLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusLexize(
      __1: Any?
    , __2: Any?
    , __3: Any?
    , __4: Any?
): Field<Any?> {
    val f = ThesaurusLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun thesaurusLexize(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Any?>
): Field<Any?> {
    val f = ThesaurusLexize()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tideq</code>
 */
fun tideq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tideq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tideq</code> as a field.
 */
fun tideq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tideq</code> as a field.
 */
fun tideq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidge</code>
 */
fun tidge(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tidge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidge</code> as a field.
 */
fun tidge(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tidge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidge</code> as a field.
 */
fun tidge(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tidge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidgt</code>
 */
fun tidgt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tidgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidgt</code> as a field.
 */
fun tidgt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tidgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidgt</code> as a field.
 */
fun tidgt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tidgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidin(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Tidin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidin(
      __1: Any?
): Field<Long?> {
    val f = Tidin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidin(
      __1: Field<Any?>
): Field<Long?> {
    val f = Tidin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidlarger</code>
 */
fun tidlarger(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Tidlarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidlarger</code> as a field.
 */
fun tidlarger(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Tidlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidlarger</code> as a field.
 */
fun tidlarger(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Tidlarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidle</code>
 */
fun tidle(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tidle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidle</code> as a field.
 */
fun tidle(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tidle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidle</code> as a field.
 */
fun tidle(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tidle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidlt</code>
 */
fun tidlt(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tidlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidlt</code> as a field.
 */
fun tidlt(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tidlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidlt</code> as a field.
 */
fun tidlt(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tidlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidne</code>
 */
fun tidne(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Tidne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidne</code> as a field.
 */
fun tidne(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Tidne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidne</code> as a field.
 */
fun tidne(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Tidne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidout(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Tidout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidout(
      __1: Long?
): Field<Any?> {
    val f = Tidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidout(
      __1: Field<Long?>
): Field<Any?> {
    val f = Tidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidrecv(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Tidrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidrecv(
      __1: Any?
): Field<Long?> {
    val f = Tidrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tidrecv(
      __1: Field<Any?>
): Field<Long?> {
    val f = Tidrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidsend</code>
 */
fun tidsend(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = Tidsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidsend</code> as a field.
 */
fun tidsend(
      __1: Long?
): Field<ByteArray?> {
    val f = Tidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidsend</code> as a field.
 */
fun tidsend(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = Tidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tidsmaller</code>
 */
fun tidsmaller(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Long? {
    val f = Tidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tidsmaller</code> as a field.
 */
fun tidsmaller(
      __1: Long?
    , __2: Long?
): Field<Long?> {
    val f = Tidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tidsmaller</code> as a field.
 */
fun tidsmaller(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = Tidsmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time</code>
 */
fun time1(
      configuration: Configuration
    , __1: LocalDateTime?
): LocalTime? {
    val f = Time1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time1(
      __1: LocalDateTime?
): Field<LocalTime?> {
    val f = Time1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time1(
      __1: Field<LocalDateTime?>
): Field<LocalTime?> {
    val f = Time1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time</code>
 */
fun time2(
      configuration: Configuration
    , __1: YearToSecond?
): LocalTime? {
    val f = Time2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time2(
      __1: YearToSecond?
): Field<LocalTime?> {
    val f = Time2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time2(
      __1: Field<YearToSecond?>
): Field<LocalTime?> {
    val f = Time2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time</code>
 */
fun time3(
      configuration: Configuration
    , __1: LocalTime?
    , __2: Int?
): LocalTime? {
    val f = Time3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time3(
      __1: LocalTime?
    , __2: Int?
): Field<LocalTime?> {
    val f = Time3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time3(
      __1: Field<LocalTime?>
    , __2: Field<Int?>
): Field<LocalTime?> {
    val f = Time3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time</code>
 */
fun time4(
      configuration: Configuration
    , __1: OffsetDateTime?
): LocalTime? {
    val f = Time4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time4(
      __1: OffsetDateTime?
): Field<LocalTime?> {
    val f = Time4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time4(
      __1: Field<OffsetDateTime?>
): Field<LocalTime?> {
    val f = Time4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time</code>
 */
fun time5(
      configuration: Configuration
    , __1: OffsetTime?
): LocalTime? {
    val f = Time5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time5(
      __1: OffsetTime?
): Field<LocalTime?> {
    val f = Time5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time</code> as a field.
 */
fun time5(
      __1: Field<OffsetTime?>
): Field<LocalTime?> {
    val f = Time5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_cmp</code>
 */
fun timeCmp(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Int? {
    val f = TimeCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_cmp</code> as a field.
 */
fun timeCmp(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Int?> {
    val f = TimeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_cmp</code> as a field.
 */
fun timeCmp(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Int?> {
    val f = TimeCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_eq</code>
 */
fun timeEq(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_eq</code> as a field.
 */
fun timeEq(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_eq</code> as a field.
 */
fun timeEq(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_ge</code>
 */
fun timeGe(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_ge</code> as a field.
 */
fun timeGe(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_ge</code> as a field.
 */
fun timeGe(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_gt</code>
 */
fun timeGt(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_gt</code> as a field.
 */
fun timeGt(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_gt</code> as a field.
 */
fun timeGt(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_hash</code>
 */
fun timeHash(
      configuration: Configuration
    , __1: LocalTime?
): Int? {
    val f = TimeHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_hash</code> as a field.
 */
fun timeHash(
      __1: LocalTime?
): Field<Int?> {
    val f = TimeHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_hash</code> as a field.
 */
fun timeHash(
      __1: Field<LocalTime?>
): Field<Int?> {
    val f = TimeHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_hash_extended</code>
 */
fun timeHashExtended(
      configuration: Configuration
    , __1: LocalTime?
    , __2: Long?
): Long? {
    val f = TimeHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_hash_extended</code> as a field.
 */
fun timeHashExtended(
      __1: LocalTime?
    , __2: Long?
): Field<Long?> {
    val f = TimeHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_hash_extended</code> as a field.
 */
fun timeHashExtended(
      __1: Field<LocalTime?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = TimeHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): LocalTime? {
    val f = TimeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<LocalTime?> {
    val f = TimeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<LocalTime?> {
    val f = TimeIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_larger</code>
 */
fun timeLarger(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): LocalTime? {
    val f = TimeLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_larger</code> as a field.
 */
fun timeLarger(
      __1: LocalTime?
    , __2: LocalTime?
): Field<LocalTime?> {
    val f = TimeLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_larger</code> as a field.
 */
fun timeLarger(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<LocalTime?> {
    val f = TimeLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_le</code>
 */
fun timeLe(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_le</code> as a field.
 */
fun timeLe(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_le</code> as a field.
 */
fun timeLe(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_lt</code>
 */
fun timeLt(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_lt</code> as a field.
 */
fun timeLt(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_lt</code> as a field.
 */
fun timeLt(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_mi_interval</code>
 */
fun timeMiInterval(
      configuration: Configuration
    , __1: LocalTime?
    , __2: YearToSecond?
): LocalTime? {
    val f = TimeMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_mi_interval</code> as a field.
 */
fun timeMiInterval(
      __1: LocalTime?
    , __2: YearToSecond?
): Field<LocalTime?> {
    val f = TimeMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_mi_interval</code> as a field.
 */
fun timeMiInterval(
      __1: Field<LocalTime?>
    , __2: Field<YearToSecond?>
): Field<LocalTime?> {
    val f = TimeMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_mi_time</code>
 */
fun timeMiTime(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): YearToSecond? {
    val f = TimeMiTime()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_mi_time</code> as a field.
 */
fun timeMiTime(
      __1: LocalTime?
    , __2: LocalTime?
): Field<YearToSecond?> {
    val f = TimeMiTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_mi_time</code> as a field.
 */
fun timeMiTime(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<YearToSecond?> {
    val f = TimeMiTime()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_ne</code>
 */
fun timeNe(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): Boolean? {
    val f = TimeNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_ne</code> as a field.
 */
fun timeNe(
      __1: LocalTime?
    , __2: LocalTime?
): Field<Boolean?> {
    val f = TimeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_ne</code> as a field.
 */
fun timeNe(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<Boolean?> {
    val f = TimeNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeOut(
      configuration: Configuration
    , __1: LocalTime?
): Any? {
    val f = TimeOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeOut(
      __1: LocalTime?
): Field<Any?> {
    val f = TimeOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeOut(
      __1: Field<LocalTime?>
): Field<Any?> {
    val f = TimeOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_pl_interval</code>
 */
fun timePlInterval(
      configuration: Configuration
    , __1: LocalTime?
    , __2: YearToSecond?
): LocalTime? {
    val f = TimePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_pl_interval</code> as a field.
 */
fun timePlInterval(
      __1: LocalTime?
    , __2: YearToSecond?
): Field<LocalTime?> {
    val f = TimePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_pl_interval</code> as a field.
 */
fun timePlInterval(
      __1: Field<LocalTime?>
    , __2: Field<YearToSecond?>
): Field<LocalTime?> {
    val f = TimePlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): LocalTime? {
    val f = TimeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<LocalTime?> {
    val f = TimeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<LocalTime?> {
    val f = TimeRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_send</code>
 */
fun timeSend(
      configuration: Configuration
    , __1: LocalTime?
): ByteArray? {
    val f = TimeSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_send</code> as a field.
 */
fun timeSend(
      __1: LocalTime?
): Field<ByteArray?> {
    val f = TimeSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_send</code> as a field.
 */
fun timeSend(
      __1: Field<LocalTime?>
): Field<ByteArray?> {
    val f = TimeSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.time_smaller</code>
 */
fun timeSmaller(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalTime?
): LocalTime? {
    val f = TimeSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.time_smaller</code> as a field.
 */
fun timeSmaller(
      __1: LocalTime?
    , __2: LocalTime?
): Field<LocalTime?> {
    val f = TimeSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.time_smaller</code> as a field.
 */
fun timeSmaller(
      __1: Field<LocalTime?>
    , __2: Field<LocalTime?>
): Field<LocalTime?> {
    val f = TimeSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TimeSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeSupport(
      __1: Any?
): Field<Any?> {
    val f = TimeSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timeSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TimeSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timedate_pl</code>
 */
fun timedatePl(
      configuration: Configuration
    , __1: LocalTime?
    , __2: LocalDate?
): LocalDateTime? {
    val f = TimedatePl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timedate_pl</code> as a field.
 */
fun timedatePl(
      __1: LocalTime?
    , __2: LocalDate?
): Field<LocalDateTime?> {
    val f = TimedatePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timedate_pl</code> as a field.
 */
fun timedatePl(
      __1: Field<LocalTime?>
    , __2: Field<LocalDate?>
): Field<LocalDateTime?> {
    val f = TimedatePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timeofday</code>
 */
fun timeofday(
      configuration: Configuration
): String? {
    val f = Timeofday()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timeofday</code> as a field.
 */
fun timeofday(): Field<String?> {
    val f = Timeofday()

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp</code>
 */
fun timestamp1(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: Int?
): LocalDateTime? {
    val f = Timestamp1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp1(
      __1: LocalDateTime?
    , __2: Int?
): Field<LocalDateTime?> {
    val f = Timestamp1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp1(
      __1: Field<LocalDateTime?>
    , __2: Field<Int?>
): Field<LocalDateTime?> {
    val f = Timestamp1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp</code>
 */
fun timestamp2(
      configuration: Configuration
    , __1: LocalDate?
): LocalDateTime? {
    val f = Timestamp2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp2(
      __1: LocalDate?
): Field<LocalDateTime?> {
    val f = Timestamp2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp2(
      __1: Field<LocalDate?>
): Field<LocalDateTime?> {
    val f = Timestamp2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp</code>
 */
fun timestamp3(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalTime?
): LocalDateTime? {
    val f = Timestamp3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp3(
      __1: LocalDate?
    , __2: LocalTime?
): Field<LocalDateTime?> {
    val f = Timestamp3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp3(
      __1: Field<LocalDate?>
    , __2: Field<LocalTime?>
): Field<LocalDateTime?> {
    val f = Timestamp3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp</code>
 */
fun timestamp4(
      configuration: Configuration
    , __1: OffsetDateTime?
): LocalDateTime? {
    val f = Timestamp4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp4(
      __1: OffsetDateTime?
): Field<LocalDateTime?> {
    val f = Timestamp4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp</code> as a field.
 */
fun timestamp4(
      __1: Field<OffsetDateTime?>
): Field<LocalDateTime?> {
    val f = Timestamp4()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_cmp</code>
 */
fun timestampCmp(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Int? {
    val f = TimestampCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_cmp</code> as a field.
 */
fun timestampCmp(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Int?> {
    val f = TimestampCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_cmp</code> as a field.
 */
fun timestampCmp(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Int?> {
    val f = TimestampCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_cmp_date</code>
 */
fun timestampCmpDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Int? {
    val f = TimestampCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_cmp_date</code> as a field.
 */
fun timestampCmpDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Int?> {
    val f = TimestampCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_cmp_date</code> as a field.
 */
fun timestampCmpDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Int?> {
    val f = TimestampCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_cmp_timestamptz</code>
 */
fun timestampCmpTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Int? {
    val f = TimestampCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_cmp_timestamptz</code> as a field.
 */
fun timestampCmpTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Int?> {
    val f = TimestampCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_cmp_timestamptz</code> as a field.
 */
fun timestampCmpTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Int?> {
    val f = TimestampCmpTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_eq</code>
 */
fun timestampEq(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_eq</code> as a field.
 */
fun timestampEq(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_eq</code> as a field.
 */
fun timestampEq(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_eq_date</code>
 */
fun timestampEqDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampEqDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_eq_date</code> as a field.
 */
fun timestampEqDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampEqDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_eq_date</code> as a field.
 */
fun timestampEqDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampEqDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_eq_timestamptz</code>
 */
fun timestampEqTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_eq_timestamptz</code> as a field.
 */
fun timestampEqTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_eq_timestamptz</code> as a field.
 */
fun timestampEqTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampEqTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ge</code>
 */
fun timestampGe(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ge</code> as a field.
 */
fun timestampGe(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ge</code> as a field.
 */
fun timestampGe(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ge_date</code>
 */
fun timestampGeDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampGeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ge_date</code> as a field.
 */
fun timestampGeDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampGeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ge_date</code> as a field.
 */
fun timestampGeDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampGeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ge_timestamptz</code>
 */
fun timestampGeTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ge_timestamptz</code> as a field.
 */
fun timestampGeTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ge_timestamptz</code> as a field.
 */
fun timestampGeTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampGeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_gt</code>
 */
fun timestampGt(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_gt</code> as a field.
 */
fun timestampGt(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_gt</code> as a field.
 */
fun timestampGt(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_gt_date</code>
 */
fun timestampGtDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampGtDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_gt_date</code> as a field.
 */
fun timestampGtDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampGtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_gt_date</code> as a field.
 */
fun timestampGtDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampGtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_gt_timestamptz</code>
 */
fun timestampGtTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_gt_timestamptz</code> as a field.
 */
fun timestampGtTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_gt_timestamptz</code> as a field.
 */
fun timestampGtTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampGtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_hash</code>
 */
fun timestampHash(
      configuration: Configuration
    , __1: LocalDateTime?
): Int? {
    val f = TimestampHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_hash</code> as a field.
 */
fun timestampHash(
      __1: LocalDateTime?
): Field<Int?> {
    val f = TimestampHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_hash</code> as a field.
 */
fun timestampHash(
      __1: Field<LocalDateTime?>
): Field<Int?> {
    val f = TimestampHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_hash_extended</code>
 */
fun timestampHashExtended(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: Long?
): Long? {
    val f = TimestampHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_hash_extended</code> as a field.
 */
fun timestampHashExtended(
      __1: LocalDateTime?
    , __2: Long?
): Field<Long?> {
    val f = TimestampHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_hash_extended</code> as a field.
 */
fun timestampHashExtended(
      __1: Field<LocalDateTime?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = TimestampHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): LocalDateTime? {
    val f = TimestampIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<LocalDateTime?> {
    val f = TimestampIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<LocalDateTime?> {
    val f = TimestampIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_larger</code>
 */
fun timestampLarger(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): LocalDateTime? {
    val f = TimestampLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_larger</code> as a field.
 */
fun timestampLarger(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<LocalDateTime?> {
    val f = TimestampLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_larger</code> as a field.
 */
fun timestampLarger(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<LocalDateTime?> {
    val f = TimestampLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_le</code>
 */
fun timestampLe(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_le</code> as a field.
 */
fun timestampLe(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_le</code> as a field.
 */
fun timestampLe(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_le_date</code>
 */
fun timestampLeDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampLeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_le_date</code> as a field.
 */
fun timestampLeDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampLeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_le_date</code> as a field.
 */
fun timestampLeDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampLeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_le_timestamptz</code>
 */
fun timestampLeTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_le_timestamptz</code> as a field.
 */
fun timestampLeTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_le_timestamptz</code> as a field.
 */
fun timestampLeTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampLeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_lt</code>
 */
fun timestampLt(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_lt</code> as a field.
 */
fun timestampLt(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_lt</code> as a field.
 */
fun timestampLt(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_lt_date</code>
 */
fun timestampLtDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampLtDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_lt_date</code> as a field.
 */
fun timestampLtDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampLtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_lt_date</code> as a field.
 */
fun timestampLtDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampLtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_lt_timestamptz</code>
 */
fun timestampLtTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_lt_timestamptz</code> as a field.
 */
fun timestampLtTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_lt_timestamptz</code> as a field.
 */
fun timestampLtTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampLtTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_mi</code>
 */
fun timestampMi(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): YearToSecond? {
    val f = TimestampMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_mi</code> as a field.
 */
fun timestampMi(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<YearToSecond?> {
    val f = TimestampMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_mi</code> as a field.
 */
fun timestampMi(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<YearToSecond?> {
    val f = TimestampMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_mi_interval</code>
 */
fun timestampMiInterval(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: YearToSecond?
): LocalDateTime? {
    val f = TimestampMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_mi_interval</code> as a field.
 */
fun timestampMiInterval(
      __1: LocalDateTime?
    , __2: YearToSecond?
): Field<LocalDateTime?> {
    val f = TimestampMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_mi_interval</code> as a field.
 */
fun timestampMiInterval(
      __1: Field<LocalDateTime?>
    , __2: Field<YearToSecond?>
): Field<LocalDateTime?> {
    val f = TimestampMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ne</code>
 */
fun timestampNe(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestampNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ne</code> as a field.
 */
fun timestampNe(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestampNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ne</code> as a field.
 */
fun timestampNe(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestampNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ne_date</code>
 */
fun timestampNeDate(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestampNeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ne_date</code> as a field.
 */
fun timestampNeDate(
      __1: LocalDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestampNeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ne_date</code> as a field.
 */
fun timestampNeDate(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestampNeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_ne_timestamptz</code>
 */
fun timestampNeTimestamptz(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestampNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_ne_timestamptz</code> as a field.
 */
fun timestampNeTimestamptz(
      __1: LocalDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestampNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_ne_timestamptz</code> as a field.
 */
fun timestampNeTimestamptz(
      __1: Field<LocalDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestampNeTimestamptz()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampOut(
      configuration: Configuration
    , __1: LocalDateTime?
): Any? {
    val f = TimestampOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampOut(
      __1: LocalDateTime?
): Field<Any?> {
    val f = TimestampOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampOut(
      __1: Field<LocalDateTime?>
): Field<Any?> {
    val f = TimestampOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_pl_interval</code>
 */
fun timestampPlInterval(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: YearToSecond?
): LocalDateTime? {
    val f = TimestampPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_pl_interval</code> as a field.
 */
fun timestampPlInterval(
      __1: LocalDateTime?
    , __2: YearToSecond?
): Field<LocalDateTime?> {
    val f = TimestampPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_pl_interval</code> as a field.
 */
fun timestampPlInterval(
      __1: Field<LocalDateTime?>
    , __2: Field<YearToSecond?>
): Field<LocalDateTime?> {
    val f = TimestampPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): LocalDateTime? {
    val f = TimestampRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<LocalDateTime?> {
    val f = TimestampRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<LocalDateTime?> {
    val f = TimestampRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_send</code>
 */
fun timestampSend(
      configuration: Configuration
    , __1: LocalDateTime?
): ByteArray? {
    val f = TimestampSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_send</code> as a field.
 */
fun timestampSend(
      __1: LocalDateTime?
): Field<ByteArray?> {
    val f = TimestampSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_send</code> as a field.
 */
fun timestampSend(
      __1: Field<LocalDateTime?>
): Field<ByteArray?> {
    val f = TimestampSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamp_smaller</code>
 */
fun timestampSmaller(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): LocalDateTime? {
    val f = TimestampSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamp_smaller</code> as a field.
 */
fun timestampSmaller(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<LocalDateTime?> {
    val f = TimestampSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamp_smaller</code> as a field.
 */
fun timestampSmaller(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<LocalDateTime?> {
    val f = TimestampSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = TimestampSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TimestampSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampSupport(
      __1: Any?
): Field<Any?> {
    val f = TimestampSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestampSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = TimestampSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptypmodin</code>
 */
fun timestamptypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Timestamptypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptypmodin</code> as a field.
 */
fun timestamptypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Timestamptypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptypmodin</code> as a field.
 */
fun timestamptypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Timestamptypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Timestamptypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptypmodout(
      __1: Int?
): Field<Any?> {
    val f = Timestamptypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Timestamptypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz</code>
 */
fun timestamptz1(
      configuration: Configuration
    , __1: LocalDate?
): OffsetDateTime? {
    val f = Timestamptz1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz1(
      __1: LocalDate?
): Field<OffsetDateTime?> {
    val f = Timestamptz1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz1(
      __1: Field<LocalDate?>
): Field<OffsetDateTime?> {
    val f = Timestamptz1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz</code>
 */
fun timestamptz2(
      configuration: Configuration
    , __1: LocalDate?
    , __2: LocalTime?
): OffsetDateTime? {
    val f = Timestamptz2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz2(
      __1: LocalDate?
    , __2: LocalTime?
): Field<OffsetDateTime?> {
    val f = Timestamptz2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz2(
      __1: Field<LocalDate?>
    , __2: Field<LocalTime?>
): Field<OffsetDateTime?> {
    val f = Timestamptz2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz</code>
 */
fun timestamptz3(
      configuration: Configuration
    , __1: LocalDate?
    , __2: OffsetTime?
): OffsetDateTime? {
    val f = Timestamptz3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz3(
      __1: LocalDate?
    , __2: OffsetTime?
): Field<OffsetDateTime?> {
    val f = Timestamptz3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz3(
      __1: Field<LocalDate?>
    , __2: Field<OffsetTime?>
): Field<OffsetDateTime?> {
    val f = Timestamptz3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz</code>
 */
fun timestamptz4(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: Int?
): OffsetDateTime? {
    val f = Timestamptz4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz4(
      __1: OffsetDateTime?
    , __2: Int?
): Field<OffsetDateTime?> {
    val f = Timestamptz4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz4(
      __1: Field<OffsetDateTime?>
    , __2: Field<Int?>
): Field<OffsetDateTime?> {
    val f = Timestamptz4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz</code>
 */
fun timestamptz5(
      configuration: Configuration
    , __1: LocalDateTime?
): OffsetDateTime? {
    val f = Timestamptz5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz5(
      __1: LocalDateTime?
): Field<OffsetDateTime?> {
    val f = Timestamptz5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz</code> as a field.
 */
fun timestamptz5(
      __1: Field<LocalDateTime?>
): Field<OffsetDateTime?> {
    val f = Timestamptz5()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_cmp</code>
 */
fun timestamptzCmp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Int? {
    val f = TimestamptzCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_cmp</code> as a field.
 */
fun timestamptzCmp(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Int?> {
    val f = TimestamptzCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_cmp</code> as a field.
 */
fun timestamptzCmp(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Int?> {
    val f = TimestamptzCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_cmp_date</code>
 */
fun timestamptzCmpDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Int? {
    val f = TimestamptzCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_cmp_date</code> as a field.
 */
fun timestamptzCmpDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Int?> {
    val f = TimestamptzCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_cmp_date</code> as a field.
 */
fun timestamptzCmpDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Int?> {
    val f = TimestamptzCmpDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_cmp_timestamp</code>
 */
fun timestamptzCmpTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Int? {
    val f = TimestamptzCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_cmp_timestamp</code> as a field.
 */
fun timestamptzCmpTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Int?> {
    val f = TimestamptzCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_cmp_timestamp</code> as a field.
 */
fun timestamptzCmpTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Int?> {
    val f = TimestamptzCmpTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_eq</code>
 */
fun timestamptzEq(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_eq</code> as a field.
 */
fun timestamptzEq(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_eq</code> as a field.
 */
fun timestamptzEq(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_eq_date</code>
 */
fun timestamptzEqDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzEqDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_eq_date</code> as a field.
 */
fun timestamptzEqDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzEqDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_eq_date</code> as a field.
 */
fun timestamptzEqDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzEqDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_eq_timestamp</code>
 */
fun timestamptzEqTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_eq_timestamp</code> as a field.
 */
fun timestamptzEqTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_eq_timestamp</code> as a field.
 */
fun timestamptzEqTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzEqTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ge</code>
 */
fun timestamptzGe(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ge</code> as a field.
 */
fun timestamptzGe(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ge</code> as a field.
 */
fun timestamptzGe(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ge_date</code>
 */
fun timestamptzGeDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzGeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ge_date</code> as a field.
 */
fun timestamptzGeDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzGeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ge_date</code> as a field.
 */
fun timestamptzGeDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzGeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ge_timestamp</code>
 */
fun timestamptzGeTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ge_timestamp</code> as a field.
 */
fun timestamptzGeTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ge_timestamp</code> as a field.
 */
fun timestamptzGeTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzGeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_gt</code>
 */
fun timestamptzGt(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_gt</code> as a field.
 */
fun timestamptzGt(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_gt</code> as a field.
 */
fun timestamptzGt(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_gt_date</code>
 */
fun timestamptzGtDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzGtDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_gt_date</code> as a field.
 */
fun timestamptzGtDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzGtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_gt_date</code> as a field.
 */
fun timestamptzGtDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzGtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_gt_timestamp</code>
 */
fun timestamptzGtTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_gt_timestamp</code> as a field.
 */
fun timestamptzGtTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_gt_timestamp</code> as a field.
 */
fun timestamptzGtTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzGtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): OffsetDateTime? {
    val f = TimestamptzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<OffsetDateTime?> {
    val f = TimestamptzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<OffsetDateTime?> {
    val f = TimestamptzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_larger</code>
 */
fun timestamptzLarger(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): OffsetDateTime? {
    val f = TimestamptzLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_larger</code> as a field.
 */
fun timestamptzLarger(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<OffsetDateTime?> {
    val f = TimestamptzLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_larger</code> as a field.
 */
fun timestamptzLarger(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<OffsetDateTime?> {
    val f = TimestamptzLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_le</code>
 */
fun timestamptzLe(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_le</code> as a field.
 */
fun timestamptzLe(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_le</code> as a field.
 */
fun timestamptzLe(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_le_date</code>
 */
fun timestamptzLeDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzLeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_le_date</code> as a field.
 */
fun timestamptzLeDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzLeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_le_date</code> as a field.
 */
fun timestamptzLeDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzLeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_le_timestamp</code>
 */
fun timestamptzLeTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_le_timestamp</code> as a field.
 */
fun timestamptzLeTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_le_timestamp</code> as a field.
 */
fun timestamptzLeTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzLeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_lt</code>
 */
fun timestamptzLt(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_lt</code> as a field.
 */
fun timestamptzLt(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_lt</code> as a field.
 */
fun timestamptzLt(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_lt_date</code>
 */
fun timestamptzLtDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzLtDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_lt_date</code> as a field.
 */
fun timestamptzLtDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzLtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_lt_date</code> as a field.
 */
fun timestamptzLtDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzLtDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_lt_timestamp</code>
 */
fun timestamptzLtTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_lt_timestamp</code> as a field.
 */
fun timestamptzLtTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_lt_timestamp</code> as a field.
 */
fun timestamptzLtTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzLtTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_mi</code>
 */
fun timestamptzMi(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): YearToSecond? {
    val f = TimestamptzMi()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_mi</code> as a field.
 */
fun timestamptzMi(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<YearToSecond?> {
    val f = TimestamptzMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_mi</code> as a field.
 */
fun timestamptzMi(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<YearToSecond?> {
    val f = TimestamptzMi()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_mi_interval</code>
 */
fun timestamptzMiInterval(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: YearToSecond?
): OffsetDateTime? {
    val f = TimestamptzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_mi_interval</code> as a field.
 */
fun timestamptzMiInterval(
      __1: OffsetDateTime?
    , __2: YearToSecond?
): Field<OffsetDateTime?> {
    val f = TimestamptzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_mi_interval</code> as a field.
 */
fun timestamptzMiInterval(
      __1: Field<OffsetDateTime?>
    , __2: Field<YearToSecond?>
): Field<OffsetDateTime?> {
    val f = TimestamptzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ne</code>
 */
fun timestamptzNe(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Boolean? {
    val f = TimestamptzNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ne</code> as a field.
 */
fun timestamptzNe(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Boolean?> {
    val f = TimestamptzNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ne</code> as a field.
 */
fun timestamptzNe(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Boolean?> {
    val f = TimestamptzNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ne_date</code>
 */
fun timestamptzNeDate(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDate?
): Boolean? {
    val f = TimestamptzNeDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ne_date</code> as a field.
 */
fun timestamptzNeDate(
      __1: OffsetDateTime?
    , __2: LocalDate?
): Field<Boolean?> {
    val f = TimestamptzNeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ne_date</code> as a field.
 */
fun timestamptzNeDate(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDate?>
): Field<Boolean?> {
    val f = TimestamptzNeDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_ne_timestamp</code>
 */
fun timestamptzNeTimestamp(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: LocalDateTime?
): Boolean? {
    val f = TimestamptzNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_ne_timestamp</code> as a field.
 */
fun timestamptzNeTimestamp(
      __1: OffsetDateTime?
    , __2: LocalDateTime?
): Field<Boolean?> {
    val f = TimestamptzNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_ne_timestamp</code> as a field.
 */
fun timestamptzNeTimestamp(
      __1: Field<OffsetDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Boolean?> {
    val f = TimestamptzNeTimestamp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzOut(
      configuration: Configuration
    , __1: OffsetDateTime?
): Any? {
    val f = TimestamptzOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzOut(
      __1: OffsetDateTime?
): Field<Any?> {
    val f = TimestamptzOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzOut(
      __1: Field<OffsetDateTime?>
): Field<Any?> {
    val f = TimestamptzOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_pl_interval</code>
 */
fun timestamptzPlInterval(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: YearToSecond?
): OffsetDateTime? {
    val f = TimestamptzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_pl_interval</code> as a field.
 */
fun timestamptzPlInterval(
      __1: OffsetDateTime?
    , __2: YearToSecond?
): Field<OffsetDateTime?> {
    val f = TimestamptzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_pl_interval</code> as a field.
 */
fun timestamptzPlInterval(
      __1: Field<OffsetDateTime?>
    , __2: Field<YearToSecond?>
): Field<OffsetDateTime?> {
    val f = TimestamptzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): OffsetDateTime? {
    val f = TimestamptzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<OffsetDateTime?> {
    val f = TimestamptzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptzRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<OffsetDateTime?> {
    val f = TimestamptzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_send</code>
 */
fun timestamptzSend(
      configuration: Configuration
    , __1: OffsetDateTime?
): ByteArray? {
    val f = TimestamptzSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_send</code> as a field.
 */
fun timestamptzSend(
      __1: OffsetDateTime?
): Field<ByteArray?> {
    val f = TimestamptzSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_send</code> as a field.
 */
fun timestamptzSend(
      __1: Field<OffsetDateTime?>
): Field<ByteArray?> {
    val f = TimestamptzSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptz_smaller</code>
 */
fun timestamptzSmaller(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): OffsetDateTime? {
    val f = TimestamptzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptz_smaller</code> as a field.
 */
fun timestamptzSmaller(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<OffsetDateTime?> {
    val f = TimestamptzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptz_smaller</code> as a field.
 */
fun timestamptzSmaller(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<OffsetDateTime?> {
    val f = TimestamptzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timestamptztypmodin</code>
 */
fun timestamptztypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Timestamptztypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timestamptztypmodin</code> as a field.
 */
fun timestamptztypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Timestamptztypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timestamptztypmodin</code> as a field.
 */
fun timestamptztypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Timestamptztypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptztypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Timestamptztypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptztypmodout(
      __1: Int?
): Field<Any?> {
    val f = Timestamptztypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timestamptztypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Timestamptztypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetypmodin</code>
 */
fun timetypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Timetypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetypmodin</code> as a field.
 */
fun timetypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Timetypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetypmodin</code> as a field.
 */
fun timetypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Timetypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Timetypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetypmodout(
      __1: Int?
): Field<Any?> {
    val f = Timetypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Timetypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz</code>
 */
fun timetz1(
      configuration: Configuration
    , __1: OffsetDateTime?
): OffsetTime? {
    val f = Timetz1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz1(
      __1: OffsetDateTime?
): Field<OffsetTime?> {
    val f = Timetz1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz1(
      __1: Field<OffsetDateTime?>
): Field<OffsetTime?> {
    val f = Timetz1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz</code>
 */
fun timetz2(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: Int?
): OffsetTime? {
    val f = Timetz2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz2(
      __1: OffsetTime?
    , __2: Int?
): Field<OffsetTime?> {
    val f = Timetz2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz2(
      __1: Field<OffsetTime?>
    , __2: Field<Int?>
): Field<OffsetTime?> {
    val f = Timetz2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz</code>
 */
fun timetz3(
      configuration: Configuration
    , __1: LocalTime?
): OffsetTime? {
    val f = Timetz3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz3(
      __1: LocalTime?
): Field<OffsetTime?> {
    val f = Timetz3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz</code> as a field.
 */
fun timetz3(
      __1: Field<LocalTime?>
): Field<OffsetTime?> {
    val f = Timetz3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_cmp</code>
 */
fun timetzCmp(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Int? {
    val f = TimetzCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_cmp</code> as a field.
 */
fun timetzCmp(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Int?> {
    val f = TimetzCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_cmp</code> as a field.
 */
fun timetzCmp(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Int?> {
    val f = TimetzCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_eq</code>
 */
fun timetzEq(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_eq</code> as a field.
 */
fun timetzEq(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_eq</code> as a field.
 */
fun timetzEq(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_ge</code>
 */
fun timetzGe(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_ge</code> as a field.
 */
fun timetzGe(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_ge</code> as a field.
 */
fun timetzGe(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_gt</code>
 */
fun timetzGt(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_gt</code> as a field.
 */
fun timetzGt(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_gt</code> as a field.
 */
fun timetzGt(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_hash</code>
 */
fun timetzHash(
      configuration: Configuration
    , __1: OffsetTime?
): Int? {
    val f = TimetzHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_hash</code> as a field.
 */
fun timetzHash(
      __1: OffsetTime?
): Field<Int?> {
    val f = TimetzHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_hash</code> as a field.
 */
fun timetzHash(
      __1: Field<OffsetTime?>
): Field<Int?> {
    val f = TimetzHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_hash_extended</code>
 */
fun timetzHashExtended(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: Long?
): Long? {
    val f = TimetzHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_hash_extended</code> as a field.
 */
fun timetzHashExtended(
      __1: OffsetTime?
    , __2: Long?
): Field<Long?> {
    val f = TimetzHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_hash_extended</code> as a field.
 */
fun timetzHashExtended(
      __1: Field<OffsetTime?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = TimetzHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): OffsetTime? {
    val f = TimetzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<OffsetTime?> {
    val f = TimetzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<OffsetTime?> {
    val f = TimetzIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_larger</code>
 */
fun timetzLarger(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): OffsetTime? {
    val f = TimetzLarger()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_larger</code> as a field.
 */
fun timetzLarger(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<OffsetTime?> {
    val f = TimetzLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_larger</code> as a field.
 */
fun timetzLarger(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<OffsetTime?> {
    val f = TimetzLarger()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_le</code>
 */
fun timetzLe(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_le</code> as a field.
 */
fun timetzLe(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_le</code> as a field.
 */
fun timetzLe(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_lt</code>
 */
fun timetzLt(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_lt</code> as a field.
 */
fun timetzLt(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_lt</code> as a field.
 */
fun timetzLt(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_mi_interval</code>
 */
fun timetzMiInterval(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: YearToSecond?
): OffsetTime? {
    val f = TimetzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_mi_interval</code> as a field.
 */
fun timetzMiInterval(
      __1: OffsetTime?
    , __2: YearToSecond?
): Field<OffsetTime?> {
    val f = TimetzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_mi_interval</code> as a field.
 */
fun timetzMiInterval(
      __1: Field<OffsetTime?>
    , __2: Field<YearToSecond?>
): Field<OffsetTime?> {
    val f = TimetzMiInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_ne</code>
 */
fun timetzNe(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): Boolean? {
    val f = TimetzNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_ne</code> as a field.
 */
fun timetzNe(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<Boolean?> {
    val f = TimetzNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_ne</code> as a field.
 */
fun timetzNe(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<Boolean?> {
    val f = TimetzNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzOut(
      configuration: Configuration
    , __1: OffsetTime?
): Any? {
    val f = TimetzOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzOut(
      __1: OffsetTime?
): Field<Any?> {
    val f = TimetzOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzOut(
      __1: Field<OffsetTime?>
): Field<Any?> {
    val f = TimetzOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_pl_interval</code>
 */
fun timetzPlInterval(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: YearToSecond?
): OffsetTime? {
    val f = TimetzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_pl_interval</code> as a field.
 */
fun timetzPlInterval(
      __1: OffsetTime?
    , __2: YearToSecond?
): Field<OffsetTime?> {
    val f = TimetzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_pl_interval</code> as a field.
 */
fun timetzPlInterval(
      __1: Field<OffsetTime?>
    , __2: Field<YearToSecond?>
): Field<OffsetTime?> {
    val f = TimetzPlInterval()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): OffsetTime? {
    val f = TimetzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<OffsetTime?> {
    val f = TimetzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetzRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<OffsetTime?> {
    val f = TimetzRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_send</code>
 */
fun timetzSend(
      configuration: Configuration
    , __1: OffsetTime?
): ByteArray? {
    val f = TimetzSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_send</code> as a field.
 */
fun timetzSend(
      __1: OffsetTime?
): Field<ByteArray?> {
    val f = TimetzSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_send</code> as a field.
 */
fun timetzSend(
      __1: Field<OffsetTime?>
): Field<ByteArray?> {
    val f = TimetzSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetz_smaller</code>
 */
fun timetzSmaller(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: OffsetTime?
): OffsetTime? {
    val f = TimetzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetz_smaller</code> as a field.
 */
fun timetzSmaller(
      __1: OffsetTime?
    , __2: OffsetTime?
): Field<OffsetTime?> {
    val f = TimetzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetz_smaller</code> as a field.
 */
fun timetzSmaller(
      __1: Field<OffsetTime?>
    , __2: Field<OffsetTime?>
): Field<OffsetTime?> {
    val f = TimetzSmaller()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetzdate_pl</code>
 */
fun timetzdatePl(
      configuration: Configuration
    , __1: OffsetTime?
    , __2: LocalDate?
): OffsetDateTime? {
    val f = TimetzdatePl()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetzdate_pl</code> as a field.
 */
fun timetzdatePl(
      __1: OffsetTime?
    , __2: LocalDate?
): Field<OffsetDateTime?> {
    val f = TimetzdatePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetzdate_pl</code> as a field.
 */
fun timetzdatePl(
      __1: Field<OffsetTime?>
    , __2: Field<LocalDate?>
): Field<OffsetDateTime?> {
    val f = TimetzdatePl()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timetztypmodin</code>
 */
fun timetztypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Timetztypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timetztypmodin</code> as a field.
 */
fun timetztypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Timetztypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timetztypmodin</code> as a field.
 */
fun timetztypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Timetztypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetztypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Timetztypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetztypmodout(
      __1: Int?
): Field<Any?> {
    val f = Timetztypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun timetztypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Timetztypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone1(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: OffsetDateTime?
): LocalDateTime? {
    val f = Timezone1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone1(
      __1: YearToSecond?
    , __2: OffsetDateTime?
): Field<LocalDateTime?> {
    val f = Timezone1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone1(
      __1: Field<YearToSecond?>
    , __2: Field<OffsetDateTime?>
): Field<LocalDateTime?> {
    val f = Timezone1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone2(
      configuration: Configuration
    , __1: String?
    , __2: OffsetDateTime?
): LocalDateTime? {
    val f = Timezone2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone2(
      __1: String?
    , __2: OffsetDateTime?
): Field<LocalDateTime?> {
    val f = Timezone2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone2(
      __1: Field<String?>
    , __2: Field<OffsetDateTime?>
): Field<LocalDateTime?> {
    val f = Timezone2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone3(
      configuration: Configuration
    , __1: String?
    , __2: OffsetTime?
): OffsetTime? {
    val f = Timezone3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone3(
      __1: String?
    , __2: OffsetTime?
): Field<OffsetTime?> {
    val f = Timezone3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone3(
      __1: Field<String?>
    , __2: Field<OffsetTime?>
): Field<OffsetTime?> {
    val f = Timezone3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone4(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: OffsetTime?
): OffsetTime? {
    val f = Timezone4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone4(
      __1: YearToSecond?
    , __2: OffsetTime?
): Field<OffsetTime?> {
    val f = Timezone4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone4(
      __1: Field<YearToSecond?>
    , __2: Field<OffsetTime?>
): Field<OffsetTime?> {
    val f = Timezone4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone5(
      configuration: Configuration
    , __1: String?
    , __2: LocalDateTime?
): OffsetDateTime? {
    val f = Timezone5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone5(
      __1: String?
    , __2: LocalDateTime?
): Field<OffsetDateTime?> {
    val f = Timezone5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone5(
      __1: Field<String?>
    , __2: Field<LocalDateTime?>
): Field<OffsetDateTime?> {
    val f = Timezone5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.timezone</code>
 */
fun timezone6(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: LocalDateTime?
): OffsetDateTime? {
    val f = Timezone6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone6(
      __1: YearToSecond?
    , __2: LocalDateTime?
): Field<OffsetDateTime?> {
    val f = Timezone6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.timezone</code> as a field.
 */
fun timezone6(
      __1: Field<YearToSecond?>
    , __2: Field<LocalDateTime?>
): Field<OffsetDateTime?> {
    val f = Timezone6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_ascii</code>
 */
fun toAscii1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = ToAscii1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii1(
      __1: String?
): Field<String?> {
    val f = ToAscii1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii1(
      __1: Field<String?>
): Field<String?> {
    val f = ToAscii1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_ascii</code>
 */
fun toAscii2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
): String? {
    val f = ToAscii2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii2(
      __1: String?
    , __2: Int?
): Field<String?> {
    val f = ToAscii2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii2(
      __1: Field<String?>
    , __2: Field<Int?>
): Field<String?> {
    val f = ToAscii2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_ascii</code>
 */
fun toAscii3(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = ToAscii3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii3(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = ToAscii3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_ascii</code> as a field.
 */
fun toAscii3(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToAscii3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar1(
      configuration: Configuration
    , __1: YearToSecond?
    , __2: String?
): String? {
    val f = ToChar1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar1(
      __1: YearToSecond?
    , __2: String?
): Field<String?> {
    val f = ToChar1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar1(
      __1: Field<YearToSecond?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar2(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: String?
): String? {
    val f = ToChar2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar2(
      __1: OffsetDateTime?
    , __2: String?
): Field<String?> {
    val f = ToChar2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar2(
      __1: Field<OffsetDateTime?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar3(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: String?
): String? {
    val f = ToChar3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar3(
      __1: BigDecimal?
    , __2: String?
): Field<String?> {
    val f = ToChar3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar3(
      __1: Field<BigDecimal?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar4(
      configuration: Configuration
    , __1: Int?
    , __2: String?
): String? {
    val f = ToChar4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar4(
      __1: Int?
    , __2: String?
): Field<String?> {
    val f = ToChar4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar4(
      __1: Field<Int?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar5(
      configuration: Configuration
    , __1: Long?
    , __2: String?
): String? {
    val f = ToChar5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar5(
      __1: Long?
    , __2: String?
): Field<String?> {
    val f = ToChar5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar5(
      __1: Field<Long?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar6(
      configuration: Configuration
    , __1: Float?
    , __2: String?
): String? {
    val f = ToChar6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar6(
      __1: Float?
    , __2: String?
): Field<String?> {
    val f = ToChar6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar6(
      __1: Field<Float?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar7(
      configuration: Configuration
    , __1: Double?
    , __2: String?
): String? {
    val f = ToChar7()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar7(
      __1: Double?
    , __2: String?
): Field<String?> {
    val f = ToChar7()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar7(
      __1: Field<Double?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar7()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_char</code>
 */
fun toChar8(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: String?
): String? {
    val f = ToChar8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar8(
      __1: LocalDateTime?
    , __2: String?
): Field<String?> {
    val f = ToChar8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_char</code> as a field.
 */
fun toChar8(
      __1: Field<LocalDateTime?>
    , __2: Field<String?>
): Field<String?> {
    val f = ToChar8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_date</code>
 */
fun toDate(
      configuration: Configuration
    , __1: String?
    , __2: String?
): LocalDate? {
    val f = ToDate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_date</code> as a field.
 */
fun toDate(
      __1: String?
    , __2: String?
): Field<LocalDate?> {
    val f = ToDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_date</code> as a field.
 */
fun toDate(
      __1: Field<String?>
    , __2: Field<String?>
): Field<LocalDate?> {
    val f = ToDate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_hex</code>
 */
fun toHex1(
      configuration: Configuration
    , __1: Int?
): String? {
    val f = ToHex1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_hex</code> as a field.
 */
fun toHex1(
      __1: Int?
): Field<String?> {
    val f = ToHex1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_hex</code> as a field.
 */
fun toHex1(
      __1: Field<Int?>
): Field<String?> {
    val f = ToHex1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_hex</code>
 */
fun toHex2(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = ToHex2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_hex</code> as a field.
 */
fun toHex2(
      __1: Long?
): Field<String?> {
    val f = ToHex2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_hex</code> as a field.
 */
fun toHex2(
      __1: Field<Long?>
): Field<String?> {
    val f = ToHex2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJson(
      configuration: Configuration
    , __1: Any?
): JSON? {
    val f = ToJson()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJson(
      __1: Any?
): Field<JSON?> {
    val f = ToJson()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJson(
      __1: Field<Any?>
): Field<JSON?> {
    val f = ToJson()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJsonb(
      configuration: Configuration
    , __1: Any?
): JSONB? {
    val f = ToJsonb()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJsonb(
      __1: Any?
): Field<JSONB?> {
    val f = ToJsonb()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toJsonb(
      __1: Field<Any?>
): Field<JSONB?> {
    val f = ToJsonb()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_number</code>
 */
fun toNumber(
      configuration: Configuration
    , __1: String?
    , __2: String?
): BigDecimal? {
    val f = ToNumber()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_number</code> as a field.
 */
fun toNumber(
      __1: String?
    , __2: String?
): Field<BigDecimal?> {
    val f = ToNumber()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_number</code> as a field.
 */
fun toNumber(
      __1: Field<String?>
    , __2: Field<String?>
): Field<BigDecimal?> {
    val f = ToNumber()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegclass(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegclass()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegclass(
      __1: String?
): Field<Any?> {
    val f = ToRegclass()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegclass(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegclass()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegcollation(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegcollation()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegcollation(
      __1: String?
): Field<Any?> {
    val f = ToRegcollation()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegcollation(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegcollation()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegnamespace(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegnamespace()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegnamespace(
      __1: String?
): Field<Any?> {
    val f = ToRegnamespace()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegnamespace(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegnamespace()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoper(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegoper()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoper(
      __1: String?
): Field<Any?> {
    val f = ToRegoper()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoper(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegoper()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoperator(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegoperator()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoperator(
      __1: String?
): Field<Any?> {
    val f = ToRegoperator()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegoperator(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegoperator()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_regproc</code>
 */
fun toRegproc(
      configuration: Configuration
    , __1: String?
): String? {
    val f = ToRegproc()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_regproc</code> as a field.
 */
fun toRegproc(
      __1: String?
): Field<String?> {
    val f = ToRegproc()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_regproc</code> as a field.
 */
fun toRegproc(
      __1: Field<String?>
): Field<String?> {
    val f = ToRegproc()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegprocedure(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegprocedure()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegprocedure(
      __1: String?
): Field<Any?> {
    val f = ToRegprocedure()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegprocedure(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegprocedure()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegrole(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegrole()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegrole(
      __1: String?
): Field<Any?> {
    val f = ToRegrole()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegrole(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegrole()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegtype(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToRegtype()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegtype(
      __1: String?
): Field<Any?> {
    val f = ToRegtype()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toRegtype(
      __1: Field<String?>
): Field<Any?> {
    val f = ToRegtype()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_timestamp</code>
 */
fun toTimestamp1(
      configuration: Configuration
    , __1: Double?
): OffsetDateTime? {
    val f = ToTimestamp1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_timestamp</code> as a field.
 */
fun toTimestamp1(
      __1: Double?
): Field<OffsetDateTime?> {
    val f = ToTimestamp1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_timestamp</code> as a field.
 */
fun toTimestamp1(
      __1: Field<Double?>
): Field<OffsetDateTime?> {
    val f = ToTimestamp1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.to_timestamp</code>
 */
fun toTimestamp2(
      configuration: Configuration
    , __1: String?
    , __2: String?
): OffsetDateTime? {
    val f = ToTimestamp2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.to_timestamp</code> as a field.
 */
fun toTimestamp2(
      __1: String?
    , __2: String?
): Field<OffsetDateTime?> {
    val f = ToTimestamp2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.to_timestamp</code> as a field.
 */
fun toTimestamp2(
      __1: Field<String?>
    , __2: Field<String?>
): Field<OffsetDateTime?> {
    val f = ToTimestamp2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = ToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery1(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = ToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery1(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = ToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery2(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToTsquery2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery2(
      __1: String?
): Field<Any?> {
    val f = ToTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsquery2(
      __1: Field<String?>
): Field<Any?> {
    val f = ToTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = ToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector1(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = ToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector1(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = ToTsvector1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector2(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = ToTsvector2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector2(
      __1: String?
): Field<Any?> {
    val f = ToTsvector2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector2(
      __1: Field<String?>
): Field<Any?> {
    val f = ToTsvector2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector3(
      configuration: Configuration
    , __1: JSONB?
): Any? {
    val f = ToTsvector3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector3(
      __1: JSONB?
): Field<Any?> {
    val f = ToTsvector3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector3(
      __1: Field<JSONB?>
): Field<Any?> {
    val f = ToTsvector3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector4(
      configuration: Configuration
    , __1: JSON?
): Any? {
    val f = ToTsvector4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector4(
      __1: JSON?
): Field<Any?> {
    val f = ToTsvector4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector4(
      __1: Field<JSON?>
): Field<Any?> {
    val f = ToTsvector4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector5(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
): Any? {
    val f = ToTsvector5()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector5(
      __1: Any?
    , __2: JSONB?
): Field<Any?> {
    val f = ToTsvector5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector5(
      __1: Field<Any?>
    , __2: Field<JSONB?>
): Field<Any?> {
    val f = ToTsvector5()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector6(
      configuration: Configuration
    , __1: Any?
    , __2: JSON?
): Any? {
    val f = ToTsvector6()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector6(
      __1: Any?
    , __2: JSON?
): Field<Any?> {
    val f = ToTsvector6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun toTsvector6(
      __1: Field<Any?>
    , __2: Field<JSON?>
): Field<Any?> {
    val f = ToTsvector6()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.transaction_timestamp</code>
 */
fun transactionTimestamp(
      configuration: Configuration
): OffsetDateTime? {
    val f = TransactionTimestamp()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.transaction_timestamp</code> as a field.
 */
fun transactionTimestamp(): Field<OffsetDateTime?> {
    val f = TransactionTimestamp()

    return f.asField()
}

/**
 * Call <code>pg_catalog.translate</code>
 */
fun translate(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.translate</code> as a field.
 */
fun translate(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.translate</code> as a field.
 */
fun translate(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun triggerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TriggerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun triggerOut(
      __1: Any?
): Field<Any?> {
    val f = TriggerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun triggerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = TriggerOut()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.trim_array</code>
 */
fun trimArray(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
): Array<Any?>? {
    val f = TrimArray()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.trim_array</code> as a field.
 */
fun trimArray(
      __1: Array<Any?>?
    , __2: Int?
): Field<Array<Any?>?> {
    val f = TrimArray()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.trim_array</code> as a field.
 */
fun trimArray(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
): Field<Array<Any?>?> {
    val f = TrimArray()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.trim_scale</code>
 */
fun trimScale(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = TrimScale()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.trim_scale</code> as a field.
 */
fun trimScale(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = TrimScale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.trim_scale</code> as a field.
 */
fun trimScale(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = TrimScale()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.trunc</code>
 */
fun trunc1(
      configuration: Configuration
    , __1: Double?
): Double? {
    val f = Trunc1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc1(
      __1: Double?
): Field<Double?> {
    val f = Trunc1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc1(
      __1: Field<Double?>
): Field<Double?> {
    val f = Trunc1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.trunc</code>
 */
fun trunc2(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: Int?
): BigDecimal? {
    val f = Trunc2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc2(
      __1: BigDecimal?
    , __2: Int?
): Field<BigDecimal?> {
    val f = Trunc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc2(
      __1: Field<BigDecimal?>
    , __2: Field<Int?>
): Field<BigDecimal?> {
    val f = Trunc2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.trunc</code>
 */
fun trunc3(
      configuration: Configuration
    , __1: BigDecimal?
): BigDecimal? {
    val f = Trunc3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc3(
      __1: BigDecimal?
): Field<BigDecimal?> {
    val f = Trunc3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.trunc</code> as a field.
 */
fun trunc3(
      __1: Field<BigDecimal?>
): Field<BigDecimal?> {
    val f = Trunc3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc4(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Trunc4()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc4(
      __1: Any?
): Field<Any?> {
    val f = Trunc4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc4(
      __1: Field<Any?>
): Field<Any?> {
    val f = Trunc4()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc5(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Trunc5()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc5(
      __1: Any?
): Field<Any?> {
    val f = Trunc5()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun trunc5(
      __1: Field<Any?>
): Field<Any?> {
    val f = Trunc5()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = TsDelete1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete1(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = TsDelete1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete1(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = TsDelete1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete2(
      configuration: Configuration
    , __1: Any?
    , __2: Array<String?>?
): Any? {
    val f = TsDelete2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete2(
      __1: Any?
    , __2: Array<String?>?
): Field<Any?> {
    val f = TsDelete2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDelete2(
      __1: Field<Any?>
    , __2: Field<Array<String?>?>
): Field<Any?> {
    val f = TsDelete2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsFilter(
      configuration: Configuration
    , __1: Any?
    , __2: Array<String?>?
): Any? {
    val f = TsFilter()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsFilter(
      __1: Any?
    , __2: Array<String?>?
): Field<Any?> {
    val f = TsFilter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsFilter(
      __1: Field<Any?>
    , __2: Field<Array<String?>?>
): Field<Any?> {
    val f = TsFilter()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
    , __3: Any?
    , __4: String?
): String? {
    val f = TsHeadline1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline1(
      __1: Any?
    , __2: String?
    , __3: Any?
    , __4: String?
): Field<String?> {
    val f = TsHeadline1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline1(
      __1: Field<Any?>
    , __2: Field<String?>
    , __3: Field<Any?>
    , __4: Field<String?>
): Field<String?> {
    val f = TsHeadline1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline10(
      configuration: Configuration
    , __1: Any?
    , __2: JSON?
    , __3: Any?
): JSON? {
    val f = TsHeadline10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline10(
      __1: Any?
    , __2: JSON?
    , __3: Any?
): Field<JSON?> {
    val f = TsHeadline10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline10(
      __1: Field<Any?>
    , __2: Field<JSON?>
    , __3: Field<Any?>
): Field<JSON?> {
    val f = TsHeadline10()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline11(
      configuration: Configuration
    , __1: JSON?
    , __2: Any?
    , __3: String?
): JSON? {
    val f = TsHeadline11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline11(
      __1: JSON?
    , __2: Any?
    , __3: String?
): Field<JSON?> {
    val f = TsHeadline11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline11(
      __1: Field<JSON?>
    , __2: Field<Any?>
    , __3: Field<String?>
): Field<JSON?> {
    val f = TsHeadline11()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline12(
      configuration: Configuration
    , __1: JSON?
    , __2: Any?
): JSON? {
    val f = TsHeadline12()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline12(
      __1: JSON?
    , __2: Any?
): Field<JSON?> {
    val f = TsHeadline12()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline12(
      __1: Field<JSON?>
    , __2: Field<Any?>
): Field<JSON?> {
    val f = TsHeadline12()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline2(
      configuration: Configuration
    , __1: Any?
    , __2: String?
    , __3: Any?
): String? {
    val f = TsHeadline2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline2(
      __1: Any?
    , __2: String?
    , __3: Any?
): Field<String?> {
    val f = TsHeadline2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline2(
      __1: Field<Any?>
    , __2: Field<String?>
    , __3: Field<Any?>
): Field<String?> {
    val f = TsHeadline2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline3(
      configuration: Configuration
    , __1: String?
    , __2: Any?
    , __3: String?
): String? {
    val f = TsHeadline3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline3(
      __1: String?
    , __2: Any?
    , __3: String?
): Field<String?> {
    val f = TsHeadline3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline3(
      __1: Field<String?>
    , __2: Field<Any?>
    , __3: Field<String?>
): Field<String?> {
    val f = TsHeadline3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline4(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): String? {
    val f = TsHeadline4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline4(
      __1: String?
    , __2: Any?
): Field<String?> {
    val f = TsHeadline4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline4(
      __1: Field<String?>
    , __2: Field<Any?>
): Field<String?> {
    val f = TsHeadline4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline5(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
    , __3: Any?
    , __4: String?
): JSONB? {
    val f = TsHeadline5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline5(
      __1: Any?
    , __2: JSONB?
    , __3: Any?
    , __4: String?
): Field<JSONB?> {
    val f = TsHeadline5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline5(
      __1: Field<Any?>
    , __2: Field<JSONB?>
    , __3: Field<Any?>
    , __4: Field<String?>
): Field<JSONB?> {
    val f = TsHeadline5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline6(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
    , __3: Any?
): JSONB? {
    val f = TsHeadline6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline6(
      __1: Any?
    , __2: JSONB?
    , __3: Any?
): Field<JSONB?> {
    val f = TsHeadline6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline6(
      __1: Field<Any?>
    , __2: Field<JSONB?>
    , __3: Field<Any?>
): Field<JSONB?> {
    val f = TsHeadline6()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline7(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
    , __3: String?
): JSONB? {
    val f = TsHeadline7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline7(
      __1: JSONB?
    , __2: Any?
    , __3: String?
): Field<JSONB?> {
    val f = TsHeadline7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline7(
      __1: Field<JSONB?>
    , __2: Field<Any?>
    , __3: Field<String?>
): Field<JSONB?> {
    val f = TsHeadline7()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline8(
      configuration: Configuration
    , __1: JSONB?
    , __2: Any?
): JSONB? {
    val f = TsHeadline8()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline8(
      __1: JSONB?
    , __2: Any?
): Field<JSONB?> {
    val f = TsHeadline8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline8(
      __1: Field<JSONB?>
    , __2: Field<Any?>
): Field<JSONB?> {
    val f = TsHeadline8()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline9(
      configuration: Configuration
    , __1: Any?
    , __2: JSON?
    , __3: Any?
    , __4: String?
): JSON? {
    val f = TsHeadline9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline9(
      __1: Any?
    , __2: JSON?
    , __3: Any?
    , __4: String?
): Field<JSON?> {
    val f = TsHeadline9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsHeadline9(
      __1: Field<Any?>
    , __2: Field<JSON?>
    , __3: Field<Any?>
    , __4: Field<String?>
): Field<JSON?> {
    val f = TsHeadline9()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsLexize(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Array<String?>? {
    val f = TsLexize()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsLexize(
      __1: Any?
    , __2: String?
): Field<Array<String?>?> {
    val f = TsLexize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsLexize(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Array<String?>?> {
    val f = TsLexize()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchQv(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsMatchQv()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchQv(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsMatchQv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchQv(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsMatchQv()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchTq(
      configuration: Configuration
    , __1: String?
    , __2: Any?
): Boolean? {
    val f = TsMatchTq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchTq(
      __1: String?
    , __2: Any?
): Field<Boolean?> {
    val f = TsMatchTq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchTq(
      __1: Field<String?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsMatchTq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.ts_match_tt</code>
 */
fun tsMatchTt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = TsMatchTt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.ts_match_tt</code> as a field.
 */
fun tsMatchTt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = TsMatchTt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.ts_match_tt</code> as a field.
 */
fun tsMatchTt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = TsMatchTt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchVq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsMatchVq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchVq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsMatchVq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsMatchVq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsMatchVq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank1(
      configuration: Configuration
    , __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Float? {
    val f = TsRank1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank1(
      __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Field<Float?> {
    val f = TsRank1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank1(
      __1: Field<Array<Float?>?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Float?> {
    val f = TsRank1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank2(
      configuration: Configuration
    , __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
): Float? {
    val f = TsRank2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank2(
      __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
): Field<Float?> {
    val f = TsRank2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank2(
      __1: Field<Array<Float?>?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Float?> {
    val f = TsRank2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank3(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
): Float? {
    val f = TsRank3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank3(
      __1: Any?
    , __2: Any?
    , __3: Int?
): Field<Float?> {
    val f = TsRank3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank3(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
): Field<Float?> {
    val f = TsRank3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank4(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Float? {
    val f = TsRank4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank4(
      __1: Any?
    , __2: Any?
): Field<Float?> {
    val f = TsRank4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRank4(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Float?> {
    val f = TsRank4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd1(
      configuration: Configuration
    , __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Float? {
    val f = TsRankCd1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd1(
      __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
    , __4: Int?
): Field<Float?> {
    val f = TsRankCd1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd1(
      __1: Field<Array<Float?>?>
    , __2: Field<Any?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Float?> {
    val f = TsRankCd1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd2(
      configuration: Configuration
    , __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
): Float? {
    val f = TsRankCd2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd2(
      __1: Array<Float?>?
    , __2: Any?
    , __3: Any?
): Field<Float?> {
    val f = TsRankCd2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd2(
      __1: Field<Array<Float?>?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Float?> {
    val f = TsRankCd2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd3(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
): Float? {
    val f = TsRankCd3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd3(
      __1: Any?
    , __2: Any?
    , __3: Int?
): Field<Float?> {
    val f = TsRankCd3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd3(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
): Field<Float?> {
    val f = TsRankCd3()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd4(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Float? {
    val f = TsRankCd4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd4(
      __1: Any?
    , __2: Any?
): Field<Float?> {
    val f = TsRankCd4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRankCd4(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Float?> {
    val f = TsRankCd4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Any?
): Any? {
    val f = TsRewrite1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite1(
      __1: Any?
    , __2: Any?
    , __3: Any?
): Field<Any?> {
    val f = TsRewrite1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite1(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Any?>
): Field<Any?> {
    val f = TsRewrite1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite2(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = TsRewrite2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite2(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = TsRewrite2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsRewrite2(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = TsRewrite2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsTypanalyze(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = TsTypanalyze()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsTypanalyze(
      __1: Any?
): Field<Boolean?> {
    val f = TsTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsTypanalyze(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = TsTypanalyze()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TsmHandlerIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerIn(
      __1: Any?
): Field<Any?> {
    val f = TsmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = TsmHandlerIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TsmHandlerOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerOut(
      __1: Any?
): Field<Any?> {
    val f = TsmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmHandlerOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = TsmHandlerOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchjoinsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Double? {
    val f = Tsmatchjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchjoinsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Short?
    , __5: Any?
): Field<Double?> {
    val f = Tsmatchjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchjoinsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Short?>
    , __5: Field<Any?>
): Field<Double?> {
    val f = Tsmatchjoinsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchsel(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Double? {
    val f = Tsmatchsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchsel(
      __1: Any?
    , __2: Long?
    , __3: Any?
    , __4: Int?
): Field<Double?> {
    val f = Tsmatchsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmatchsel(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Any?>
    , __4: Field<Int?>
): Field<Double?> {
    val f = Tsmatchsel()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange1(
      configuration: Configuration
): Any? {
    val f = Tsmultirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange1(): Field<Any?> {
    val f = Tsmultirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsmultirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange2(
      __1: Any?
): Field<Any?> {
    val f = Tsmultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsmultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Tsmultirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Tsmultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsmultirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Tsmultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontained(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqMcontained()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontained(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqMcontained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontained(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqMcontained()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontains(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqMcontains()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontains(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqMcontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqMcontains(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqMcontains()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryAnd(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = TsqueryAnd()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryAnd(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = TsqueryAnd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryAnd(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = TsqueryAnd()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = TsqueryCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = TsqueryCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = TsqueryCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsqueryNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsqueryNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsqueryNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNot(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TsqueryNot()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNot(
      __1: Any?
): Field<Any?> {
    val f = TsqueryNot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryNot(
      __1: Field<Any?>
): Field<Any?> {
    val f = TsqueryNot()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryOr(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = TsqueryOr()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryOr(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = TsqueryOr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryOr(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = TsqueryOr()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase1(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = TsqueryPhrase1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase1(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = TsqueryPhrase1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase1(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = TsqueryPhrase1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase2(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
    , __3: Int?
): Any? {
    val f = TsqueryPhrase2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase2(
      __1: Any?
    , __2: Any?
    , __3: Int?
): Field<Any?> {
    val f = TsqueryPhrase2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryPhrase2(
      __1: Field<Any?>
    , __2: Field<Any?>
    , __3: Field<Int?>
): Field<Any?> {
    val f = TsqueryPhrase2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsqueryin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryin(
      __1: Any?
): Field<Any?> {
    val f = Tsqueryin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsqueryin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsqueryout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryout(
      __1: Any?
): Field<Any?> {
    val f = Tsqueryout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsqueryout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsqueryrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryrecv(
      __1: Any?
): Field<Any?> {
    val f = Tsqueryrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsqueryrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsqueryrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsquerysend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Tsquerysend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsquerysend(
      __1: Any?
): Field<ByteArray?> {
    val f = Tsquerysend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsquerysend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Tsquerysend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange1(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Any? {
    val f = Tsrange1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange1(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Any?> {
    val f = Tsrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange1(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Any?> {
    val f = Tsrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange2(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: String?
): Any? {
    val f = Tsrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange2(
      __1: LocalDateTime?
    , __2: LocalDateTime?
    , __3: String?
): Field<Any?> {
    val f = Tsrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsrange2(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Tsrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tsrange_subdiff</code>
 */
fun tsrangeSubdiff(
      configuration: Configuration
    , __1: LocalDateTime?
    , __2: LocalDateTime?
): Double? {
    val f = TsrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tsrange_subdiff</code> as a field.
 */
fun tsrangeSubdiff(
      __1: LocalDateTime?
    , __2: LocalDateTime?
): Field<Double?> {
    val f = TsrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tsrange_subdiff</code> as a field.
 */
fun tsrangeSubdiff(
      __1: Field<LocalDateTime?>
    , __2: Field<LocalDateTime?>
): Field<Double?> {
    val f = TsrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange1(
      configuration: Configuration
): Any? {
    val f = Tstzmultirange1()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange1(): Field<Any?> {
    val f = Tstzmultirange1()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tstzmultirange2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange2(
      __1: Any?
): Field<Any?> {
    val f = Tstzmultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tstzmultirange2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange3(
      configuration: Configuration
    , __1: Array<Any?>?
): Any? {
    val f = Tstzmultirange3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange3(
      __1: Array<Any?>?
): Field<Any?> {
    val f = Tstzmultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzmultirange3(
      __1: Field<Array<Any?>?>
): Field<Any?> {
    val f = Tstzmultirange3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange1(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Any? {
    val f = Tstzrange1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange1(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Any?> {
    val f = Tstzrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange1(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Any?> {
    val f = Tstzrange1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange2(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: String?
): Any? {
    val f = Tstzrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange2(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
    , __3: String?
): Field<Any?> {
    val f = Tstzrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tstzrange2(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
    , __3: Field<String?>
): Field<Any?> {
    val f = Tstzrange2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.tstzrange_subdiff</code>
 */
fun tstzrangeSubdiff(
      configuration: Configuration
    , __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Double? {
    val f = TstzrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.tstzrange_subdiff</code> as a field.
 */
fun tstzrangeSubdiff(
      __1: OffsetDateTime?
    , __2: OffsetDateTime?
): Field<Double?> {
    val f = TstzrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.tstzrange_subdiff</code> as a field.
 */
fun tstzrangeSubdiff(
      __1: Field<OffsetDateTime?>
    , __2: Field<OffsetDateTime?>
): Field<Double?> {
    val f = TstzrangeSubdiff()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorCmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = TsvectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorCmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = TsvectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorCmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = TsvectorCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorConcat(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Any? {
    val f = TsvectorConcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorConcat(
      __1: Any?
    , __2: Any?
): Field<Any?> {
    val f = TsvectorConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorConcat(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Any?> {
    val f = TsvectorConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorEq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorEq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorEq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorGt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorLt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorNe(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = TsvectorNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorNe(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = TsvectorNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorNe(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TsvectorNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorToArray(
      configuration: Configuration
    , __1: Any?
): Array<String?>? {
    val f = TsvectorToArray()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorToArray(
      __1: Any?
): Field<Array<String?>?> {
    val f = TsvectorToArray()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorToArray(
      __1: Field<Any?>
): Field<Array<String?>?> {
    val f = TsvectorToArray()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsvectorin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorin(
      __1: Any?
): Field<Any?> {
    val f = Tsvectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsvectorin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsvectorout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorout(
      __1: Any?
): Field<Any?> {
    val f = Tsvectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsvectorout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Tsvectorrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorrecv(
      __1: Any?
): Field<Any?> {
    val f = Tsvectorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Tsvectorrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorsend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Tsvectorsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorsend(
      __1: Any?
): Field<ByteArray?> {
    val f = Tsvectorsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsvectorsend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Tsvectorsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.txid_current</code>
 */
fun txidCurrent(
      configuration: Configuration
): Long? {
    val f = TxidCurrent()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.txid_current</code> as a field.
 */
fun txidCurrent(): Field<Long?> {
    val f = TxidCurrent()

    return f.asField()
}

/**
 * Call <code>pg_catalog.txid_current_if_assigned</code>
 */
fun txidCurrentIfAssigned(
      configuration: Configuration
): Long? {
    val f = TxidCurrentIfAssigned()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.txid_current_if_assigned</code> as a field.
 */
fun txidCurrentIfAssigned(): Field<Long?> {
    val f = TxidCurrentIfAssigned()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidCurrentSnapshot(
      configuration: Configuration
): Any? {
    val f = TxidCurrentSnapshot()

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidCurrentSnapshot(): Field<Any?> {
    val f = TxidCurrentSnapshot()

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotIn(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TxidSnapshotIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotIn(
      __1: Any?
): Field<Any?> {
    val f = TxidSnapshotIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotIn(
      __1: Field<Any?>
): Field<Any?> {
    val f = TxidSnapshotIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TxidSnapshotOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotOut(
      __1: Any?
): Field<Any?> {
    val f = TxidSnapshotOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = TxidSnapshotOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotRecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = TxidSnapshotRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotRecv(
      __1: Any?
): Field<Any?> {
    val f = TxidSnapshotRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotRecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = TxidSnapshotRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = TxidSnapshotSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotSend(
      __1: Any?
): Field<ByteArray?> {
    val f = TxidSnapshotSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = TxidSnapshotSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmax(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = TxidSnapshotXmax()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmax(
      __1: Any?
): Field<Long?> {
    val f = TxidSnapshotXmax()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmax(
      __1: Field<Any?>
): Field<Long?> {
    val f = TxidSnapshotXmax()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmin(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = TxidSnapshotXmin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmin(
      __1: Any?
): Field<Long?> {
    val f = TxidSnapshotXmin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXmin(
      __1: Field<Any?>
): Field<Long?> {
    val f = TxidSnapshotXmin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.txid_status</code>
 */
fun txidStatus(
      configuration: Configuration
    , __1: Long?
): String? {
    val f = TxidStatus()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.txid_status</code> as a field.
 */
fun txidStatus(
      __1: Long?
): Field<String?> {
    val f = TxidStatus()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.txid_status</code> as a field.
 */
fun txidStatus(
      __1: Field<Long?>
): Field<String?> {
    val f = TxidStatus()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidVisibleInSnapshot(
      configuration: Configuration
    , __1: Long?
    , __2: Any?
): Boolean? {
    val f = TxidVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidVisibleInSnapshot(
      __1: Long?
    , __2: Any?
): Field<Boolean?> {
    val f = TxidVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidVisibleInSnapshot(
      __1: Field<Long?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = TxidVisibleInSnapshot()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uhcToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = UhcToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uhcToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = UhcToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uhcToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = UhcToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.unistr</code>
 */
fun unistr(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Unistr()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.unistr</code> as a field.
 */
fun unistr(
      __1: String?
): Field<String?> {
    val f = Unistr()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.unistr</code> as a field.
 */
fun unistr(
      __1: Field<String?>
): Field<String?> {
    val f = Unistr()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownin(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Unknownin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownin(
      __1: Any?
): Field<Any?> {
    val f = Unknownin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownin(
      __1: Field<Any?>
): Field<Any?> {
    val f = Unknownin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownout(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Unknownout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownout(
      __1: Any?
): Field<Any?> {
    val f = Unknownout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownout(
      __1: Field<Any?>
): Field<Any?> {
    val f = Unknownout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownrecv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Unknownrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownrecv(
      __1: Any?
): Field<Any?> {
    val f = Unknownrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownrecv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Unknownrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownsend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Unknownsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownsend(
      __1: Any?
): Field<ByteArray?> {
    val f = Unknownsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unknownsend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Unknownsend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper1(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Upper1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper1(
      __1: Any?
): Field<Any?> {
    val f = Upper1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper1(
      __1: Field<Any?>
): Field<Any?> {
    val f = Upper1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper2(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Upper2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper2(
      __1: Any?
): Field<Any?> {
    val f = Upper2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upper2(
      __1: Field<Any?>
): Field<Any?> {
    val f = Upper2()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.upper</code>
 */
fun upper3(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Upper3()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.upper</code> as a field.
 */
fun upper3(
      __1: String?
): Field<String?> {
    val f = Upper3()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.upper</code> as a field.
 */
fun upper3(
      __1: Field<String?>
): Field<String?> {
    val f = Upper3()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc1(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = UpperInc1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc1(
      __1: Any?
): Field<Boolean?> {
    val f = UpperInc1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc1(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = UpperInc1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = UpperInc2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc2(
      __1: Any?
): Field<Boolean?> {
    val f = UpperInc2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInc2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = UpperInc2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf1(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = UpperInf1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf1(
      __1: Any?
): Field<Boolean?> {
    val f = UpperInf1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf1(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = UpperInf1()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf2(
      configuration: Configuration
    , __1: Any?
): Boolean? {
    val f = UpperInf2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf2(
      __1: Any?
): Field<Boolean?> {
    val f = UpperInf2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun upperInf2(
      __1: Field<Any?>
): Field<Boolean?> {
    val f = UpperInf2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToBig5(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToBig5(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToBig5(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToBig5()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucCn(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucCn(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucCn(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToEucCn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJis_2004(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJis_2004(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJis_2004(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToEucJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJp(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJp(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucJp(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToEucJp()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucKr(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucKr(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucKr(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToEucKr()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucTw(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucTw(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToEucTw(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToEucTw()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGb18030(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToGb18030()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGb18030(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToGb18030()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGb18030(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToGb18030()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGbk(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToGbk()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGbk(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToGbk()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToGbk(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToGbk()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToIso8859()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToIso8859()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToIso8859()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859_1(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToIso8859_1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859_1(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToIso8859_1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToIso8859_1(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToIso8859_1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToJohab(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToJohab()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToJohab(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToJohab()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToJohab(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToJohab()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8r(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8r(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8r(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8u(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToKoi8u()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8u(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToKoi8u()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToKoi8u(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToKoi8u()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToShiftJis_2004(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToShiftJis_2004(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToShiftJis_2004(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToShiftJis_2004()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToSjis(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToSjis(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToSjis(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToSjis()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToUhc(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToUhc()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToUhc(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToUhc()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToUhc(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToUhc()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToWin(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Utf8ToWin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToWin(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Utf8ToWin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun utf8ToWin(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Utf8ToWin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_cmp</code>
 */
fun uuidCmp(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Int? {
    val f = UuidCmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_cmp</code> as a field.
 */
fun uuidCmp(
      __1: UUID?
    , __2: UUID?
): Field<Int?> {
    val f = UuidCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_cmp</code> as a field.
 */
fun uuidCmp(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Int?> {
    val f = UuidCmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_eq</code>
 */
fun uuidEq(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidEq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_eq</code> as a field.
 */
fun uuidEq(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_eq</code> as a field.
 */
fun uuidEq(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidEq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_ge</code>
 */
fun uuidGe(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidGe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_ge</code> as a field.
 */
fun uuidGe(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_ge</code> as a field.
 */
fun uuidGe(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidGe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_gt</code>
 */
fun uuidGt(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidGt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_gt</code> as a field.
 */
fun uuidGt(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_gt</code> as a field.
 */
fun uuidGt(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidGt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_hash</code>
 */
fun uuidHash(
      configuration: Configuration
    , __1: UUID?
): Int? {
    val f = UuidHash()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_hash</code> as a field.
 */
fun uuidHash(
      __1: UUID?
): Field<Int?> {
    val f = UuidHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_hash</code> as a field.
 */
fun uuidHash(
      __1: Field<UUID?>
): Field<Int?> {
    val f = UuidHash()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_hash_extended</code>
 */
fun uuidHashExtended(
      configuration: Configuration
    , __1: UUID?
    , __2: Long?
): Long? {
    val f = UuidHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_hash_extended</code> as a field.
 */
fun uuidHashExtended(
      __1: UUID?
    , __2: Long?
): Field<Long?> {
    val f = UuidHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_hash_extended</code> as a field.
 */
fun uuidHashExtended(
      __1: Field<UUID?>
    , __2: Field<Long?>
): Field<Long?> {
    val f = UuidHashExtended()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidIn(
      configuration: Configuration
    , __1: Any?
): UUID? {
    val f = UuidIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidIn(
      __1: Any?
): Field<UUID?> {
    val f = UuidIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidIn(
      __1: Field<Any?>
): Field<UUID?> {
    val f = UuidIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_le</code>
 */
fun uuidLe(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidLe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_le</code> as a field.
 */
fun uuidLe(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_le</code> as a field.
 */
fun uuidLe(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidLe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_lt</code>
 */
fun uuidLt(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidLt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_lt</code> as a field.
 */
fun uuidLt(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_lt</code> as a field.
 */
fun uuidLt(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidLt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_ne</code>
 */
fun uuidNe(
      configuration: Configuration
    , __1: UUID?
    , __2: UUID?
): Boolean? {
    val f = UuidNe()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_ne</code> as a field.
 */
fun uuidNe(
      __1: UUID?
    , __2: UUID?
): Field<Boolean?> {
    val f = UuidNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_ne</code> as a field.
 */
fun uuidNe(
      __1: Field<UUID?>
    , __2: Field<UUID?>
): Field<Boolean?> {
    val f = UuidNe()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidOut(
      configuration: Configuration
    , __1: UUID?
): Any? {
    val f = UuidOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidOut(
      __1: UUID?
): Field<Any?> {
    val f = UuidOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidOut(
      __1: Field<UUID?>
): Field<Any?> {
    val f = UuidOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidRecv(
      configuration: Configuration
    , __1: Any?
): UUID? {
    val f = UuidRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidRecv(
      __1: Any?
): Field<UUID?> {
    val f = UuidRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidRecv(
      __1: Field<Any?>
): Field<UUID?> {
    val f = UuidRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.uuid_send</code>
 */
fun uuidSend(
      configuration: Configuration
    , __1: UUID?
): ByteArray? {
    val f = UuidSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.uuid_send</code> as a field.
 */
fun uuidSend(
      __1: UUID?
): Field<ByteArray?> {
    val f = UuidSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.uuid_send</code> as a field.
 */
fun uuidSend(
      __1: Field<UUID?>
): Field<ByteArray?> {
    val f = UuidSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun uuidSortsupport(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = UuidSortsupport()
    p.set__1(__1)

    p.execute(configuration)
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = VarPop1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = VarPop1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = VarPop2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = VarPop2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = VarPop3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = VarPop3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = VarPop4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = VarPop4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = VarPop5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = VarPop5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = VarPop6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_pop</code> as a field.
 */
fun varPop6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = VarPop6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = VarSamp1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = VarSamp1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = VarSamp2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = VarSamp2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = VarSamp3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = VarSamp3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = VarSamp4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = VarSamp4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = VarSamp5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = VarSamp5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = VarSamp6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.var_samp</code> as a field.
 */
fun varSamp6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = VarSamp6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.varbit</code>
 */
fun varbit(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Boolean?
): String? {
    val f = Varbit()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbit</code> as a field.
 */
fun varbit(
      __1: String?
    , __2: Int?
    , __3: Boolean?
): Field<String?> {
    val f = Varbit()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbit</code> as a field.
 */
fun varbit(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = Varbit()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitIn(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = VarbitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitIn(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = VarbitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitIn(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = VarbitIn()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitOut(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = VarbitOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitOut(
      __1: String?
): Field<Any?> {
    val f = VarbitOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitOut(
      __1: Field<String?>
): Field<Any?> {
    val f = VarbitOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitRecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = VarbitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitRecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = VarbitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitRecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = VarbitRecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbit_send</code>
 */
fun varbitSend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = VarbitSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbit_send</code> as a field.
 */
fun varbitSend(
      __1: String?
): Field<ByteArray?> {
    val f = VarbitSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbit_send</code> as a field.
 */
fun varbitSend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = VarbitSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = VarbitSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitSupport(
      __1: Any?
): Field<Any?> {
    val f = VarbitSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbitSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = VarbitSupport()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitcmp</code>
 */
fun varbitcmp(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Varbitcmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitcmp</code> as a field.
 */
fun varbitcmp(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Varbitcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitcmp</code> as a field.
 */
fun varbitcmp(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Varbitcmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbiteq</code>
 */
fun varbiteq(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbiteq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbiteq</code> as a field.
 */
fun varbiteq(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbiteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbiteq</code> as a field.
 */
fun varbiteq(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbiteq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitge</code>
 */
fun varbitge(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbitge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitge</code> as a field.
 */
fun varbitge(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbitge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitge</code> as a field.
 */
fun varbitge(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbitge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitgt</code>
 */
fun varbitgt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbitgt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitgt</code> as a field.
 */
fun varbitgt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbitgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitgt</code> as a field.
 */
fun varbitgt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbitgt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitle</code>
 */
fun varbitle(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbitle()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitle</code> as a field.
 */
fun varbitle(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbitle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitle</code> as a field.
 */
fun varbitle(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbitle()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitlt</code>
 */
fun varbitlt(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbitlt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitlt</code> as a field.
 */
fun varbitlt(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbitlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitlt</code> as a field.
 */
fun varbitlt(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbitlt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbitne</code>
 */
fun varbitne(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Boolean? {
    val f = Varbitne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbitne</code> as a field.
 */
fun varbitne(
      __1: String?
    , __2: String?
): Field<Boolean?> {
    val f = Varbitne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbitne</code> as a field.
 */
fun varbitne(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Varbitne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varbittypmodin</code>
 */
fun varbittypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Varbittypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varbittypmodin</code> as a field.
 */
fun varbittypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Varbittypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varbittypmodin</code> as a field.
 */
fun varbittypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Varbittypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbittypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Varbittypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbittypmodout(
      __1: Int?
): Field<Any?> {
    val f = Varbittypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varbittypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Varbittypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varchar</code>
 */
fun varchar1(
      configuration: Configuration
    , __1: String?
): String? {
    val f = Varchar1()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varchar</code> as a field.
 */
fun varchar1(
      __1: String?
): Field<String?> {
    val f = Varchar1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varchar</code> as a field.
 */
fun varchar1(
      __1: Field<String?>
): Field<String?> {
    val f = Varchar1()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varchar</code>
 */
fun varchar2(
      configuration: Configuration
    , __1: String?
    , __2: Int?
    , __3: Boolean?
): String? {
    val f = Varchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varchar</code> as a field.
 */
fun varchar2(
      __1: String?
    , __2: Int?
    , __3: Boolean?
): Field<String?> {
    val f = Varchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varchar</code> as a field.
 */
fun varchar2(
      __1: Field<String?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): Field<String?> {
    val f = Varchar2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharSupport(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = VarcharSupport()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharSupport(
      __1: Any?
): Field<Any?> {
    val f = VarcharSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharSupport(
      __1: Field<Any?>
): Field<Any?> {
    val f = VarcharSupport()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharin(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = Varcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharin(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = Varcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharin(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Varcharin()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharout(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = Varcharout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharout(
      __1: String?
): Field<Any?> {
    val f = Varcharout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharout(
      __1: Field<String?>
): Field<Any?> {
    val f = Varcharout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharrecv(
      configuration: Configuration
    , __1: Any?
    , __2: Long?
    , __3: Int?
): String? {
    val f = Varcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharrecv(
      __1: Any?
    , __2: Long?
    , __3: Int?
): Field<String?> {
    val f = Varcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varcharrecv(
      __1: Field<Any?>
    , __2: Field<Long?>
    , __3: Field<Int?>
): Field<String?> {
    val f = Varcharrecv()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varcharsend</code>
 */
fun varcharsend(
      configuration: Configuration
    , __1: String?
): ByteArray? {
    val f = Varcharsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varcharsend</code> as a field.
 */
fun varcharsend(
      __1: String?
): Field<ByteArray?> {
    val f = Varcharsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varcharsend</code> as a field.
 */
fun varcharsend(
      __1: Field<String?>
): Field<ByteArray?> {
    val f = Varcharsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.varchartypmodin</code>
 */
fun varchartypmodin(
      configuration: Configuration
    , __1: Array<Any?>?
): Int? {
    val f = Varchartypmodin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.varchartypmodin</code> as a field.
 */
fun varchartypmodin(
      __1: Array<Any?>?
): Field<Int?> {
    val f = Varchartypmodin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.varchartypmodin</code> as a field.
 */
fun varchartypmodin(
      __1: Field<Array<Any?>?>
): Field<Int?> {
    val f = Varchartypmodin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varchartypmodout(
      configuration: Configuration
    , __1: Int?
): Any? {
    val f = Varchartypmodout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varchartypmodout(
      __1: Int?
): Field<Any?> {
    val f = Varchartypmodout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun varchartypmodout(
      __1: Field<Int?>
): Field<Any?> {
    val f = Varchartypmodout()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance1(
      __1: Long?
): AggregateFunction<BigDecimal?> {
    val f = Variance1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance1(
      __1: Field<Long?>
): AggregateFunction<BigDecimal?> {
    val f = Variance1()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance2(
      __1: Int?
): AggregateFunction<BigDecimal?> {
    val f = Variance2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance2(
      __1: Field<Int?>
): AggregateFunction<BigDecimal?> {
    val f = Variance2()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance3(
      __1: Short?
): AggregateFunction<BigDecimal?> {
    val f = Variance3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance3(
      __1: Field<Short?>
): AggregateFunction<BigDecimal?> {
    val f = Variance3()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance4(
      __1: Float?
): AggregateFunction<Double?> {
    val f = Variance4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance4(
      __1: Field<Float?>
): AggregateFunction<Double?> {
    val f = Variance4()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance5(
      __1: Double?
): AggregateFunction<Double?> {
    val f = Variance5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance5(
      __1: Field<Double?>
): AggregateFunction<Double?> {
    val f = Variance5()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance6(
      __1: BigDecimal?
): AggregateFunction<BigDecimal?> {
    val f = Variance6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.variance</code> as a field.
 */
fun variance6(
      __1: Field<BigDecimal?>
): AggregateFunction<BigDecimal?> {
    val f = Variance6()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.version</code>
 */
fun version(
      configuration: Configuration
): String? {
    val f = Version()

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.version</code> as a field.
 */
fun version(): Field<String?> {
    val f = Version()

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidIn(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = VoidIn()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidOut(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = VoidOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidOut(
      __1: Any?
): Field<Any?> {
    val f = VoidOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidOut(
      __1: Field<Any?>
): Field<Any?> {
    val f = VoidOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidRecv(
      configuration: Configuration
    , __1: Any?
): Unit {
    val p = VoidRecv()
    p.set__1(__1)

    p.execute(configuration)
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidSend(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = VoidSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidSend(
      __1: Any?
): Field<ByteArray?> {
    val f = VoidSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun voidSend(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = VoidSend()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery1(
      configuration: Configuration
    , __1: Any?
    , __2: String?
): Any? {
    val f = WebsearchToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery1(
      __1: Any?
    , __2: String?
): Field<Any?> {
    val f = WebsearchToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery1(
      __1: Field<Any?>
    , __2: Field<String?>
): Field<Any?> {
    val f = WebsearchToTsquery1()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery2(
      configuration: Configuration
    , __1: String?
): Any? {
    val f = WebsearchToTsquery2()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery2(
      __1: String?
): Field<Any?> {
    val f = WebsearchToTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun websearchToTsquery2(
      __1: Field<String?>
): Field<Any?> {
    val f = WebsearchToTsquery2()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun width(
      configuration: Configuration
    , __1: Any?
): Double? {
    val f = Width()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun width(
      __1: Any?
): Field<Double?> {
    val f = Width()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun width(
      __1: Field<Any?>
): Field<Double?> {
    val f = Width()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.width_bucket</code>
 */
fun widthBucket1(
      configuration: Configuration
    , __1: BigDecimal?
    , __2: BigDecimal?
    , __3: BigDecimal?
    , __4: Int?
): Int? {
    val f = WidthBucket1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.width_bucket</code> as a field.
 */
fun widthBucket1(
      __1: BigDecimal?
    , __2: BigDecimal?
    , __3: BigDecimal?
    , __4: Int?
): Field<Int?> {
    val f = WidthBucket1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.width_bucket</code> as a field.
 */
fun widthBucket1(
      __1: Field<BigDecimal?>
    , __2: Field<BigDecimal?>
    , __3: Field<BigDecimal?>
    , __4: Field<Int?>
): Field<Int?> {
    val f = WidthBucket1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Call <code>pg_catalog.width_bucket</code>
 */
fun widthBucket2(
      configuration: Configuration
    , __1: Double?
    , __2: Double?
    , __3: Double?
    , __4: Int?
): Int? {
    val f = WidthBucket2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.width_bucket</code> as a field.
 */
fun widthBucket2(
      __1: Double?
    , __2: Double?
    , __3: Double?
    , __4: Int?
): Field<Int?> {
    val f = WidthBucket2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}

/**
 * Get <code>pg_catalog.width_bucket</code> as a field.
 */
fun widthBucket2(
      __1: Field<Double?>
    , __2: Field<Double?>
    , __3: Field<Double?>
    , __4: Field<Int?>
): Field<Int?> {
    val f = WidthBucket2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun widthBucket3(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = WidthBucket3()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun widthBucket3(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = WidthBucket3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun widthBucket3(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = WidthBucket3()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToLatin2(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1250ToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToLatin2(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1250ToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToLatin2(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1250ToLatin2()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1250ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1250ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1250ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1250ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToIso(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1251ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToIso(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1251ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToIso(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1251ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToKoi8r(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1251ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToKoi8r(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1251ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToKoi8r(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1251ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1251ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1251ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1251ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToWin866(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win1251ToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToWin866(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win1251ToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win1251ToWin866(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win1251ToWin866()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToIso(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win866ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToIso(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win866ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToIso(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win866ToIso()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToKoi8r(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win866ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToKoi8r(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win866ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToKoi8r(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win866ToKoi8r()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToMic(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win866ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToMic(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win866ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToMic(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win866ToMic()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToWin1251(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = Win866ToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToWin1251(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = Win866ToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun win866ToWin1251(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = Win866ToWin1251()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun winToUtf8(
      configuration: Configuration
    , __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Int? {
    val f = WinToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun winToUtf8(
      __1: Int?
    , __2: Int?
    , __3: Any?
    , __4: Any?
    , __5: Int?
    , __6: Boolean?
): Field<Int?> {
    val f = WinToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun winToUtf8(
      __1: Field<Int?>
    , __2: Field<Int?>
    , __3: Field<Any?>
    , __4: Field<Any?>
    , __5: Field<Int?>
    , __6: Field<Boolean?>
): Field<Int?> {
    val f = WinToUtf8()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)
    f.set__4(__4)
    f.set__5(__5)
    f.set__6(__6)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Xid()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid(
      __1: Any?
): Field<Long?> {
    val f = Xid()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid(
      __1: Field<Any?>
): Field<Long?> {
    val f = Xid()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8cmp(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Int? {
    val f = Xid8cmp()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8cmp(
      __1: Any?
    , __2: Any?
): Field<Int?> {
    val f = Xid8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8cmp(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Int?> {
    val f = Xid8cmp()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8eq(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8eq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8eq(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8eq(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8eq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ge(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8ge()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ge(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ge(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8ge()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8gt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8gt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8gt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8gt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8gt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8in(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Xid8in()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8in(
      __1: Any?
): Field<Any?> {
    val f = Xid8in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8in(
      __1: Field<Any?>
): Field<Any?> {
    val f = Xid8in()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8le(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8le()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8le(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8le(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8le()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8lt(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8lt()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8lt(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8lt(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8lt()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ne(
      configuration: Configuration
    , __1: Any?
    , __2: Any?
): Boolean? {
    val f = Xid8ne()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ne(
      __1: Any?
    , __2: Any?
): Field<Boolean?> {
    val f = Xid8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8ne(
      __1: Field<Any?>
    , __2: Field<Any?>
): Field<Boolean?> {
    val f = Xid8ne()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8out(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Xid8out()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8out(
      __1: Any?
): Field<Any?> {
    val f = Xid8out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8out(
      __1: Field<Any?>
): Field<Any?> {
    val f = Xid8out()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8recv(
      configuration: Configuration
    , __1: Any?
): Any? {
    val f = Xid8recv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8recv(
      __1: Any?
): Field<Any?> {
    val f = Xid8recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8recv(
      __1: Field<Any?>
): Field<Any?> {
    val f = Xid8recv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8send(
      configuration: Configuration
    , __1: Any?
): ByteArray? {
    val f = Xid8send()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8send(
      __1: Any?
): Field<ByteArray?> {
    val f = Xid8send()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xid8send(
      __1: Field<Any?>
): Field<ByteArray?> {
    val f = Xid8send()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xideq</code>
 */
fun xideq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Xideq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xideq</code> as a field.
 */
fun xideq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Xideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xideq</code> as a field.
 */
fun xideq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Xideq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xideqint4</code>
 */
fun xideqint4(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Xideqint4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xideqint4</code> as a field.
 */
fun xideqint4(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Xideqint4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xideqint4</code> as a field.
 */
fun xideqint4(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Xideqint4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidin(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Xidin()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidin(
      __1: Any?
): Field<Long?> {
    val f = Xidin()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidin(
      __1: Field<Any?>
): Field<Long?> {
    val f = Xidin()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xidneq</code>
 */
fun xidneq(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Boolean? {
    val f = Xidneq()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xidneq</code> as a field.
 */
fun xidneq(
      __1: Long?
    , __2: Long?
): Field<Boolean?> {
    val f = Xidneq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xidneq</code> as a field.
 */
fun xidneq(
      __1: Field<Long?>
    , __2: Field<Long?>
): Field<Boolean?> {
    val f = Xidneq()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xidneqint4</code>
 */
fun xidneqint4(
      configuration: Configuration
    , __1: Long?
    , __2: Int?
): Boolean? {
    val f = Xidneqint4()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xidneqint4</code> as a field.
 */
fun xidneqint4(
      __1: Long?
    , __2: Int?
): Field<Boolean?> {
    val f = Xidneqint4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xidneqint4</code> as a field.
 */
fun xidneqint4(
      __1: Field<Long?>
    , __2: Field<Int?>
): Field<Boolean?> {
    val f = Xidneqint4()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidout(
      configuration: Configuration
    , __1: Long?
): Any? {
    val f = Xidout()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidout(
      __1: Long?
): Field<Any?> {
    val f = Xidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidout(
      __1: Field<Long?>
): Field<Any?> {
    val f = Xidout()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidrecv(
      configuration: Configuration
    , __1: Any?
): Long? {
    val f = Xidrecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidrecv(
      __1: Any?
): Field<Long?> {
    val f = Xidrecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xidrecv(
      __1: Field<Any?>
): Field<Long?> {
    val f = Xidrecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xidsend</code>
 */
fun xidsend(
      configuration: Configuration
    , __1: Long?
): ByteArray? {
    val f = Xidsend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xidsend</code> as a field.
 */
fun xidsend(
      __1: Long?
): Field<ByteArray?> {
    val f = Xidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xidsend</code> as a field.
 */
fun xidsend(
      __1: Field<Long?>
): Field<ByteArray?> {
    val f = Xidsend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xml</code>
 */
fun xml(
      configuration: Configuration
    , __1: String?
): XML? {
    val f = Xml()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xml</code> as a field.
 */
fun xml(
      __1: String?
): Field<XML?> {
    val f = Xml()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xml</code> as a field.
 */
fun xml(
      __1: Field<String?>
): Field<XML?> {
    val f = Xml()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlIn(
      configuration: Configuration
    , __1: Any?
): XML? {
    val f = XmlIn()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlIn(
      __1: Any?
): Field<XML?> {
    val f = XmlIn()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlIn(
      __1: Field<Any?>
): Field<XML?> {
    val f = XmlIn()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xml_is_well_formed</code>
 */
fun xmlIsWellFormed(
      configuration: Configuration
    , __1: String?
): Boolean? {
    val f = XmlIsWellFormed()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xml_is_well_formed</code> as a field.
 */
fun xmlIsWellFormed(
      __1: String?
): Field<Boolean?> {
    val f = XmlIsWellFormed()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xml_is_well_formed</code> as a field.
 */
fun xmlIsWellFormed(
      __1: Field<String?>
): Field<Boolean?> {
    val f = XmlIsWellFormed()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xml_is_well_formed_content</code>
 */
fun xmlIsWellFormedContent(
      configuration: Configuration
    , __1: String?
): Boolean? {
    val f = XmlIsWellFormedContent()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xml_is_well_formed_content</code> as a field.
 */
fun xmlIsWellFormedContent(
      __1: String?
): Field<Boolean?> {
    val f = XmlIsWellFormedContent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xml_is_well_formed_content</code> as a field.
 */
fun xmlIsWellFormedContent(
      __1: Field<String?>
): Field<Boolean?> {
    val f = XmlIsWellFormedContent()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xml_is_well_formed_document</code>
 */
fun xmlIsWellFormedDocument(
      configuration: Configuration
    , __1: String?
): Boolean? {
    val f = XmlIsWellFormedDocument()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xml_is_well_formed_document</code> as a field.
 */
fun xmlIsWellFormedDocument(
      __1: String?
): Field<Boolean?> {
    val f = XmlIsWellFormedDocument()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xml_is_well_formed_document</code> as a field.
 */
fun xmlIsWellFormedDocument(
      __1: Field<String?>
): Field<Boolean?> {
    val f = XmlIsWellFormedDocument()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlOut(
      configuration: Configuration
    , __1: XML?
): Any? {
    val f = XmlOut()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlOut(
      __1: XML?
): Field<Any?> {
    val f = XmlOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlOut(
      __1: Field<XML?>
): Field<Any?> {
    val f = XmlOut()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlRecv(
      configuration: Configuration
    , __1: Any?
): XML? {
    val f = XmlRecv()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlRecv(
      __1: Any?
): Field<XML?> {
    val f = XmlRecv()
    f.set__1(__1)

    return f.asField()
}
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun xmlRecv(
      __1: Field<Any?>
): Field<XML?> {
    val f = XmlRecv()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xml_send</code>
 */
fun xmlSend(
      configuration: Configuration
    , __1: XML?
): ByteArray? {
    val f = XmlSend()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xml_send</code> as a field.
 */
fun xmlSend(
      __1: XML?
): Field<ByteArray?> {
    val f = XmlSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xml_send</code> as a field.
 */
fun xmlSend(
      __1: Field<XML?>
): Field<ByteArray?> {
    val f = XmlSend()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xmlagg</code> as a field.
 */
fun xmlagg(
      __1: XML?
): AggregateFunction<XML?> {
    val f = Xmlagg()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>pg_catalog.xmlagg</code> as a field.
 */
fun xmlagg(
      __1: Field<XML?>
): AggregateFunction<XML?> {
    val f = Xmlagg()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>pg_catalog.xmlcomment</code>
 */
fun xmlcomment(
      configuration: Configuration
    , __1: String?
): XML? {
    val f = Xmlcomment()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xmlcomment</code> as a field.
 */
fun xmlcomment(
      __1: String?
): Field<XML?> {
    val f = Xmlcomment()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xmlcomment</code> as a field.
 */
fun xmlcomment(
      __1: Field<String?>
): Field<XML?> {
    val f = Xmlcomment()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xmlconcat2</code>
 */
fun xmlconcat2(
      configuration: Configuration
    , __1: XML?
    , __2: XML?
): XML? {
    val f = Xmlconcat2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xmlconcat2</code> as a field.
 */
fun xmlconcat2(
      __1: XML?
    , __2: XML?
): Field<XML?> {
    val f = Xmlconcat2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xmlconcat2</code> as a field.
 */
fun xmlconcat2(
      __1: Field<XML?>
    , __2: Field<XML?>
): Field<XML?> {
    val f = Xmlconcat2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xmlexists</code>
 */
fun xmlexists(
      configuration: Configuration
    , __1: String?
    , __2: XML?
): Boolean? {
    val f = Xmlexists()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xmlexists</code> as a field.
 */
fun xmlexists(
      __1: String?
    , __2: XML?
): Field<Boolean?> {
    val f = Xmlexists()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xmlexists</code> as a field.
 */
fun xmlexists(
      __1: Field<String?>
    , __2: Field<XML?>
): Field<Boolean?> {
    val f = Xmlexists()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xmlvalidate</code>
 */
fun xmlvalidate(
      configuration: Configuration
    , __1: XML?
    , __2: String?
): Boolean? {
    val f = Xmlvalidate()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xmlvalidate</code> as a field.
 */
fun xmlvalidate(
      __1: XML?
    , __2: String?
): Field<Boolean?> {
    val f = Xmlvalidate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xmlvalidate</code> as a field.
 */
fun xmlvalidate(
      __1: Field<XML?>
    , __2: Field<String?>
): Field<Boolean?> {
    val f = Xmlvalidate()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xpath</code>
 */
fun xpath1(
      configuration: Configuration
    , __1: String?
    , __2: XML?
    , __3: Array<String?>?
): Array<XML?>? {
    val f = Xpath1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xpath</code> as a field.
 */
fun xpath1(
      __1: String?
    , __2: XML?
    , __3: Array<String?>?
): Field<Array<XML?>?> {
    val f = Xpath1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xpath</code> as a field.
 */
fun xpath1(
      __1: Field<String?>
    , __2: Field<XML?>
    , __3: Field<Array<String?>?>
): Field<Array<XML?>?> {
    val f = Xpath1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xpath</code>
 */
fun xpath2(
      configuration: Configuration
    , __1: String?
    , __2: XML?
): Array<XML?>? {
    val f = Xpath2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xpath</code> as a field.
 */
fun xpath2(
      __1: String?
    , __2: XML?
): Field<Array<XML?>?> {
    val f = Xpath2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xpath</code> as a field.
 */
fun xpath2(
      __1: Field<String?>
    , __2: Field<XML?>
): Field<Array<XML?>?> {
    val f = Xpath2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xpath_exists</code>
 */
fun xpathExists1(
      configuration: Configuration
    , __1: String?
    , __2: XML?
    , __3: Array<String?>?
): Boolean? {
    val f = XpathExists1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xpath_exists</code> as a field.
 */
fun xpathExists1(
      __1: String?
    , __2: XML?
    , __3: Array<String?>?
): Field<Boolean?> {
    val f = XpathExists1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xpath_exists</code> as a field.
 */
fun xpathExists1(
      __1: Field<String?>
    , __2: Field<XML?>
    , __3: Field<Array<String?>?>
): Field<Boolean?> {
    val f = XpathExists1()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>pg_catalog.xpath_exists</code>
 */
fun xpathExists2(
      configuration: Configuration
    , __1: String?
    , __2: XML?
): Boolean? {
    val f = XpathExists2()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>pg_catalog.xpath_exists</code> as a field.
 */
fun xpathExists2(
      __1: String?
    , __2: XML?
): Field<Boolean?> {
    val f = XpathExists2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>pg_catalog.xpath_exists</code> as a field.
 */
fun xpathExists2(
      __1: Field<String?>
    , __2: Field<XML?>
): Field<Boolean?> {
    val f = XpathExists2()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>pg_catalog.aclexplode</code>.
 */
fun aclexplode(
      configuration: Configuration
    , acl: Array<String?>?
): Result<AclexplodeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
      acl
)).fetch()

/**
 * Get <code>pg_catalog.aclexplode</code> as a table.
 */
fun aclexplode(
      acl: Array<String?>?
): Aclexplode = org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
    acl
)

/**
 * Get <code>pg_catalog.aclexplode</code> as a table.
 */
fun aclexplode(
      acl: Field<Array<String?>?>
): Aclexplode = org.acme.generated.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
    acl
)

/**
 * Call <code>pg_catalog.generate_series</code>.
 */
fun generateSeries(
      configuration: Configuration
    , __1: Long?
    , __2: Long?
): Result<GenerateSeriesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.generate_series</code> as a table.
 */
fun generateSeries(
      __1: Long?
    , __2: Long?
): GenerateSeries = org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.generate_series</code> as a table.
 */
fun generateSeries(
      __1: Field<Long?>
    , __2: Field<Long?>
): GenerateSeries = org.acme.generated.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
    __1,
    __2
)

/**
 * Call <code>pg_catalog.generate_subscripts</code>.
 */
fun generateSubscripts(
      configuration: Configuration
    , __1: Array<Any?>?
    , __2: Int?
    , __3: Boolean?
): Result<GenerateSubscriptsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
      __1
    , __2
    , __3
)).fetch()

/**
 * Get <code>pg_catalog.generate_subscripts</code> as a table.
 */
fun generateSubscripts(
      __1: Array<Any?>?
    , __2: Int?
    , __3: Boolean?
): GenerateSubscripts = org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
    __1,
    __2,
    __3
)

/**
 * Get <code>pg_catalog.generate_subscripts</code> as a table.
 */
fun generateSubscripts(
      __1: Field<Array<Any?>?>
    , __2: Field<Int?>
    , __3: Field<Boolean?>
): GenerateSubscripts = org.acme.generated.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
    __1,
    __2,
    __3
)

/**
 * Call <code>pg_catalog.json_array_elements</code>.
 */
fun jsonArrayElements(
      configuration: Configuration
    , fromJson: JSON?
): Result<JsonArrayElementsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_array_elements</code> as a table.
 */
fun jsonArrayElements(
      fromJson: JSON?
): JsonArrayElements = org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_array_elements</code> as a table.
 */
fun jsonArrayElements(
      fromJson: Field<JSON?>
): JsonArrayElements = org.acme.generated.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Call <code>pg_catalog.json_array_elements_text</code>.
 */
fun jsonArrayElementsText(
      configuration: Configuration
    , fromJson: JSON?
): Result<JsonArrayElementsTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_array_elements_text</code> as a table.
 */
fun jsonArrayElementsText(
      fromJson: JSON?
): JsonArrayElementsText = org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_array_elements_text</code> as a table.
 */
fun jsonArrayElementsText(
      fromJson: Field<JSON?>
): JsonArrayElementsText = org.acme.generated.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Call <code>pg_catalog.json_each</code>.
 */
fun jsonEach(
      configuration: Configuration
    , fromJson: JSON?
): Result<JsonEachRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_each</code> as a table.
 */
fun jsonEach(
      fromJson: JSON?
): JsonEach = org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_each</code> as a table.
 */
fun jsonEach(
      fromJson: Field<JSON?>
): JsonEach = org.acme.generated.pg_catalog.tables.JsonEach.JSON_EACH.call(
    fromJson
)

/**
 * Call <code>pg_catalog.json_each_text</code>.
 */
fun jsonEachText(
      configuration: Configuration
    , fromJson: JSON?
): Result<JsonEachTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.json_each_text</code> as a table.
 */
fun jsonEachText(
      fromJson: JSON?
): JsonEachText = org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.json_each_text</code> as a table.
 */
fun jsonEachText(
      fromJson: Field<JSON?>
): JsonEachText = org.acme.generated.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
    fromJson
)

/**
 * Call <code>pg_catalog.json_object_keys</code>.
 */
fun jsonObjectKeys(
      configuration: Configuration
    , __1: JSON?
): Result<JsonObjectKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.json_object_keys</code> as a table.
 */
fun jsonObjectKeys(
      __1: JSON?
): JsonObjectKeys = org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
    __1
)

/**
 * Get <code>pg_catalog.json_object_keys</code> as a table.
 */
fun jsonObjectKeys(
      __1: Field<JSON?>
): JsonObjectKeys = org.acme.generated.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecordset(
      configuration: Configuration
    , base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): Result<JsonPopulateRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
      base
    , fromJson
    , useJsonAsText
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecordset(
      base: Any?
    , fromJson: JSON?
    , useJsonAsText: Boolean?
): JsonPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
    base,
    fromJson,
    useJsonAsText
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonPopulateRecordset(
      base: Field<Any?>
    , fromJson: Field<JSON?>
    , useJsonAsText: Field<Boolean?>
): JsonPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
    base,
    fromJson,
    useJsonAsText
)

/**
 * Call <code>pg_catalog.json_to_recordset</code>.
 */
fun jsonToRecordset(
      configuration: Configuration
    , __1: JSON?
): Result<JsonToRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.json_to_recordset</code> as a table.
 */
fun jsonToRecordset(
      __1: JSON?
): JsonToRecordset = org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
    __1
)

/**
 * Get <code>pg_catalog.json_to_recordset</code> as a table.
 */
fun jsonToRecordset(
      __1: Field<JSON?>
): JsonToRecordset = org.acme.generated.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
    __1
)

/**
 * Call <code>pg_catalog.jsonb_array_elements</code>.
 */
fun jsonbArrayElements(
      configuration: Configuration
    , fromJson: JSONB?
): Result<JsonbArrayElementsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
 */
fun jsonbArrayElements(
      fromJson: JSONB?
): JsonbArrayElements = org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
 */
fun jsonbArrayElements(
      fromJson: Field<JSONB?>
): JsonbArrayElements = org.acme.generated.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
    fromJson
)

/**
 * Call <code>pg_catalog.jsonb_array_elements_text</code>.
 */
fun jsonbArrayElementsText(
      configuration: Configuration
    , fromJson: JSONB?
): Result<JsonbArrayElementsTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
 */
fun jsonbArrayElementsText(
      fromJson: JSONB?
): JsonbArrayElementsText = org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
 */
fun jsonbArrayElementsText(
      fromJson: Field<JSONB?>
): JsonbArrayElementsText = org.acme.generated.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
    fromJson
)

/**
 * Call <code>pg_catalog.jsonb_each</code>.
 */
fun jsonbEach(
      configuration: Configuration
    , fromJson: JSONB?
): Result<JsonbEachRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_each</code> as a table.
 */
fun jsonbEach(
      fromJson: JSONB?
): JsonbEach = org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_each</code> as a table.
 */
fun jsonbEach(
      fromJson: Field<JSONB?>
): JsonbEach = org.acme.generated.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
    fromJson
)

/**
 * Call <code>pg_catalog.jsonb_each_text</code>.
 */
fun jsonbEachText(
      configuration: Configuration
    , fromJson: JSONB?
): Result<JsonbEachTextRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
      fromJson
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_each_text</code> as a table.
 */
fun jsonbEachText(
      fromJson: JSONB?
): JsonbEachText = org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
    fromJson
)

/**
 * Get <code>pg_catalog.jsonb_each_text</code> as a table.
 */
fun jsonbEachText(
      fromJson: Field<JSONB?>
): JsonbEachText = org.acme.generated.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
    fromJson
)

/**
 * Call <code>pg_catalog.jsonb_object_keys</code>.
 */
fun jsonbObjectKeys(
      configuration: Configuration
    , __1: JSONB?
): Result<JsonbObjectKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
 */
fun jsonbObjectKeys(
      __1: JSONB?
): JsonbObjectKeys = org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
    __1
)

/**
 * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
 */
fun jsonbObjectKeys(
      __1: Field<JSONB?>
): JsonbObjectKeys = org.acme.generated.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQuery(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Result<JsonbPathQueryRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
      target
    , path
    , vars
    , silent
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQuery(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JsonbPathQuery = org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
    target,
    path,
    vars,
    silent
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQuery(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): JsonbPathQuery = org.acme.generated.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
    target,
    path,
    vars,
    silent
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryTz(
      configuration: Configuration
    , target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): Result<JsonbPathQueryTzRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
      target
    , path
    , vars
    , silent
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryTz(
      target: JSONB?
    , path: Any?
    , vars: JSONB?
    , silent: Boolean?
): JsonbPathQueryTz = org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
    target,
    path,
    vars,
    silent
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPathQueryTz(
      target: Field<JSONB?>
    , path: Field<Any?>
    , vars: Field<JSONB?>
    , silent: Field<Boolean?>
): JsonbPathQueryTz = org.acme.generated.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
    target,
    path,
    vars,
    silent
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecordset(
      configuration: Configuration
    , __1: Any?
    , __2: JSONB?
): Result<JsonbPopulateRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
      __1
    , __2
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecordset(
      __1: Any?
    , __2: JSONB?
): JsonbPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
    __1,
    __2
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun jsonbPopulateRecordset(
      __1: Field<Any?>
    , __2: Field<JSONB?>
): JsonbPopulateRecordset = org.acme.generated.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
    __1,
    __2
)

/**
 * Call <code>pg_catalog.jsonb_to_recordset</code>.
 */
fun jsonbToRecordset(
      configuration: Configuration
    , __1: JSONB?
): Result<JsonbToRecordsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
 */
fun jsonbToRecordset(
      __1: JSONB?
): JsonbToRecordset = org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
    __1
)

/**
 * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
 */
fun jsonbToRecordset(
      __1: Field<JSONB?>
): JsonbToRecordset = org.acme.generated.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
    __1
)

/**
 * Call <code>pg_catalog.pg_config</code>.
 */
fun pgConfig(
      configuration: Configuration
): Result<PgConfigRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgConfig.PG_CONFIG.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_config</code> as a table.
 */
fun pgConfig(): PgConfig = org.acme.generated.pg_catalog.tables.PgConfig.PG_CONFIG.call(
)

/**
 * Call <code>pg_catalog.pg_cursor</code>.
 */
fun pgCursor(
      configuration: Configuration
): Result<PgCursorRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgCursor.PG_CURSOR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_cursor</code> as a table.
 */
fun pgCursor(): PgCursor = org.acme.generated.pg_catalog.tables.PgCursor.PG_CURSOR.call(
)

/**
 * Call <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
 */
fun pgEventTriggerDdlCommands(
      configuration: Configuration
): Result<PgEventTriggerDdlCommandsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_event_trigger_ddl_commands</code> as a table.
 */
fun pgEventTriggerDdlCommands(): PgEventTriggerDdlCommands = org.acme.generated.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
)

/**
 * Call <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
 */
fun pgEventTriggerDroppedObjects(
      configuration: Configuration
): Result<PgEventTriggerDroppedObjectsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_event_trigger_dropped_objects</code> as a table.
 */
fun pgEventTriggerDroppedObjects(): PgEventTriggerDroppedObjects = org.acme.generated.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
)

/**
 * Call <code>pg_catalog.pg_extension_update_paths</code>.
 */
fun pgExtensionUpdatePaths(
      configuration: Configuration
    , name: String?
): Result<PgExtensionUpdatePathsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
      name
)).fetch()

/**
 * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
 */
fun pgExtensionUpdatePaths(
      name: String?
): PgExtensionUpdatePaths = org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
    name
)

/**
 * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
 */
fun pgExtensionUpdatePaths(
      name: Field<String?>
): PgExtensionUpdatePaths = org.acme.generated.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
    name
)

/**
 * Call <code>pg_catalog.pg_get_backend_memory_contexts</code>.
 */
fun pgGetBackendMemoryContexts(
      configuration: Configuration
): Result<PgGetBackendMemoryContextsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_backend_memory_contexts</code> as a table.
 */
fun pgGetBackendMemoryContexts(): PgGetBackendMemoryContexts = org.acme.generated.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
)

/**
 * Call <code>pg_catalog.pg_get_catalog_foreign_keys</code>.
 */
fun pgGetCatalogForeignKeys(
      configuration: Configuration
): Result<PgGetCatalogForeignKeysRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_catalog_foreign_keys</code> as a table.
 */
fun pgGetCatalogForeignKeys(): PgGetCatalogForeignKeys = org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
)

/**
 * Call <code>pg_catalog.pg_get_keywords</code>.
 */
fun pgGetKeywords(
      configuration: Configuration
): Result<PgGetKeywordsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_keywords</code> as a table.
 */
fun pgGetKeywords(): PgGetKeywords = org.acme.generated.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
)

/**
 * Call <code>pg_catalog.pg_get_multixact_members</code>.
 */
fun pgGetMultixactMembers(
      configuration: Configuration
    , multixid: Long?
): Result<PgGetMultixactMembersRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
      multixid
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
 */
fun pgGetMultixactMembers(
      multixid: Long?
): PgGetMultixactMembers = org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
    multixid
)

/**
 * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
 */
fun pgGetMultixactMembers(
      multixid: Field<Long?>
): PgGetMultixactMembers = org.acme.generated.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
    multixid
)

/**
 * Call <code>pg_catalog.pg_get_publication_tables</code>.
 */
fun pgGetPublicationTables(
      configuration: Configuration
    , pubname: String?
): Result<PgGetPublicationTablesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
      pubname
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
 */
fun pgGetPublicationTables(
      pubname: String?
): PgGetPublicationTables = org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
    pubname
)

/**
 * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
 */
fun pgGetPublicationTables(
      pubname: Field<String?>
): PgGetPublicationTables = org.acme.generated.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
    pubname
)

/**
 * Call <code>pg_catalog.pg_get_replication_slots</code>.
 */
fun pgGetReplicationSlots(
      configuration: Configuration
): Result<PgGetReplicationSlotsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_replication_slots</code> as a table.
 */
fun pgGetReplicationSlots(): PgGetReplicationSlots = org.acme.generated.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
)

/**
 * Call <code>pg_catalog.pg_get_shmem_allocations</code>.
 */
fun pgGetShmemAllocations(
      configuration: Configuration
): Result<PgGetShmemAllocationsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_get_shmem_allocations</code> as a table.
 */
fun pgGetShmemAllocations(): PgGetShmemAllocations = org.acme.generated.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
)

/**
 * Call <code>pg_catalog.pg_listening_channels</code>.
 */
fun pgListeningChannels(
      configuration: Configuration
): Result<PgListeningChannelsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_listening_channels</code> as a table.
 */
fun pgListeningChannels(): PgListeningChannels = org.acme.generated.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
)

/**
 * Call <code>pg_catalog.pg_lock_status</code>.
 */
fun pgLockStatus(
      configuration: Configuration
): Result<PgLockStatusRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_lock_status</code> as a table.
 */
fun pgLockStatus(): PgLockStatus = org.acme.generated.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetBinaryChanges(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<PgLogicalSlotGetBinaryChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetBinaryChanges(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotGetBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetBinaryChanges(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotGetBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetChanges(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<PgLogicalSlotGetChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetChanges(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotGetChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotGetChanges(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotGetChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekBinaryChanges(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<PgLogicalSlotPeekBinaryChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekBinaryChanges(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotPeekBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekBinaryChanges(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotPeekBinaryChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekChanges(
      configuration: Configuration
    , slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): Result<PgLogicalSlotPeekChangesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
      slotName
    , uptoLsn
    , uptoNchanges
    , options
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekChanges(
      slotName: String?
    , uptoLsn: Any?
    , uptoNchanges: Int?
    , options: Array<String?>?
): PgLogicalSlotPeekChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgLogicalSlotPeekChanges(
      slotName: Field<String?>
    , uptoLsn: Field<Any?>
    , uptoNchanges: Field<Int?>
    , options: Field<Array<String?>?>
): PgLogicalSlotPeekChanges = org.acme.generated.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
    slotName,
    uptoLsn,
    uptoNchanges,
    options
)

/**
 * Call <code>pg_catalog.pg_ls_archive_statusdir</code>.
 */
fun pgLsArchiveStatusdir(
      configuration: Configuration
): Result<PgLsArchiveStatusdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_ls_archive_statusdir</code> as a table.
 */
fun pgLsArchiveStatusdir(): PgLsArchiveStatusdir = org.acme.generated.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
)

/**
 * Call <code>pg_catalog.pg_ls_dir</code>.
 */
fun pgLsDir(
      configuration: Configuration
    , __1: String?
): Result<PgLsDirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.pg_ls_dir</code> as a table.
 */
fun pgLsDir(
      __1: String?
): PgLsDir = org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
    __1
)

/**
 * Get <code>pg_catalog.pg_ls_dir</code> as a table.
 */
fun pgLsDir(
      __1: Field<String?>
): PgLsDir = org.acme.generated.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
    __1
)

/**
 * Call <code>pg_catalog.pg_ls_logdir</code>.
 */
fun pgLsLogdir(
      configuration: Configuration
): Result<PgLsLogdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_ls_logdir</code> as a table.
 */
fun pgLsLogdir(): PgLsLogdir = org.acme.generated.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
)

/**
 * Call <code>pg_catalog.pg_ls_tmpdir</code>.
 */
fun pgLsTmpdir(
      configuration: Configuration
): Result<PgLsTmpdirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_ls_tmpdir</code> as a table.
 */
fun pgLsTmpdir(): PgLsTmpdir = org.acme.generated.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
)

/**
 * Call <code>pg_catalog.pg_ls_waldir</code>.
 */
fun pgLsWaldir(
      configuration: Configuration
): Result<PgLsWaldirRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_ls_waldir</code> as a table.
 */
fun pgLsWaldir(): PgLsWaldir = org.acme.generated.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListItems(
      configuration: Configuration
    , mcvList: Any?
): Result<PgMcvListItemsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
      mcvList
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListItems(
      mcvList: Any?
): PgMcvListItems = org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
    mcvList
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgMcvListItems(
      mcvList: Field<Any?>
): PgMcvListItems = org.acme.generated.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
    mcvList
)

/**
 * Call <code>pg_catalog.pg_options_to_table</code>.
 */
fun pgOptionsToTable(
      configuration: Configuration
    , optionsArray: Array<String?>?
): Result<PgOptionsToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
      optionsArray
)).fetch()

/**
 * Get <code>pg_catalog.pg_options_to_table</code> as a table.
 */
fun pgOptionsToTable(
      optionsArray: Array<String?>?
): PgOptionsToTable = org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
    optionsArray
)

/**
 * Get <code>pg_catalog.pg_options_to_table</code> as a table.
 */
fun pgOptionsToTable(
      optionsArray: Field<Array<String?>?>
): PgOptionsToTable = org.acme.generated.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
    optionsArray
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionAncestors(
      configuration: Configuration
    , partitionid: Any?
): Result<PgPartitionAncestorsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
      partitionid
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionAncestors(
      partitionid: Any?
): PgPartitionAncestors = org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
    partitionid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionAncestors(
      partitionid: Field<Any?>
): PgPartitionAncestors = org.acme.generated.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
    partitionid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionTree(
      configuration: Configuration
    , rootrelid: Any?
): Result<PgPartitionTreeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
      rootrelid
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionTree(
      rootrelid: Any?
): PgPartitionTree = org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
    rootrelid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgPartitionTree(
      rootrelid: Field<Any?>
): PgPartitionTree = org.acme.generated.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
    rootrelid
)

/**
 * Call <code>pg_catalog.pg_prepared_statement</code>.
 */
fun pgPreparedStatement(
      configuration: Configuration
): Result<PgPreparedStatementRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_prepared_statement</code> as a table.
 */
fun pgPreparedStatement(): PgPreparedStatement = org.acme.generated.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
)

/**
 * Call <code>pg_catalog.pg_prepared_xact</code>.
 */
fun pgPreparedXact(
      configuration: Configuration
): Result<PgPreparedXactRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_prepared_xact</code> as a table.
 */
fun pgPreparedXact(): PgPreparedXact = org.acme.generated.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
)

/**
 * Call <code>pg_catalog.pg_show_all_file_settings</code>.
 */
fun pgShowAllFileSettings(
      configuration: Configuration
): Result<PgShowAllFileSettingsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_show_all_file_settings</code> as a table.
 */
fun pgShowAllFileSettings(): PgShowAllFileSettings = org.acme.generated.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
)

/**
 * Call <code>pg_catalog.pg_show_all_settings</code>.
 */
fun pgShowAllSettings(
      configuration: Configuration
): Result<PgShowAllSettingsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_show_all_settings</code> as a table.
 */
fun pgShowAllSettings(): PgShowAllSettings = org.acme.generated.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
)

/**
 * Call <code>pg_catalog.pg_show_replication_origin_status</code>.
 */
fun pgShowReplicationOriginStatus(
      configuration: Configuration
): Result<PgShowReplicationOriginStatusRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_show_replication_origin_status</code> as a table.
 */
fun pgShowReplicationOriginStatus(): PgShowReplicationOriginStatus = org.acme.generated.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXip(
      configuration: Configuration
    , __1: Any?
): Result<PgSnapshotXipRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
      __1
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXip(
      __1: Any?
): PgSnapshotXip = org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun pgSnapshotXip(
      __1: Field<Any?>
): PgSnapshotXip = org.acme.generated.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
    __1
)

/**
 * Call <code>pg_catalog.pg_stat_get_activity</code>.
 */
fun pgStatGetActivity(
      configuration: Configuration
    , pid: Int?
): Result<PgStatGetActivityRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
      pid
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
 */
fun pgStatGetActivity(
      pid: Int?
): PgStatGetActivity = org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
    pid
)

/**
 * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
 */
fun pgStatGetActivity(
      pid: Field<Int?>
): PgStatGetActivity = org.acme.generated.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
    pid
)

/**
 * Call <code>pg_catalog.pg_stat_get_backend_idset</code>.
 */
fun pgStatGetBackendIdset(
      configuration: Configuration
): Result<PgStatGetBackendIdsetRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_backend_idset</code> as a table.
 */
fun pgStatGetBackendIdset(): PgStatGetBackendIdset = org.acme.generated.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
)

/**
 * Call <code>pg_catalog.pg_stat_get_progress_info</code>.
 */
fun pgStatGetProgressInfo(
      configuration: Configuration
    , cmdtype: String?
): Result<PgStatGetProgressInfoRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
      cmdtype
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
 */
fun pgStatGetProgressInfo(
      cmdtype: String?
): PgStatGetProgressInfo = org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
    cmdtype
)

/**
 * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
 */
fun pgStatGetProgressInfo(
      cmdtype: Field<String?>
): PgStatGetProgressInfo = org.acme.generated.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
    cmdtype
)

/**
 * Call <code>pg_catalog.pg_stat_get_replication_slot</code>.
 */
fun pgStatGetReplicationSlot(
      configuration: Configuration
    , slotName: String?
): Result<PgStatGetReplicationSlotRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
      slotName
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_replication_slot</code> as a table.
 */
fun pgStatGetReplicationSlot(
      slotName: String?
): PgStatGetReplicationSlot = org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
    slotName
)

/**
 * Get <code>pg_catalog.pg_stat_get_replication_slot</code> as a table.
 */
fun pgStatGetReplicationSlot(
      slotName: Field<String?>
): PgStatGetReplicationSlot = org.acme.generated.pg_catalog.tables.PgStatGetReplicationSlot.PG_STAT_GET_REPLICATION_SLOT.call(
    slotName
)

/**
 * Call <code>pg_catalog.pg_stat_get_slru</code>.
 */
fun pgStatGetSlru(
      configuration: Configuration
): Result<PgStatGetSlruRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_slru</code> as a table.
 */
fun pgStatGetSlru(): PgStatGetSlru = org.acme.generated.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
)

/**
 * Call <code>pg_catalog.pg_stat_get_subscription</code>.
 */
fun pgStatGetSubscription(
      configuration: Configuration
    , subid: Long?
): Result<PgStatGetSubscriptionRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
      subid
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
 */
fun pgStatGetSubscription(
      subid: Long?
): PgStatGetSubscription = org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
    subid
)

/**
 * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
 */
fun pgStatGetSubscription(
      subid: Field<Long?>
): PgStatGetSubscription = org.acme.generated.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
    subid
)

/**
 * Call <code>pg_catalog.pg_stat_get_wal_senders</code>.
 */
fun pgStatGetWalSenders(
      configuration: Configuration
): Result<PgStatGetWalSendersRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_stat_get_wal_senders</code> as a table.
 */
fun pgStatGetWalSenders(): PgStatGetWalSenders = org.acme.generated.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
)

/**
 * Call <code>pg_catalog.pg_stop_backup</code>.
 */
fun pgStopBackup(
      configuration: Configuration
    , exclusive: Boolean?
    , waitForArchive: Boolean?
): Result<PgStopBackupRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
      exclusive
    , waitForArchive
)).fetch()

/**
 * Get <code>pg_catalog.pg_stop_backup</code> as a table.
 */
fun pgStopBackup(
      exclusive: Boolean?
    , waitForArchive: Boolean?
): org.acme.generated.pg_catalog.tables.PgStopBackup = org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
    exclusive,
    waitForArchive
)

/**
 * Get <code>pg_catalog.pg_stop_backup</code> as a table.
 */
fun pgStopBackup(
      exclusive: Field<Boolean?>
    , waitForArchive: Field<Boolean?>
): org.acme.generated.pg_catalog.tables.PgStopBackup = org.acme.generated.pg_catalog.tables.PgStopBackup.PG_STOP_BACKUP.call(
    exclusive,
    waitForArchive
)

/**
 * Call <code>pg_catalog.pg_tablespace_databases</code>.
 */
fun pgTablespaceDatabases(
      configuration: Configuration
    , __1: Long?
): Result<PgTablespaceDatabasesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
      __1
)).fetch()

/**
 * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
 */
fun pgTablespaceDatabases(
      __1: Long?
): PgTablespaceDatabases = org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
    __1
)

/**
 * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
 */
fun pgTablespaceDatabases(
      __1: Field<Long?>
): PgTablespaceDatabases = org.acme.generated.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
    __1
)

/**
 * Call <code>pg_catalog.pg_timezone_abbrevs</code>.
 */
fun pgTimezoneAbbrevs(
      configuration: Configuration
): Result<PgTimezoneAbbrevsRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
)).fetch()

/**
 * Get <code>pg_catalog.pg_timezone_abbrevs</code> as a table.
 */
fun pgTimezoneAbbrevs(): PgTimezoneAbbrevs = org.acme.generated.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
)

/**
 * Call <code>pg_catalog.regexp_matches</code>.
 */
fun regexpMatches(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<RegexpMatchesRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.regexp_matches</code> as a table.
 */
fun regexpMatches(
      __1: String?
    , __2: String?
): RegexpMatches = org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.regexp_matches</code> as a table.
 */
fun regexpMatches(
      __1: Field<String?>
    , __2: Field<String?>
): RegexpMatches = org.acme.generated.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2
)

/**
 * Call <code>pg_catalog.regexp_split_to_table</code>.
 */
fun regexpSplitToTable(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<RegexpSplitToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
 */
fun regexpSplitToTable(
      __1: String?
    , __2: String?
): RegexpSplitToTable = org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
 */
fun regexpSplitToTable(
      __1: Field<String?>
    , __2: Field<String?>
): RegexpSplitToTable = org.acme.generated.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * Call <code>pg_catalog.string_to_table</code>.
 */
fun stringToTable(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<StringToTableRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>pg_catalog.string_to_table</code> as a table.
 */
fun stringToTable(
      __1: String?
    , __2: String?
): StringToTable = org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
    __1,
    __2
)

/**
 * Get <code>pg_catalog.string_to_table</code> as a table.
 */
fun stringToTable(
      __1: Field<String?>
    , __2: Field<String?>
): StringToTable = org.acme.generated.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
    __1,
    __2
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDebug(
      configuration: Configuration
    , config: Any?
    , document: String?
): Result<TsDebugRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
      config
    , document
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDebug(
      config: Any?
    , document: String?
): TsDebug = org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
    config,
    document
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun tsDebug(
      config: Field<Any?>
    , document: Field<String?>
): TsDebug = org.acme.generated.pg_catalog.tables.TsDebug.TS_DEBUG.call(
    config,
    document
)

/**
 * Call <code>pg_catalog.ts_parse</code>.
 */
fun tsParse(
      configuration: Configuration
    , parserOid: Long?
    , txt: String?
): Result<TsParseRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
      parserOid
    , txt
)).fetch()

/**
 * Get <code>pg_catalog.ts_parse</code> as a table.
 */
fun tsParse(
      parserOid: Long?
    , txt: String?
): TsParse = org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
    parserOid,
    txt
)

/**
 * Get <code>pg_catalog.ts_parse</code> as a table.
 */
fun tsParse(
      parserOid: Field<Long?>
    , txt: Field<String?>
): TsParse = org.acme.generated.pg_catalog.tables.TsParse.TS_PARSE.call(
    parserOid,
    txt
)

/**
 * Call <code>pg_catalog.ts_stat</code>.
 */
fun tsStat(
      configuration: Configuration
    , query: String?
): Result<TsStatRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
      query
)).fetch()

/**
 * Get <code>pg_catalog.ts_stat</code> as a table.
 */
fun tsStat(
      query: String?
): TsStat = org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
    query
)

/**
 * Get <code>pg_catalog.ts_stat</code> as a table.
 */
fun tsStat(
      query: Field<String?>
): TsStat = org.acme.generated.pg_catalog.tables.TsStat.TS_STAT.call(
    query
)

/**
 * Call <code>pg_catalog.ts_token_type</code>.
 */
fun tsTokenType(
      configuration: Configuration
    , parserOid: Long?
): Result<TsTokenTypeRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
      parserOid
)).fetch()

/**
 * Get <code>pg_catalog.ts_token_type</code> as a table.
 */
fun tsTokenType(
      parserOid: Long?
): TsTokenType = org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
    parserOid
)

/**
 * Get <code>pg_catalog.ts_token_type</code> as a table.
 */
fun tsTokenType(
      parserOid: Field<Long?>
): TsTokenType = org.acme.generated.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
    parserOid
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXip(
      configuration: Configuration
    , __1: Any?
): Result<TxidSnapshotXipRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
      __1
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXip(
      __1: Any?
): TxidSnapshotXip = org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun txidSnapshotXip(
      __1: Field<Any?>
): TxidSnapshotXip = org.acme.generated.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unnest(
      configuration: Configuration
    , __1: Any?
): Result<UnnestRecord> = configuration.dsl().selectFrom(org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
      __1
)).fetch()
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unnest(
      __1: Any?
): Unnest = org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
    __1
)
@Deprecated(message = "Unknown data type. Parameter type or return type is unknown. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
fun unnest(
      __1: Field<Any?>
): Unnest = org.acme.generated.pg_catalog.tables.Unnest.UNNEST.call(
    __1
)
