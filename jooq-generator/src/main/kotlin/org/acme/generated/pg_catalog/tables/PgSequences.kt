/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgSequencesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgSequences(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgSequencesRecord>?,
    parentPath: InverseForeignKey<out Record, PgSequencesRecord>?,
    aliased: Table<PgSequencesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgSequencesRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_sequences" as  SELECT n.nspname AS schemaname,
      c.relname AS sequencename,
      pg_get_userbyid(c.relowner) AS sequenceowner,
      (s.seqtypid)::regtype AS data_type,
      s.seqstart AS start_value,
      s.seqmin AS min_value,
      s.seqmax AS max_value,
      s.seqincrement AS increment_by,
      s.seqcycle AS cycle,
      s.seqcache AS cache_size,
          CASE
              WHEN has_sequence_privilege(c.oid, 'SELECT,USAGE'::text) THEN pg_sequence_last_value((c.oid)::regclass)
              ELSE NULL::bigint
          END AS last_value
     FROM ((pg_sequence s
       JOIN pg_class c ON ((c.oid = s.seqrelid)))
       LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
    WHERE ((NOT pg_is_other_temp_schema(n.oid)) AND (c.relkind = 'S'::"char"));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_sequences</code>
         */
        val PG_SEQUENCES: PgSequences = PgSequences()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgSequencesRecord> = PgSequencesRecord::class.java

    /**
     * The column <code>pg_catalog.pg_sequences.schemaname</code>.
     */
    val SCHEMANAME: TableField<PgSequencesRecord, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.sequencename</code>.
     */
    val SEQUENCENAME: TableField<PgSequencesRecord, String?> = createField(DSL.name("sequencename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.sequenceowner</code>.
     */
    val SEQUENCEOWNER: TableField<PgSequencesRecord, String?> = createField(DSL.name("sequenceowner"), SQLDataType.VARCHAR, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val DATA_TYPE: TableField<PgSequencesRecord, Any?> = createField(DSL.name("data_type"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regtype\""), this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.start_value</code>.
     */
    val START_VALUE: TableField<PgSequencesRecord, Long?> = createField(DSL.name("start_value"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.min_value</code>.
     */
    val MIN_VALUE: TableField<PgSequencesRecord, Long?> = createField(DSL.name("min_value"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.max_value</code>.
     */
    val MAX_VALUE: TableField<PgSequencesRecord, Long?> = createField(DSL.name("max_value"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.increment_by</code>.
     */
    val INCREMENT_BY: TableField<PgSequencesRecord, Long?> = createField(DSL.name("increment_by"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.cycle</code>.
     */
    val CYCLE: TableField<PgSequencesRecord, Boolean?> = createField(DSL.name("cycle"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.cache_size</code>.
     */
    val CACHE_SIZE: TableField<PgSequencesRecord, Long?> = createField(DSL.name("cache_size"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_sequences.last_value</code>.
     */
    val LAST_VALUE: TableField<PgSequencesRecord, Long?> = createField(DSL.name("last_value"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgSequencesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgSequencesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgSequencesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_sequences</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_sequences</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_sequences</code> table reference
     */
    constructor(): this(DSL.name("pg_sequences"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgSequences = PgSequences(DSL.name(alias), this)
    override fun `as`(alias: Name): PgSequences = PgSequences(alias, this)
    override fun `as`(alias: Table<*>): PgSequences = PgSequences(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgSequences = PgSequences(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgSequences = PgSequences(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgSequences = PgSequences(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgSequences = PgSequences(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgSequences = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgSequences = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgSequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgSequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgSequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgSequences = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgSequences = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgSequences = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgSequences = where(DSL.notExists(select))
}
