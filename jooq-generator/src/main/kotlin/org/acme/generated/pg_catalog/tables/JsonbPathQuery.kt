/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.JsonbPathQueryRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JsonbPathQuery(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JsonbPathQueryRecord>?,
    parentPath: InverseForeignKey<out Record, JsonbPathQueryRecord>?,
    aliased: Table<JsonbPathQueryRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JsonbPathQueryRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.jsonb_path_query</code>
         */
        val JSONB_PATH_QUERY: JsonbPathQuery = JsonbPathQuery()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JsonbPathQueryRecord> = JsonbPathQueryRecord::class.java

    /**
     * The column <code>pg_catalog.jsonb_path_query.jsonb_path_query</code>.
     */
    val JSONB_PATH_QUERY_: TableField<JsonbPathQueryRecord, JSONB?> = createField(DSL.name("jsonb_path_query"), SQLDataType.JSONB, this, "")

    private constructor(alias: Name, aliased: Table<JsonbPathQueryRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.JSONB),
        DSL.value(null, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonpath\"")),
        DSL.value(null, SQLDataType.JSONB.defaultValue(DSL.field(DSL.raw("'{}'::jsonb"), SQLDataType.JSONB))),
        DSL.value(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
    ), null)
    private constructor(alias: Name, aliased: Table<JsonbPathQueryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.jsonb_path_query</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.jsonb_path_query</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.jsonb_path_query</code> table reference
     */
    constructor(): this(DSL.name("jsonb_path_query"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): JsonbPathQuery = JsonbPathQuery(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): JsonbPathQuery = JsonbPathQuery(alias, this, parameters)
    override fun `as`(alias: Table<*>): JsonbPathQuery = JsonbPathQuery(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): JsonbPathQuery = JsonbPathQuery(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JsonbPathQuery = JsonbPathQuery(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JsonbPathQuery = JsonbPathQuery(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          target: JSONB?
        , path: Any?
        , vars: JSONB?
        , silent: Boolean?
    ): JsonbPathQuery = JsonbPathQuery(DSL.name("jsonb_path_query"), null, arrayOf(
        DSL.value(target, SQLDataType.JSONB),
        DSL.value(path, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonpath\"")),
        DSL.value(vars, SQLDataType.JSONB.defaultValue(DSL.field(DSL.raw("'{}'::jsonb"), SQLDataType.JSONB))),
        DSL.value(silent, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          target: Field<JSONB?>
        , path: Field<Any?>
        , vars: Field<JSONB?>
        , silent: Field<Boolean?>
    ): JsonbPathQuery = JsonbPathQuery(DSL.name("jsonb_path_query"), null, arrayOf(
        target,
        path,
        vars,
        silent
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
