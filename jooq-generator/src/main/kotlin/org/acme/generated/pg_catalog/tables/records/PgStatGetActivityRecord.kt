/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import java.math.BigDecimal
import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.tables.PgStatGetActivity
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetActivityRecord() : TableRecordImpl<PgStatGetActivityRecord>(PgStatGetActivity.PG_STAT_GET_ACTIVITY) {

    open var datid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var pid: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var usesysid: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var applicationName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var state: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var query: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var waitEventType: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var waitEvent: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var xactStart: OffsetDateTime?
        set(value): Unit = set(8, value)
        get(): OffsetDateTime? = get(8) as OffsetDateTime?

    open var queryStart: OffsetDateTime?
        set(value): Unit = set(9, value)
        get(): OffsetDateTime? = get(9) as OffsetDateTime?

    open var backendStart: OffsetDateTime?
        set(value): Unit = set(10, value)
        get(): OffsetDateTime? = get(10) as OffsetDateTime?

    open var stateChange: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    open var clientAddr: Any?
        set(value): Unit = set(12, value)
        get(): Any? = get(12) as Any?

    open var clientHostname: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var clientPort: Int?
        set(value): Unit = set(14, value)
        get(): Int? = get(14) as Int?

    open var backendXid: Long?
        set(value): Unit = set(15, value)
        get(): Long? = get(15) as Long?

    open var backendXmin: Long?
        set(value): Unit = set(16, value)
        get(): Long? = get(16) as Long?

    open var backendType: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var ssl: Boolean?
        set(value): Unit = set(18, value)
        get(): Boolean? = get(18) as Boolean?

    open var sslversion: String?
        set(value): Unit = set(19, value)
        get(): String? = get(19) as String?

    open var sslcipher: String?
        set(value): Unit = set(20, value)
        get(): String? = get(20) as String?

    open var sslbits: Int?
        set(value): Unit = set(21, value)
        get(): Int? = get(21) as Int?

    open var sslClientDn: String?
        set(value): Unit = set(22, value)
        get(): String? = get(22) as String?

    open var sslClientSerial: BigDecimal?
        set(value): Unit = set(23, value)
        get(): BigDecimal? = get(23) as BigDecimal?

    open var sslIssuerDn: String?
        set(value): Unit = set(24, value)
        get(): String? = get(24) as String?

    open var gssAuth: Boolean?
        set(value): Unit = set(25, value)
        get(): Boolean? = get(25) as Boolean?

    open var gssPrinc: String?
        set(value): Unit = set(26, value)
        get(): String? = get(26) as String?

    open var gssEnc: Boolean?
        set(value): Unit = set(27, value)
        get(): Boolean? = get(27) as Boolean?

    open var leaderPid: Int?
        set(value): Unit = set(28, value)
        get(): Int? = get(28) as Int?

    open var queryId: Long?
        set(value): Unit = set(29, value)
        get(): Long? = get(29) as Long?

    /**
     * Create a detached, initialised PgStatGetActivityRecord
     */
    constructor(datid: Long? = null, pid: Int? = null, usesysid: Long? = null, applicationName: String? = null, state: String? = null, query: String? = null, waitEventType: String? = null, waitEvent: String? = null, xactStart: OffsetDateTime? = null, queryStart: OffsetDateTime? = null, backendStart: OffsetDateTime? = null, stateChange: OffsetDateTime? = null, clientAddr: Any? = null, clientHostname: String? = null, clientPort: Int? = null, backendXid: Long? = null, backendXmin: Long? = null, backendType: String? = null, ssl: Boolean? = null, sslversion: String? = null, sslcipher: String? = null, sslbits: Int? = null, sslClientDn: String? = null, sslClientSerial: BigDecimal? = null, sslIssuerDn: String? = null, gssAuth: Boolean? = null, gssPrinc: String? = null, gssEnc: Boolean? = null, leaderPid: Int? = null, queryId: Long? = null): this() {
        this.datid = datid
        this.pid = pid
        this.usesysid = usesysid
        this.applicationName = applicationName
        this.state = state
        this.query = query
        this.waitEventType = waitEventType
        this.waitEvent = waitEvent
        this.xactStart = xactStart
        this.queryStart = queryStart
        this.backendStart = backendStart
        this.stateChange = stateChange
        this.clientAddr = clientAddr
        this.clientHostname = clientHostname
        this.clientPort = clientPort
        this.backendXid = backendXid
        this.backendXmin = backendXmin
        this.backendType = backendType
        this.ssl = ssl
        this.sslversion = sslversion
        this.sslcipher = sslcipher
        this.sslbits = sslbits
        this.sslClientDn = sslClientDn
        this.sslClientSerial = sslClientSerial
        this.sslIssuerDn = sslIssuerDn
        this.gssAuth = gssAuth
        this.gssPrinc = gssPrinc
        this.gssEnc = gssEnc
        this.leaderPid = leaderPid
        this.queryId = queryId
        resetChangedOnNotNull()
    }
}
