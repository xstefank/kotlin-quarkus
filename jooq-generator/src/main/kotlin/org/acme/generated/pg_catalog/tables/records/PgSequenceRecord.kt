/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgSequence
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgSequenceRecord() : UpdatableRecordImpl<PgSequenceRecord>(PgSequence.PG_SEQUENCE) {

    open var seqrelid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var seqtypid: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var seqstart: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var seqincrement: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var seqmax: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var seqmin: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var seqcache: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open var seqcycle: Boolean?
        set(value): Unit = set(7, value)
        get(): Boolean? = get(7) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised PgSequenceRecord
     */
    constructor(seqrelid: Long? = null, seqtypid: Long? = null, seqstart: Long? = null, seqincrement: Long? = null, seqmax: Long? = null, seqmin: Long? = null, seqcache: Long? = null, seqcycle: Boolean? = null): this() {
        this.seqrelid = seqrelid
        this.seqtypid = seqtypid
        this.seqstart = seqstart
        this.seqincrement = seqincrement
        this.seqmax = seqmax
        this.seqmin = seqmin
        this.seqcache = seqcache
        this.seqcycle = seqcycle
        resetChangedOnNotNull()
    }
}
