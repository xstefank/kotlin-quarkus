/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import java.math.BigDecimal
import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatGetActivityRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetActivity(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatGetActivityRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatGetActivityRecord>?,
    aliased: Table<PgStatGetActivityRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatGetActivityRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_get_activity</code>
         */
        val PG_STAT_GET_ACTIVITY: PgStatGetActivity = PgStatGetActivity()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatGetActivityRecord> = PgStatGetActivityRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.datid</code>.
     */
    val DATID: TableField<PgStatGetActivityRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.pid</code>.
     */
    val PID: TableField<PgStatGetActivityRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.usesysid</code>.
     */
    val USESYSID: TableField<PgStatGetActivityRecord, Long?> = createField(DSL.name("usesysid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.application_name</code>.
     */
    val APPLICATION_NAME: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("application_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.state</code>.
     */
    val STATE: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("state"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.query</code>.
     */
    val QUERY: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("query"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.wait_event_type</code>.
     */
    val WAIT_EVENT_TYPE: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("wait_event_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.wait_event</code>.
     */
    val WAIT_EVENT: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("wait_event"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.xact_start</code>.
     */
    val XACT_START: TableField<PgStatGetActivityRecord, OffsetDateTime?> = createField(DSL.name("xact_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.query_start</code>.
     */
    val QUERY_START: TableField<PgStatGetActivityRecord, OffsetDateTime?> = createField(DSL.name("query_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.backend_start</code>.
     */
    val BACKEND_START: TableField<PgStatGetActivityRecord, OffsetDateTime?> = createField(DSL.name("backend_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.state_change</code>.
     */
    val STATE_CHANGE: TableField<PgStatGetActivityRecord, OffsetDateTime?> = createField(DSL.name("state_change"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val CLIENT_ADDR: TableField<PgStatGetActivityRecord, Any?> = createField(DSL.name("client_addr"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.client_hostname</code>.
     */
    val CLIENT_HOSTNAME: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("client_hostname"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.client_port</code>.
     */
    val CLIENT_PORT: TableField<PgStatGetActivityRecord, Int?> = createField(DSL.name("client_port"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.backend_xid</code>.
     */
    val BACKEND_XID: TableField<PgStatGetActivityRecord, Long?> = createField(DSL.name("backend_xid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.backend_xmin</code>.
     */
    val BACKEND_XMIN: TableField<PgStatGetActivityRecord, Long?> = createField(DSL.name("backend_xmin"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.backend_type</code>.
     */
    val BACKEND_TYPE: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.ssl</code>.
     */
    val SSL: TableField<PgStatGetActivityRecord, Boolean?> = createField(DSL.name("ssl"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.sslversion</code>.
     */
    val SSLVERSION: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("sslversion"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.sslcipher</code>.
     */
    val SSLCIPHER: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("sslcipher"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.sslbits</code>.
     */
    val SSLBITS: TableField<PgStatGetActivityRecord, Int?> = createField(DSL.name("sslbits"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.ssl_client_dn</code>.
     */
    val SSL_CLIENT_DN: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("ssl_client_dn"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_activity.ssl_client_serial</code>.
     */
    val SSL_CLIENT_SERIAL: TableField<PgStatGetActivityRecord, BigDecimal?> = createField(DSL.name("ssl_client_serial"), SQLDataType.NUMERIC, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.ssl_issuer_dn</code>.
     */
    val SSL_ISSUER_DN: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("ssl_issuer_dn"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.gss_auth</code>.
     */
    val GSS_AUTH: TableField<PgStatGetActivityRecord, Boolean?> = createField(DSL.name("gss_auth"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.gss_princ</code>.
     */
    val GSS_PRINC: TableField<PgStatGetActivityRecord, String?> = createField(DSL.name("gss_princ"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.gss_enc</code>.
     */
    val GSS_ENC: TableField<PgStatGetActivityRecord, Boolean?> = createField(DSL.name("gss_enc"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.leader_pid</code>.
     */
    val LEADER_PID: TableField<PgStatGetActivityRecord, Int?> = createField(DSL.name("leader_pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_activity.query_id</code>.
     */
    val QUERY_ID: TableField<PgStatGetActivityRecord, Long?> = createField(DSL.name("query_id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatGetActivityRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.INTEGER)
    ), null)
    private constructor(alias: Name, aliased: Table<PgStatGetActivityRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_activity</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_activity</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_get_activity</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_get_activity"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatGetActivity = PgStatGetActivity(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgStatGetActivity = PgStatGetActivity(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgStatGetActivity = PgStatGetActivity(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatGetActivity = PgStatGetActivity(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatGetActivity = PgStatGetActivity(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatGetActivity = PgStatGetActivity(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          pid: Int?
    ): PgStatGetActivity = PgStatGetActivity(DSL.name("pg_stat_get_activity"), null, arrayOf(
        DSL.value(pid, SQLDataType.INTEGER)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          pid: Field<Int?>
    ): PgStatGetActivity = PgStatGetActivity(DSL.name("pg_stat_get_activity"), null, arrayOf(
        pid
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
