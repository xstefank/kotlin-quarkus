/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.keys.PG_STATISTIC_RELID_ATT_INH_INDEX
import org.acme.generated.pg_catalog.tables.records.PgStatisticRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatistic(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatisticRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatisticRecord>?,
    aliased: Table<PgStatisticRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatisticRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_statistic</code>
         */
        val PG_STATISTIC: PgStatistic = PgStatistic()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatisticRecord> = PgStatisticRecord::class.java

    /**
     * The column <code>pg_catalog.pg_statistic.starelid</code>.
     */
    val STARELID: TableField<PgStatisticRecord, Long?> = createField(DSL.name("starelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staattnum</code>.
     */
    val STAATTNUM: TableField<PgStatisticRecord, Short?> = createField(DSL.name("staattnum"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stainherit</code>.
     */
    val STAINHERIT: TableField<PgStatisticRecord, Boolean?> = createField(DSL.name("stainherit"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanullfrac</code>.
     */
    val STANULLFRAC: TableField<PgStatisticRecord, Float?> = createField(DSL.name("stanullfrac"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stawidth</code>.
     */
    val STAWIDTH: TableField<PgStatisticRecord, Int?> = createField(DSL.name("stawidth"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stadistinct</code>.
     */
    val STADISTINCT: TableField<PgStatisticRecord, Float?> = createField(DSL.name("stadistinct"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind1</code>.
     */
    val STAKIND1: TableField<PgStatisticRecord, Short?> = createField(DSL.name("stakind1"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind2</code>.
     */
    val STAKIND2: TableField<PgStatisticRecord, Short?> = createField(DSL.name("stakind2"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind3</code>.
     */
    val STAKIND3: TableField<PgStatisticRecord, Short?> = createField(DSL.name("stakind3"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind4</code>.
     */
    val STAKIND4: TableField<PgStatisticRecord, Short?> = createField(DSL.name("stakind4"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind5</code>.
     */
    val STAKIND5: TableField<PgStatisticRecord, Short?> = createField(DSL.name("stakind5"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop1</code>.
     */
    val STAOP1: TableField<PgStatisticRecord, Long?> = createField(DSL.name("staop1"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop2</code>.
     */
    val STAOP2: TableField<PgStatisticRecord, Long?> = createField(DSL.name("staop2"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop3</code>.
     */
    val STAOP3: TableField<PgStatisticRecord, Long?> = createField(DSL.name("staop3"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop4</code>.
     */
    val STAOP4: TableField<PgStatisticRecord, Long?> = createField(DSL.name("staop4"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop5</code>.
     */
    val STAOP5: TableField<PgStatisticRecord, Long?> = createField(DSL.name("staop5"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll1</code>.
     */
    val STACOLL1: TableField<PgStatisticRecord, Long?> = createField(DSL.name("stacoll1"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll2</code>.
     */
    val STACOLL2: TableField<PgStatisticRecord, Long?> = createField(DSL.name("stacoll2"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll3</code>.
     */
    val STACOLL3: TableField<PgStatisticRecord, Long?> = createField(DSL.name("stacoll3"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll4</code>.
     */
    val STACOLL4: TableField<PgStatisticRecord, Long?> = createField(DSL.name("stacoll4"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll5</code>.
     */
    val STACOLL5: TableField<PgStatisticRecord, Long?> = createField(DSL.name("stacoll5"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers1</code>.
     */
    val STANUMBERS1: TableField<PgStatisticRecord, Array<Float?>?> = createField(DSL.name("stanumbers1"), SQLDataType.REAL.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers2</code>.
     */
    val STANUMBERS2: TableField<PgStatisticRecord, Array<Float?>?> = createField(DSL.name("stanumbers2"), SQLDataType.REAL.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers3</code>.
     */
    val STANUMBERS3: TableField<PgStatisticRecord, Array<Float?>?> = createField(DSL.name("stanumbers3"), SQLDataType.REAL.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers4</code>.
     */
    val STANUMBERS4: TableField<PgStatisticRecord, Array<Float?>?> = createField(DSL.name("stanumbers4"), SQLDataType.REAL.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers5</code>.
     */
    val STANUMBERS5: TableField<PgStatisticRecord, Array<Float?>?> = createField(DSL.name("stanumbers5"), SQLDataType.REAL.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues1</code>.
     */
    val STAVALUES1: TableField<PgStatisticRecord, Array<Any?>?> = createField(DSL.name("stavalues1"), SQLDataType.OTHER.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues2</code>.
     */
    val STAVALUES2: TableField<PgStatisticRecord, Array<Any?>?> = createField(DSL.name("stavalues2"), SQLDataType.OTHER.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues3</code>.
     */
    val STAVALUES3: TableField<PgStatisticRecord, Array<Any?>?> = createField(DSL.name("stavalues3"), SQLDataType.OTHER.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues4</code>.
     */
    val STAVALUES4: TableField<PgStatisticRecord, Array<Any?>?> = createField(DSL.name("stavalues4"), SQLDataType.OTHER.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues5</code>.
     */
    val STAVALUES5: TableField<PgStatisticRecord, Array<Any?>?> = createField(DSL.name("stavalues5"), SQLDataType.OTHER.array(), this, "")

    private constructor(alias: Name, aliased: Table<PgStatisticRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatisticRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatisticRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(): this(DSL.name("pg_statistic"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getPrimaryKey(): UniqueKey<PgStatisticRecord> = PG_STATISTIC_RELID_ATT_INH_INDEX
    override fun `as`(alias: String): PgStatistic = PgStatistic(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatistic = PgStatistic(alias, this)
    override fun `as`(alias: Table<*>): PgStatistic = PgStatistic(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatistic = PgStatistic(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatistic = PgStatistic(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatistic = PgStatistic(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatistic = PgStatistic(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatistic = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatistic = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatistic = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatistic = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatistic = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatistic = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatistic = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatistic = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatistic = where(DSL.notExists(select))
}
