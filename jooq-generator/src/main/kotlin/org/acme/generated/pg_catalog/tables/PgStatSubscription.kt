/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatSubscriptionRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatSubscription(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatSubscriptionRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatSubscriptionRecord>?,
    aliased: Table<PgStatSubscriptionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatSubscriptionRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_subscription" as  SELECT su.oid AS subid,
     su.subname,
     st.pid,
     st.relid,
     st.received_lsn,
     st.last_msg_send_time,
     st.last_msg_receipt_time,
     st.latest_end_lsn,
     st.latest_end_time
    FROM (pg_subscription su
      LEFT JOIN pg_stat_get_subscription(NULL::oid) st(subid, relid, pid, received_lsn, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time) ON ((st.subid = su.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_subscription</code>
         */
        val PG_STAT_SUBSCRIPTION: PgStatSubscription = PgStatSubscription()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatSubscriptionRecord> = PgStatSubscriptionRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_subscription.subid</code>.
     */
    val SUBID: TableField<PgStatSubscriptionRecord, Long?> = createField(DSL.name("subid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_subscription.subname</code>.
     */
    val SUBNAME: TableField<PgStatSubscriptionRecord, String?> = createField(DSL.name("subname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_subscription.pid</code>.
     */
    val PID: TableField<PgStatSubscriptionRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_subscription.relid</code>.
     */
    val RELID: TableField<PgStatSubscriptionRecord, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val RECEIVED_LSN: TableField<PgStatSubscriptionRecord, Any?> = createField(DSL.name("received_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_subscription.last_msg_send_time</code>.
     */
    val LAST_MSG_SEND_TIME: TableField<PgStatSubscriptionRecord, OffsetDateTime?> = createField(DSL.name("last_msg_send_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_subscription.last_msg_receipt_time</code>.
     */
    val LAST_MSG_RECEIPT_TIME: TableField<PgStatSubscriptionRecord, OffsetDateTime?> = createField(DSL.name("last_msg_receipt_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val LATEST_END_LSN: TableField<PgStatSubscriptionRecord, Any?> = createField(DSL.name("latest_end_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_subscription.latest_end_time</code>.
     */
    val LATEST_END_TIME: TableField<PgStatSubscriptionRecord, OffsetDateTime?> = createField(DSL.name("latest_end_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<PgStatSubscriptionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatSubscriptionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatSubscriptionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_subscription</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_subscription</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_subscription</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_subscription"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatSubscription = PgStatSubscription(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatSubscription = PgStatSubscription(alias, this)
    override fun `as`(alias: Table<*>): PgStatSubscription = PgStatSubscription(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatSubscription = PgStatSubscription(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatSubscription = PgStatSubscription(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatSubscription = PgStatSubscription(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatSubscription = PgStatSubscription(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatSubscription = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatSubscription = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatSubscription = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatSubscription = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatSubscription = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatSubscription = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatSubscription = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatSubscription = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatSubscription = where(DSL.notExists(select))
}
