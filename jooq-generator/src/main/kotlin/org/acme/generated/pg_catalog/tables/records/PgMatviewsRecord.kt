/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgMatviews
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgMatviewsRecord() : TableRecordImpl<PgMatviewsRecord>(PgMatviews.PG_MATVIEWS) {

    open var schemaname: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var matviewname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var matviewowner: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var tablespace: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var hasindexes: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var ispopulated: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var definition: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    /**
     * Create a detached, initialised PgMatviewsRecord
     */
    constructor(schemaname: String? = null, matviewname: String? = null, matviewowner: String? = null, tablespace: String? = null, hasindexes: Boolean? = null, ispopulated: Boolean? = null, definition: String? = null): this() {
        this.schemaname = schemaname
        this.matviewname = matviewname
        this.matviewowner = matviewowner
        this.tablespace = tablespace
        this.hasindexes = hasindexes
        this.ispopulated = ispopulated
        this.definition = definition
        resetChangedOnNotNull()
    }
}
