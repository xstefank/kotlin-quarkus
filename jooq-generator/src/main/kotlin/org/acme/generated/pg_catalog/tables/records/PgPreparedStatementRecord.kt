/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.tables.PgPreparedStatement
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgPreparedStatementRecord() : TableRecordImpl<PgPreparedStatementRecord>(PgPreparedStatement.PG_PREPARED_STATEMENT) {

    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var statement: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var prepareTime: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    open var parameterTypes: Array<Any?>?
        set(value): Unit = set(3, value)
        get(): Array<Any?>? = get(3) as Array<Any?>?

    open var fromSql: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var genericPlans: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var customPlans: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    /**
     * Create a detached, initialised PgPreparedStatementRecord
     */
    constructor(name: String? = null, statement: String? = null, prepareTime: OffsetDateTime? = null, parameterTypes: Array<Any?>? = null, fromSql: Boolean? = null, genericPlans: Long? = null, customPlans: Long? = null): this() {
        this.name = name
        this.statement = statement
        this.prepareTime = prepareTime
        this.parameterTypes = parameterTypes
        this.fromSql = fromSql
        this.genericPlans = genericPlans
        this.customPlans = customPlans
        resetChangedOnNotNull()
    }
}
