/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.tables.PgStatDatabase
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatDatabaseRecord() : TableRecordImpl<PgStatDatabaseRecord>(PgStatDatabase.PG_STAT_DATABASE) {

    open var datid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var datname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var numbackends: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var xactCommit: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var xactRollback: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var blksRead: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var blksHit: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    open var tupReturned: Long?
        set(value): Unit = set(7, value)
        get(): Long? = get(7) as Long?

    open var tupFetched: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    open var tupInserted: Long?
        set(value): Unit = set(9, value)
        get(): Long? = get(9) as Long?

    open var tupUpdated: Long?
        set(value): Unit = set(10, value)
        get(): Long? = get(10) as Long?

    open var tupDeleted: Long?
        set(value): Unit = set(11, value)
        get(): Long? = get(11) as Long?

    open var conflicts: Long?
        set(value): Unit = set(12, value)
        get(): Long? = get(12) as Long?

    open var tempFiles: Long?
        set(value): Unit = set(13, value)
        get(): Long? = get(13) as Long?

    open var tempBytes: Long?
        set(value): Unit = set(14, value)
        get(): Long? = get(14) as Long?

    open var deadlocks: Long?
        set(value): Unit = set(15, value)
        get(): Long? = get(15) as Long?

    open var checksumFailures: Long?
        set(value): Unit = set(16, value)
        get(): Long? = get(16) as Long?

    open var checksumLastFailure: OffsetDateTime?
        set(value): Unit = set(17, value)
        get(): OffsetDateTime? = get(17) as OffsetDateTime?

    open var blkReadTime: Double?
        set(value): Unit = set(18, value)
        get(): Double? = get(18) as Double?

    open var blkWriteTime: Double?
        set(value): Unit = set(19, value)
        get(): Double? = get(19) as Double?

    open var sessionTime: Double?
        set(value): Unit = set(20, value)
        get(): Double? = get(20) as Double?

    open var activeTime: Double?
        set(value): Unit = set(21, value)
        get(): Double? = get(21) as Double?

    open var idleInTransactionTime: Double?
        set(value): Unit = set(22, value)
        get(): Double? = get(22) as Double?

    open var sessions: Long?
        set(value): Unit = set(23, value)
        get(): Long? = get(23) as Long?

    open var sessionsAbandoned: Long?
        set(value): Unit = set(24, value)
        get(): Long? = get(24) as Long?

    open var sessionsFatal: Long?
        set(value): Unit = set(25, value)
        get(): Long? = get(25) as Long?

    open var sessionsKilled: Long?
        set(value): Unit = set(26, value)
        get(): Long? = get(26) as Long?

    open var statsReset: OffsetDateTime?
        set(value): Unit = set(27, value)
        get(): OffsetDateTime? = get(27) as OffsetDateTime?

    /**
     * Create a detached, initialised PgStatDatabaseRecord
     */
    constructor(datid: Long? = null, datname: String? = null, numbackends: Int? = null, xactCommit: Long? = null, xactRollback: Long? = null, blksRead: Long? = null, blksHit: Long? = null, tupReturned: Long? = null, tupFetched: Long? = null, tupInserted: Long? = null, tupUpdated: Long? = null, tupDeleted: Long? = null, conflicts: Long? = null, tempFiles: Long? = null, tempBytes: Long? = null, deadlocks: Long? = null, checksumFailures: Long? = null, checksumLastFailure: OffsetDateTime? = null, blkReadTime: Double? = null, blkWriteTime: Double? = null, sessionTime: Double? = null, activeTime: Double? = null, idleInTransactionTime: Double? = null, sessions: Long? = null, sessionsAbandoned: Long? = null, sessionsFatal: Long? = null, sessionsKilled: Long? = null, statsReset: OffsetDateTime? = null): this() {
        this.datid = datid
        this.datname = datname
        this.numbackends = numbackends
        this.xactCommit = xactCommit
        this.xactRollback = xactRollback
        this.blksRead = blksRead
        this.blksHit = blksHit
        this.tupReturned = tupReturned
        this.tupFetched = tupFetched
        this.tupInserted = tupInserted
        this.tupUpdated = tupUpdated
        this.tupDeleted = tupDeleted
        this.conflicts = conflicts
        this.tempFiles = tempFiles
        this.tempBytes = tempBytes
        this.deadlocks = deadlocks
        this.checksumFailures = checksumFailures
        this.checksumLastFailure = checksumLastFailure
        this.blkReadTime = blkReadTime
        this.blkWriteTime = blkWriteTime
        this.sessionTime = sessionTime
        this.activeTime = activeTime
        this.idleInTransactionTime = idleInTransactionTime
        this.sessions = sessions
        this.sessionsAbandoned = sessionsAbandoned
        this.sessionsFatal = sessionsFatal
        this.sessionsKilled = sessionsKilled
        this.statsReset = statsReset
        resetChangedOnNotNull()
    }
}
