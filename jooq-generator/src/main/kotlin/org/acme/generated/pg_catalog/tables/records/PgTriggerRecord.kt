/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgTrigger
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgTriggerRecord() : UpdatableRecordImpl<PgTriggerRecord>(PgTrigger.PG_TRIGGER) {

    open var oid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var tgrelid: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var tgparentid: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var tgname: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var tgfoid: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var tgtype: Short?
        set(value): Unit = set(5, value)
        get(): Short? = get(5) as Short?

    open var tgenabled: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var tgisinternal: Boolean?
        set(value): Unit = set(7, value)
        get(): Boolean? = get(7) as Boolean?

    open var tgconstrrelid: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    open var tgconstrindid: Long?
        set(value): Unit = set(9, value)
        get(): Long? = get(9) as Long?

    open var tgconstraint: Long?
        set(value): Unit = set(10, value)
        get(): Long? = get(10) as Long?

    open var tgdeferrable: Boolean?
        set(value): Unit = set(11, value)
        get(): Boolean? = get(11) as Boolean?

    open var tginitdeferred: Boolean?
        set(value): Unit = set(12, value)
        get(): Boolean? = get(12) as Boolean?

    open var tgnargs: Short?
        set(value): Unit = set(13, value)
        get(): Short? = get(13) as Short?

    open var tgattr: Array<Any?>?
        set(value): Unit = set(14, value)
        get(): Array<Any?>? = get(14) as Array<Any?>?

    open var tgargs: ByteArray?
        set(value): Unit = set(15, value)
        get(): ByteArray? = get(15) as ByteArray?

    open var tgqual: Any?
        set(value): Unit = set(16, value)
        get(): Any? = get(16) as Any?

    open var tgoldtable: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var tgnewtable: String?
        set(value): Unit = set(18, value)
        get(): String? = get(18) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised PgTriggerRecord
     */
    constructor(oid: Long? = null, tgrelid: Long? = null, tgparentid: Long? = null, tgname: String? = null, tgfoid: Long? = null, tgtype: Short? = null, tgenabled: String? = null, tgisinternal: Boolean? = null, tgconstrrelid: Long? = null, tgconstrindid: Long? = null, tgconstraint: Long? = null, tgdeferrable: Boolean? = null, tginitdeferred: Boolean? = null, tgnargs: Short? = null, tgattr: Array<Any?>? = null, tgargs: ByteArray? = null, tgqual: Any? = null, tgoldtable: String? = null, tgnewtable: String? = null): this() {
        this.oid = oid
        this.tgrelid = tgrelid
        this.tgparentid = tgparentid
        this.tgname = tgname
        this.tgfoid = tgfoid
        this.tgtype = tgtype
        this.tgenabled = tgenabled
        this.tgisinternal = tgisinternal
        this.tgconstrrelid = tgconstrrelid
        this.tgconstrindid = tgconstrindid
        this.tgconstraint = tgconstraint
        this.tgdeferrable = tgdeferrable
        this.tginitdeferred = tginitdeferred
        this.tgnargs = tgnargs
        this.tgattr = tgattr
        this.tgargs = tgargs
        this.tgqual = tgqual
        this.tgoldtable = tgoldtable
        this.tgnewtable = tgnewtable
        resetChangedOnNotNull()
    }
}
