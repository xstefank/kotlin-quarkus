/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatsExtRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatsExt(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatsExtRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatsExtRecord>?,
    aliased: Table<PgStatsExtRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatsExtRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stats_ext" as  SELECT cn.nspname AS schemaname,
      c.relname AS tablename,
      sn.nspname AS statistics_schemaname,
      s.stxname AS statistics_name,
      pg_get_userbyid(s.stxowner) AS statistics_owner,
      ( SELECT array_agg(a.attname ORDER BY a.attnum) AS array_agg
             FROM (unnest(s.stxkeys) k(k)
               JOIN pg_attribute a ON (((a.attrelid = s.stxrelid) AND (a.attnum = k.k))))) AS attnames,
      pg_get_statisticsobjdef_expressions(s.oid) AS exprs,
      s.stxkind AS kinds,
      sd.stxdndistinct AS n_distinct,
      sd.stxddependencies AS dependencies,
      m.most_common_vals,
      m.most_common_val_nulls,
      m.most_common_freqs,
      m.most_common_base_freqs
     FROM (((((pg_statistic_ext s
       JOIN pg_class c ON ((c.oid = s.stxrelid)))
       JOIN pg_statistic_ext_data sd ON ((s.oid = sd.stxoid)))
       LEFT JOIN pg_namespace cn ON ((cn.oid = c.relnamespace)))
       LEFT JOIN pg_namespace sn ON ((sn.oid = s.stxnamespace)))
       LEFT JOIN LATERAL ( SELECT array_agg(pg_mcv_list_items."values") AS most_common_vals,
              array_agg(pg_mcv_list_items.nulls) AS most_common_val_nulls,
              array_agg(pg_mcv_list_items.frequency) AS most_common_freqs,
              array_agg(pg_mcv_list_items.base_frequency) AS most_common_base_freqs
             FROM pg_mcv_list_items(sd.stxdmcv) pg_mcv_list_items(index, "values", nulls, frequency, base_frequency)) m ON ((sd.stxdmcv IS NOT NULL)))
    WHERE (pg_has_role(c.relowner, 'USAGE'::text) AND ((c.relrowsecurity = false) OR (NOT row_security_active(c.oid))));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stats_ext</code>
         */
        val PG_STATS_EXT: PgStatsExt = PgStatsExt()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatsExtRecord> = PgStatsExtRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stats_ext.schemaname</code>.
     */
    val SCHEMANAME: TableField<PgStatsExtRecord, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.tablename</code>.
     */
    val TABLENAME: TableField<PgStatsExtRecord, String?> = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_schemaname</code>.
     */
    val STATISTICS_SCHEMANAME: TableField<PgStatsExtRecord, String?> = createField(DSL.name("statistics_schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_name</code>.
     */
    val STATISTICS_NAME: TableField<PgStatsExtRecord, String?> = createField(DSL.name("statistics_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_owner</code>.
     */
    val STATISTICS_OWNER: TableField<PgStatsExtRecord, String?> = createField(DSL.name("statistics_owner"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.attnames</code>.
     */
    val ATTNAMES: TableField<PgStatsExtRecord, Array<String?>?> = createField(DSL.name("attnames"), SQLDataType.VARCHAR.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.exprs</code>.
     */
    val EXPRS: TableField<PgStatsExtRecord, Array<String?>?> = createField(DSL.name("exprs"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.kinds</code>.
     */
    val KINDS: TableField<PgStatsExtRecord, Array<String?>?> = createField(DSL.name("kinds"), SQLDataType.CHAR.array(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val N_DISTINCT: TableField<PgStatsExtRecord, Any?> = createField(DSL.name("n_distinct"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_ndistinct\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val DEPENDENCIES: TableField<PgStatsExtRecord, Any?> = createField(DSL.name("dependencies"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_dependencies\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_vals</code>.
     */
    val MOST_COMMON_VALS: TableField<PgStatsExtRecord, Array<String?>?> = createField(DSL.name("most_common_vals"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_val_nulls</code>.
     */
    val MOST_COMMON_VAL_NULLS: TableField<PgStatsExtRecord, Array<Boolean?>?> = createField(DSL.name("most_common_val_nulls"), SQLDataType.BOOLEAN.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_freqs</code>.
     */
    val MOST_COMMON_FREQS: TableField<PgStatsExtRecord, Array<Double?>?> = createField(DSL.name("most_common_freqs"), SQLDataType.FLOAT.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_base_freqs</code>.
     */
    val MOST_COMMON_BASE_FREQS: TableField<PgStatsExtRecord, Array<Double?>?> = createField(DSL.name("most_common_base_freqs"), SQLDataType.FLOAT.array(), this, "")

    private constructor(alias: Name, aliased: Table<PgStatsExtRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatsExtRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatsExtRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(): this(DSL.name("pg_stats_ext"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatsExt = PgStatsExt(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatsExt = PgStatsExt(alias, this)
    override fun `as`(alias: Table<*>): PgStatsExt = PgStatsExt(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatsExt = PgStatsExt(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatsExt = PgStatsExt(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatsExt = PgStatsExt(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatsExt = PgStatsExt(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatsExt = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatsExt = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatsExt = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatsExt = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatsExt = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatsExt = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatsExt = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatsExt = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatsExt = where(DSL.notExists(select))
}
