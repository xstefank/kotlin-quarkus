/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatGetWalSendersRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetWalSenders(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatGetWalSendersRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatGetWalSendersRecord>?,
    aliased: Table<PgStatGetWalSendersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatGetWalSendersRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_get_wal_senders</code>
         */
        val PG_STAT_GET_WAL_SENDERS: PgStatGetWalSenders = PgStatGetWalSenders()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatGetWalSendersRecord> = PgStatGetWalSendersRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.pid</code>.
     */
    val PID: TableField<PgStatGetWalSendersRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.state</code>.
     */
    val STATE: TableField<PgStatGetWalSendersRecord, String?> = createField(DSL.name("state"), SQLDataType.CLOB, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val SENT_LSN: TableField<PgStatGetWalSendersRecord, Any?> = createField(DSL.name("sent_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val WRITE_LSN: TableField<PgStatGetWalSendersRecord, Any?> = createField(DSL.name("write_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val FLUSH_LSN: TableField<PgStatGetWalSendersRecord, Any?> = createField(DSL.name("flush_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val REPLAY_LSN: TableField<PgStatGetWalSendersRecord, Any?> = createField(DSL.name("replay_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.write_lag</code>.
     */
    val WRITE_LAG: TableField<PgStatGetWalSendersRecord, YearToSecond?> = createField(DSL.name("write_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.flush_lag</code>.
     */
    val FLUSH_LAG: TableField<PgStatGetWalSendersRecord, YearToSecond?> = createField(DSL.name("flush_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.replay_lag</code>.
     */
    val REPLAY_LAG: TableField<PgStatGetWalSendersRecord, YearToSecond?> = createField(DSL.name("replay_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.sync_priority</code>.
     */
    val SYNC_PRIORITY: TableField<PgStatGetWalSendersRecord, Int?> = createField(DSL.name("sync_priority"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.sync_state</code>.
     */
    val SYNC_STATE: TableField<PgStatGetWalSendersRecord, String?> = createField(DSL.name("sync_state"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_get_wal_senders.reply_time</code>.
     */
    val REPLY_TIME: TableField<PgStatGetWalSendersRecord, OffsetDateTime?> = createField(DSL.name("reply_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<PgStatGetWalSendersRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<PgStatGetWalSendersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_wal_senders</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_wal_senders</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_get_wal_senders</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_get_wal_senders"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatGetWalSenders = PgStatGetWalSenders(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgStatGetWalSenders = PgStatGetWalSenders(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgStatGetWalSenders = PgStatGetWalSenders(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatGetWalSenders = PgStatGetWalSenders(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatGetWalSenders = PgStatGetWalSenders(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatGetWalSenders = PgStatGetWalSenders(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgStatGetWalSenders = PgStatGetWalSenders(DSL.name("pg_stat_get_wal_senders"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
