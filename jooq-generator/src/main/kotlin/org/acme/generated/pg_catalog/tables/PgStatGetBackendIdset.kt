/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatGetBackendIdsetRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetBackendIdset(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatGetBackendIdsetRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatGetBackendIdsetRecord>?,
    aliased: Table<PgStatGetBackendIdsetRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatGetBackendIdsetRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_get_backend_idset</code>
         */
        val PG_STAT_GET_BACKEND_IDSET: PgStatGetBackendIdset = PgStatGetBackendIdset()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatGetBackendIdsetRecord> = PgStatGetBackendIdsetRecord::class.java

    /**
     * The column
     * <code>pg_catalog.pg_stat_get_backend_idset.pg_stat_get_backend_idset</code>.
     */
    val PG_STAT_GET_BACKEND_IDSET_: TableField<PgStatGetBackendIdsetRecord, Int?> = createField(DSL.name("pg_stat_get_backend_idset"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<PgStatGetBackendIdsetRecord>?): this(alias, null, null, null, aliased, arrayOf(
    ), null)
    private constructor(alias: Name, aliased: Table<PgStatGetBackendIdsetRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_backend_idset</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_backend_idset</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_get_backend_idset</code> table
     * reference
     */
    constructor(): this(DSL.name("pg_stat_get_backend_idset"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatGetBackendIdset = PgStatGetBackendIdset(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgStatGetBackendIdset = PgStatGetBackendIdset(alias, this, parameters)
    override fun `as`(alias: Table<*>): PgStatGetBackendIdset = PgStatGetBackendIdset(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatGetBackendIdset = PgStatGetBackendIdset(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatGetBackendIdset = PgStatGetBackendIdset(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatGetBackendIdset = PgStatGetBackendIdset(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgStatGetBackendIdset = PgStatGetBackendIdset(DSL.name("pg_stat_get_backend_idset"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
