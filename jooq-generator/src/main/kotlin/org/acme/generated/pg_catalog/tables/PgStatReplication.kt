/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatReplicationRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatReplication(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatReplicationRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatReplicationRecord>?,
    aliased: Table<PgStatReplicationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatReplicationRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_replication" as  SELECT s.pid,
     s.usesysid,
     u.rolname AS usename,
     s.application_name,
     s.client_addr,
     s.client_hostname,
     s.client_port,
     s.backend_start,
     s.backend_xmin,
     w.state,
     w.sent_lsn,
     w.write_lsn,
     w.flush_lsn,
     w.replay_lsn,
     w.write_lag,
     w.flush_lag,
     w.replay_lag,
     w.sync_priority,
     w.sync_state,
     w.reply_time
    FROM ((pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, leader_pid, query_id)
      JOIN pg_stat_get_wal_senders() w(pid, state, sent_lsn, write_lsn, flush_lsn, replay_lsn, write_lag, flush_lag, replay_lag, sync_priority, sync_state, reply_time) ON ((s.pid = w.pid)))
      LEFT JOIN pg_authid u ON ((s.usesysid = u.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stat_replication</code>
         */
        val PG_STAT_REPLICATION: PgStatReplication = PgStatReplication()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatReplicationRecord> = PgStatReplicationRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_replication.pid</code>.
     */
    val PID: TableField<PgStatReplicationRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.usesysid</code>.
     */
    val USESYSID: TableField<PgStatReplicationRecord, Long?> = createField(DSL.name("usesysid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.usename</code>.
     */
    val USENAME: TableField<PgStatReplicationRecord, String?> = createField(DSL.name("usename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.application_name</code>.
     */
    val APPLICATION_NAME: TableField<PgStatReplicationRecord, String?> = createField(DSL.name("application_name"), SQLDataType.CLOB, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val CLIENT_ADDR: TableField<PgStatReplicationRecord, Any?> = createField(DSL.name("client_addr"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.client_hostname</code>.
     */
    val CLIENT_HOSTNAME: TableField<PgStatReplicationRecord, String?> = createField(DSL.name("client_hostname"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.client_port</code>.
     */
    val CLIENT_PORT: TableField<PgStatReplicationRecord, Int?> = createField(DSL.name("client_port"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.backend_start</code>.
     */
    val BACKEND_START: TableField<PgStatReplicationRecord, OffsetDateTime?> = createField(DSL.name("backend_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.backend_xmin</code>.
     */
    val BACKEND_XMIN: TableField<PgStatReplicationRecord, Long?> = createField(DSL.name("backend_xmin"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.state</code>.
     */
    val STATE: TableField<PgStatReplicationRecord, String?> = createField(DSL.name("state"), SQLDataType.CLOB, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val SENT_LSN: TableField<PgStatReplicationRecord, Any?> = createField(DSL.name("sent_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val WRITE_LSN: TableField<PgStatReplicationRecord, Any?> = createField(DSL.name("write_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val FLUSH_LSN: TableField<PgStatReplicationRecord, Any?> = createField(DSL.name("flush_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val REPLAY_LSN: TableField<PgStatReplicationRecord, Any?> = createField(DSL.name("replay_lsn"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.write_lag</code>.
     */
    val WRITE_LAG: TableField<PgStatReplicationRecord, YearToSecond?> = createField(DSL.name("write_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.flush_lag</code>.
     */
    val FLUSH_LAG: TableField<PgStatReplicationRecord, YearToSecond?> = createField(DSL.name("flush_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.replay_lag</code>.
     */
    val REPLAY_LAG: TableField<PgStatReplicationRecord, YearToSecond?> = createField(DSL.name("replay_lag"), SQLDataType.INTERVAL, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.sync_priority</code>.
     */
    val SYNC_PRIORITY: TableField<PgStatReplicationRecord, Int?> = createField(DSL.name("sync_priority"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.sync_state</code>.
     */
    val SYNC_STATE: TableField<PgStatReplicationRecord, String?> = createField(DSL.name("sync_state"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_replication.reply_time</code>.
     */
    val REPLY_TIME: TableField<PgStatReplicationRecord, OffsetDateTime?> = createField(DSL.name("reply_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<PgStatReplicationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatReplicationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatReplicationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_replication</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_replication</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_replication</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_replication"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatReplication = PgStatReplication(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatReplication = PgStatReplication(alias, this)
    override fun `as`(alias: Table<*>): PgStatReplication = PgStatReplication(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatReplication = PgStatReplication(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatReplication = PgStatReplication(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatReplication = PgStatReplication(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatReplication = PgStatReplication(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatReplication = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatReplication = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatReplication = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatReplication = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatReplication = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatReplication = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatReplication = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatReplication = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatReplication = where(DSL.notExists(select))
}
