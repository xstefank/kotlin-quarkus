/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgGetCatalogForeignKeys
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgGetCatalogForeignKeysRecord() : TableRecordImpl<PgGetCatalogForeignKeysRecord>(PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS) {

    open var fktable: Any?
        set(value): Unit = set(0, value)
        get(): Any? = get(0) as Any?

    open var fkcols: Array<String?>?
        set(value): Unit = set(1, value)
        get(): Array<String?>? = get(1) as Array<String?>?

    open var pktable: Any?
        set(value): Unit = set(2, value)
        get(): Any? = get(2) as Any?

    open var pkcols: Array<String?>?
        set(value): Unit = set(3, value)
        get(): Array<String?>? = get(3) as Array<String?>?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsArray")
    open var isArray: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsOpt")
    open var isOpt: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    /**
     * Create a detached, initialised PgGetCatalogForeignKeysRecord
     */
    constructor(fktable: Any? = null, fkcols: Array<String?>? = null, pktable: Any? = null, pkcols: Array<String?>? = null, isArray: Boolean? = null, isOpt: Boolean? = null): this() {
        this.fktable = fktable
        this.fkcols = fkcols
        this.pktable = pktable
        this.pkcols = pkcols
        this.isArray = isArray
        this.isOpt = isOpt
        resetChangedOnNotNull()
    }
}
