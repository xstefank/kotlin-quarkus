/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgHbaFileRulesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgHbaFileRules(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgHbaFileRulesRecord>?,
    parentPath: InverseForeignKey<out Record, PgHbaFileRulesRecord>?,
    aliased: Table<PgHbaFileRulesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgHbaFileRulesRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_hba_file_rules" as  SELECT a.line_number,
     a.type,
     a.database,
     a.user_name,
     a.address,
     a.netmask,
     a.auth_method,
     a.options,
     a.error
    FROM pg_hba_file_rules() a(line_number, type, database, user_name, address, netmask, auth_method, options, error);
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_hba_file_rules</code>
         */
        val PG_HBA_FILE_RULES: PgHbaFileRules = PgHbaFileRules()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgHbaFileRulesRecord> = PgHbaFileRulesRecord::class.java

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.line_number</code>.
     */
    val LINE_NUMBER: TableField<PgHbaFileRulesRecord, Int?> = createField(DSL.name("line_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.type</code>.
     */
    val TYPE: TableField<PgHbaFileRulesRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.database</code>.
     */
    val DATABASE: TableField<PgHbaFileRulesRecord, Array<String?>?> = createField(DSL.name("database"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.user_name</code>.
     */
    val USER_NAME: TableField<PgHbaFileRulesRecord, Array<String?>?> = createField(DSL.name("user_name"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.address</code>.
     */
    val ADDRESS: TableField<PgHbaFileRulesRecord, String?> = createField(DSL.name("address"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.netmask</code>.
     */
    val NETMASK: TableField<PgHbaFileRulesRecord, String?> = createField(DSL.name("netmask"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.auth_method</code>.
     */
    val AUTH_METHOD: TableField<PgHbaFileRulesRecord, String?> = createField(DSL.name("auth_method"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.options</code>.
     */
    val OPTIONS: TableField<PgHbaFileRulesRecord, Array<String?>?> = createField(DSL.name("options"), SQLDataType.CLOB.array(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.error</code>.
     */
    val ERROR: TableField<PgHbaFileRulesRecord, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PgHbaFileRulesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgHbaFileRulesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgHbaFileRulesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_hba_file_rules</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_hba_file_rules</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_hba_file_rules</code> table reference
     */
    constructor(): this(DSL.name("pg_hba_file_rules"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgHbaFileRules = PgHbaFileRules(DSL.name(alias), this)
    override fun `as`(alias: Name): PgHbaFileRules = PgHbaFileRules(alias, this)
    override fun `as`(alias: Table<*>): PgHbaFileRules = PgHbaFileRules(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgHbaFileRules = PgHbaFileRules(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgHbaFileRules = PgHbaFileRules(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgHbaFileRules = PgHbaFileRules(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgHbaFileRules = PgHbaFileRules(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgHbaFileRules = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgHbaFileRules = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgHbaFileRules = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgHbaFileRules = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgHbaFileRules = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgHbaFileRules = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgHbaFileRules = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgHbaFileRules = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgHbaFileRules = where(DSL.notExists(select))
}
