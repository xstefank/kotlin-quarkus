/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgTablespace
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgTablespaceRecord() : UpdatableRecordImpl<PgTablespaceRecord>(PgTablespace.PG_TABLESPACE) {

    open var oid: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var spcname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var spcowner: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var spcacl: Array<String?>?
        set(value): Unit = set(3, value)
        get(): Array<String?>? = get(3) as Array<String?>?

    open var spcoptions: Array<String?>?
        set(value): Unit = set(4, value)
        get(): Array<String?>? = get(4) as Array<String?>?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised PgTablespaceRecord
     */
    constructor(oid: Long? = null, spcname: String? = null, spcowner: Long? = null, spcacl: Array<String?>? = null, spcoptions: Array<String?>? = null): this() {
        this.oid = oid
        this.spcname = spcname
        this.spcowner = spcowner
        this.spcacl = spcacl
        this.spcoptions = spcoptions
        resetChangedOnNotNull()
    }
}
