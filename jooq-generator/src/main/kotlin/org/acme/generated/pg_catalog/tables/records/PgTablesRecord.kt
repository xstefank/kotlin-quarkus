/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables.records


import org.acme.generated.pg_catalog.tables.PgTables
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgTablesRecord() : TableRecordImpl<PgTablesRecord>(PgTables.PG_TABLES) {

    open var schemaname: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tablename: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableowner: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var tablespace: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var hasindexes: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var hasrules: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var hastriggers: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    open var rowsecurity: Boolean?
        set(value): Unit = set(7, value)
        get(): Boolean? = get(7) as Boolean?

    /**
     * Create a detached, initialised PgTablesRecord
     */
    constructor(schemaname: String? = null, tablename: String? = null, tableowner: String? = null, tablespace: String? = null, hasindexes: Boolean? = null, hasrules: Boolean? = null, hastriggers: Boolean? = null, rowsecurity: Boolean? = null): this() {
        this.schemaname = schemaname
        this.tablename = tablename
        this.tableowner = tableowner
        this.tablespace = tablespace
        this.hasindexes = hasindexes
        this.hasrules = hasrules
        this.hastriggers = hastriggers
        this.rowsecurity = rowsecurity
        resetChangedOnNotNull()
    }
}
