/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatDatabaseRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatDatabase(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatDatabaseRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatDatabaseRecord>?,
    aliased: Table<PgStatDatabaseRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatDatabaseRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_database" as  SELECT d.oid AS datid,
     d.datname,
         CASE
             WHEN (d.oid = (0)::oid) THEN 0
             ELSE pg_stat_get_db_numbackends(d.oid)
         END AS numbackends,
     pg_stat_get_db_xact_commit(d.oid) AS xact_commit,
     pg_stat_get_db_xact_rollback(d.oid) AS xact_rollback,
     (pg_stat_get_db_blocks_fetched(d.oid) - pg_stat_get_db_blocks_hit(d.oid)) AS blks_read,
     pg_stat_get_db_blocks_hit(d.oid) AS blks_hit,
     pg_stat_get_db_tuples_returned(d.oid) AS tup_returned,
     pg_stat_get_db_tuples_fetched(d.oid) AS tup_fetched,
     pg_stat_get_db_tuples_inserted(d.oid) AS tup_inserted,
     pg_stat_get_db_tuples_updated(d.oid) AS tup_updated,
     pg_stat_get_db_tuples_deleted(d.oid) AS tup_deleted,
     pg_stat_get_db_conflict_all(d.oid) AS conflicts,
     pg_stat_get_db_temp_files(d.oid) AS temp_files,
     pg_stat_get_db_temp_bytes(d.oid) AS temp_bytes,
     pg_stat_get_db_deadlocks(d.oid) AS deadlocks,
     pg_stat_get_db_checksum_failures(d.oid) AS checksum_failures,
     pg_stat_get_db_checksum_last_failure(d.oid) AS checksum_last_failure,
     pg_stat_get_db_blk_read_time(d.oid) AS blk_read_time,
     pg_stat_get_db_blk_write_time(d.oid) AS blk_write_time,
     pg_stat_get_db_session_time(d.oid) AS session_time,
     pg_stat_get_db_active_time(d.oid) AS active_time,
     pg_stat_get_db_idle_in_transaction_time(d.oid) AS idle_in_transaction_time,
     pg_stat_get_db_sessions(d.oid) AS sessions,
     pg_stat_get_db_sessions_abandoned(d.oid) AS sessions_abandoned,
     pg_stat_get_db_sessions_fatal(d.oid) AS sessions_fatal,
     pg_stat_get_db_sessions_killed(d.oid) AS sessions_killed,
     pg_stat_get_db_stat_reset_time(d.oid) AS stats_reset
    FROM ( SELECT 0 AS oid,
             NULL::name AS datname
         UNION ALL
          SELECT pg_database.oid,
             pg_database.datname
            FROM pg_database) d;
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stat_database</code>
         */
        val PG_STAT_DATABASE: PgStatDatabase = PgStatDatabase()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatDatabaseRecord> = PgStatDatabaseRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_database.datid</code>.
     */
    val DATID: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.datname</code>.
     */
    val DATNAME: TableField<PgStatDatabaseRecord, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.numbackends</code>.
     */
    val NUMBACKENDS: TableField<PgStatDatabaseRecord, Int?> = createField(DSL.name("numbackends"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_commit</code>.
     */
    val XACT_COMMIT: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("xact_commit"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_rollback</code>.
     */
    val XACT_ROLLBACK: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("xact_rollback"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_read</code>.
     */
    val BLKS_READ: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("blks_read"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_hit</code>.
     */
    val BLKS_HIT: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("blks_hit"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_returned</code>.
     */
    val TUP_RETURNED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("tup_returned"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_fetched</code>.
     */
    val TUP_FETCHED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("tup_fetched"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_inserted</code>.
     */
    val TUP_INSERTED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("tup_inserted"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_updated</code>.
     */
    val TUP_UPDATED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("tup_updated"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_deleted</code>.
     */
    val TUP_DELETED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("tup_deleted"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.conflicts</code>.
     */
    val CONFLICTS: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("conflicts"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_files</code>.
     */
    val TEMP_FILES: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("temp_files"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_bytes</code>.
     */
    val TEMP_BYTES: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("temp_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.deadlocks</code>.
     */
    val DEADLOCKS: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("deadlocks"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.checksum_failures</code>.
     */
    val CHECKSUM_FAILURES: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("checksum_failures"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_database.checksum_last_failure</code>.
     */
    val CHECKSUM_LAST_FAILURE: TableField<PgStatDatabaseRecord, OffsetDateTime?> = createField(DSL.name("checksum_last_failure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_read_time</code>.
     */
    val BLK_READ_TIME: TableField<PgStatDatabaseRecord, Double?> = createField(DSL.name("blk_read_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_write_time</code>.
     */
    val BLK_WRITE_TIME: TableField<PgStatDatabaseRecord, Double?> = createField(DSL.name("blk_write_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.session_time</code>.
     */
    val SESSION_TIME: TableField<PgStatDatabaseRecord, Double?> = createField(DSL.name("session_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.active_time</code>.
     */
    val ACTIVE_TIME: TableField<PgStatDatabaseRecord, Double?> = createField(DSL.name("active_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_database.idle_in_transaction_time</code>.
     */
    val IDLE_IN_TRANSACTION_TIME: TableField<PgStatDatabaseRecord, Double?> = createField(DSL.name("idle_in_transaction_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.sessions</code>.
     */
    val SESSIONS: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("sessions"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.sessions_abandoned</code>.
     */
    val SESSIONS_ABANDONED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("sessions_abandoned"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.sessions_fatal</code>.
     */
    val SESSIONS_FATAL: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("sessions_fatal"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.sessions_killed</code>.
     */
    val SESSIONS_KILLED: TableField<PgStatDatabaseRecord, Long?> = createField(DSL.name("sessions_killed"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.stats_reset</code>.
     */
    val STATS_RESET: TableField<PgStatDatabaseRecord, OffsetDateTime?> = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<PgStatDatabaseRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatDatabaseRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatDatabaseRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_database</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_database"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatDatabase = PgStatDatabase(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatDatabase = PgStatDatabase(alias, this)
    override fun `as`(alias: Table<*>): PgStatDatabase = PgStatDatabase(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatDatabase = PgStatDatabase(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatDatabase = PgStatDatabase(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatDatabase = PgStatDatabase(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatDatabase = PgStatDatabase(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatDatabase = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatDatabase = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatDatabase = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatDatabase = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatDatabase = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatDatabase = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatDatabase = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatDatabase = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatDatabase = where(DSL.notExists(select))
}
