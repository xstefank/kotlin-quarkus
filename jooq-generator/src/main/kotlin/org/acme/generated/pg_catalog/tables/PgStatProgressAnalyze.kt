/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgStatProgressAnalyzeRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressAnalyze(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgStatProgressAnalyzeRecord>?,
    parentPath: InverseForeignKey<out Record, PgStatProgressAnalyzeRecord>?,
    aliased: Table<PgStatProgressAnalyzeRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgStatProgressAnalyzeRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_stat_progress_analyze" as  SELECT s.pid,
     s.datid,
     d.datname,
     s.relid,
         CASE s.param1
             WHEN 0 THEN 'initializing'::text
             WHEN 1 THEN 'acquiring sample rows'::text
             WHEN 2 THEN 'acquiring inherited sample rows'::text
             WHEN 3 THEN 'computing statistics'::text
             WHEN 4 THEN 'computing extended statistics'::text
             WHEN 5 THEN 'finalizing analyze'::text
             ELSE NULL::text
         END AS phase,
     s.param2 AS sample_blks_total,
     s.param3 AS sample_blks_scanned,
     s.param4 AS ext_stats_total,
     s.param5 AS ext_stats_computed,
     s.param6 AS child_tables_total,
     s.param7 AS child_tables_done,
     (s.param8)::oid AS current_child_table_relid
    FROM (pg_stat_get_progress_info('ANALYZE'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)
      LEFT JOIN pg_database d ON ((s.datid = d.oid)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_analyze</code>
         */
        val PG_STAT_PROGRESS_ANALYZE: PgStatProgressAnalyze = PgStatProgressAnalyze()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgStatProgressAnalyzeRecord> = PgStatProgressAnalyzeRecord::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_analyze.pid</code>.
     */
    val PID: TableField<PgStatProgressAnalyzeRecord, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_analyze.datid</code>.
     */
    val DATID: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_analyze.datname</code>.
     */
    val DATNAME: TableField<PgStatProgressAnalyzeRecord, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_analyze.relid</code>.
     */
    val RELID: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_analyze.phase</code>.
     */
    val PHASE: TableField<PgStatProgressAnalyzeRecord, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.sample_blks_total</code>.
     */
    val SAMPLE_BLKS_TOTAL: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("sample_blks_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.sample_blks_scanned</code>.
     */
    val SAMPLE_BLKS_SCANNED: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("sample_blks_scanned"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.ext_stats_total</code>.
     */
    val EXT_STATS_TOTAL: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("ext_stats_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.ext_stats_computed</code>.
     */
    val EXT_STATS_COMPUTED: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("ext_stats_computed"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.child_tables_total</code>.
     */
    val CHILD_TABLES_TOTAL: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("child_tables_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.child_tables_done</code>.
     */
    val CHILD_TABLES_DONE: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("child_tables_done"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_analyze.current_child_table_relid</code>.
     */
    val CURRENT_CHILD_TABLE_RELID: TableField<PgStatProgressAnalyzeRecord, Long?> = createField(DSL.name("current_child_table_relid"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<PgStatProgressAnalyzeRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressAnalyzeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgStatProgressAnalyzeRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_analyze</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_analyze</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_analyze</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_progress_analyze"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressAnalyze = PgStatProgressAnalyze(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressAnalyze = PgStatProgressAnalyze(alias, this)
    override fun `as`(alias: Table<*>): PgStatProgressAnalyze = PgStatProgressAnalyze(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressAnalyze = PgStatProgressAnalyze(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressAnalyze = PgStatProgressAnalyze(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgStatProgressAnalyze = PgStatProgressAnalyze(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgStatProgressAnalyze = PgStatProgressAnalyze(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgStatProgressAnalyze = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgStatProgressAnalyze = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgStatProgressAnalyze = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgStatProgressAnalyze = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgStatProgressAnalyze = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgStatProgressAnalyze = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgStatProgressAnalyze = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgStatProgressAnalyze = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgStatProgressAnalyze = where(DSL.notExists(select))
}
