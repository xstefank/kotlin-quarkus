/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.tables


import kotlin.collections.Collection

import org.acme.generated.pg_catalog.PgCatalog
import org.acme.generated.pg_catalog.tables.records.PgAvailableExtensionVersionsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgAvailableExtensionVersions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PgAvailableExtensionVersionsRecord>?,
    parentPath: InverseForeignKey<out Record, PgAvailableExtensionVersionsRecord>?,
    aliased: Table<PgAvailableExtensionVersionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PgAvailableExtensionVersionsRecord>(
    alias,
    PgCatalog.PG_CATALOG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "pg_available_extension_versions" as  SELECT e.name,
     e.version,
     (x.extname IS NOT NULL) AS installed,
     e.superuser,
     e.trusted,
     e.relocatable,
     e.schema,
     e.requires,
     e.comment
    FROM (pg_available_extension_versions() e(name, version, superuser, trusted, relocatable, schema, requires, comment)
      LEFT JOIN pg_extension x ON (((e.name = x.extname) AND (e.version = x.extversion))));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_available_extension_versions</code>
         */
        val PG_AVAILABLE_EXTENSION_VERSIONS: PgAvailableExtensionVersions = PgAvailableExtensionVersions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PgAvailableExtensionVersionsRecord> = PgAvailableExtensionVersionsRecord::class.java

    /**
     * The column <code>pg_catalog.pg_available_extension_versions.name</code>.
     */
    val NAME: TableField<PgAvailableExtensionVersionsRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.version</code>.
     */
    val VERSION: TableField<PgAvailableExtensionVersionsRecord, String?> = createField(DSL.name("version"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.installed</code>.
     */
    val INSTALLED: TableField<PgAvailableExtensionVersionsRecord, Boolean?> = createField(DSL.name("installed"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.superuser</code>.
     */
    val SUPERUSER: TableField<PgAvailableExtensionVersionsRecord, Boolean?> = createField(DSL.name("superuser"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.trusted</code>.
     */
    val TRUSTED: TableField<PgAvailableExtensionVersionsRecord, Boolean?> = createField(DSL.name("trusted"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.relocatable</code>.
     */
    val RELOCATABLE: TableField<PgAvailableExtensionVersionsRecord, Boolean?> = createField(DSL.name("relocatable"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.schema</code>.
     */
    val SCHEMA: TableField<PgAvailableExtensionVersionsRecord, String?> = createField(DSL.name("schema"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.requires</code>.
     */
    val REQUIRES: TableField<PgAvailableExtensionVersionsRecord, Array<String?>?> = createField(DSL.name("requires"), SQLDataType.VARCHAR.array(), this, "")

    /**
     * The column
     * <code>pg_catalog.pg_available_extension_versions.comment</code>.
     */
    val COMMENT: TableField<PgAvailableExtensionVersionsRecord, String?> = createField(DSL.name("comment"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PgAvailableExtensionVersionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PgAvailableExtensionVersionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PgAvailableExtensionVersionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>pg_catalog.pg_available_extension_versions</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_available_extension_versions</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_available_extension_versions</code> table
     * reference
     */
    constructor(): this(DSL.name("pg_available_extension_versions"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgAvailableExtensionVersions = PgAvailableExtensionVersions(DSL.name(alias), this)
    override fun `as`(alias: Name): PgAvailableExtensionVersions = PgAvailableExtensionVersions(alias, this)
    override fun `as`(alias: Table<*>): PgAvailableExtensionVersions = PgAvailableExtensionVersions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgAvailableExtensionVersions = PgAvailableExtensionVersions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgAvailableExtensionVersions = PgAvailableExtensionVersions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PgAvailableExtensionVersions = PgAvailableExtensionVersions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PgAvailableExtensionVersions = PgAvailableExtensionVersions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PgAvailableExtensionVersions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PgAvailableExtensionVersions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PgAvailableExtensionVersions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PgAvailableExtensionVersions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PgAvailableExtensionVersions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PgAvailableExtensionVersions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PgAvailableExtensionVersions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PgAvailableExtensionVersions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PgAvailableExtensionVersions = where(DSL.notExists(select))
}
