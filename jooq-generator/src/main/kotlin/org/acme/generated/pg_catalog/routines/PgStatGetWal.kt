/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.pg_catalog.routines


import java.math.BigDecimal
import java.time.OffsetDateTime

import org.acme.generated.pg_catalog.PgCatalog
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetWal : AbstractRoutine<java.lang.Void>("pg_stat_get_wal", PgCatalog.PG_CATALOG) {
    companion object {

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_records</code>.
         */
        val WAL_RECORDS: Parameter<Long?> = Internal.createParameter("wal_records", SQLDataType.BIGINT, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_fpi</code>.
         */
        val WAL_FPI: Parameter<Long?> = Internal.createParameter("wal_fpi", SQLDataType.BIGINT, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_bytes</code>.
         */
        val WAL_BYTES: Parameter<BigDecimal?> = Internal.createParameter("wal_bytes", SQLDataType.NUMERIC, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_wal.wal_buffers_full</code>.
         */
        val WAL_BUFFERS_FULL: Parameter<Long?> = Internal.createParameter("wal_buffers_full", SQLDataType.BIGINT, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_write</code>.
         */
        val WAL_WRITE: Parameter<Long?> = Internal.createParameter("wal_write", SQLDataType.BIGINT, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_sync</code>.
         */
        val WAL_SYNC: Parameter<Long?> = Internal.createParameter("wal_sync", SQLDataType.BIGINT, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_write_time</code>.
         */
        val WAL_WRITE_TIME: Parameter<Double?> = Internal.createParameter("wal_write_time", SQLDataType.DOUBLE, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.wal_sync_time</code>.
         */
        val WAL_SYNC_TIME: Parameter<Double?> = Internal.createParameter("wal_sync_time", SQLDataType.DOUBLE, false, false)

        /**
         * The parameter <code>pg_catalog.pg_stat_get_wal.stats_reset</code>.
         */
        val STATS_RESET: Parameter<OffsetDateTime?> = Internal.createParameter("stats_reset", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)
    }

    init {
        addOutParameter(PgStatGetWal.WAL_RECORDS)
        addOutParameter(PgStatGetWal.WAL_FPI)
        addOutParameter(PgStatGetWal.WAL_BYTES)
        addOutParameter(PgStatGetWal.WAL_BUFFERS_FULL)
        addOutParameter(PgStatGetWal.WAL_WRITE)
        addOutParameter(PgStatGetWal.WAL_SYNC)
        addOutParameter(PgStatGetWal.WAL_WRITE_TIME)
        addOutParameter(PgStatGetWal.WAL_SYNC_TIME)
        addOutParameter(PgStatGetWal.STATS_RESET)
    }

    /**
     * Get the <code>wal_records</code> parameter OUT value from the routine
     */
    fun getWalRecords(): Long? = get(PgStatGetWal.WAL_RECORDS)

    /**
     * Get the <code>wal_fpi</code> parameter OUT value from the routine
     */
    fun getWalFpi(): Long? = get(PgStatGetWal.WAL_FPI)

    /**
     * Get the <code>wal_bytes</code> parameter OUT value from the routine
     */
    fun getWalBytes(): BigDecimal? = get(PgStatGetWal.WAL_BYTES)

    /**
     * Get the <code>wal_buffers_full</code> parameter OUT value from the
     * routine
     */
    fun getWalBuffersFull(): Long? = get(PgStatGetWal.WAL_BUFFERS_FULL)

    /**
     * Get the <code>wal_write</code> parameter OUT value from the routine
     */
    fun getWalWrite(): Long? = get(PgStatGetWal.WAL_WRITE)

    /**
     * Get the <code>wal_sync</code> parameter OUT value from the routine
     */
    fun getWalSync(): Long? = get(PgStatGetWal.WAL_SYNC)

    /**
     * Get the <code>wal_write_time</code> parameter OUT value from the routine
     */
    fun getWalWriteTime(): Double? = get(PgStatGetWal.WAL_WRITE_TIME)

    /**
     * Get the <code>wal_sync_time</code> parameter OUT value from the routine
     */
    fun getWalSyncTime(): Double? = get(PgStatGetWal.WAL_SYNC_TIME)

    /**
     * Get the <code>stats_reset</code> parameter OUT value from the routine
     */
    fun getStatsReset(): OffsetDateTime? = get(PgStatGetWal.STATS_RESET)
}
