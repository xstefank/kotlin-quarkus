/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.tables.records.KeyColumnUsageRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KeyColumnUsage(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, KeyColumnUsageRecord>?,
    parentPath: InverseForeignKey<out Record, KeyColumnUsageRecord>?,
    aliased: Table<KeyColumnUsageRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<KeyColumnUsageRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "key_column_usage" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,
      (ss.nc_nspname)::information_schema.sql_identifier AS constraint_schema,
      (ss.conname)::information_schema.sql_identifier AS constraint_name,
      (current_database())::information_schema.sql_identifier AS table_catalog,
      (ss.nr_nspname)::information_schema.sql_identifier AS table_schema,
      (ss.relname)::information_schema.sql_identifier AS table_name,
      (a.attname)::information_schema.sql_identifier AS column_name,
      ((ss.x).n)::information_schema.cardinal_number AS ordinal_position,
      (
          CASE
              WHEN (ss.contype = 'f'::"char") THEN information_schema._pg_index_position(ss.conindid, ss.confkey[(ss.x).n])
              ELSE NULL::integer
          END)::information_schema.cardinal_number AS position_in_unique_constraint
     FROM pg_attribute a,
      ( SELECT r.oid AS roid,
              r.relname,
              r.relowner,
              nc.nspname AS nc_nspname,
              nr.nspname AS nr_nspname,
              c.oid AS coid,
              c.conname,
              c.contype,
              c.conindid,
              c.confkey,
              c.confrelid,
              information_schema._pg_expandarray(c.conkey) AS x
             FROM pg_namespace nr,
              pg_class r,
              pg_namespace nc,
              pg_constraint c
            WHERE ((nr.oid = r.relnamespace) AND (r.oid = c.conrelid) AND (nc.oid = c.connamespace) AND (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT pg_is_other_temp_schema(nr.oid)))) ss
    WHERE ((ss.roid = a.attrelid) AND (a.attnum = (ss.x).x) AND (NOT a.attisdropped) AND (pg_has_role(ss.relowner, 'USAGE'::text) OR has_column_privilege(ss.roid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.key_column_usage</code>
         */
        val KEY_COLUMN_USAGE: KeyColumnUsage = KeyColumnUsage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<KeyColumnUsageRecord> = KeyColumnUsageRecord::class.java

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("constraint_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("constraint_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("constraint_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("table_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("table_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.table_name</code>.
     */
    val TABLE_NAME: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("table_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.column_name</code>.
     */
    val COLUMN_NAME: TableField<KeyColumnUsageRecord, String?> = createField(DSL.name("column_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.ordinal_position</code>.
     */
    val ORDINAL_POSITION: TableField<KeyColumnUsageRecord, Int?> = createField(DSL.name("ordinal_position"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.position_in_unique_constraint</code>.
     */
    val POSITION_IN_UNIQUE_CONSTRAINT: TableField<KeyColumnUsageRecord, Int?> = createField(DSL.name("position_in_unique_constraint"), CARDINAL_NUMBER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<KeyColumnUsageRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<KeyColumnUsageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<KeyColumnUsageRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.key_column_usage</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.key_column_usage</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.key_column_usage</code> table reference
     */
    constructor(): this(DSL.name("key_column_usage"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): KeyColumnUsage = KeyColumnUsage(DSL.name(alias), this)
    override fun `as`(alias: Name): KeyColumnUsage = KeyColumnUsage(alias, this)
    override fun `as`(alias: Table<*>): KeyColumnUsage = KeyColumnUsage(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KeyColumnUsage = KeyColumnUsage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KeyColumnUsage = KeyColumnUsage(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): KeyColumnUsage = KeyColumnUsage(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): KeyColumnUsage = KeyColumnUsage(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): KeyColumnUsage = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): KeyColumnUsage = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): KeyColumnUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): KeyColumnUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): KeyColumnUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): KeyColumnUsage = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): KeyColumnUsage = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): KeyColumnUsage = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): KeyColumnUsage = where(DSL.notExists(select))
}
