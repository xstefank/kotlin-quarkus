/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables.records


import org.acme.generated.information_schema.tables.Schemata
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SchemataRecord() : TableRecordImpl<SchemataRecord>(Schemata.SCHEMATA) {

    open var catalogName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var schemaName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var schemaOwner: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var defaultCharacterSetCatalog: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var defaultCharacterSetSchema: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var defaultCharacterSetName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var sqlPath: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    /**
     * Create a detached, initialised SchemataRecord
     */
    constructor(catalogName: String? = null, schemaName: String? = null, schemaOwner: String? = null, defaultCharacterSetCatalog: String? = null, defaultCharacterSetSchema: String? = null, defaultCharacterSetName: String? = null, sqlPath: String? = null): this() {
        this.catalogName = catalogName
        this.schemaName = schemaName
        this.schemaOwner = schemaOwner
        this.defaultCharacterSetCatalog = defaultCharacterSetCatalog
        this.defaultCharacterSetSchema = defaultCharacterSetSchema
        this.defaultCharacterSetName = defaultCharacterSetName
        this.sqlPath = sqlPath
        resetChangedOnNotNull()
    }
}
