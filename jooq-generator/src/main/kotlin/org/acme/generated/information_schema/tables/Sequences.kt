/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.SequencesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Sequences(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SequencesRecord>?,
    parentPath: InverseForeignKey<out Record, SequencesRecord>?,
    aliased: Table<SequencesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SequencesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "sequences" as  SELECT (current_database())::information_schema.sql_identifier AS sequence_catalog,
      (nc.nspname)::information_schema.sql_identifier AS sequence_schema,
      (c.relname)::information_schema.sql_identifier AS sequence_name,
      (format_type(s.seqtypid, NULL::integer))::information_schema.character_data AS data_type,
      (information_schema._pg_numeric_precision(s.seqtypid, '-1'::integer))::information_schema.cardinal_number AS numeric_precision,
      (2)::information_schema.cardinal_number AS numeric_precision_radix,
      (0)::information_schema.cardinal_number AS numeric_scale,
      (s.seqstart)::information_schema.character_data AS start_value,
      (s.seqmin)::information_schema.character_data AS minimum_value,
      (s.seqmax)::information_schema.character_data AS maximum_value,
      (s.seqincrement)::information_schema.character_data AS increment,
      (
          CASE
              WHEN s.seqcycle THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS cycle_option
     FROM pg_namespace nc,
      pg_class c,
      pg_sequence s
    WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'S'::"char") AND (NOT (EXISTS ( SELECT 1
             FROM pg_depend
            WHERE ((pg_depend.classid = ('pg_class'::regclass)::oid) AND (pg_depend.objid = c.oid) AND (pg_depend.deptype = 'i'::"char"))))) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (c.oid = s.seqrelid) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_sequence_privilege(c.oid, 'SELECT, UPDATE, USAGE'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.sequences</code>
         */
        val SEQUENCES: Sequences = Sequences()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SequencesRecord> = SequencesRecord::class.java

    /**
     * The column <code>information_schema.sequences.sequence_catalog</code>.
     */
    val SEQUENCE_CATALOG: TableField<SequencesRecord, String?> = createField(DSL.name("sequence_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.sequence_schema</code>.
     */
    val SEQUENCE_SCHEMA: TableField<SequencesRecord, String?> = createField(DSL.name("sequence_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.sequence_name</code>.
     */
    val SEQUENCE_NAME: TableField<SequencesRecord, String?> = createField(DSL.name("sequence_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.data_type</code>.
     */
    val DATA_TYPE: TableField<SequencesRecord, String?> = createField(DSL.name("data_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<SequencesRecord, Int?> = createField(DSL.name("numeric_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.sequences.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<SequencesRecord, Int?> = createField(DSL.name("numeric_precision_radix"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<SequencesRecord, Int?> = createField(DSL.name("numeric_scale"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.start_value</code>.
     */
    val START_VALUE: TableField<SequencesRecord, String?> = createField(DSL.name("start_value"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.minimum_value</code>.
     */
    val MINIMUM_VALUE: TableField<SequencesRecord, String?> = createField(DSL.name("minimum_value"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.maximum_value</code>.
     */
    val MAXIMUM_VALUE: TableField<SequencesRecord, String?> = createField(DSL.name("maximum_value"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.increment</code>.
     */
    val INCREMENT: TableField<SequencesRecord, String?> = createField(DSL.name("increment"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.cycle_option</code>.
     */
    val CYCLE_OPTION: TableField<SequencesRecord, String?> = createField(DSL.name("cycle_option"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<SequencesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SequencesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SequencesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.sequences</code> table reference
     */
    constructor(): this(DSL.name("sequences"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Sequences = Sequences(DSL.name(alias), this)
    override fun `as`(alias: Name): Sequences = Sequences(alias, this)
    override fun `as`(alias: Table<*>): Sequences = Sequences(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Sequences = Sequences(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Sequences = Sequences(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Sequences = Sequences(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Sequences = Sequences(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Sequences = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Sequences = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Sequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Sequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Sequences = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Sequences = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Sequences = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Sequences = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Sequences = where(DSL.notExists(select))
}
