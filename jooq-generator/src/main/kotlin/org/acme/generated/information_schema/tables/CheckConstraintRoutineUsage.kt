/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.tables.records.CheckConstraintRoutineUsageRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CheckConstraintRoutineUsage(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CheckConstraintRoutineUsageRecord>?,
    parentPath: InverseForeignKey<out Record, CheckConstraintRoutineUsageRecord>?,
    aliased: Table<CheckConstraintRoutineUsageRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CheckConstraintRoutineUsageRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "check_constraint_routine_usage" as  SELECT DISTINCT (current_database())::information_schema.sql_identifier AS constraint_catalog,
      (nc.nspname)::information_schema.sql_identifier AS constraint_schema,
      (c.conname)::information_schema.sql_identifier AS constraint_name,
      (current_database())::information_schema.sql_identifier AS specific_catalog,
      (np.nspname)::information_schema.sql_identifier AS specific_schema,
      (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name
     FROM pg_namespace nc,
      pg_constraint c,
      pg_depend d,
      pg_proc p,
      pg_namespace np
    WHERE ((nc.oid = c.connamespace) AND (c.contype = 'c'::"char") AND (c.oid = d.objid) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.refobjid = p.oid) AND (d.refclassid = ('pg_proc'::regclass)::oid) AND (p.pronamespace = np.oid) AND pg_has_role(p.proowner, 'USAGE'::text));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.check_constraint_routine_usage</code>
         */
        val CHECK_CONSTRAINT_ROUTINE_USAGE: CheckConstraintRoutineUsage = CheckConstraintRoutineUsage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CheckConstraintRoutineUsageRecord> = CheckConstraintRoutineUsageRecord::class.java

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("constraint_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("constraint_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("constraint_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("specific_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("specific_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.check_constraint_routine_usage.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<CheckConstraintRoutineUsageRecord, String?> = createField(DSL.name("specific_name"), SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<CheckConstraintRoutineUsageRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CheckConstraintRoutineUsageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CheckConstraintRoutineUsageRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>information_schema.check_constraint_routine_usage</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>information_schema.check_constraint_routine_usage</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.check_constraint_routine_usage</code>
     * table reference
     */
    constructor(): this(DSL.name("check_constraint_routine_usage"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(DSL.name(alias), this)
    override fun `as`(alias: Name): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(alias, this)
    override fun `as`(alias: Table<*>): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): CheckConstraintRoutineUsage = CheckConstraintRoutineUsage(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): CheckConstraintRoutineUsage = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): CheckConstraintRoutineUsage = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): CheckConstraintRoutineUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): CheckConstraintRoutineUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): CheckConstraintRoutineUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): CheckConstraintRoutineUsage = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): CheckConstraintRoutineUsage = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): CheckConstraintRoutineUsage = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): CheckConstraintRoutineUsage = where(DSL.notExists(select))
}
