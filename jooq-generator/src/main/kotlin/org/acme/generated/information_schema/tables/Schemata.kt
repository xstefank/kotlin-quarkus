/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.tables.records.SchemataRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Schemata(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SchemataRecord>?,
    parentPath: InverseForeignKey<out Record, SchemataRecord>?,
    aliased: Table<SchemataRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SchemataRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "schemata" as  SELECT (current_database())::information_schema.sql_identifier AS catalog_name,
      (n.nspname)::information_schema.sql_identifier AS schema_name,
      (u.rolname)::information_schema.sql_identifier AS schema_owner,
      (NULL::name)::information_schema.sql_identifier AS default_character_set_catalog,
      (NULL::name)::information_schema.sql_identifier AS default_character_set_schema,
      (NULL::name)::information_schema.sql_identifier AS default_character_set_name,
      (NULL::character varying)::information_schema.character_data AS sql_path
     FROM pg_namespace n,
      pg_authid u
    WHERE ((n.nspowner = u.oid) AND (pg_has_role(n.nspowner, 'USAGE'::text) OR has_schema_privilege(n.oid, 'CREATE, USAGE'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.schemata</code>
         */
        val SCHEMATA: Schemata = Schemata()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SchemataRecord> = SchemataRecord::class.java

    /**
     * The column <code>information_schema.schemata.catalog_name</code>.
     */
    val CATALOG_NAME: TableField<SchemataRecord, String?> = createField(DSL.name("catalog_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.schemata.schema_name</code>.
     */
    val SCHEMA_NAME: TableField<SchemataRecord, String?> = createField(DSL.name("schema_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.schemata.schema_owner</code>.
     */
    val SCHEMA_OWNER: TableField<SchemataRecord, String?> = createField(DSL.name("schema_owner"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.schemata.default_character_set_catalog</code>.
     */
    val DEFAULT_CHARACTER_SET_CATALOG: TableField<SchemataRecord, String?> = createField(DSL.name("default_character_set_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.schemata.default_character_set_schema</code>.
     */
    val DEFAULT_CHARACTER_SET_SCHEMA: TableField<SchemataRecord, String?> = createField(DSL.name("default_character_set_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.schemata.default_character_set_name</code>.
     */
    val DEFAULT_CHARACTER_SET_NAME: TableField<SchemataRecord, String?> = createField(DSL.name("default_character_set_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.schemata.sql_path</code>.
     */
    val SQL_PATH: TableField<SchemataRecord, String?> = createField(DSL.name("sql_path"), CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<SchemataRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SchemataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SchemataRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.schemata</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.schemata</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.schemata</code> table reference
     */
    constructor(): this(DSL.name("schemata"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Schemata = Schemata(DSL.name(alias), this)
    override fun `as`(alias: Name): Schemata = Schemata(alias, this)
    override fun `as`(alias: Table<*>): Schemata = Schemata(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Schemata = Schemata(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Schemata = Schemata(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Schemata = Schemata(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Schemata = Schemata(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Schemata = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Schemata = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Schemata = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Schemata = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Schemata = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Schemata = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Schemata = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Schemata = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Schemata = where(DSL.notExists(select))
}
