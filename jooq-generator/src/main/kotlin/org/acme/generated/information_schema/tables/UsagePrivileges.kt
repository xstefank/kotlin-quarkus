/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.UsagePrivilegesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsagePrivileges(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UsagePrivilegesRecord>?,
    parentPath: InverseForeignKey<out Record, UsagePrivilegesRecord>?,
    aliased: Table<UsagePrivilegesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UsagePrivilegesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
     create view "usage_privileges" as  SELECT (u.rolname)::information_schema.sql_identifier AS grantor,
        ('PUBLIC'::name)::information_schema.sql_identifier AS grantee,
        (current_database())::information_schema.sql_identifier AS object_catalog,
        (n.nspname)::information_schema.sql_identifier AS object_schema,
        (c.collname)::information_schema.sql_identifier AS object_name,
        ('COLLATION'::character varying)::information_schema.character_data AS object_type,
        ('USAGE'::character varying)::information_schema.character_data AS privilege_type,
        ('NO'::character varying)::information_schema.yes_or_no AS is_grantable
       FROM pg_authid u,
        pg_namespace n,
        pg_collation c
      WHERE ((u.oid = c.collowner) AND (c.collnamespace = n.oid) AND (c.collencoding = ANY (ARRAY['-1'::integer, ( SELECT pg_database.encoding
               FROM pg_database
              WHERE (pg_database.datname = current_database()))])))
    UNION ALL
     SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,
        (grantee.rolname)::information_schema.sql_identifier AS grantee,
        (current_database())::information_schema.sql_identifier AS object_catalog,
        (n.nspname)::information_schema.sql_identifier AS object_schema,
        (t.typname)::information_schema.sql_identifier AS object_name,
        ('DOMAIN'::character varying)::information_schema.character_data AS object_type,
        ('USAGE'::character varying)::information_schema.character_data AS privilege_type,
        (
            CASE
                WHEN (pg_has_role(grantee.oid, t.typowner, 'USAGE'::text) OR t.grantable) THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS is_grantable
       FROM ( SELECT pg_type.oid,
                pg_type.typname,
                pg_type.typnamespace,
                pg_type.typtype,
                pg_type.typowner,
                (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::"char", pg_type.typowner)))).grantor AS grantor,
                (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::"char", pg_type.typowner)))).grantee AS grantee,
                (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::"char", pg_type.typowner)))).privilege_type AS privilege_type,
                (aclexplode(COALESCE(pg_type.typacl, acldefault('T'::"char", pg_type.typowner)))).is_grantable AS is_grantable
               FROM pg_type) t(oid, typname, typnamespace, typtype, typowner, grantor, grantee, prtype, grantable),
        pg_namespace n,
        pg_authid u_grantor,
        ( SELECT pg_authid.oid,
                pg_authid.rolname
               FROM pg_authid
            UNION ALL
             SELECT (0)::oid AS oid,
                'PUBLIC'::name) grantee(oid, rolname)
      WHERE ((t.typnamespace = n.oid) AND (t.typtype = 'd'::"char") AND (t.grantee = grantee.oid) AND (t.grantor = u_grantor.oid) AND (t.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))
    UNION ALL
     SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,
        (grantee.rolname)::information_schema.sql_identifier AS grantee,
        (current_database())::information_schema.sql_identifier AS object_catalog,
        (''::name)::information_schema.sql_identifier AS object_schema,
        (fdw.fdwname)::information_schema.sql_identifier AS object_name,
        ('FOREIGN DATA WRAPPER'::character varying)::information_schema.character_data AS object_type,
        ('USAGE'::character varying)::information_schema.character_data AS privilege_type,
        (
            CASE
                WHEN (pg_has_role(grantee.oid, fdw.fdwowner, 'USAGE'::text) OR fdw.grantable) THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS is_grantable
       FROM ( SELECT pg_foreign_data_wrapper.fdwname,
                pg_foreign_data_wrapper.fdwowner,
                (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::"char", pg_foreign_data_wrapper.fdwowner)))).grantor AS grantor,
                (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::"char", pg_foreign_data_wrapper.fdwowner)))).grantee AS grantee,
                (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::"char", pg_foreign_data_wrapper.fdwowner)))).privilege_type AS privilege_type,
                (aclexplode(COALESCE(pg_foreign_data_wrapper.fdwacl, acldefault('F'::"char", pg_foreign_data_wrapper.fdwowner)))).is_grantable AS is_grantable
               FROM pg_foreign_data_wrapper) fdw(fdwname, fdwowner, grantor, grantee, prtype, grantable),
        pg_authid u_grantor,
        ( SELECT pg_authid.oid,
                pg_authid.rolname
               FROM pg_authid
            UNION ALL
             SELECT (0)::oid AS oid,
                'PUBLIC'::name) grantee(oid, rolname)
      WHERE ((u_grantor.oid = fdw.grantor) AND (grantee.oid = fdw.grantee) AND (fdw.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))
    UNION ALL
     SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,
        (grantee.rolname)::information_schema.sql_identifier AS grantee,
        (current_database())::information_schema.sql_identifier AS object_catalog,
        (''::name)::information_schema.sql_identifier AS object_schema,
        (srv.srvname)::information_schema.sql_identifier AS object_name,
        ('FOREIGN SERVER'::character varying)::information_schema.character_data AS object_type,
        ('USAGE'::character varying)::information_schema.character_data AS privilege_type,
        (
            CASE
                WHEN (pg_has_role(grantee.oid, srv.srvowner, 'USAGE'::text) OR srv.grantable) THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS is_grantable
       FROM ( SELECT pg_foreign_server.srvname,
                pg_foreign_server.srvowner,
                (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::"char", pg_foreign_server.srvowner)))).grantor AS grantor,
                (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::"char", pg_foreign_server.srvowner)))).grantee AS grantee,
                (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::"char", pg_foreign_server.srvowner)))).privilege_type AS privilege_type,
                (aclexplode(COALESCE(pg_foreign_server.srvacl, acldefault('S'::"char", pg_foreign_server.srvowner)))).is_grantable AS is_grantable
               FROM pg_foreign_server) srv(srvname, srvowner, grantor, grantee, prtype, grantable),
        pg_authid u_grantor,
        ( SELECT pg_authid.oid,
                pg_authid.rolname
               FROM pg_authid
            UNION ALL
             SELECT (0)::oid AS oid,
                'PUBLIC'::name) grantee(oid, rolname)
      WHERE ((u_grantor.oid = srv.grantor) AND (grantee.oid = srv.grantee) AND (srv.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)))
    UNION ALL
     SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,
        (grantee.rolname)::information_schema.sql_identifier AS grantee,
        (current_database())::information_schema.sql_identifier AS object_catalog,
        (n.nspname)::information_schema.sql_identifier AS object_schema,
        (c.relname)::information_schema.sql_identifier AS object_name,
        ('SEQUENCE'::character varying)::information_schema.character_data AS object_type,
        ('USAGE'::character varying)::information_schema.character_data AS privilege_type,
        (
            CASE
                WHEN (pg_has_role(grantee.oid, c.relowner, 'USAGE'::text) OR c.grantable) THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS is_grantable
       FROM ( SELECT pg_class.oid,
                pg_class.relname,
                pg_class.relnamespace,
                pg_class.relkind,
                pg_class.relowner,
                (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::"char", pg_class.relowner)))).grantor AS grantor,
                (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::"char", pg_class.relowner)))).grantee AS grantee,
                (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::"char", pg_class.relowner)))).privilege_type AS privilege_type,
                (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::"char", pg_class.relowner)))).is_grantable AS is_grantable
               FROM pg_class) c(oid, relname, relnamespace, relkind, relowner, grantor, grantee, prtype, grantable),
        pg_namespace n,
        pg_authid u_grantor,
        ( SELECT pg_authid.oid,
                pg_authid.rolname
               FROM pg_authid
            UNION ALL
             SELECT (0)::oid AS oid,
                'PUBLIC'::name) grantee(oid, rolname)
      WHERE ((c.relnamespace = n.oid) AND (c.relkind = 'S'::"char") AND (c.grantee = grantee.oid) AND (c.grantor = u_grantor.oid) AND (c.prtype = 'USAGE'::text) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.usage_privileges</code>
         */
        val USAGE_PRIVILEGES: UsagePrivileges = UsagePrivileges()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsagePrivilegesRecord> = UsagePrivilegesRecord::class.java

    /**
     * The column <code>information_schema.usage_privileges.grantor</code>.
     */
    val GRANTOR: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("grantor"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.usage_privileges.grantee</code>.
     */
    val GRANTEE: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("grantee"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.usage_privileges.object_catalog</code>.
     */
    val OBJECT_CATALOG: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("object_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.usage_privileges.object_schema</code>.
     */
    val OBJECT_SCHEMA: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("object_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.usage_privileges.object_name</code>.
     */
    val OBJECT_NAME: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("object_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.usage_privileges.object_type</code>.
     */
    val OBJECT_TYPE: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("object_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.usage_privileges.privilege_type</code>.
     */
    val PRIVILEGE_TYPE: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("privilege_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.usage_privileges.is_grantable</code>.
     */
    val IS_GRANTABLE: TableField<UsagePrivilegesRecord, String?> = createField(DSL.name("is_grantable"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<UsagePrivilegesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UsagePrivilegesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UsagePrivilegesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.usage_privileges</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.usage_privileges</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.usage_privileges</code> table reference
     */
    constructor(): this(DSL.name("usage_privileges"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): UsagePrivileges = UsagePrivileges(DSL.name(alias), this)
    override fun `as`(alias: Name): UsagePrivileges = UsagePrivileges(alias, this)
    override fun `as`(alias: Table<*>): UsagePrivileges = UsagePrivileges(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsagePrivileges = UsagePrivileges(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsagePrivileges = UsagePrivileges(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UsagePrivileges = UsagePrivileges(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): UsagePrivileges = UsagePrivileges(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): UsagePrivileges = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): UsagePrivileges = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): UsagePrivileges = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): UsagePrivileges = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): UsagePrivileges = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UsagePrivileges = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UsagePrivileges = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): UsagePrivileges = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): UsagePrivileges = where(DSL.notExists(select))
}
