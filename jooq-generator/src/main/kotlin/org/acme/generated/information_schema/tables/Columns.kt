/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.ColumnsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Columns(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ColumnsRecord>?,
    parentPath: InverseForeignKey<out Record, ColumnsRecord>?,
    aliased: Table<ColumnsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ColumnsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "columns" as  SELECT (current_database())::information_schema.sql_identifier AS table_catalog,
      (nc.nspname)::information_schema.sql_identifier AS table_schema,
      (c.relname)::information_schema.sql_identifier AS table_name,
      (a.attname)::information_schema.sql_identifier AS column_name,
      (a.attnum)::information_schema.cardinal_number AS ordinal_position,
      (
          CASE
              WHEN (a.attgenerated = ''::"char") THEN pg_get_expr(ad.adbin, ad.adrelid)
              ELSE NULL::text
          END)::information_schema.character_data AS column_default,
      (
          CASE
              WHEN (a.attnotnull OR ((t.typtype = 'd'::"char") AND t.typnotnull)) THEN 'NO'::text
              ELSE 'YES'::text
          END)::information_schema.yes_or_no AS is_nullable,
      (
          CASE
              WHEN (t.typtype = 'd'::"char") THEN
              CASE
                  WHEN ((bt.typelem <> (0)::oid) AND (bt.typlen = '-1'::integer)) THEN 'ARRAY'::text
                  WHEN (nbt.nspname = 'pg_catalog'::name) THEN format_type(t.typbasetype, NULL::integer)
                  ELSE 'USER-DEFINED'::text
              END
              ELSE
              CASE
                  WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text
                  WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(a.atttypid, NULL::integer)
                  ELSE 'USER-DEFINED'::text
              END
          END)::information_schema.character_data AS data_type,
      (information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_maximum_length,
      (information_schema._pg_char_octet_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_octet_length,
      (information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision,
      (information_schema._pg_numeric_precision_radix(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision_radix,
      (information_schema._pg_numeric_scale(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_scale,
      (information_schema._pg_datetime_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS datetime_precision,
      (information_schema._pg_interval_type(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.character_data AS interval_type,
      (NULL::integer)::information_schema.cardinal_number AS interval_precision,
      (NULL::name)::information_schema.sql_identifier AS character_set_catalog,
      (NULL::name)::information_schema.sql_identifier AS character_set_schema,
      (NULL::name)::information_schema.sql_identifier AS character_set_name,
      (
          CASE
              WHEN (nco.nspname IS NOT NULL) THEN current_database()
              ELSE NULL::name
          END)::information_schema.sql_identifier AS collation_catalog,
      (nco.nspname)::information_schema.sql_identifier AS collation_schema,
      (co.collname)::information_schema.sql_identifier AS collation_name,
      (
          CASE
              WHEN (t.typtype = 'd'::"char") THEN current_database()
              ELSE NULL::name
          END)::information_schema.sql_identifier AS domain_catalog,
      (
          CASE
              WHEN (t.typtype = 'd'::"char") THEN nt.nspname
              ELSE NULL::name
          END)::information_schema.sql_identifier AS domain_schema,
      (
          CASE
              WHEN (t.typtype = 'd'::"char") THEN t.typname
              ELSE NULL::name
          END)::information_schema.sql_identifier AS domain_name,
      (current_database())::information_schema.sql_identifier AS udt_catalog,
      (COALESCE(nbt.nspname, nt.nspname))::information_schema.sql_identifier AS udt_schema,
      (COALESCE(bt.typname, t.typname))::information_schema.sql_identifier AS udt_name,
      (NULL::name)::information_schema.sql_identifier AS scope_catalog,
      (NULL::name)::information_schema.sql_identifier AS scope_schema,
      (NULL::name)::information_schema.sql_identifier AS scope_name,
      (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,
      (a.attnum)::information_schema.sql_identifier AS dtd_identifier,
      ('NO'::character varying)::information_schema.yes_or_no AS is_self_referencing,
      (
          CASE
              WHEN (a.attidentity = ANY (ARRAY['a'::"char", 'd'::"char"])) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_identity,
      (
          CASE a.attidentity
              WHEN 'a'::"char" THEN 'ALWAYS'::text
              WHEN 'd'::"char" THEN 'BY DEFAULT'::text
              ELSE NULL::text
          END)::information_schema.character_data AS identity_generation,
      (seq.seqstart)::information_schema.character_data AS identity_start,
      (seq.seqincrement)::information_schema.character_data AS identity_increment,
      (seq.seqmax)::information_schema.character_data AS identity_maximum,
      (seq.seqmin)::information_schema.character_data AS identity_minimum,
      (
          CASE
              WHEN seq.seqcycle THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS identity_cycle,
      (
          CASE
              WHEN (a.attgenerated <> ''::"char") THEN 'ALWAYS'::text
              ELSE 'NEVER'::text
          END)::information_schema.character_data AS is_generated,
      (
          CASE
              WHEN (a.attgenerated <> ''::"char") THEN pg_get_expr(ad.adbin, ad.adrelid)
              ELSE NULL::text
          END)::information_schema.character_data AS generation_expression,
      (
          CASE
              WHEN ((c.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) OR ((c.relkind = ANY (ARRAY['v'::"char", 'f'::"char"])) AND pg_column_is_updatable((c.oid)::regclass, a.attnum, false))) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_updatable
     FROM ((((((pg_attribute a
       LEFT JOIN pg_attrdef ad ON (((a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))))
       JOIN (pg_class c
       JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))) ON ((a.attrelid = c.oid)))
       JOIN (pg_type t
       JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
       LEFT JOIN (pg_type bt
       JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON (((t.typtype = 'd'::"char") AND (t.typbasetype = bt.oid))))
       LEFT JOIN (pg_collation co
       JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON (((a.attcollation = co.oid) AND ((nco.nspname <> 'pg_catalog'::name) OR (co.collname <> 'default'::name)))))
       LEFT JOIN (pg_depend dep
       JOIN pg_sequence seq ON (((dep.classid = ('pg_class'::regclass)::oid) AND (dep.objid = seq.seqrelid) AND (dep.deptype = 'i'::"char")))) ON (((dep.refclassid = ('pg_class'::regclass)::oid) AND (dep.refobjid = c.oid) AND (dep.refobjsubid = a.attnum))))
    WHERE ((NOT pg_is_other_temp_schema(nc.oid)) AND (a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.columns</code>
         */
        val COLUMNS: Columns = Columns()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ColumnsRecord> = ColumnsRecord::class.java

    /**
     * The column <code>information_schema.columns.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("table_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("table_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.table_name</code>.
     */
    val TABLE_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("table_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.column_name</code>.
     */
    val COLUMN_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("column_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.ordinal_position</code>.
     */
    val ORDINAL_POSITION: TableField<ColumnsRecord, Int?> = createField(DSL.name("ordinal_position"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.column_default</code>.
     */
    val COLUMN_DEFAULT: TableField<ColumnsRecord, String?> = createField(DSL.name("column_default"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.is_nullable</code>.
     */
    val IS_NULLABLE: TableField<ColumnsRecord, String?> = createField(DSL.name("is_nullable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.data_type</code>.
     */
    val DATA_TYPE: TableField<ColumnsRecord, String?> = createField(DSL.name("data_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.columns.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<ColumnsRecord, Int?> = createField(DSL.name("character_maximum_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.columns.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<ColumnsRecord, Int?> = createField(DSL.name("character_octet_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<ColumnsRecord, Int?> = createField(DSL.name("numeric_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.columns.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<ColumnsRecord, Int?> = createField(DSL.name("numeric_precision_radix"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<ColumnsRecord, Int?> = createField(DSL.name("numeric_scale"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<ColumnsRecord, Int?> = createField(DSL.name("datetime_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<ColumnsRecord, String?> = createField(DSL.name("interval_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<ColumnsRecord, Int?> = createField(DSL.name("interval_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("character_set_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("character_set_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("character_set_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("collation_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("collation_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.collation_name</code>.
     */
    val COLLATION_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("collation_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.domain_catalog</code>.
     */
    val DOMAIN_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("domain_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.domain_schema</code>.
     */
    val DOMAIN_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("domain_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.domain_name</code>.
     */
    val DOMAIN_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("domain_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("udt_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("udt_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.udt_name</code>.
     */
    val UDT_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("udt_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<ColumnsRecord, String?> = createField(DSL.name("scope_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<ColumnsRecord, String?> = createField(DSL.name("scope_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.scope_name</code>.
     */
    val SCOPE_NAME: TableField<ColumnsRecord, String?> = createField(DSL.name("scope_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<ColumnsRecord, Int?> = createField(DSL.name("maximum_cardinality"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<ColumnsRecord, String?> = createField(DSL.name("dtd_identifier"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.is_self_referencing</code>.
     */
    val IS_SELF_REFERENCING: TableField<ColumnsRecord, String?> = createField(DSL.name("is_self_referencing"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.is_identity</code>.
     */
    val IS_IDENTITY: TableField<ColumnsRecord, String?> = createField(DSL.name("is_identity"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_generation</code>.
     */
    val IDENTITY_GENERATION: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_generation"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_start</code>.
     */
    val IDENTITY_START: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_start"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_increment</code>.
     */
    val IDENTITY_INCREMENT: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_increment"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_maximum</code>.
     */
    val IDENTITY_MAXIMUM: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_maximum"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_minimum</code>.
     */
    val IDENTITY_MINIMUM: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_minimum"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.identity_cycle</code>.
     */
    val IDENTITY_CYCLE: TableField<ColumnsRecord, String?> = createField(DSL.name("identity_cycle"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.is_generated</code>.
     */
    val IS_GENERATED: TableField<ColumnsRecord, String?> = createField(DSL.name("is_generated"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.generation_expression</code>.
     */
    val GENERATION_EXPRESSION: TableField<ColumnsRecord, String?> = createField(DSL.name("generation_expression"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.columns.is_updatable</code>.
     */
    val IS_UPDATABLE: TableField<ColumnsRecord, String?> = createField(DSL.name("is_updatable"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<ColumnsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ColumnsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ColumnsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.columns</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.columns</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.columns</code> table reference
     */
    constructor(): this(DSL.name("columns"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Columns = Columns(DSL.name(alias), this)
    override fun `as`(alias: Name): Columns = Columns(alias, this)
    override fun `as`(alias: Table<*>): Columns = Columns(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Columns = Columns(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Columns = Columns(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Columns = Columns(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Columns = Columns(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Columns = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Columns = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Columns = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Columns = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Columns = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Columns = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Columns = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Columns = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Columns = where(DSL.notExists(select))
}
