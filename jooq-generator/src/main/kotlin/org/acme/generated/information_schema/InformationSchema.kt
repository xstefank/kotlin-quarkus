/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema


import kotlin.collections.List

import org.acme.generated.DefaultCatalog
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.TIME_STAMP
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.AdministrableRoleAuthorizations
import org.acme.generated.information_schema.tables.ApplicableRoles
import org.acme.generated.information_schema.tables.Attributes
import org.acme.generated.information_schema.tables.CharacterSets
import org.acme.generated.information_schema.tables.CheckConstraintRoutineUsage
import org.acme.generated.information_schema.tables.CheckConstraints
import org.acme.generated.information_schema.tables.CollationCharacterSetApplicability
import org.acme.generated.information_schema.tables.Collations
import org.acme.generated.information_schema.tables.ColumnColumnUsage
import org.acme.generated.information_schema.tables.ColumnDomainUsage
import org.acme.generated.information_schema.tables.ColumnOptions
import org.acme.generated.information_schema.tables.ColumnPrivileges
import org.acme.generated.information_schema.tables.ColumnUdtUsage
import org.acme.generated.information_schema.tables.Columns
import org.acme.generated.information_schema.tables.ConstraintColumnUsage
import org.acme.generated.information_schema.tables.ConstraintTableUsage
import org.acme.generated.information_schema.tables.DataTypePrivileges
import org.acme.generated.information_schema.tables.DomainConstraints
import org.acme.generated.information_schema.tables.DomainUdtUsage
import org.acme.generated.information_schema.tables.Domains
import org.acme.generated.information_schema.tables.ElementTypes
import org.acme.generated.information_schema.tables.EnabledRoles
import org.acme.generated.information_schema.tables.ForeignDataWrapperOptions
import org.acme.generated.information_schema.tables.ForeignDataWrappers
import org.acme.generated.information_schema.tables.ForeignServerOptions
import org.acme.generated.information_schema.tables.ForeignServers
import org.acme.generated.information_schema.tables.ForeignTableOptions
import org.acme.generated.information_schema.tables.ForeignTables
import org.acme.generated.information_schema.tables.InformationSchemaCatalogName
import org.acme.generated.information_schema.tables.KeyColumnUsage
import org.acme.generated.information_schema.tables.Parameters
import org.acme.generated.information_schema.tables.ReferentialConstraints
import org.acme.generated.information_schema.tables.RoleColumnGrants
import org.acme.generated.information_schema.tables.RoleRoutineGrants
import org.acme.generated.information_schema.tables.RoleTableGrants
import org.acme.generated.information_schema.tables.RoleUdtGrants
import org.acme.generated.information_schema.tables.RoleUsageGrants
import org.acme.generated.information_schema.tables.RoutineColumnUsage
import org.acme.generated.information_schema.tables.RoutinePrivileges
import org.acme.generated.information_schema.tables.RoutineRoutineUsage
import org.acme.generated.information_schema.tables.RoutineSequenceUsage
import org.acme.generated.information_schema.tables.RoutineTableUsage
import org.acme.generated.information_schema.tables.Routines
import org.acme.generated.information_schema.tables.Schemata
import org.acme.generated.information_schema.tables.Sequences
import org.acme.generated.information_schema.tables.SqlFeatures
import org.acme.generated.information_schema.tables.SqlImplementationInfo
import org.acme.generated.information_schema.tables.SqlParts
import org.acme.generated.information_schema.tables.SqlSizing
import org.acme.generated.information_schema.tables.TableConstraints
import org.acme.generated.information_schema.tables.TablePrivileges
import org.acme.generated.information_schema.tables.Tables
import org.acme.generated.information_schema.tables.Transforms
import org.acme.generated.information_schema.tables.TriggeredUpdateColumns
import org.acme.generated.information_schema.tables.Triggers
import org.acme.generated.information_schema.tables.UdtPrivileges
import org.acme.generated.information_schema.tables.UsagePrivileges
import org.acme.generated.information_schema.tables.UserDefinedTypes
import org.acme.generated.information_schema.tables.UserMappingOptions
import org.acme.generated.information_schema.tables.UserMappings
import org.acme.generated.information_schema.tables.ViewColumnUsage
import org.acme.generated.information_schema.tables.ViewRoutineUsage
import org.acme.generated.information_schema.tables.ViewTableUsage
import org.acme.generated.information_schema.tables.Views
import org.acme.generated.information_schema.tables._PgExpandarray
import org.acme.generated.information_schema.tables._PgForeignDataWrappers
import org.acme.generated.information_schema.tables._PgForeignServers
import org.acme.generated.information_schema.tables._PgForeignTableColumns
import org.acme.generated.information_schema.tables._PgForeignTables
import org.acme.generated.information_schema.tables._PgUserMappings
import org.acme.generated.information_schema.tables.records._PgExpandarrayRecord
import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Domain
import org.jooq.Field
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InformationSchema : SchemaImpl("information_schema", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>information_schema</code>
         */
        val INFORMATION_SCHEMA: InformationSchema = InformationSchema()
    }

    /**
     * The table <code>information_schema._pg_expandarray</code>.
     */
    val _PG_EXPANDARRAY: _PgExpandarray get() = _PgExpandarray._PG_EXPANDARRAY

    /**
     * Call <code>information_schema._pg_expandarray</code>.
     */
    fun _PG_EXPANDARRAY(
          configuration: Configuration
        , __1: Array<Any?>?
    ): Result<_PgExpandarrayRecord> = configuration.dsl().selectFrom(org.acme.generated.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
          __1
    )).fetch()

    /**
     * Get <code>information_schema._pg_expandarray</code> as a table.
     */
    fun _PG_EXPANDARRAY(
          __1: Array<Any?>?
    ): _PgExpandarray = org.acme.generated.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
        __1
    )

    /**
     * Get <code>information_schema._pg_expandarray</code> as a table.
     */
    fun _PG_EXPANDARRAY(
          __1: Field<Array<Any?>?>
    ): _PgExpandarray = org.acme.generated.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
        __1
    )

    /**
     * The table <code>information_schema._pg_foreign_data_wrappers</code>.
     */
    val _PG_FOREIGN_DATA_WRAPPERS: _PgForeignDataWrappers get() = _PgForeignDataWrappers._PG_FOREIGN_DATA_WRAPPERS

    /**
     * The table <code>information_schema._pg_foreign_servers</code>.
     */
    val _PG_FOREIGN_SERVERS: _PgForeignServers get() = _PgForeignServers._PG_FOREIGN_SERVERS

    /**
     * The table <code>information_schema._pg_foreign_table_columns</code>.
     */
    val _PG_FOREIGN_TABLE_COLUMNS: _PgForeignTableColumns get() = _PgForeignTableColumns._PG_FOREIGN_TABLE_COLUMNS

    /**
     * The table <code>information_schema._pg_foreign_tables</code>.
     */
    val _PG_FOREIGN_TABLES: _PgForeignTables get() = _PgForeignTables._PG_FOREIGN_TABLES

    /**
     * The table <code>information_schema._pg_user_mappings</code>.
     */
    val _PG_USER_MAPPINGS: _PgUserMappings get() = _PgUserMappings._PG_USER_MAPPINGS

    /**
     * The table
     * <code>information_schema.administrable_role_authorizations</code>.
     */
    val ADMINISTRABLE_ROLE_AUTHORIZATIONS: AdministrableRoleAuthorizations get() = AdministrableRoleAuthorizations.ADMINISTRABLE_ROLE_AUTHORIZATIONS

    /**
     * The table <code>information_schema.applicable_roles</code>.
     */
    val APPLICABLE_ROLES: ApplicableRoles get() = ApplicableRoles.APPLICABLE_ROLES

    /**
     * The table <code>information_schema.attributes</code>.
     */
    val ATTRIBUTES: Attributes get() = Attributes.ATTRIBUTES

    /**
     * The table <code>information_schema.character_sets</code>.
     */
    val CHARACTER_SETS: CharacterSets get() = CharacterSets.CHARACTER_SETS

    /**
     * The table <code>information_schema.check_constraint_routine_usage</code>.
     */
    val CHECK_CONSTRAINT_ROUTINE_USAGE: CheckConstraintRoutineUsage get() = CheckConstraintRoutineUsage.CHECK_CONSTRAINT_ROUTINE_USAGE

    /**
     * The table <code>information_schema.check_constraints</code>.
     */
    val CHECK_CONSTRAINTS: CheckConstraints get() = CheckConstraints.CHECK_CONSTRAINTS

    /**
     * The table
     * <code>information_schema.collation_character_set_applicability</code>.
     */
    val COLLATION_CHARACTER_SET_APPLICABILITY: CollationCharacterSetApplicability get() = CollationCharacterSetApplicability.COLLATION_CHARACTER_SET_APPLICABILITY

    /**
     * The table <code>information_schema.collations</code>.
     */
    val COLLATIONS: Collations get() = Collations.COLLATIONS

    /**
     * The table <code>information_schema.column_column_usage</code>.
     */
    val COLUMN_COLUMN_USAGE: ColumnColumnUsage get() = ColumnColumnUsage.COLUMN_COLUMN_USAGE

    /**
     * The table <code>information_schema.column_domain_usage</code>.
     */
    val COLUMN_DOMAIN_USAGE: ColumnDomainUsage get() = ColumnDomainUsage.COLUMN_DOMAIN_USAGE

    /**
     * The table <code>information_schema.column_options</code>.
     */
    val COLUMN_OPTIONS: ColumnOptions get() = ColumnOptions.COLUMN_OPTIONS

    /**
     * The table <code>information_schema.column_privileges</code>.
     */
    val COLUMN_PRIVILEGES: ColumnPrivileges get() = ColumnPrivileges.COLUMN_PRIVILEGES

    /**
     * The table <code>information_schema.column_udt_usage</code>.
     */
    val COLUMN_UDT_USAGE: ColumnUdtUsage get() = ColumnUdtUsage.COLUMN_UDT_USAGE

    /**
     * The table <code>information_schema.columns</code>.
     */
    val COLUMNS: Columns get() = Columns.COLUMNS

    /**
     * The table <code>information_schema.constraint_column_usage</code>.
     */
    val CONSTRAINT_COLUMN_USAGE: ConstraintColumnUsage get() = ConstraintColumnUsage.CONSTRAINT_COLUMN_USAGE

    /**
     * The table <code>information_schema.constraint_table_usage</code>.
     */
    val CONSTRAINT_TABLE_USAGE: ConstraintTableUsage get() = ConstraintTableUsage.CONSTRAINT_TABLE_USAGE

    /**
     * The table <code>information_schema.data_type_privileges</code>.
     */
    val DATA_TYPE_PRIVILEGES: DataTypePrivileges get() = DataTypePrivileges.DATA_TYPE_PRIVILEGES

    /**
     * The table <code>information_schema.domain_constraints</code>.
     */
    val DOMAIN_CONSTRAINTS: DomainConstraints get() = DomainConstraints.DOMAIN_CONSTRAINTS

    /**
     * The table <code>information_schema.domain_udt_usage</code>.
     */
    val DOMAIN_UDT_USAGE: DomainUdtUsage get() = DomainUdtUsage.DOMAIN_UDT_USAGE

    /**
     * The table <code>information_schema.domains</code>.
     */
    val DOMAINS: Domains get() = Domains.DOMAINS

    /**
     * The table <code>information_schema.element_types</code>.
     */
    val ELEMENT_TYPES: ElementTypes get() = ElementTypes.ELEMENT_TYPES

    /**
     * The table <code>information_schema.enabled_roles</code>.
     */
    val ENABLED_ROLES: EnabledRoles get() = EnabledRoles.ENABLED_ROLES

    /**
     * The table <code>information_schema.foreign_data_wrapper_options</code>.
     */
    val FOREIGN_DATA_WRAPPER_OPTIONS: ForeignDataWrapperOptions get() = ForeignDataWrapperOptions.FOREIGN_DATA_WRAPPER_OPTIONS

    /**
     * The table <code>information_schema.foreign_data_wrappers</code>.
     */
    val FOREIGN_DATA_WRAPPERS: ForeignDataWrappers get() = ForeignDataWrappers.FOREIGN_DATA_WRAPPERS

    /**
     * The table <code>information_schema.foreign_server_options</code>.
     */
    val FOREIGN_SERVER_OPTIONS: ForeignServerOptions get() = ForeignServerOptions.FOREIGN_SERVER_OPTIONS

    /**
     * The table <code>information_schema.foreign_servers</code>.
     */
    val FOREIGN_SERVERS: ForeignServers get() = ForeignServers.FOREIGN_SERVERS

    /**
     * The table <code>information_schema.foreign_table_options</code>.
     */
    val FOREIGN_TABLE_OPTIONS: ForeignTableOptions get() = ForeignTableOptions.FOREIGN_TABLE_OPTIONS

    /**
     * The table <code>information_schema.foreign_tables</code>.
     */
    val FOREIGN_TABLES: ForeignTables get() = ForeignTables.FOREIGN_TABLES

    /**
     * The table
     * <code>information_schema.information_schema_catalog_name</code>.
     */
    val INFORMATION_SCHEMA_CATALOG_NAME: InformationSchemaCatalogName get() = InformationSchemaCatalogName.INFORMATION_SCHEMA_CATALOG_NAME

    /**
     * The table <code>information_schema.key_column_usage</code>.
     */
    val KEY_COLUMN_USAGE: KeyColumnUsage get() = KeyColumnUsage.KEY_COLUMN_USAGE

    /**
     * The table <code>information_schema.parameters</code>.
     */
    val PARAMETERS: Parameters get() = Parameters.PARAMETERS

    /**
     * The table <code>information_schema.referential_constraints</code>.
     */
    val REFERENTIAL_CONSTRAINTS: ReferentialConstraints get() = ReferentialConstraints.REFERENTIAL_CONSTRAINTS

    /**
     * The table <code>information_schema.role_column_grants</code>.
     */
    val ROLE_COLUMN_GRANTS: RoleColumnGrants get() = RoleColumnGrants.ROLE_COLUMN_GRANTS

    /**
     * The table <code>information_schema.role_routine_grants</code>.
     */
    val ROLE_ROUTINE_GRANTS: RoleRoutineGrants get() = RoleRoutineGrants.ROLE_ROUTINE_GRANTS

    /**
     * The table <code>information_schema.role_table_grants</code>.
     */
    val ROLE_TABLE_GRANTS: RoleTableGrants get() = RoleTableGrants.ROLE_TABLE_GRANTS

    /**
     * The table <code>information_schema.role_udt_grants</code>.
     */
    val ROLE_UDT_GRANTS: RoleUdtGrants get() = RoleUdtGrants.ROLE_UDT_GRANTS

    /**
     * The table <code>information_schema.role_usage_grants</code>.
     */
    val ROLE_USAGE_GRANTS: RoleUsageGrants get() = RoleUsageGrants.ROLE_USAGE_GRANTS

    /**
     * The table <code>information_schema.routine_column_usage</code>.
     */
    val ROUTINE_COLUMN_USAGE: RoutineColumnUsage get() = RoutineColumnUsage.ROUTINE_COLUMN_USAGE

    /**
     * The table <code>information_schema.routine_privileges</code>.
     */
    val ROUTINE_PRIVILEGES: RoutinePrivileges get() = RoutinePrivileges.ROUTINE_PRIVILEGES

    /**
     * The table <code>information_schema.routine_routine_usage</code>.
     */
    val ROUTINE_ROUTINE_USAGE: RoutineRoutineUsage get() = RoutineRoutineUsage.ROUTINE_ROUTINE_USAGE

    /**
     * The table <code>information_schema.routine_sequence_usage</code>.
     */
    val ROUTINE_SEQUENCE_USAGE: RoutineSequenceUsage get() = RoutineSequenceUsage.ROUTINE_SEQUENCE_USAGE

    /**
     * The table <code>information_schema.routine_table_usage</code>.
     */
    val ROUTINE_TABLE_USAGE: RoutineTableUsage get() = RoutineTableUsage.ROUTINE_TABLE_USAGE

    /**
     * The table <code>information_schema.routines</code>.
     */
    val ROUTINES: Routines get() = Routines.ROUTINES

    /**
     * The table <code>information_schema.schemata</code>.
     */
    val SCHEMATA: Schemata get() = Schemata.SCHEMATA

    /**
     * The table <code>information_schema.sequences</code>.
     */
    val SEQUENCES: Sequences get() = Sequences.SEQUENCES

    /**
     * The table <code>information_schema.sql_features</code>.
     */
    val SQL_FEATURES: SqlFeatures get() = SqlFeatures.SQL_FEATURES

    /**
     * The table <code>information_schema.sql_implementation_info</code>.
     */
    val SQL_IMPLEMENTATION_INFO: SqlImplementationInfo get() = SqlImplementationInfo.SQL_IMPLEMENTATION_INFO

    /**
     * The table <code>information_schema.sql_parts</code>.
     */
    val SQL_PARTS: SqlParts get() = SqlParts.SQL_PARTS

    /**
     * The table <code>information_schema.sql_sizing</code>.
     */
    val SQL_SIZING: SqlSizing get() = SqlSizing.SQL_SIZING

    /**
     * The table <code>information_schema.table_constraints</code>.
     */
    val TABLE_CONSTRAINTS: TableConstraints get() = TableConstraints.TABLE_CONSTRAINTS

    /**
     * The table <code>information_schema.table_privileges</code>.
     */
    val TABLE_PRIVILEGES: TablePrivileges get() = TablePrivileges.TABLE_PRIVILEGES

    /**
     * The table <code>information_schema.tables</code>.
     */
    val TABLES: Tables get() = Tables.TABLES

    /**
     * The table <code>information_schema.transforms</code>.
     */
    val TRANSFORMS: Transforms get() = Transforms.TRANSFORMS

    /**
     * The table <code>information_schema.triggered_update_columns</code>.
     */
    val TRIGGERED_UPDATE_COLUMNS: TriggeredUpdateColumns get() = TriggeredUpdateColumns.TRIGGERED_UPDATE_COLUMNS

    /**
     * The table <code>information_schema.triggers</code>.
     */
    val TRIGGERS: Triggers get() = Triggers.TRIGGERS

    /**
     * The table <code>information_schema.udt_privileges</code>.
     */
    val UDT_PRIVILEGES: UdtPrivileges get() = UdtPrivileges.UDT_PRIVILEGES

    /**
     * The table <code>information_schema.usage_privileges</code>.
     */
    val USAGE_PRIVILEGES: UsagePrivileges get() = UsagePrivileges.USAGE_PRIVILEGES

    /**
     * The table <code>information_schema.user_defined_types</code>.
     */
    val USER_DEFINED_TYPES: UserDefinedTypes get() = UserDefinedTypes.USER_DEFINED_TYPES

    /**
     * The table <code>information_schema.user_mapping_options</code>.
     */
    val USER_MAPPING_OPTIONS: UserMappingOptions get() = UserMappingOptions.USER_MAPPING_OPTIONS

    /**
     * The table <code>information_schema.user_mappings</code>.
     */
    val USER_MAPPINGS: UserMappings get() = UserMappings.USER_MAPPINGS

    /**
     * The table <code>information_schema.view_column_usage</code>.
     */
    val VIEW_COLUMN_USAGE: ViewColumnUsage get() = ViewColumnUsage.VIEW_COLUMN_USAGE

    /**
     * The table <code>information_schema.view_routine_usage</code>.
     */
    val VIEW_ROUTINE_USAGE: ViewRoutineUsage get() = ViewRoutineUsage.VIEW_ROUTINE_USAGE

    /**
     * The table <code>information_schema.view_table_usage</code>.
     */
    val VIEW_TABLE_USAGE: ViewTableUsage get() = ViewTableUsage.VIEW_TABLE_USAGE

    /**
     * The table <code>information_schema.views</code>.
     */
    val VIEWS: Views get() = Views.VIEWS

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getDomains(): List<Domain<*>> = listOf(
        CARDINAL_NUMBER,
        CHARACTER_DATA,
        SQL_IDENTIFIER,
        TIME_STAMP,
        YES_OR_NO
    )

    override fun getTables(): List<Table<*>> = listOf(
        _PgExpandarray._PG_EXPANDARRAY,
        _PgForeignDataWrappers._PG_FOREIGN_DATA_WRAPPERS,
        _PgForeignServers._PG_FOREIGN_SERVERS,
        _PgForeignTableColumns._PG_FOREIGN_TABLE_COLUMNS,
        _PgForeignTables._PG_FOREIGN_TABLES,
        _PgUserMappings._PG_USER_MAPPINGS,
        AdministrableRoleAuthorizations.ADMINISTRABLE_ROLE_AUTHORIZATIONS,
        ApplicableRoles.APPLICABLE_ROLES,
        Attributes.ATTRIBUTES,
        CharacterSets.CHARACTER_SETS,
        CheckConstraintRoutineUsage.CHECK_CONSTRAINT_ROUTINE_USAGE,
        CheckConstraints.CHECK_CONSTRAINTS,
        CollationCharacterSetApplicability.COLLATION_CHARACTER_SET_APPLICABILITY,
        Collations.COLLATIONS,
        ColumnColumnUsage.COLUMN_COLUMN_USAGE,
        ColumnDomainUsage.COLUMN_DOMAIN_USAGE,
        ColumnOptions.COLUMN_OPTIONS,
        ColumnPrivileges.COLUMN_PRIVILEGES,
        ColumnUdtUsage.COLUMN_UDT_USAGE,
        Columns.COLUMNS,
        ConstraintColumnUsage.CONSTRAINT_COLUMN_USAGE,
        ConstraintTableUsage.CONSTRAINT_TABLE_USAGE,
        DataTypePrivileges.DATA_TYPE_PRIVILEGES,
        DomainConstraints.DOMAIN_CONSTRAINTS,
        DomainUdtUsage.DOMAIN_UDT_USAGE,
        Domains.DOMAINS,
        ElementTypes.ELEMENT_TYPES,
        EnabledRoles.ENABLED_ROLES,
        ForeignDataWrapperOptions.FOREIGN_DATA_WRAPPER_OPTIONS,
        ForeignDataWrappers.FOREIGN_DATA_WRAPPERS,
        ForeignServerOptions.FOREIGN_SERVER_OPTIONS,
        ForeignServers.FOREIGN_SERVERS,
        ForeignTableOptions.FOREIGN_TABLE_OPTIONS,
        ForeignTables.FOREIGN_TABLES,
        InformationSchemaCatalogName.INFORMATION_SCHEMA_CATALOG_NAME,
        KeyColumnUsage.KEY_COLUMN_USAGE,
        Parameters.PARAMETERS,
        ReferentialConstraints.REFERENTIAL_CONSTRAINTS,
        RoleColumnGrants.ROLE_COLUMN_GRANTS,
        RoleRoutineGrants.ROLE_ROUTINE_GRANTS,
        RoleTableGrants.ROLE_TABLE_GRANTS,
        RoleUdtGrants.ROLE_UDT_GRANTS,
        RoleUsageGrants.ROLE_USAGE_GRANTS,
        RoutineColumnUsage.ROUTINE_COLUMN_USAGE,
        RoutinePrivileges.ROUTINE_PRIVILEGES,
        RoutineRoutineUsage.ROUTINE_ROUTINE_USAGE,
        RoutineSequenceUsage.ROUTINE_SEQUENCE_USAGE,
        RoutineTableUsage.ROUTINE_TABLE_USAGE,
        Routines.ROUTINES,
        Schemata.SCHEMATA,
        Sequences.SEQUENCES,
        SqlFeatures.SQL_FEATURES,
        SqlImplementationInfo.SQL_IMPLEMENTATION_INFO,
        SqlParts.SQL_PARTS,
        SqlSizing.SQL_SIZING,
        TableConstraints.TABLE_CONSTRAINTS,
        TablePrivileges.TABLE_PRIVILEGES,
        Tables.TABLES,
        Transforms.TRANSFORMS,
        TriggeredUpdateColumns.TRIGGERED_UPDATE_COLUMNS,
        Triggers.TRIGGERS,
        UdtPrivileges.UDT_PRIVILEGES,
        UsagePrivileges.USAGE_PRIVILEGES,
        UserDefinedTypes.USER_DEFINED_TYPES,
        UserMappingOptions.USER_MAPPING_OPTIONS,
        UserMappings.USER_MAPPINGS,
        ViewColumnUsage.VIEW_COLUMN_USAGE,
        ViewRoutineUsage.VIEW_ROUTINE_USAGE,
        ViewTableUsage.VIEW_TABLE_USAGE,
        Views.VIEWS
    )
}
