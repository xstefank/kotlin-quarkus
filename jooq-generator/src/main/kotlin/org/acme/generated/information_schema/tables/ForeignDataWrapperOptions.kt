/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.tables.records.ForeignDataWrapperOptionsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ForeignDataWrapperOptions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ForeignDataWrapperOptionsRecord>?,
    parentPath: InverseForeignKey<out Record, ForeignDataWrapperOptionsRecord>?,
    aliased: Table<ForeignDataWrapperOptionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ForeignDataWrapperOptionsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "foreign_data_wrapper_options" as  SELECT w.foreign_data_wrapper_catalog,
     w.foreign_data_wrapper_name,
     ((pg_options_to_table(w.fdwoptions)).option_name)::information_schema.sql_identifier AS option_name,
     ((pg_options_to_table(w.fdwoptions)).option_value)::information_schema.character_data AS option_value
    FROM information_schema._pg_foreign_data_wrappers w;
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.foreign_data_wrapper_options</code>
         */
        val FOREIGN_DATA_WRAPPER_OPTIONS: ForeignDataWrapperOptions = ForeignDataWrapperOptions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ForeignDataWrapperOptionsRecord> = ForeignDataWrapperOptionsRecord::class.java

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.foreign_data_wrapper_catalog</code>.
     */
    val FOREIGN_DATA_WRAPPER_CATALOG: TableField<ForeignDataWrapperOptionsRecord, String?> = createField(DSL.name("foreign_data_wrapper_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.foreign_data_wrapper_name</code>.
     */
    val FOREIGN_DATA_WRAPPER_NAME: TableField<ForeignDataWrapperOptionsRecord, String?> = createField(DSL.name("foreign_data_wrapper_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.option_name</code>.
     */
    val OPTION_NAME: TableField<ForeignDataWrapperOptionsRecord, String?> = createField(DSL.name("option_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_data_wrapper_options.option_value</code>.
     */
    val OPTION_VALUE: TableField<ForeignDataWrapperOptionsRecord, String?> = createField(DSL.name("option_value"), CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<ForeignDataWrapperOptionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ForeignDataWrapperOptionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ForeignDataWrapperOptionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>information_schema.foreign_data_wrapper_options</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>information_schema.foreign_data_wrapper_options</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.foreign_data_wrapper_options</code>
     * table reference
     */
    constructor(): this(DSL.name("foreign_data_wrapper_options"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ForeignDataWrapperOptions = ForeignDataWrapperOptions(DSL.name(alias), this)
    override fun `as`(alias: Name): ForeignDataWrapperOptions = ForeignDataWrapperOptions(alias, this)
    override fun `as`(alias: Table<*>): ForeignDataWrapperOptions = ForeignDataWrapperOptions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ForeignDataWrapperOptions = ForeignDataWrapperOptions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ForeignDataWrapperOptions = ForeignDataWrapperOptions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ForeignDataWrapperOptions = ForeignDataWrapperOptions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ForeignDataWrapperOptions = ForeignDataWrapperOptions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ForeignDataWrapperOptions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ForeignDataWrapperOptions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ForeignDataWrapperOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ForeignDataWrapperOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ForeignDataWrapperOptions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ForeignDataWrapperOptions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ForeignDataWrapperOptions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ForeignDataWrapperOptions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ForeignDataWrapperOptions = where(DSL.notExists(select))
}
