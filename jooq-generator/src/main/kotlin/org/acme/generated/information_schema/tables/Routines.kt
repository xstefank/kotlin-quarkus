/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.TIME_STAMP
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.RoutinesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Routines(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RoutinesRecord>?,
    parentPath: InverseForeignKey<out Record, RoutinesRecord>?,
    aliased: Table<RoutinesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RoutinesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "routines" as  SELECT (current_database())::information_schema.sql_identifier AS specific_catalog,
      (n.nspname)::information_schema.sql_identifier AS specific_schema,
      (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,
      (current_database())::information_schema.sql_identifier AS routine_catalog,
      (n.nspname)::information_schema.sql_identifier AS routine_schema,
      (p.proname)::information_schema.sql_identifier AS routine_name,
      (
          CASE p.prokind
              WHEN 'f'::"char" THEN 'FUNCTION'::text
              WHEN 'p'::"char" THEN 'PROCEDURE'::text
              ELSE NULL::text
          END)::information_schema.character_data AS routine_type,
      (NULL::name)::information_schema.sql_identifier AS module_catalog,
      (NULL::name)::information_schema.sql_identifier AS module_schema,
      (NULL::name)::information_schema.sql_identifier AS module_name,
      (NULL::name)::information_schema.sql_identifier AS udt_catalog,
      (NULL::name)::information_schema.sql_identifier AS udt_schema,
      (NULL::name)::information_schema.sql_identifier AS udt_name,
      (
          CASE
              WHEN (p.prokind = 'p'::"char") THEN NULL::text
              WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text
              WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)
              ELSE 'USER-DEFINED'::text
          END)::information_schema.character_data AS data_type,
      (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,
      (NULL::integer)::information_schema.cardinal_number AS character_octet_length,
      (NULL::name)::information_schema.sql_identifier AS character_set_catalog,
      (NULL::name)::information_schema.sql_identifier AS character_set_schema,
      (NULL::name)::information_schema.sql_identifier AS character_set_name,
      (NULL::name)::information_schema.sql_identifier AS collation_catalog,
      (NULL::name)::information_schema.sql_identifier AS collation_schema,
      (NULL::name)::information_schema.sql_identifier AS collation_name,
      (NULL::integer)::information_schema.cardinal_number AS numeric_precision,
      (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,
      (NULL::integer)::information_schema.cardinal_number AS numeric_scale,
      (NULL::integer)::information_schema.cardinal_number AS datetime_precision,
      (NULL::character varying)::information_schema.character_data AS interval_type,
      (NULL::integer)::information_schema.cardinal_number AS interval_precision,
      (
          CASE
              WHEN (nt.nspname IS NOT NULL) THEN current_database()
              ELSE NULL::name
          END)::information_schema.sql_identifier AS type_udt_catalog,
      (nt.nspname)::information_schema.sql_identifier AS type_udt_schema,
      (t.typname)::information_schema.sql_identifier AS type_udt_name,
      (NULL::name)::information_schema.sql_identifier AS scope_catalog,
      (NULL::name)::information_schema.sql_identifier AS scope_schema,
      (NULL::name)::information_schema.sql_identifier AS scope_name,
      (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,
      (
          CASE
              WHEN (p.prokind <> 'p'::"char") THEN 0
              ELSE NULL::integer
          END)::information_schema.sql_identifier AS dtd_identifier,
      (
          CASE
              WHEN (l.lanname = 'sql'::name) THEN 'SQL'::text
              ELSE 'EXTERNAL'::text
          END)::information_schema.character_data AS routine_body,
      (
          CASE
              WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN p.prosrc
              ELSE NULL::text
          END)::information_schema.character_data AS routine_definition,
      (
          CASE
              WHEN (l.lanname = 'c'::name) THEN p.prosrc
              ELSE NULL::text
          END)::information_schema.character_data AS external_name,
      (upper((l.lanname)::text))::information_schema.character_data AS external_language,
      ('GENERAL'::character varying)::information_schema.character_data AS parameter_style,
      (
          CASE
              WHEN (p.provolatile = 'i'::"char") THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_deterministic,
      ('MODIFIES'::character varying)::information_schema.character_data AS sql_data_access,
      (
          CASE
              WHEN (p.prokind <> 'p'::"char") THEN
              CASE
                  WHEN p.proisstrict THEN 'YES'::text
                  ELSE 'NO'::text
              END
              ELSE NULL::text
          END)::information_schema.yes_or_no AS is_null_call,
      (NULL::character varying)::information_schema.character_data AS sql_path,
      ('YES'::character varying)::information_schema.yes_or_no AS schema_level_routine,
      (0)::information_schema.cardinal_number AS max_dynamic_result_sets,
      (NULL::character varying)::information_schema.yes_or_no AS is_user_defined_cast,
      (NULL::character varying)::information_schema.yes_or_no AS is_implicitly_invocable,
      (
          CASE
              WHEN p.prosecdef THEN 'DEFINER'::text
              ELSE 'INVOKER'::text
          END)::information_schema.character_data AS security_type,
      (NULL::name)::information_schema.sql_identifier AS to_sql_specific_catalog,
      (NULL::name)::information_schema.sql_identifier AS to_sql_specific_schema,
      (NULL::name)::information_schema.sql_identifier AS to_sql_specific_name,
      ('NO'::character varying)::information_schema.yes_or_no AS as_locator,
      (NULL::timestamp with time zone)::information_schema.time_stamp AS created,
      (NULL::timestamp with time zone)::information_schema.time_stamp AS last_altered,
      (NULL::character varying)::information_schema.yes_or_no AS new_savepoint_level,
      ('NO'::character varying)::information_schema.yes_or_no AS is_udt_dependent,
      (NULL::character varying)::information_schema.character_data AS result_cast_from_data_type,
      (NULL::character varying)::information_schema.yes_or_no AS result_cast_as_locator,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_char_max_length,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_char_octet_length,
      (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_catalog,
      (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_schema,
      (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_name,
      (NULL::name)::information_schema.sql_identifier AS result_cast_collation_catalog,
      (NULL::name)::information_schema.sql_identifier AS result_cast_collation_schema,
      (NULL::name)::information_schema.sql_identifier AS result_cast_collation_name,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision_radix,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_scale,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_datetime_precision,
      (NULL::character varying)::information_schema.character_data AS result_cast_interval_type,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_interval_precision,
      (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_catalog,
      (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_schema,
      (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_name,
      (NULL::name)::information_schema.sql_identifier AS result_cast_scope_catalog,
      (NULL::name)::information_schema.sql_identifier AS result_cast_scope_schema,
      (NULL::name)::information_schema.sql_identifier AS result_cast_scope_name,
      (NULL::integer)::information_schema.cardinal_number AS result_cast_maximum_cardinality,
      (NULL::name)::information_schema.sql_identifier AS result_cast_dtd_identifier
     FROM (((pg_namespace n
       JOIN pg_proc p ON ((n.oid = p.pronamespace)))
       JOIN pg_language l ON ((p.prolang = l.oid)))
       LEFT JOIN (pg_type t
       JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON (((p.prorettype = t.oid) AND (p.prokind <> 'p'::"char"))))
    WHERE (pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.oid, 'EXECUTE'::text));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.routines</code>
         */
        val ROUTINES: Routines = Routines()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RoutinesRecord> = RoutinesRecord::class.java

    /**
     * The column <code>information_schema.routines.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("specific_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("specific_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("specific_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_catalog</code>.
     */
    val ROUTINE_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_schema</code>.
     */
    val ROUTINE_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_name</code>.
     */
    val ROUTINE_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_type</code>.
     */
    val ROUTINE_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_catalog</code>.
     */
    val MODULE_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("module_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_schema</code>.
     */
    val MODULE_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("module_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_name</code>.
     */
    val MODULE_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("module_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("udt_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("udt_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_name</code>.
     */
    val UDT_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("udt_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.data_type</code>.
     */
    val DATA_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("data_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<RoutinesRecord, Int?> = createField(DSL.name("character_maximum_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<RoutinesRecord, Int?> = createField(DSL.name("character_octet_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("character_set_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("character_set_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("character_set_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("collation_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("collation_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_name</code>.
     */
    val COLLATION_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("collation_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("numeric_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<RoutinesRecord, Int?> = createField(DSL.name("numeric_precision_radix"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<RoutinesRecord, Int?> = createField(DSL.name("numeric_scale"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("datetime_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("interval_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("interval_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_catalog</code>.
     */
    val TYPE_UDT_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("type_udt_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_schema</code>.
     */
    val TYPE_UDT_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("type_udt_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_name</code>.
     */
    val TYPE_UDT_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("type_udt_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("scope_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("scope_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_name</code>.
     */
    val SCOPE_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("scope_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<RoutinesRecord, Int?> = createField(DSL.name("maximum_cardinality"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<RoutinesRecord, String?> = createField(DSL.name("dtd_identifier"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_body</code>.
     */
    val ROUTINE_BODY: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_body"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_definition</code>.
     */
    val ROUTINE_DEFINITION: TableField<RoutinesRecord, String?> = createField(DSL.name("routine_definition"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.external_name</code>.
     */
    val EXTERNAL_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("external_name"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.external_language</code>.
     */
    val EXTERNAL_LANGUAGE: TableField<RoutinesRecord, String?> = createField(DSL.name("external_language"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.parameter_style</code>.
     */
    val PARAMETER_STYLE: TableField<RoutinesRecord, String?> = createField(DSL.name("parameter_style"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_deterministic</code>.
     */
    val IS_DETERMINISTIC: TableField<RoutinesRecord, String?> = createField(DSL.name("is_deterministic"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.sql_data_access</code>.
     */
    val SQL_DATA_ACCESS: TableField<RoutinesRecord, String?> = createField(DSL.name("sql_data_access"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_null_call</code>.
     */
    val IS_NULL_CALL: TableField<RoutinesRecord, String?> = createField(DSL.name("is_null_call"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.sql_path</code>.
     */
    val SQL_PATH: TableField<RoutinesRecord, String?> = createField(DSL.name("sql_path"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.schema_level_routine</code>.
     */
    val SCHEMA_LEVEL_ROUTINE: TableField<RoutinesRecord, String?> = createField(DSL.name("schema_level_routine"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.max_dynamic_result_sets</code>.
     */
    val MAX_DYNAMIC_RESULT_SETS: TableField<RoutinesRecord, Int?> = createField(DSL.name("max_dynamic_result_sets"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_user_defined_cast</code>.
     */
    val IS_USER_DEFINED_CAST: TableField<RoutinesRecord, String?> = createField(DSL.name("is_user_defined_cast"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.is_implicitly_invocable</code>.
     */
    val IS_IMPLICITLY_INVOCABLE: TableField<RoutinesRecord, String?> = createField(DSL.name("is_implicitly_invocable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.security_type</code>.
     */
    val SECURITY_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("security_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.to_sql_specific_catalog</code>.
     */
    val TO_SQL_SPECIFIC_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("to_sql_specific_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.to_sql_specific_schema</code>.
     */
    val TO_SQL_SPECIFIC_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("to_sql_specific_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.to_sql_specific_name</code>.
     */
    val TO_SQL_SPECIFIC_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("to_sql_specific_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.as_locator</code>.
     */
    val AS_LOCATOR: TableField<RoutinesRecord, String?> = createField(DSL.name("as_locator"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.created</code>.
     */
    val CREATED: TableField<RoutinesRecord, OffsetDateTime?> = createField(DSL.name("created"), TIME_STAMP.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.last_altered</code>.
     */
    val LAST_ALTERED: TableField<RoutinesRecord, OffsetDateTime?> = createField(DSL.name("last_altered"), TIME_STAMP.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.new_savepoint_level</code>.
     */
    val NEW_SAVEPOINT_LEVEL: TableField<RoutinesRecord, String?> = createField(DSL.name("new_savepoint_level"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_udt_dependent</code>.
     */
    val IS_UDT_DEPENDENT: TableField<RoutinesRecord, String?> = createField(DSL.name("is_udt_dependent"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_from_data_type</code>.
     */
    val RESULT_CAST_FROM_DATA_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_from_data_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_as_locator</code>.
     */
    val RESULT_CAST_AS_LOCATOR: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_as_locator"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_max_length</code>.
     */
    val RESULT_CAST_CHAR_MAX_LENGTH: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_char_max_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_octet_length</code>.
     */
    val RESULT_CAST_CHAR_OCTET_LENGTH: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_char_octet_length"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_catalog</code>.
     */
    val RESULT_CAST_CHAR_SET_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_char_set_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_schema</code>.
     */
    val RESULT_CAST_CHAR_SET_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_char_set_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_name</code>.
     */
    val RESULT_CAST_CHAR_SET_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_char_set_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_catalog</code>.
     */
    val RESULT_CAST_COLLATION_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_collation_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_schema</code>.
     */
    val RESULT_CAST_COLLATION_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_collation_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_name</code>.
     */
    val RESULT_CAST_COLLATION_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_collation_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_precision</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_numeric_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_precision_radix</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION_RADIX: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_numeric_precision_radix"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_scale</code>.
     */
    val RESULT_CAST_NUMERIC_SCALE: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_numeric_scale"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_datetime_precision</code>.
     */
    val RESULT_CAST_DATETIME_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_datetime_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_interval_type</code>.
     */
    val RESULT_CAST_INTERVAL_TYPE: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_interval_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_interval_precision</code>.
     */
    val RESULT_CAST_INTERVAL_PRECISION: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_interval_precision"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_catalog</code>.
     */
    val RESULT_CAST_TYPE_UDT_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_type_udt_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_schema</code>.
     */
    val RESULT_CAST_TYPE_UDT_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_type_udt_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_name</code>.
     */
    val RESULT_CAST_TYPE_UDT_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_type_udt_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_catalog</code>.
     */
    val RESULT_CAST_SCOPE_CATALOG: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_scope_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_schema</code>.
     */
    val RESULT_CAST_SCOPE_SCHEMA: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_scope_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_name</code>.
     */
    val RESULT_CAST_SCOPE_NAME: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_scope_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_maximum_cardinality</code>.
     */
    val RESULT_CAST_MAXIMUM_CARDINALITY: TableField<RoutinesRecord, Int?> = createField(DSL.name("result_cast_maximum_cardinality"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_dtd_identifier</code>.
     */
    val RESULT_CAST_DTD_IDENTIFIER: TableField<RoutinesRecord, String?> = createField(DSL.name("result_cast_dtd_identifier"), SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<RoutinesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RoutinesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RoutinesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.routines</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.routines</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.routines</code> table reference
     */
    constructor(): this(DSL.name("routines"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Routines = Routines(DSL.name(alias), this)
    override fun `as`(alias: Name): Routines = Routines(alias, this)
    override fun `as`(alias: Table<*>): Routines = Routines(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Routines = Routines(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Routines = Routines(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Routines = Routines(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Routines = Routines(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Routines = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Routines = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Routines = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Routines = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Routines = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Routines = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Routines = where(DSL.notExists(select))
}
