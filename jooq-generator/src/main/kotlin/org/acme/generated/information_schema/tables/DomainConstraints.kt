/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.DomainConstraintsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DomainConstraints(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DomainConstraintsRecord>?,
    parentPath: InverseForeignKey<out Record, DomainConstraintsRecord>?,
    aliased: Table<DomainConstraintsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DomainConstraintsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "domain_constraints" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,
      (rs.nspname)::information_schema.sql_identifier AS constraint_schema,
      (con.conname)::information_schema.sql_identifier AS constraint_name,
      (current_database())::information_schema.sql_identifier AS domain_catalog,
      (n.nspname)::information_schema.sql_identifier AS domain_schema,
      (t.typname)::information_schema.sql_identifier AS domain_name,
      (
          CASE
              WHEN con.condeferrable THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_deferrable,
      (
          CASE
              WHEN con.condeferred THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS initially_deferred
     FROM pg_namespace rs,
      pg_namespace n,
      pg_constraint con,
      pg_type t
    WHERE ((rs.oid = con.connamespace) AND (n.oid = t.typnamespace) AND (t.oid = con.contypid) AND (pg_has_role(t.typowner, 'USAGE'::text) OR has_type_privilege(t.oid, 'USAGE'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.domain_constraints</code>
         */
        val DOMAIN_CONSTRAINTS: DomainConstraints = DomainConstraints()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DomainConstraintsRecord> = DomainConstraintsRecord::class.java

    /**
     * The column
     * <code>information_schema.domain_constraints.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("constraint_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("constraint_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("constraint_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.domain_catalog</code>.
     */
    val DOMAIN_CATALOG: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("domain_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.domain_schema</code>.
     */
    val DOMAIN_SCHEMA: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("domain_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.domain_name</code>.
     */
    val DOMAIN_NAME: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("domain_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.is_deferrable</code>.
     */
    val IS_DEFERRABLE: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("is_deferrable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.domain_constraints.initially_deferred</code>.
     */
    val INITIALLY_DEFERRED: TableField<DomainConstraintsRecord, String?> = createField(DSL.name("initially_deferred"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<DomainConstraintsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DomainConstraintsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DomainConstraintsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.domain_constraints</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.domain_constraints</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.domain_constraints</code> table
     * reference
     */
    constructor(): this(DSL.name("domain_constraints"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): DomainConstraints = DomainConstraints(DSL.name(alias), this)
    override fun `as`(alias: Name): DomainConstraints = DomainConstraints(alias, this)
    override fun `as`(alias: Table<*>): DomainConstraints = DomainConstraints(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DomainConstraints = DomainConstraints(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DomainConstraints = DomainConstraints(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DomainConstraints = DomainConstraints(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DomainConstraints = DomainConstraints(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DomainConstraints = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DomainConstraints = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DomainConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DomainConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DomainConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DomainConstraints = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DomainConstraints = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DomainConstraints = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DomainConstraints = where(DSL.notExists(select))
}
