/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.domains


import java.time.OffsetDateTime

import org.acme.generated.information_schema.InformationSchema
import org.jooq.Domain
import org.jooq.Record
import org.jooq.Schema
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.LazySchema
import org.jooq.impl.LazySupplier
import org.jooq.impl.SQLDataType



/**
 * The domain <code>information_schema.cardinal_number</code>.
 */
val CARDINAL_NUMBER: Domain<Int> = Internal.createDomain(
      schema()
    , DSL.name("cardinal_number")
    , SQLDataType.INTEGER
    , Internal.createCheck<Record>(null, null, "CHECK ((VALUE >= 0))")
)

/**
 * The domain <code>information_schema.character_data</code>.
 */
val CHARACTER_DATA: Domain<String> = Internal.createDomain(
      schema()
    , DSL.name("character_data")
    , SQLDataType.VARCHAR
)

/**
 * The domain <code>information_schema.sql_identifier</code>.
 */
val SQL_IDENTIFIER: Domain<String> = Internal.createDomain(
      schema()
    , DSL.name("sql_identifier")
    , SQLDataType.VARCHAR
)

/**
 * The domain <code>information_schema.time_stamp</code>.
 */
val TIME_STAMP: Domain<OffsetDateTime> = Internal.createDomain(
      schema()
    , DSL.name("time_stamp")
    , SQLDataType.TIMESTAMPWITHTIMEZONE(2).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP(2)"), SQLDataType.TIMESTAMPWITHTIMEZONE))
)

/**
 * The domain <code>information_schema.yes_or_no</code>.
 */
val YES_OR_NO: Domain<String> = Internal.createDomain(
      schema()
    , DSL.name("yes_or_no")
    , SQLDataType.VARCHAR(3)
    , Internal.createCheck<Record>(null, null, "CHECK (((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])))")
)

private fun schema(): Schema = LazySchema(DSL.name("information_schema"), DSL.comment(""), LazySupplier { InformationSchema.INFORMATION_SCHEMA })
