/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CARDINAL_NUMBER
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.TIME_STAMP
import org.acme.generated.information_schema.tables.records.TriggersRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Triggers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TriggersRecord>?,
    parentPath: InverseForeignKey<out Record, TriggersRecord>?,
    aliased: Table<TriggersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TriggersRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "triggers" as  SELECT (current_database())::information_schema.sql_identifier AS trigger_catalog,
      (n.nspname)::information_schema.sql_identifier AS trigger_schema,
      (t.tgname)::information_schema.sql_identifier AS trigger_name,
      (em.text)::information_schema.character_data AS event_manipulation,
      (current_database())::information_schema.sql_identifier AS event_object_catalog,
      (n.nspname)::information_schema.sql_identifier AS event_object_schema,
      (c.relname)::information_schema.sql_identifier AS event_object_table,
      (rank() OVER (PARTITION BY (n.nspname)::information_schema.sql_identifier, (c.relname)::information_schema.sql_identifier, em.num, ((t.tgtype)::integer & 1), ((t.tgtype)::integer & 66) ORDER BY t.tgname))::information_schema.cardinal_number AS action_order,
      (
          CASE
              WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(t.oid), '.{35,} WHEN \\((.+)\\) EXECUTE FUNCTION'::text))[1]
              ELSE NULL::text
          END)::information_schema.character_data AS action_condition,
      (SUBSTRING(pg_get_triggerdef(t.oid) FROM (POSITION(('EXECUTE FUNCTION'::text) IN (SUBSTRING(pg_get_triggerdef(t.oid) FROM 48))) + 47)))::information_schema.character_data AS action_statement,
      (
          CASE ((t.tgtype)::integer & 1)
              WHEN 1 THEN 'ROW'::text
              ELSE 'STATEMENT'::text
          END)::information_schema.character_data AS action_orientation,
      (
          CASE ((t.tgtype)::integer & 66)
              WHEN 2 THEN 'BEFORE'::text
              WHEN 64 THEN 'INSTEAD OF'::text
              ELSE 'AFTER'::text
          END)::information_schema.character_data AS action_timing,
      (t.tgoldtable)::information_schema.sql_identifier AS action_reference_old_table,
      (t.tgnewtable)::information_schema.sql_identifier AS action_reference_new_table,
      (NULL::name)::information_schema.sql_identifier AS action_reference_old_row,
      (NULL::name)::information_schema.sql_identifier AS action_reference_new_row,
      (NULL::timestamp with time zone)::information_schema.time_stamp AS created
     FROM pg_namespace n,
      pg_class c,
      pg_trigger t,
      ( VALUES (4,'INSERT'::text), (8,'DELETE'::text), (16,'UPDATE'::text)) em(num, text)
    WHERE ((n.oid = c.relnamespace) AND (c.oid = t.tgrelid) AND (((t.tgtype)::integer & em.num) <> 0) AND (NOT t.tgisinternal) AND (NOT pg_is_other_temp_schema(n.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'INSERT, UPDATE, REFERENCES'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.triggers</code>
         */
        val TRIGGERS: Triggers = Triggers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TriggersRecord> = TriggersRecord::class.java

    /**
     * The column <code>information_schema.triggers.trigger_catalog</code>.
     */
    val TRIGGER_CATALOG: TableField<TriggersRecord, String?> = createField(DSL.name("trigger_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.trigger_schema</code>.
     */
    val TRIGGER_SCHEMA: TableField<TriggersRecord, String?> = createField(DSL.name("trigger_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.trigger_name</code>.
     */
    val TRIGGER_NAME: TableField<TriggersRecord, String?> = createField(DSL.name("trigger_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_manipulation</code>.
     */
    val EVENT_MANIPULATION: TableField<TriggersRecord, String?> = createField(DSL.name("event_manipulation"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_catalog</code>.
     */
    val EVENT_OBJECT_CATALOG: TableField<TriggersRecord, String?> = createField(DSL.name("event_object_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_schema</code>.
     */
    val EVENT_OBJECT_SCHEMA: TableField<TriggersRecord, String?> = createField(DSL.name("event_object_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_table</code>.
     */
    val EVENT_OBJECT_TABLE: TableField<TriggersRecord, String?> = createField(DSL.name("event_object_table"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_order</code>.
     */
    val ACTION_ORDER: TableField<TriggersRecord, Int?> = createField(DSL.name("action_order"), CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_condition</code>.
     */
    val ACTION_CONDITION: TableField<TriggersRecord, String?> = createField(DSL.name("action_condition"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_statement</code>.
     */
    val ACTION_STATEMENT: TableField<TriggersRecord, String?> = createField(DSL.name("action_statement"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_orientation</code>.
     */
    val ACTION_ORIENTATION: TableField<TriggersRecord, String?> = createField(DSL.name("action_orientation"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_timing</code>.
     */
    val ACTION_TIMING: TableField<TriggersRecord, String?> = createField(DSL.name("action_timing"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_table</code>.
     */
    val ACTION_REFERENCE_OLD_TABLE: TableField<TriggersRecord, String?> = createField(DSL.name("action_reference_old_table"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_table</code>.
     */
    val ACTION_REFERENCE_NEW_TABLE: TableField<TriggersRecord, String?> = createField(DSL.name("action_reference_new_table"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_row</code>.
     */
    val ACTION_REFERENCE_OLD_ROW: TableField<TriggersRecord, String?> = createField(DSL.name("action_reference_old_row"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_row</code>.
     */
    val ACTION_REFERENCE_NEW_ROW: TableField<TriggersRecord, String?> = createField(DSL.name("action_reference_new_row"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.created</code>.
     */
    val CREATED: TableField<TriggersRecord, OffsetDateTime?> = createField(DSL.name("created"), TIME_STAMP.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<TriggersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TriggersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TriggersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.triggers</code> table reference
     */
    constructor(): this(DSL.name("triggers"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Triggers = Triggers(DSL.name(alias), this)
    override fun `as`(alias: Name): Triggers = Triggers(alias, this)
    override fun `as`(alias: Table<*>): Triggers = Triggers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Triggers = Triggers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Triggers = Triggers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Triggers = Triggers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Triggers = Triggers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Triggers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Triggers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Triggers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Triggers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Triggers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Triggers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Triggers = where(DSL.notExists(select))
}
