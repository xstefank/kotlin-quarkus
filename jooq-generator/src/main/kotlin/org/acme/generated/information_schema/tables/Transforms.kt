/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.tables.records.TransformsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Transforms(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TransformsRecord>?,
    parentPath: InverseForeignKey<out Record, TransformsRecord>?,
    aliased: Table<TransformsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TransformsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
     create view "transforms" as  SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,
        (nt.nspname)::information_schema.sql_identifier AS udt_schema,
        (t.typname)::information_schema.sql_identifier AS udt_name,
        (current_database())::information_schema.sql_identifier AS specific_catalog,
        (np.nspname)::information_schema.sql_identifier AS specific_schema,
        (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,
        (l.lanname)::information_schema.sql_identifier AS group_name,
        ('FROM SQL'::character varying)::information_schema.character_data AS transform_type
       FROM (((((pg_type t
         JOIN pg_transform x ON ((t.oid = x.trftype)))
         JOIN pg_language l ON ((x.trflang = l.oid)))
         JOIN pg_proc p ON (((x.trffromsql)::oid = p.oid)))
         JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))
         JOIN pg_namespace np ON ((p.pronamespace = np.oid)))
    UNION
     SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,
        (nt.nspname)::information_schema.sql_identifier AS udt_schema,
        (t.typname)::information_schema.sql_identifier AS udt_name,
        (current_database())::information_schema.sql_identifier AS specific_catalog,
        (np.nspname)::information_schema.sql_identifier AS specific_schema,
        (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,
        (l.lanname)::information_schema.sql_identifier AS group_name,
        ('TO SQL'::character varying)::information_schema.character_data AS transform_type
       FROM (((((pg_type t
         JOIN pg_transform x ON ((t.oid = x.trftype)))
         JOIN pg_language l ON ((x.trflang = l.oid)))
         JOIN pg_proc p ON (((x.trftosql)::oid = p.oid)))
         JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))
         JOIN pg_namespace np ON ((p.pronamespace = np.oid)))
      ORDER BY 1, 2, 3, 7, 8;
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.transforms</code>
         */
        val TRANSFORMS: Transforms = Transforms()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TransformsRecord> = TransformsRecord::class.java

    /**
     * The column <code>information_schema.transforms.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<TransformsRecord, String?> = createField(DSL.name("udt_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<TransformsRecord, String?> = createField(DSL.name("udt_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.udt_name</code>.
     */
    val UDT_NAME: TableField<TransformsRecord, String?> = createField(DSL.name("udt_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<TransformsRecord, String?> = createField(DSL.name("specific_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<TransformsRecord, String?> = createField(DSL.name("specific_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<TransformsRecord, String?> = createField(DSL.name("specific_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.group_name</code>.
     */
    val GROUP_NAME: TableField<TransformsRecord, String?> = createField(DSL.name("group_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.transforms.transform_type</code>.
     */
    val TRANSFORM_TYPE: TableField<TransformsRecord, String?> = createField(DSL.name("transform_type"), CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<TransformsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TransformsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TransformsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.transforms</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.transforms</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.transforms</code> table reference
     */
    constructor(): this(DSL.name("transforms"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Transforms = Transforms(DSL.name(alias), this)
    override fun `as`(alias: Name): Transforms = Transforms(alias, this)
    override fun `as`(alias: Table<*>): Transforms = Transforms(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Transforms = Transforms(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Transforms = Transforms(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Transforms = Transforms(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Transforms = Transforms(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Transforms = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Transforms = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Transforms = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Transforms = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Transforms = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Transforms = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Transforms = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Transforms = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Transforms = where(DSL.notExists(select))
}
