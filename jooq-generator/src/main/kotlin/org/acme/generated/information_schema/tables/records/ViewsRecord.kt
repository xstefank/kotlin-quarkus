/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables.records


import org.acme.generated.information_schema.tables.Views
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ViewsRecord() : TableRecordImpl<ViewsRecord>(Views.VIEWS) {

    open var tableCatalog: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var tableSchema: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tableName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var viewDefinition: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var checkOption: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsUpdatable")
    open var isUpdatable: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsInsertableInto")
    open var isInsertableInto: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsTriggerUpdatable")
    open var isTriggerUpdatable: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsTriggerDeletable")
    open var isTriggerDeletable: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsTriggerInsertableInto")
    open var isTriggerInsertableInto: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    /**
     * Create a detached, initialised ViewsRecord
     */
    constructor(tableCatalog: String? = null, tableSchema: String? = null, tableName: String? = null, viewDefinition: String? = null, checkOption: String? = null, isUpdatable: String? = null, isInsertableInto: String? = null, isTriggerUpdatable: String? = null, isTriggerDeletable: String? = null, isTriggerInsertableInto: String? = null): this() {
        this.tableCatalog = tableCatalog
        this.tableSchema = tableSchema
        this.tableName = tableName
        this.viewDefinition = viewDefinition
        this.checkOption = checkOption
        this.isUpdatable = isUpdatable
        this.isInsertableInto = isInsertableInto
        this.isTriggerUpdatable = isTriggerUpdatable
        this.isTriggerDeletable = isTriggerDeletable
        this.isTriggerInsertableInto = isTriggerInsertableInto
        resetChangedOnNotNull()
    }
}
