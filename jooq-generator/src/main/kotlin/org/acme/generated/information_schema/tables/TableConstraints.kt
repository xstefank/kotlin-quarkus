/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.TableConstraintsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TableConstraints(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TableConstraintsRecord>?,
    parentPath: InverseForeignKey<out Record, TableConstraintsRecord>?,
    aliased: Table<TableConstraintsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TableConstraintsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
     create view "table_constraints" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,
        (nc.nspname)::information_schema.sql_identifier AS constraint_schema,
        (c.conname)::information_schema.sql_identifier AS constraint_name,
        (current_database())::information_schema.sql_identifier AS table_catalog,
        (nr.nspname)::information_schema.sql_identifier AS table_schema,
        (r.relname)::information_schema.sql_identifier AS table_name,
        (
            CASE c.contype
                WHEN 'c'::"char" THEN 'CHECK'::text
                WHEN 'f'::"char" THEN 'FOREIGN KEY'::text
                WHEN 'p'::"char" THEN 'PRIMARY KEY'::text
                WHEN 'u'::"char" THEN 'UNIQUE'::text
                ELSE NULL::text
            END)::information_schema.character_data AS constraint_type,
        (
            CASE
                WHEN c.condeferrable THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS is_deferrable,
        (
            CASE
                WHEN c.condeferred THEN 'YES'::text
                ELSE 'NO'::text
            END)::information_schema.yes_or_no AS initially_deferred,
        ('YES'::character varying)::information_schema.yes_or_no AS enforced
       FROM pg_namespace nc,
        pg_namespace nr,
        pg_constraint c,
        pg_class r
      WHERE ((nc.oid = c.connamespace) AND (nr.oid = r.relnamespace) AND (c.conrelid = r.oid) AND (c.contype <> ALL (ARRAY['t'::"char", 'x'::"char"])) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)))
    UNION ALL
     SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,
        (nr.nspname)::information_schema.sql_identifier AS constraint_schema,
        (((((((nr.oid)::text || '_'::text) || (r.oid)::text) || '_'::text) || (a.attnum)::text) || '_not_null'::text))::information_schema.sql_identifier AS constraint_name,
        (current_database())::information_schema.sql_identifier AS table_catalog,
        (nr.nspname)::information_schema.sql_identifier AS table_schema,
        (r.relname)::information_schema.sql_identifier AS table_name,
        ('CHECK'::character varying)::information_schema.character_data AS constraint_type,
        ('NO'::character varying)::information_schema.yes_or_no AS is_deferrable,
        ('NO'::character varying)::information_schema.yes_or_no AS initially_deferred,
        ('YES'::character varying)::information_schema.yes_or_no AS enforced
       FROM pg_namespace nr,
        pg_class r,
        pg_attribute a
      WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND a.attnotnull AND (a.attnum > 0) AND (NOT a.attisdropped) AND (r.relkind = ANY (ARRAY['r'::"char", 'p'::"char"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.table_constraints</code>
         */
        val TABLE_CONSTRAINTS: TableConstraints = TableConstraints()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TableConstraintsRecord> = TableConstraintsRecord::class.java

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<TableConstraintsRecord, String?> = createField(DSL.name("constraint_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<TableConstraintsRecord, String?> = createField(DSL.name("constraint_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<TableConstraintsRecord, String?> = createField(DSL.name("constraint_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<TableConstraintsRecord, String?> = createField(DSL.name("table_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<TableConstraintsRecord, String?> = createField(DSL.name("table_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.table_constraints.table_name</code>.
     */
    val TABLE_NAME: TableField<TableConstraintsRecord, String?> = createField(DSL.name("table_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_type</code>.
     */
    val CONSTRAINT_TYPE: TableField<TableConstraintsRecord, String?> = createField(DSL.name("constraint_type"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.is_deferrable</code>.
     */
    val IS_DEFERRABLE: TableField<TableConstraintsRecord, String?> = createField(DSL.name("is_deferrable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.initially_deferred</code>.
     */
    val INITIALLY_DEFERRED: TableField<TableConstraintsRecord, String?> = createField(DSL.name("initially_deferred"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.table_constraints.enforced</code>.
     */
    val ENFORCED: TableField<TableConstraintsRecord, String?> = createField(DSL.name("enforced"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<TableConstraintsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TableConstraintsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TableConstraintsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(): this(DSL.name("table_constraints"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): TableConstraints = TableConstraints(DSL.name(alias), this)
    override fun `as`(alias: Name): TableConstraints = TableConstraints(alias, this)
    override fun `as`(alias: Table<*>): TableConstraints = TableConstraints(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TableConstraints = TableConstraints(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TableConstraints = TableConstraints(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TableConstraints = TableConstraints(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TableConstraints = TableConstraints(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TableConstraints = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TableConstraints = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TableConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TableConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TableConstraints = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TableConstraints = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TableConstraints = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TableConstraints = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TableConstraints = where(DSL.notExists(select))
}
