/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.information_schema.tables


import kotlin.collections.Collection

import org.acme.generated.information_schema.InformationSchema
import org.acme.generated.information_schema.domains.CHARACTER_DATA
import org.acme.generated.information_schema.domains.SQL_IDENTIFIER
import org.acme.generated.information_schema.domains.YES_OR_NO
import org.acme.generated.information_schema.tables.records.ViewsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Views(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ViewsRecord>?,
    parentPath: InverseForeignKey<out Record, ViewsRecord>?,
    aliased: Table<ViewsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ViewsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "views" as  SELECT (current_database())::information_schema.sql_identifier AS table_catalog,
      (nc.nspname)::information_schema.sql_identifier AS table_schema,
      (c.relname)::information_schema.sql_identifier AS table_name,
      (
          CASE
              WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN pg_get_viewdef(c.oid)
              ELSE NULL::text
          END)::information_schema.character_data AS view_definition,
      (
          CASE
              WHEN ('check_option=cascaded'::text = ANY (c.reloptions)) THEN 'CASCADED'::text
              WHEN ('check_option=local'::text = ANY (c.reloptions)) THEN 'LOCAL'::text
              ELSE 'NONE'::text
          END)::information_schema.character_data AS check_option,
      (
          CASE
              WHEN ((pg_relation_is_updatable((c.oid)::regclass, false) & 20) = 20) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_updatable,
      (
          CASE
              WHEN ((pg_relation_is_updatable((c.oid)::regclass, false) & 8) = 8) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_insertable_into,
      (
          CASE
              WHEN (EXISTS ( SELECT 1
                 FROM pg_trigger
                WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer & 81) = 81)))) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_trigger_updatable,
      (
          CASE
              WHEN (EXISTS ( SELECT 1
                 FROM pg_trigger
                WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer & 73) = 73)))) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_trigger_deletable,
      (
          CASE
              WHEN (EXISTS ( SELECT 1
                 FROM pg_trigger
                WHERE ((pg_trigger.tgrelid = c.oid) AND (((pg_trigger.tgtype)::integer & 69) = 69)))) THEN 'YES'::text
              ELSE 'NO'::text
          END)::information_schema.yes_or_no AS is_trigger_insertable_into
     FROM pg_namespace nc,
      pg_class c
    WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'v'::"char") AND (NOT pg_is_other_temp_schema(nc.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.views</code>
         */
        val VIEWS: Views = Views()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ViewsRecord> = ViewsRecord::class.java

    /**
     * The column <code>information_schema.views.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<ViewsRecord, String?> = createField(DSL.name("table_catalog"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<ViewsRecord, String?> = createField(DSL.name("table_schema"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.table_name</code>.
     */
    val TABLE_NAME: TableField<ViewsRecord, String?> = createField(DSL.name("table_name"), SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.view_definition</code>.
     */
    val VIEW_DEFINITION: TableField<ViewsRecord, String?> = createField(DSL.name("view_definition"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.check_option</code>.
     */
    val CHECK_OPTION: TableField<ViewsRecord, String?> = createField(DSL.name("check_option"), CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.is_updatable</code>.
     */
    val IS_UPDATABLE: TableField<ViewsRecord, String?> = createField(DSL.name("is_updatable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.is_insertable_into</code>.
     */
    val IS_INSERTABLE_INTO: TableField<ViewsRecord, String?> = createField(DSL.name("is_insertable_into"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.is_trigger_updatable</code>.
     */
    val IS_TRIGGER_UPDATABLE: TableField<ViewsRecord, String?> = createField(DSL.name("is_trigger_updatable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.views.is_trigger_deletable</code>.
     */
    val IS_TRIGGER_DELETABLE: TableField<ViewsRecord, String?> = createField(DSL.name("is_trigger_deletable"), YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.views.is_trigger_insertable_into</code>.
     */
    val IS_TRIGGER_INSERTABLE_INTO: TableField<ViewsRecord, String?> = createField(DSL.name("is_trigger_insertable_into"), YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<ViewsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ViewsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ViewsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>information_schema.views</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.views</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.views</code> table reference
     */
    constructor(): this(DSL.name("views"), null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Views = Views(DSL.name(alias), this)
    override fun `as`(alias: Name): Views = Views(alias, this)
    override fun `as`(alias: Table<*>): Views = Views(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Views = Views(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Views = Views(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Views = Views(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Views = Views(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Views = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Views = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Views = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Views = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Views = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Views = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Views = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Views = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Views = where(DSL.notExists(select))
}
